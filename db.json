{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/2.jpg","path":"images/2.jpg","modified":1,"renderable":0},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0},{"_id":"source/images/4.jpg","path":"images/4.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"source/images/biaoge2.jpg","path":"images/biaoge2.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge3.jpg","path":"images/biaoge3.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge5.jpg","path":"images/biaoge5.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge9.jpg","path":"images/biaoge9.jpg","modified":1,"renderable":0},{"_id":"source/images/bujv.jpg","path":"images/bujv.jpg","modified":1,"renderable":0},{"_id":"source/images/cname.jpg","path":"images/cname.jpg","modified":1,"renderable":0},{"_id":"source/images/createSucc.jpg","path":"images/createSucc.jpg","modified":1,"renderable":0},{"_id":"source/images/fagnwen.jpg","path":"images/fagnwen.jpg","modified":1,"renderable":0},{"_id":"source/images/getIp.jpg","path":"images/getIp.jpg","modified":1,"renderable":0},{"_id":"source/images/git1.jpg","path":"images/git1.jpg","modified":1,"renderable":0},{"_id":"source/images/git2.jpg","path":"images/git2.jpg","modified":1,"renderable":0},{"_id":"source/images/git3.jpg","path":"images/git3.jpg","modified":1,"renderable":0},{"_id":"source/images/git4.jpg","path":"images/git4.jpg","modified":1,"renderable":0},{"_id":"source/images/gitTestconnsucc.jpg","path":"images/gitTestconnsucc.jpg","modified":1,"renderable":0},{"_id":"source/images/gitaddFile.jpg","path":"images/gitaddFile.jpg","modified":1,"renderable":0},{"_id":"source/images/gitbuildbook.jpg","path":"images/gitbuildbook.jpg","modified":1,"renderable":0},{"_id":"source/images/gitinitfile.jpg","path":"images/gitinitfile.jpg","modified":1,"renderable":0},{"_id":"source/images/gitpushinputpass.jpg","path":"images/gitpushinputpass.jpg","modified":1,"renderable":0},{"_id":"source/images/gitpushinputpasssucc.jpg","path":"images/gitpushinputpasssucc.jpg","modified":1,"renderable":0},{"_id":"source/images/inputInfo.jpg","path":"images/inputInfo.jpg","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio1.png","path":"images/jqueryRadio1.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio2.png","path":"images/jqueryRadio2.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio3.png","path":"images/jqueryRadio3.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio4.png","path":"images/jqueryRadio4.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter0.png","path":"images/linuxInter0.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter1.png","path":"images/linuxInter1.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter2.png","path":"images/linuxInter2.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter3.png","path":"images/linuxInter3.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter4.png","path":"images/linuxInter4.png","modified":1,"renderable":0},{"_id":"source/images/linuxKenel1.png","path":"images/linuxKenel1.png","modified":1,"renderable":0},{"_id":"source/images/markdown.jpg","path":"images/markdown.jpg","modified":1,"renderable":0},{"_id":"source/images/mygitbook.jpg","path":"images/mygitbook.jpg","modified":1,"renderable":0},{"_id":"source/images/mysql1.png","path":"images/mysql1.png","modified":1,"renderable":0},{"_id":"source/images/mysql2.png","path":"images/mysql2.png","modified":1,"renderable":0},{"_id":"source/images/mysql3.png","path":"images/mysql3.png","modified":1,"renderable":0},{"_id":"source/images/mysql8.png","path":"images/mysql8.png","modified":1,"renderable":0},{"_id":"source/images/mysqlCode1.png","path":"images/mysqlCode1.png","modified":1,"renderable":0},{"_id":"source/images/newRepository.jpg","path":"images/newRepository.jpg","modified":1,"renderable":0},{"_id":"source/images/newmaven1.png","path":"images/newmaven1.png","modified":1,"renderable":0},{"_id":"source/images/newmaven2.png","path":"images/newmaven2.png","modified":1,"renderable":0},{"_id":"source/images/newmaven3.png","path":"images/newmaven3.png","modified":1,"renderable":0},{"_id":"source/images/newmavenproject.png","path":"images/newmavenproject.png","modified":1,"renderable":0},{"_id":"source/images/nodejsdownload.jpg","path":"images/nodejsdownload.jpg","modified":1,"renderable":0},{"_id":"source/images/pingIP.jpg","path":"images/pingIP.jpg","modified":1,"renderable":0},{"_id":"source/images/poi1.png","path":"images/poi1.png","modified":1,"renderable":0},{"_id":"source/images/publishSuccess.jpg","path":"images/publishSuccess.jpg","modified":1,"renderable":0},{"_id":"source/images/rocketMQ2.png","path":"images/rocketMQ2.png","modified":1,"renderable":0},{"_id":"source/images/rocketMQ3.png","path":"images/rocketMQ3.png","modified":1,"renderable":0},{"_id":"source/images/selectLayout.jpg","path":"images/selectLayout.jpg","modified":1,"renderable":0},{"_id":"source/images/spring1.jpg","path":"images/spring1.jpg","modified":1,"renderable":0},{"_id":"source/images/spring2.png","path":"images/spring2.png","modified":1,"renderable":0},{"_id":"source/images/spring3.jpg","path":"images/spring3.jpg","modified":1,"renderable":0},{"_id":"source/images/succblog.jpg","path":"images/succblog.jpg","modified":1,"renderable":0},{"_id":"source/images/thy1.png","path":"images/thy1.png","modified":1,"renderable":0},{"_id":"source/images/thy2.png","path":"images/thy2.png","modified":1,"renderable":0},{"_id":"source/images/thy3.png","path":"images/thy3.png","modified":1,"renderable":0},{"_id":"source/images/thy4.png","path":"images/thy4.png","modified":1,"renderable":0},{"_id":"source/images/thy6.png","path":"images/thy6.png","modified":1,"renderable":0},{"_id":"source/images/thy7.png","path":"images/thy7.png","modified":1,"renderable":0},{"_id":"source/images/thyemleafshow.png","path":"images/thyemleafshow.png","modified":1,"renderable":0},{"_id":"source/images/tianjiagitfile.jpg","path":"images/tianjiagitfile.jpg","modified":1,"renderable":0},{"_id":"source/images/useGitPages.jpg","path":"images/useGitPages.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere0.jpg","path":"images/vSphere0.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere00.jpg","path":"images/vSphere00.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere01.jpg","path":"images/vSphere01.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere02.jpg","path":"images/vSphere02.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere03.jpg","path":"images/vSphere03.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere04.jpg","path":"images/vSphere04.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere05.jpg","path":"images/vSphere05.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere06.jpg","path":"images/vSphere06.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere1.jpg","path":"images/vSphere1.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere11.jpg","path":"images/vSphere11.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere2.jpg","path":"images/vSphere2.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere4.jpg","path":"images/vSphere4.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere5.jpg","path":"images/vSphere5.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere7.jpg","path":"images/vSphere7.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere8.jpg","path":"images/vSphere8.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere9.jpg","path":"images/vSphere9.jpg","modified":1,"renderable":0},{"_id":"source/images/wangka.jpg","path":"images/wangka.jpg","modified":1,"renderable":0},{"_id":"source/images/wankapeizhi.jpg","path":"images/wankapeizhi.jpg","modified":1,"renderable":0},{"_id":"source/images/yumingmanage.jpg","path":"images/yumingmanage.jpg","modified":1,"renderable":0},{"_id":"source/images/3.jpg","path":"images/3.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge1.jpg","path":"images/biaoge1.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge6.jpg","path":"images/biaoge6.jpg","modified":1,"renderable":0},{"_id":"source/images/ippeizhi.jpg","path":"images/ippeizhi.jpg","modified":1,"renderable":0},{"_id":"source/images/javaStream2.png","path":"images/javaStream2.png","modified":1,"renderable":0},{"_id":"source/images/jqwidgets.png","path":"images/jqwidgets.png","modified":1,"renderable":0},{"_id":"source/images/kuayu.jpg","path":"images/kuayu.jpg","modified":1,"renderable":0},{"_id":"source/images/mycsdnblog.jpg","path":"images/mycsdnblog.jpg","modified":1,"renderable":0},{"_id":"source/images/mysql10.png","path":"images/mysql10.png","modified":1,"renderable":0},{"_id":"source/images/mysql4.png","path":"images/mysql4.png","modified":1,"renderable":0},{"_id":"source/images/mysql7.png","path":"images/mysql7.png","modified":1,"renderable":0},{"_id":"source/images/mysql6.png","path":"images/mysql6.png","modified":1,"renderable":0},{"_id":"source/images/mysql5.png","path":"images/mysql5.png","modified":1,"renderable":0},{"_id":"source/images/mysql9.png","path":"images/mysql9.png","modified":1,"renderable":0},{"_id":"source/images/mysqlCode2.png","path":"images/mysqlCode2.png","modified":1,"renderable":0},{"_id":"source/images/thymeleafFollow.png","path":"images/thymeleafFollow.png","modified":1,"renderable":0},{"_id":"source/images/vSphere10.jpg","path":"images/vSphere10.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere3.jpg","path":"images/vSphere3.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere6.jpg","path":"images/vSphere6.jpg","modified":1,"renderable":0},{"_id":"source/images/gitinit.jpg","path":"images/gitinit.jpg","modified":1,"renderable":0},{"_id":"source/images/gitmerge1.png","path":"images/gitmerge1.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/images/biaoge4.jpg","path":"images/biaoge4.jpg","modified":1,"renderable":0},{"_id":"source/images/rocketMQ1.png","path":"images/rocketMQ1.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b742f0f7a172db4d51f00b28fcdaabbcb307eab1","modified":1484100384900},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1484100385153},{"_id":"themes/maupassant/LICENSE","hash":"b7ea1dbb2fed3410d78bc7c125e1d80927b56981","modified":1484100385153},{"_id":"themes/maupassant/README.md","hash":"922df2e62346508fb4af6d7d3590f5ae0d543ea3","modified":1484100385154},{"_id":"themes/maupassant/_config.yml","hash":"a1b70d38077f0e75cb9d86e022315219b8103cbe","modified":1484100385154},{"_id":"themes/maupassant/package.json","hash":"04ca87ea475f37841d3610fe5806feb8022416c3","modified":1484100385167},{"_id":"source/about/index.md","hash":"2bb7a87ed29f5ab8926a81e209d18205b0eb023c","modified":1484100384918},{"_id":"source/categories/index.md","hash":"a51446ff4a3e13c2bed1cbd183985140e4df5eab","modified":1484100384918},{"_id":"source/_posts/2016-06-28-添加KEY后，每次push时让输入密码.md","hash":"66209e891ef01922afb564804da460bf7094761f","modified":1484100384901},{"_id":"source/_posts/2016-06-28-为github-pages绑定独立域名.md","hash":"b9f2e0a85ca8741f96b2bbfed33ab998d14527bf","modified":1484100384900},{"_id":"source/_posts/2016-06-28-通过gitBook让网站更实用.md","hash":"1ac317420927559d1afb0adf9e20251169945cbd","modified":1484100384901},{"_id":"source/_posts/2016-06-28-通过github-pages生成网站.md","hash":"0a423428ab77dd30bfaa6ceb743970ea535112bf","modified":1484100384901},{"_id":"source/_posts/2016-06-30-Java-was-started-but-returned-exit-code异常.md","hash":"94709dc4b9b3e7ee13d6d57a3cff30dfa29ff4a3","modified":1484100384902},{"_id":"source/_posts/2016-06-30-界面框架.md","hash":"b3e43c2726bbfda27604f7476eff3bb058d4cf80","modified":1484100384903},{"_id":"source/_posts/2016-06-30-关闭父窗口刷新子窗口.md","hash":"e7d61a58611bf094fe0fde3c4f59f1c394371658","modified":1484100384902},{"_id":"source/_posts/2016-06-30-页面中添加-ENTER-键点击事件.md","hash":"325b4e9759548490b548980b8cc29d1de849c1e6","modified":1484100384903},{"_id":"source/_posts/CentOS-6-4内核升级操作.md","hash":"1f3936f9825ddacec973d45b0fd32c425282055e","modified":1484100384903},{"_id":"source/_posts/Linux双网卡配置-内外网同时访问.md","hash":"2794d760af7574fd8c30abbb9fd57df819af8116","modified":1484100384904},{"_id":"source/_posts/Linux开机启动后经常需要配置网卡.md","hash":"bee86d40f8a7acb40d84559612f0023c0e59e5a8","modified":1484100384904},{"_id":"source/_posts/Linux查看端口占用.md","hash":"a63bfa686ef9d62077a1501f53320268f5278f41","modified":1484879995856},{"_id":"source/_posts/Maven忽略其他依赖jar包插件.md","hash":"af1f7967dfae4fb280ee9cc8aee569bc265dc21f","modified":1484100384905},{"_id":"source/_posts/Linux系统添加配置随开机启动的服务.md","hash":"3795828589c8211b963ede946aa9ffaae320a24d","modified":1484100384905},{"_id":"source/_posts/MySql安装后添加的用户不能远程连接登陆.md","hash":"413dcc2fc55e5e038aa6deaf4b2f1760e57fcd46","modified":1484100384906},{"_id":"source/_posts/Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction.md","hash":"c4ff2fc9305159c36d197bbc34cbf5f7dce1db51","modified":1484100384907},{"_id":"source/_posts/Mybatis动态传入tableName-非预编译-STATEMENT.md","hash":"0b767186dc6ae1c13d3c2174e1ff5599acadf70b","modified":1484100384907},{"_id":"source/_posts/Mysql数据库编码更改.md","hash":"d0976b3937ffa1dff253a8a4d0f6614d71c68ab8","modified":1484100384908},{"_id":"source/_posts/Redis-安装.md","hash":"3b5216ea78d98cf6ea4d2027657c1c45302076c9","modified":1484100384908},{"_id":"source/_posts/RocketMQ启动报错解决.md","hash":"824647cedc4242e49726fb9ca8118eb034a563f6","modified":1484100384908},{"_id":"source/_posts/Tomcat实时查看日志信息.md","hash":"902f603d0aa04b830db06b24f370932d28d278fd","modified":1484100384909},{"_id":"source/_posts/VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置.md","hash":"9f3b4417daabe7948be2550edd089efa6d0ddee9","modified":1484100384909},{"_id":"source/_posts/git搞着玩-新建本地仓库.md","hash":"b85c4ea7b95615c4dfaa0062b301057f9d1109b5","modified":1484100384909},{"_id":"source/_posts/java8中使用stream流和for循环分别对数据集合遍历的差异.md","hash":"c5401a5f378adda30de8149f02b47b1554004106","modified":1484100384910},{"_id":"source/_posts/java使用jxl读取excel数据时特殊符号处理.md","hash":"4687578147721ebc96d3630a7cd10b15c37ab89a","modified":1484100384910},{"_id":"source/_posts/java定时任务Timer小试一下.md","hash":"29be6a45f106681855f1a37de5a7d22d3dd0de7c","modified":1484100384911},{"_id":"source/_posts/java接收oracle中clob类型字段值.md","hash":"42216ffb034ca5ab0e5d763078bf98881dcf9e8c","modified":1484100384911},{"_id":"source/_posts/java通过Stream对list集合分组.md","hash":"5cdf8aca860305b87bce38abcbcf9bca98ea063f","modified":1484100384911},{"_id":"source/_posts/jquery获取单选按钮值的诡异之处.md","hash":"e3a877140c4960d16f3b6a5f809445813b4ef2cd","modified":1484100384912},{"_id":"source/_posts/oracle11G导出数据时空表无法导出.md","hash":"fefd5d5ff47273847e881fa06a2746dfd0451e09","modified":1484100384912},{"_id":"source/_posts/spring3-1-1入门讲解一-非注解篇.md","hash":"0126d92ffa37781363dcc4483afddc4a3c6fbcf4","modified":1484100384913},{"_id":"source/_posts/spring3-1-1入门讲解二-注解篇.md","hash":"3bdd75ca1e08ed82d5d393ecb9c8d49a6d33f90a","modified":1484100384913},{"_id":"source/_posts/springBoot编写不同风格的restAPI接口.md","hash":"0ed6a74b6fb6ac5540d6c37bb9f27d85dca4e147","modified":1484100384913},{"_id":"source/_posts/thymeleaf教程1-环境搭建.md","hash":"99691976c53861887e74b110bd1f1b5c8f605341","modified":1484100384914},{"_id":"source/_posts/thymeleaf教程2-后台数据封装与页面渲染.md","hash":"30e8f3058b30b6d3f37529f1aff3fc89330fa580","modified":1484100384914},{"_id":"source/_posts/thymeleaf教程3-with定义变量使用.md","hash":"c9f7aa521b31e8b74e586c0d7c876d614ee90bd1","modified":1484100384915},{"_id":"source/_posts/基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具.md","hash":"0f0fe957d16337a55f34a72cc0067584a5d65ba7","modified":1484100384915},{"_id":"source/_posts/处理百万级以上的数据提高查询速度的方法-数据库优化篇.md","hash":"cd87dc5edb27df19780613f046d897a4c03e99be","modified":1484100384916},{"_id":"source/_posts/如何查看当前的linux系统是哪个发行商.md","hash":"eae793d4c78418df17448f5d0c4d60d21ee50927","modified":1484100384916},{"_id":"source/_posts/带附件的enctype表单中普通属性的获取.md","hash":"ef42e8f9473929ab80e1885e48b6c2ce2adae07f","modified":1484100384916},{"_id":"source/_posts/整型字面值与进制运算之间的关系.md","hash":"e93b0e23795b736a36186314abd32ca9db498ee8","modified":1484100384917},{"_id":"source/_posts/用POI3-9写一个基于office系列文档的转换系统-设计篇.md","hash":"8b2d5309fe478ddd215a71634932a83776e5729a","modified":1484100384917},{"_id":"source/_posts/通过反向代理解决跨域问题.md","hash":"7547bd0ca795954b8ee3a616a12d9e7f2d5a055e","modified":1484100384917},{"_id":"source/tags/index.md","hash":"405e8c5cd813acb96e7b1c458aa1164c1b60e597","modified":1484100385100},{"_id":"source/images/2.jpg","hash":"44da03ecb56c313ff2db17b1dabee6d4b8a0fcd1","modified":1484100384921},{"_id":"source/images/1.jpg","hash":"1f91210c70d46c33b46fd5ad7ce1aec743387e9f","modified":1484100384919},{"_id":"source/images/4.jpg","hash":"05bab84da801b648eb82c880ad3edec0c257409c","modified":1484100384925},{"_id":"source/images/avatar.png","hash":"ac4c8fb12ba74a39a686148fabc7f78ea780c4da","modified":1484100384926},{"_id":"source/images/biaoge2.jpg","hash":"314aa66ae788e8eca721808f49afc7f16869ac61","modified":1484100384930},{"_id":"source/images/biaoge3.jpg","hash":"0da0958701ed149dabc348a0932272ad4edbee87","modified":1484100384932},{"_id":"source/images/biaoge5.jpg","hash":"5c19c145c472134e756617e81995c105eb243cb1","modified":1484100384937},{"_id":"source/images/biaoge9.jpg","hash":"a8df57e34c492c2b44653a698552161181ee77e3","modified":1484100384941},{"_id":"source/images/bujv.jpg","hash":"c21d1ca64fa9f274ff272da1e0c06fbaa2c347b9","modified":1484100384943},{"_id":"source/images/cname.jpg","hash":"10e07bee84c3fac91d84104854033fc5e7f0dc60","modified":1484100384945},{"_id":"source/images/createSucc.jpg","hash":"6403c8b9b1ca1d5728e99d37140452f453724349","modified":1484100384947},{"_id":"source/images/fagnwen.jpg","hash":"f1cdfc63772946938560314c7c1350809107bc60","modified":1484100384949},{"_id":"source/images/getIp.jpg","hash":"32dd38f5780c75b907e93a0fea3efd4a3d03d39d","modified":1484100384951},{"_id":"source/images/git1.jpg","hash":"bf362114f3ba27a1359700f712527a0e3310a5b4","modified":1484100384953},{"_id":"source/images/git2.jpg","hash":"f80efb756723fa647c398db66972c1b0af4638a2","modified":1484100384955},{"_id":"source/images/git3.jpg","hash":"669605e32d472da2554adeb6ca207dd69ffc1348","modified":1484100384957},{"_id":"source/images/git4.jpg","hash":"68895efb00cae56fcd5e0e847b02604f893bdfce","modified":1484100384959},{"_id":"source/images/gitTestconnsucc.jpg","hash":"598132a5b7689614e8ab565ef2d34ce8a31a81ed","modified":1484100384961},{"_id":"source/images/gitaddFile.jpg","hash":"fa78982614c742575a7c9e50f96545e28ec534b8","modified":1484100384963},{"_id":"source/images/gitbuildbook.jpg","hash":"acdea181bfb2f89abb60c576ce95d15b40e5a105","modified":1484100384964},{"_id":"source/images/gitinitfile.jpg","hash":"3cf7edb4c0a44cc424d9fdeb604908577bdf541a","modified":1484100384969},{"_id":"source/images/gitpushinputpass.jpg","hash":"483d501611082fb8104bf10b6c5673f27fad843d","modified":1484100384972},{"_id":"source/images/gitpushinputpasssucc.jpg","hash":"6a2e37d82076bd1b8caebe170fc1b85354df8f20","modified":1484100384974},{"_id":"source/images/inputInfo.jpg","hash":"142b3f79e6f7da6615b40cde3c8a77e8c5d1c5ce","modified":1484100384976},{"_id":"source/images/jqueryRadio1.png","hash":"46704bed7715e22f4891c1a1eaeee09252459608","modified":1484100384980},{"_id":"source/images/jqueryRadio2.png","hash":"5eda50da10c4d5d2cf2152ce50aa4f7b40d8bbca","modified":1484100384981},{"_id":"source/images/jqueryRadio3.png","hash":"a14ac03611cdd454b33d15011c9cb968dc22fed6","modified":1484100384982},{"_id":"source/images/jqueryRadio4.png","hash":"f094a2e100146f23f02c1c80279ed7ed5ea931fa","modified":1484100384983},{"_id":"source/images/linuxInter0.png","hash":"c67c79508e4b1abb8434af933a93f1b647fd17d9","modified":1484100384986},{"_id":"source/images/linuxInter1.png","hash":"0880a8120fa74fefb0beebfa14c5e740a98e2944","modified":1484100384986},{"_id":"source/images/linuxInter2.png","hash":"932f31fb182b54ab9d534a7d8fc88d7ca5c89dde","modified":1484100384987},{"_id":"source/images/linuxInter3.png","hash":"289533dbd3ce53e781ba4034aa9e366d0cece690","modified":1484100384987},{"_id":"source/images/linuxInter4.png","hash":"52b83adde711d865a1350269b14810523a872ce6","modified":1484100384988},{"_id":"source/images/linuxKenel1.png","hash":"e854f005b8b9175046fc4f3a901cb934af6b1796","modified":1484100384989},{"_id":"source/images/markdown.jpg","hash":"f0c83b56b37d054083b3687465f4afaeeb33c2d2","modified":1484100384989},{"_id":"source/images/mygitbook.jpg","hash":"217a2e4ab7791be3bf15cdaa6f327f0cbcd89c82","modified":1484100384993},{"_id":"source/images/mysql1.png","hash":"27477ffd5318981782aa85a51e767c715b32fd47","modified":1484100384994},{"_id":"source/images/mysql2.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1484100384996},{"_id":"source/images/mysql3.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1484100384997},{"_id":"source/images/mysql8.png","hash":"a2a62d7e36f20d8b7261b4dc4b083eda60d53696","modified":1484100385002},{"_id":"source/images/mysqlCode1.png","hash":"812d6c96b35ad48d91aaa7cee365b70480946bb9","modified":1484100385003},{"_id":"source/images/newRepository.jpg","hash":"db4e148318613b840781b25b5bb2cb512344d3d7","modified":1484100385005},{"_id":"source/images/newmaven1.png","hash":"79d872989bc6e2215c171810ae87db93a12d1bc3","modified":1484100385006},{"_id":"source/images/newmaven2.png","hash":"a43fc7c9309e8960f5a87257e28b1e3190dc4a9e","modified":1484100385008},{"_id":"source/images/newmaven3.png","hash":"d38e3ebe323acdf55039141ca9c73a61e629481b","modified":1484100385008},{"_id":"source/images/newmavenproject.png","hash":"59e100c2fcbf56d98a5f2b1538e0bf073c66771c","modified":1484100385009},{"_id":"source/images/nodejsdownload.jpg","hash":"8cc73c0300f74907ec8489975b4c09e977a40b13","modified":1484100385009},{"_id":"source/images/pingIP.jpg","hash":"e4102d7a30ff1d02e20c4606eee14fb5158ed407","modified":1484100385013},{"_id":"source/images/poi1.png","hash":"9017543b6d8860f5e69a54977eac17e07ad19b78","modified":1484100385013},{"_id":"source/images/publishSuccess.jpg","hash":"4e8e91a979c5b613f7618cdcaa2f635e0538e17a","modified":1484100385014},{"_id":"source/images/rocketMQ2.png","hash":"dfebc65e8f739fde0cb2af456257cc2032c3e3c6","modified":1484100385018},{"_id":"source/images/rocketMQ3.png","hash":"580cdcb92a54694b6744dcfc29f100b2638dcfbb","modified":1484100385018},{"_id":"source/images/selectLayout.jpg","hash":"fd99d2dec31e5ed5531fd5d49b5b34776beea0a1","modified":1484100385020},{"_id":"source/images/spring1.jpg","hash":"346d581fae54ac19b5e88bf139c4d254a1b32aa3","modified":1484100385021},{"_id":"source/images/spring2.png","hash":"5ebeec5d037bfd85fe36e79eb12ab51d277d4302","modified":1484100385022},{"_id":"source/images/spring3.jpg","hash":"2d384f95b6a4df0799db2db67870b8ae5ba23a25","modified":1484100385024},{"_id":"source/images/succblog.jpg","hash":"c924ba65f4bcdd71ea3886cd70514ee48b006c43","modified":1484100385026},{"_id":"source/images/thy1.png","hash":"55f2f5be2cae7360a52eb9a5a2fbe2d2298a4530","modified":1484100385027},{"_id":"source/images/thy2.png","hash":"2b3a1042d70001a64bfbc324b6e087c6bdccd4df","modified":1484100385027},{"_id":"source/images/thy3.png","hash":"085aa49561fad7693829badc440fd596d78a8dbb","modified":1484100385028},{"_id":"source/images/thy4.png","hash":"cd4da596d6179c816efba8d7aa1b882965600e88","modified":1484100385028},{"_id":"source/images/thy6.png","hash":"af8f9114e4eabe2013a9c5109bd3f9cc3b431f64","modified":1484100385029},{"_id":"source/images/thy7.png","hash":"5109c4385eb10a0660d5e8c9af6bfdd35add3617","modified":1484100385047},{"_id":"source/images/thyemleafshow.png","hash":"d0f49ce9408c3cce91437483208f941b412804fd","modified":1484100385048},{"_id":"source/images/tianjiagitfile.jpg","hash":"56d6151f6b1e8d6552d5708ed969628ca822060d","modified":1484100385050},{"_id":"source/images/useGitPages.jpg","hash":"7dfb31e260cc4802f3ce9791c442693fb07c1fe0","modified":1484100385051},{"_id":"source/images/vSphere0.jpg","hash":"9f973edbaace7047d6615c9f91ddbd69d4ec98a0","modified":1484100385053},{"_id":"source/images/vSphere00.jpg","hash":"0835e6ff2f6babb963c87bd0d1f992277bfa2ce7","modified":1484100385055},{"_id":"source/images/vSphere01.jpg","hash":"90a1afdf9ce7f15ac38cc3b92d3ce5c18f5b26ad","modified":1484100385057},{"_id":"source/images/vSphere02.jpg","hash":"137f172fa7c7c2dc16648e7405d015fc7dd33206","modified":1484100385059},{"_id":"source/images/vSphere03.jpg","hash":"9fa77f62ec89afaa8b8ef2bacb784c5a32315ada","modified":1484100385061},{"_id":"source/images/vSphere04.jpg","hash":"cb1109a9f0b4061a318d2e1f367a42a05413b33b","modified":1484100385062},{"_id":"source/images/vSphere05.jpg","hash":"d5fbeda9ec4cb9682af424289dc2c7f84e33d054","modified":1484100385064},{"_id":"source/images/vSphere06.jpg","hash":"708ac251c2afdad8759a83d4f155662271ee8f47","modified":1484100385066},{"_id":"source/images/vSphere1.jpg","hash":"96a4f6ef1a837211a7ad42eed3b4325ed9bb372b","modified":1484100385068},{"_id":"source/images/vSphere11.jpg","hash":"b0873d659259a7e228f078366b4e3222cdd15b93","modified":1484100385072},{"_id":"source/images/vSphere2.jpg","hash":"7bb8fdba14b1e03d21519cc764be06b2c447970f","modified":1484100385074},{"_id":"source/images/vSphere4.jpg","hash":"aeadaa97120f8dc4b36812c6f420c00d417abed6","modified":1484100385078},{"_id":"source/images/vSphere5.jpg","hash":"fb5b42b3f074e1bd8adc98afd10669f064aeb16d","modified":1484100385079},{"_id":"source/images/vSphere7.jpg","hash":"b438a5184735169c2a025464ff5e8cbff9a12cf6","modified":1484100385084},{"_id":"source/images/vSphere8.jpg","hash":"eeadea0b726df446e97676dbc68b819ddbce1005","modified":1484100385087},{"_id":"source/images/vSphere9.jpg","hash":"75e4e4e651cc537fc7e8d99a6ef983bda8e8b3f1","modified":1484100385089},{"_id":"source/images/wangka.jpg","hash":"39a2a3bd7e4bb60cab1b39f0630fddecff0113ba","modified":1484100385092},{"_id":"source/images/wankapeizhi.jpg","hash":"8216b06ae346667837a938e17f0c5f6d034b7dfa","modified":1484100385096},{"_id":"source/images/yumingmanage.jpg","hash":"72b945bb05264898a82c274ac0e2c1be7b9840c8","modified":1484100385099},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1484100385155},{"_id":"themes/maupassant/languages/en.yml","hash":"6c5fc2cec7e44306d97bc7902e9765389d21c363","modified":1484100385155},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1484100385155},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1484100385156},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1484100385156},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"41f7c09365cbd5ba1b8906191ee07bc75094185a","modified":1484100385156},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"46659764e31c7866af436d98d4fabb9da122037a","modified":1484100385157},{"_id":"themes/maupassant/layout/archive.jade","hash":"d70d1ed241b1a431a2434768d02bb2de03070f70","modified":1484100385165},{"_id":"themes/maupassant/layout/base.jade","hash":"3af9622734a458b6259a2530ea0c4d9a2b1095c8","modified":1484100385165},{"_id":"themes/maupassant/layout/index.jade","hash":"3fe1f0c5021ac696ed9846ecb1c75d285fa46708","modified":1484100385165},{"_id":"themes/maupassant/layout/page.jade","hash":"1e98aa785073dc1bbfe70f2863bc19fe287483b9","modified":1484100385166},{"_id":"themes/maupassant/layout/post.jade","hash":"f68f483242409f501bbc8b50ff129edd981087e2","modified":1484100385166},{"_id":"themes/maupassant/layout/timeline.jade","hash":"ee1e8e4e8fdf61c6d19f1f7fe31ab50ab1465a8d","modified":1484100385167},{"_id":"source/images/3.jpg","hash":"ceafae6c44b27e16a104252c47eed3f77a49862f","modified":1484100384923},{"_id":"source/images/biaoge1.jpg","hash":"2c8a80180cdb8e1ad1b6391766c9ffd5262d559d","modified":1484100384927},{"_id":"source/images/biaoge6.jpg","hash":"6585a9060e5e2e78d0a990005ef96b2f427212fc","modified":1484100384939},{"_id":"source/images/ippeizhi.jpg","hash":"63c1cb0f1737b80b6c31b80067ec9f828c9f9549","modified":1484100384978},{"_id":"source/images/javaStream2.png","hash":"1e106ac4e9dba1a969a1224a0946e97c3de3a9d3","modified":1484100384980},{"_id":"source/images/jqwidgets.png","hash":"fbe64a40edf567eef733447ea48d19b8ad2bc8d4","modified":1484100384984},{"_id":"source/images/kuayu.jpg","hash":"cb4e30c0c2b0885cc9e4db2b6c3e697be877c550","modified":1484100384985},{"_id":"source/images/mycsdnblog.jpg","hash":"ad4f73fe7fa0cace00f47e0af59b20a5e3d88e98","modified":1484100384992},{"_id":"source/images/mysql10.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1484100384995},{"_id":"source/images/mysql4.png","hash":"0da5dcf1a60d2a703f0fbe0141aa2d5b902a0c37","modified":1484100384998},{"_id":"source/images/mysql7.png","hash":"df72c1597111b502074fee572e8c674a5ed0e0ef","modified":1484100385001},{"_id":"source/images/mysql6.png","hash":"744ed2148b8f8c2371d1e88bd845cf23068cf216","modified":1484100385000},{"_id":"source/images/mysql5.png","hash":"bcbdf5513c5715a69789dab6cf18890bb6d5125d","modified":1484100384999},{"_id":"source/images/mysql9.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1484100385003},{"_id":"source/images/mysqlCode2.png","hash":"7840767464027409927b06a3ebb0e10ac039afed","modified":1484100385005},{"_id":"source/images/thymeleafFollow.png","hash":"40fd2d4a8830eb959741865128a4c6833cebbac7","modified":1484100385049},{"_id":"source/images/vSphere10.jpg","hash":"2deff4ad654a211f4f121a54ff36ec9af77d4642","modified":1484100385070},{"_id":"source/images/vSphere3.jpg","hash":"f0488e5a1dc4f0cae6172f3de0b209d57a70ef83","modified":1484100385076},{"_id":"source/images/vSphere6.jpg","hash":"fedd20137372dd88c82b5de096deb5b69db92084","modified":1484100385082},{"_id":"source/images/gitinit.jpg","hash":"8c972e2bbef3c8e321ed1853e2667ae1df552f27","modified":1484100384967},{"_id":"source/images/gitmerge1.png","hash":"5a7289c15913fd8ec43e33f00078a2615c4f3afa","modified":1484100384971},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"7e69266c3d1b9d872617046ca0630998200072fd","modified":1484100385158},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"d041586c106ba22a4eee11a99ef772adac57a6bb","modified":1484100385159},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"b3a0b0ce0642f2bfe9df94b075c0c2a083871e1b","modified":1484100385159},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1484100385160},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1484100385160},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1484100385161},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1484100385161},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1484100385161},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1484100385162},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1484100385162},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"80271e02432ab9990c0c07d84aab155f1fb81749","modified":1484100385163},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"2a1dd6a0e2befd073e3347347994d8dcd2047879","modified":1484100385163},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"0b9e78e7f20bc69690e05f2e0c956bded9058a84","modified":1484100385163},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1484100385164},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"c5301ca7f2ec24d790fd7f35f69f8fd8acbdb725","modified":1484100385164},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1484100385164},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"0d142e11e27e9de1a325c32369c42254101ddd34","modified":1484100385168},{"_id":"themes/maupassant/source/css/style.scss","hash":"8b632f036d9674757f68acd1874a09d4ed0808a6","modified":1484100385169},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484100385169},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484100385170},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484100385171},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484100385170},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484100385171},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484100385171},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1484100385172},{"_id":"themes/maupassant/source/js/search.js","hash":"9cf2337fe9af34055782880ac27b93713d74581f","modified":1484100385173},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1484100385172},{"_id":"themes/maupassant/source/js/share.js","hash":"bb6880e2e8e187b576daf326476f09b0907fbe14","modified":1484100385173},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1484100385174},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1484100385175},{"_id":"source/images/biaoge4.jpg","hash":"c1f8d9343290d26a2a065abce3f1743d029f5151","modified":1484100384934},{"_id":"source/images/rocketMQ1.png","hash":"529d5d0556f67b79a928a5e7ff5e0f44f7988698","modified":1484100385017},{"_id":"public/atom.xml","hash":"22abc09d2405825214b1807e957b5464d3178e3a","modified":1484881947135},{"_id":"public/sitemap.xml","hash":"b2c4155d0a2da49d05d86650ff676c8748c18fa8","modified":1484881947203},{"_id":"public/about/index.html","hash":"ed0bde93a9093de57db356f70ac71d624d0f24b0","modified":1484881947225},{"_id":"public/categories/index.html","hash":"b840567067c96017b817cced3023ac312e6ad696","modified":1484881947225},{"_id":"public/tags/index.html","hash":"d1bcd76a9b0e367a57636246dfa759e6f43601f2","modified":1484881947225},{"_id":"public/thymeleaf教程3-with定义变量使用/index.html","hash":"aa05e7edccf83be1951bf5de2c528e5a8d99f62b","modified":1484881947225},{"_id":"public/Maven忽略其他依赖jar包插件/index.html","hash":"bb9935a860a74a4fa8e2d99115ce7ffbe99c3851","modified":1484881947225},{"_id":"public/Mysql数据库编码更改/index.html","hash":"e4d24350bc742ac910cf28813178f03325db0626","modified":1484881947226},{"_id":"public/RocketMQ启动报错解决/index.html","hash":"c164ca481fa34b064b3fd22a0836a22b49be3685","modified":1484881947226},{"_id":"public/用POI3-9写一个基于office系列文档的转换系统-设计篇/index.html","hash":"53e96989c279c7d1dd8a63a0a0f5f578b70de897","modified":1484881947226},{"_id":"public/spring3-1-1入门讲解二-注解篇/index.html","hash":"ed9364e900c5657c13f50bb5f9de08bed678f1fe","modified":1484881947226},{"_id":"public/基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具/index.html","hash":"8f4a47ddb9b8077a72df7f6beb391b60497d0a23","modified":1484881947226},{"_id":"public/springBoot编写不同风格的restAPI接口/index.html","hash":"3e827ba5310221fe380112130d726fc1f2cee9ba","modified":1484881947226},{"_id":"public/jquery获取单选按钮值的诡异之处/index.html","hash":"c9c00be7b2d6fc8febf064173a1212a865589740","modified":1484881947226},{"_id":"public/整型字面值与进制运算之间的关系/index.html","hash":"6ecbf7be51b4a0b040ac226dd7acccdd46012f32","modified":1484881947226},{"_id":"public/Redis-安装/index.html","hash":"7730b6af0d04d075366691fcd95fd364ae393063","modified":1484881947226},{"_id":"public/Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction/index.html","hash":"dcbca78a2caa76ea83c314488637b30ea38b97c5","modified":1484881947226},{"_id":"public/MySql安装后添加的用户不能远程连接登陆/index.html","hash":"3e374dc9d94474eb285d6c6a4afaafd310497233","modified":1484881947226},{"_id":"public/CentOS-6-4内核升级操作/index.html","hash":"e100101ee1419ae1341a33d4489be0a60b3547b7","modified":1484881947226},{"_id":"public/java使用jxl读取excel数据时特殊符号处理/index.html","hash":"e470fbef6268a45f635c577c98428b38cc9df292","modified":1484881947226},{"_id":"public/Linux查看端口占用/index.html","hash":"6d2c69c0aca23e97cbaf17888dd5e0b84af922b3","modified":1484881947226},{"_id":"public/Tomcat实时查看日志信息/index.html","hash":"d54e77c237f2ab4804e28b9cbb79a7ac22ac4458","modified":1484881947226},{"_id":"public/Linux双网卡配置-内外网同时访问/index.html","hash":"a34b8263f54e0338915a097a1174cb261f47ed01","modified":1484881947226},{"_id":"public/VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置/index.html","hash":"603a8a4347176a2db43786dbfea4e2bff7b26d84","modified":1484881947226},{"_id":"public/如何查看当前的linux系统是哪个发行商/index.html","hash":"8eacd953724333ad771b5d636702477d006391a8","modified":1484881947226},{"_id":"public/Linux系统添加配置随开机启动的服务/index.html","hash":"b11656de5a1cfb5070f7a070c47bb9644fbae14b","modified":1484881947226},{"_id":"public/Linux开机启动后经常需要配置网卡/index.html","hash":"173c2315fce8f1a2a05b3e9189d5bfe5c0b23ca7","modified":1484881947226},{"_id":"public/通过反向代理解决跨域问题/index.html","hash":"03a20f234d2d31d44557cb399bb090413222b0d7","modified":1484881947226},{"_id":"public/java接收oracle中clob类型字段值/index.html","hash":"6768e0be0b55c4e4254e93437c556471e753d916","modified":1484881947226},{"_id":"public/oracle11G导出数据时空表无法导出/index.html","hash":"9ee3783a63ceddee66b8d9c6ebf73a7b94910bd7","modified":1484881947226},{"_id":"public/2016-06-30-界面框架/index.html","hash":"867d1cee20f528dbdf6bcb5be411e5308b72a512","modified":1484881947226},{"_id":"public/2016-06-30-页面中添加-ENTER-键点击事件/index.html","hash":"66e9ea422c1848769a602676b8bb7e6dc041a42b","modified":1484881947226},{"_id":"public/2016-06-30-关闭父窗口刷新子窗口/index.html","hash":"d72f59bcec0397030ced8cb5ffda3a7242ab1025","modified":1484881947226},{"_id":"public/2016-06-30-Java-was-started-but-returned-exit-code异常/index.html","hash":"8113bfe050530c86444911eac278b4cba384334b","modified":1484881947226},{"_id":"public/2016-06-28-添加KEY后，每次push时让输入密码/index.html","hash":"6872db96d28c5e4973a0bc9a6f36af51c2331d9d","modified":1484881947226},{"_id":"public/2016-06-28-通过gitBook让网站更实用/index.html","hash":"615ae0c3dc7de8cc8e437246141c8de277f0a01b","modified":1484881947226},{"_id":"public/2016-06-28-为github-pages绑定独立域名/index.html","hash":"4d5c84c23318684b284fff86ba2eadf890aa80f7","modified":1484881947226},{"_id":"public/2016-06-28-通过github-pages生成网站/index.html","hash":"bbf3e5c21d18b83aa2f6c9f85c8f6c4c78c459a4","modified":1484881947226},{"_id":"public/archives/index.html","hash":"dd914dceda1e7f179a9ebe32ca2d636e816a106a","modified":1484881947226},{"_id":"public/archives/page/2/index.html","hash":"ae3dbd27c6908433ce9f2363422dafab4b6c443e","modified":1484881947226},{"_id":"public/archives/page/3/index.html","hash":"1933afcb5489a59189a9430283ac5eb8bfb892e0","modified":1484881947227},{"_id":"public/archives/2016/index.html","hash":"3013fec6b4639d60a0db1edfdb796e3077c26c81","modified":1484881947227},{"_id":"public/archives/2016/page/2/index.html","hash":"4f09bcde4e83fa7758bed79e0f794cc9bd892208","modified":1484881947227},{"_id":"public/archives/2016/page/3/index.html","hash":"102f08974d25ab63fd6597ff98fe36213d5acccf","modified":1484881947227},{"_id":"public/archives/2016/06/index.html","hash":"0e6aba11f5783703f9b26386f9f95209c289d1bd","modified":1484881947227},{"_id":"public/archives/2016/07/index.html","hash":"48dc02bea0902e0f3d1b4df25b63e49319b5a59f","modified":1484881947227},{"_id":"public/archives/2016/08/index.html","hash":"630e7f465dc89f0e0ba74a1dcad42594cdf8760a","modified":1484881947227},{"_id":"public/archives/2016/09/index.html","hash":"c7c24b45b98f3511f8c9380e271cc79bcb1b711f","modified":1484881947227},{"_id":"public/categories/github/index.html","hash":"fb56de67520bc76b266bfde41ccd0e3dbdf59a6f","modified":1484881947227},{"_id":"public/categories/IDE/index.html","hash":"3f0a86d7784756b8c34b303d963ade66a7953ea0","modified":1484881947227},{"_id":"public/categories/UI/index.html","hash":"1ad3df2d756f1c73ff9e20aa2ea9543f43a97fa6","modified":1484881947227},{"_id":"public/categories/Linux/index.html","hash":"7b5685d9f65ee641331b38ce4248d6045ede2065","modified":1484881947227},{"_id":"public/categories/javascript/index.html","hash":"311fa42f958029affabcf3aedcdb819e5038593a","modified":1484881947227},{"_id":"public/categories/Maven/index.html","hash":"f0088f30409cee224628c216ccc40b2061a07110","modified":1484881947227},{"_id":"public/categories/Mysql/index.html","hash":"ac97b093b17859b7a2efd4c08cc7ef1371e1109c","modified":1484881947227},{"_id":"public/categories/Mybatis/index.html","hash":"a05a15ca3847930b42d467be3a4f28982489dbe6","modified":1484881947227},{"_id":"public/categories/Redis/index.html","hash":"d349a3453f5e58fe7dbda8c1ed04ca3e9b664a48","modified":1484881947227},{"_id":"public/categories/RocketMQ/index.html","hash":"f9ffe6ade72706a66603e8a805776da76fccfdf5","modified":1484881947227},{"_id":"public/categories/Tomcat/index.html","hash":"387cc0a0a6f296812d47c4f11f2681782991bd85","modified":1484881947227},{"_id":"public/categories/vSphere/index.html","hash":"57148dfe852c67454d3c4122b8013eb1ce298c9b","modified":1484881947227},{"_id":"public/categories/git/index.html","hash":"ebecbe32152e69cfa15861e6cfe16d03b747d490","modified":1484881947227},{"_id":"public/categories/java/index.html","hash":"144ebcbfb3554a13d272041ae0697378585a96b3","modified":1484881947227},{"_id":"public/categories/oracle/index.html","hash":"35c2eafd21b166292c1e7e02222a36079b33a595","modified":1484881947227},{"_id":"public/categories/spring/index.html","hash":"100a5668fcb80c23b31f2a750eea838130964bdd","modified":1484881947227},{"_id":"public/categories/thymeleaf/index.html","hash":"67f0e1345eaddf9b944951be7feba9e1f650d484","modified":1484881947227},{"_id":"public/categories/Nginx/index.html","hash":"dcef42b269494bad4d3d5863d428e05070068b42","modified":1484881947228},{"_id":"public/page/3/index.html","hash":"9eb1ae53486621fd4ee25aa43c8ffe07b6421b46","modified":1484881947228},{"_id":"public/tags/github/index.html","hash":"fb56de67520bc76b266bfde41ccd0e3dbdf59a6f","modified":1484881947228},{"_id":"public/tags/eclipse/index.html","hash":"7f17761b37d6c56851cf4ade409dc8e6f1d5114b","modified":1484881947228},{"_id":"public/tags/界面框架/index.html","hash":"794c43ebb8e131d3aa508d606d2798dd9bafbaca","modified":1484881947228},{"_id":"public/tags/javascript/index.html","hash":"cd44a1ebcbafe70d6e36be2b5900ff2f1104832c","modified":1484881947228},{"_id":"public/tags/添加enter事件/index.html","hash":"6d60c4bb00d49eb2bdf8797dc98cc0519ed1709a","modified":1484881947228},{"_id":"public/tags/Linux/index.html","hash":"d8fa089b3f0cd3035bda16d0080876cb685dc349","modified":1484881947228},{"_id":"public/tags/网卡/index.html","hash":"8df8cc449bb6b0f4cc13547da8d058cb8d751ea2","modified":1484881947228},{"_id":"public/tags/Maven插件/index.html","hash":"b8b85f38983a109dcc203d6d4651c04d00989b35","modified":1484881947228},{"_id":"public/tags/服务开机启动/index.html","hash":"a1fa6921478fecbc6a6508433876274d19e3908f","modified":1484881947228},{"_id":"public/tags/Mysql/index.html","hash":"ac97b093b17859b7a2efd4c08cc7ef1371e1109c","modified":1484881947228},{"_id":"public/tags/动态传入tableName/index.html","hash":"2da208209f661fd90cef0050a16979e78bce2cfc","modified":1484881947228},{"_id":"public/tags/Redis安装/index.html","hash":"9141861aa48ca1d6385e425b04da4531064160f1","modified":1484881947228},{"_id":"public/tags/RocketMQ启动错误/index.html","hash":"e7a8fd9ddc8371f6ade76fec608c5e44aba5a2f8","modified":1484881947228},{"_id":"public/tags/Tomcat日志/index.html","hash":"4002c2fa8deb02af2204b515766f75455852e1d7","modified":1484881947228},{"_id":"public/tags/vSphere添加物理网卡/index.html","hash":"2cca0aa961709d876a80e9cc80a4ee46e1da9725","modified":1484881947228},{"_id":"public/tags/git/index.html","hash":"eb3c1e887d2cdf809c61cf54e90554a131169e91","modified":1484881947228},{"_id":"public/tags/java8-Stream/index.html","hash":"6f5c672c3d0eddb93376f1699b9340c1c8667364","modified":1484881947228},{"_id":"public/tags/jxl/index.html","hash":"73943dd133bb1118579fd569764a87c784b44b2b","modified":1484881947228},{"_id":"public/tags/java定时任务/index.html","hash":"c2206ab1aa67cbdfab569083fa328dafb94420bb","modified":1484881947228},{"_id":"public/tags/java接收clob字段/index.html","hash":"4bfa636f699e8e01d3a46ee11eef38fa0f230746","modified":1484881947228},{"_id":"public/tags/jquery/index.html","hash":"3530e59c99244a5f7112dc8f05477259bef363ae","modified":1484881947228},{"_id":"public/tags/oracle导出空表/index.html","hash":"ecc6cc01dfe97b9b65b7a65ab36977dabe91a913","modified":1484881947228},{"_id":"public/tags/spring/index.html","hash":"83f2211f9e5999c9601ec1a6c4d7205ccf23b6e5","modified":1484881947229},{"_id":"public/tags/springBoot/index.html","hash":"c42f4a24ec4174f3ebf905798fe9f58b4b30e489","modified":1484881947229},{"_id":"public/tags/thymeleaf/index.html","hash":"67f0e1345eaddf9b944951be7feba9e1f650d484","modified":1484881947229},{"_id":"public/tags/gitlab/index.html","hash":"5710cbd8b39ae3fbbe657555c04b47a4e062250f","modified":1484881947229},{"_id":"public/tags/表单元素获取/index.html","hash":"0b030795739e8b0cc3e6129842d1f264dee43e7f","modified":1484881947229},{"_id":"public/tags/进制运算/index.html","hash":"52ed82dd7b1ce6f2505eeda89ca409283779570d","modified":1484881947229},{"_id":"public/tags/poi/index.html","hash":"34aeaaaab295de85887d61167663510541e0c660","modified":1484881947229},{"_id":"public/tags/跨域/index.html","hash":"67b6fe7cdb3f8264864ddcd3023eec552b02d3f9","modified":1484881947229},{"_id":"public/java定时任务Timer小试一下/index.html","hash":"123b11f384b49b4b62bef2a06c8b84a5ef2ddddb","modified":1484881947229},{"_id":"public/处理百万级以上的数据提高查询速度的方法-数据库优化篇/index.html","hash":"7eadfd25ffcfc3c0197e2d82d4c86220655ecccf","modified":1484881947229},{"_id":"public/spring3-1-1入门讲解一-非注解篇/index.html","hash":"381117802bbc4349bc3d15a6692df09fd902350f","modified":1484881947229},{"_id":"public/带附件的enctype表单中普通属性的获取/index.html","hash":"e910927f3a9eecacdb7093afda351b31b6310729","modified":1484881947229},{"_id":"public/java8中使用stream流和for循环分别对数据集合遍历的差异/index.html","hash":"fddae3efeadc45dc78f2a4f6bb274c4ee6caee85","modified":1484881947229},{"_id":"public/thymeleaf教程2-后台数据封装与页面渲染/index.html","hash":"3c71a60727fba7e311e8c092eb539125321bd468","modified":1484881947229},{"_id":"public/git搞着玩-新建本地仓库/index.html","hash":"e257fb5ae5a5c372196fb2fab06835e9974c2843","modified":1484881947230},{"_id":"public/thymeleaf教程1-环境搭建/index.html","hash":"b8f1a443edb75f612e48c0d47a984af7596ce9c7","modified":1484881947230},{"_id":"public/Mybatis动态传入tableName-非预编译-STATEMENT/index.html","hash":"5d31b17df535a6f1700be0aada8ead34a6d235dd","modified":1484881947230},{"_id":"public/java通过Stream对list集合分组/index.html","hash":"de15c06191d7746abbac1e4b75fe41c3204146be","modified":1484881947230},{"_id":"public/index.html","hash":"56d8377fb882e15fce7e8aa10eb0e6cf51ffa20b","modified":1484881947230},{"_id":"public/page/2/index.html","hash":"5f3e84eb4b0ed2803b3e960efef77bd95aaef3ee","modified":1484881947230},{"_id":"public/CNAME","hash":"b742f0f7a172db4d51f00b28fcdaabbcb307eab1","modified":1484881947330},{"_id":"public/images/2.jpg","hash":"44da03ecb56c313ff2db17b1dabee6d4b8a0fcd1","modified":1484881947330},{"_id":"public/images/1.jpg","hash":"1f91210c70d46c33b46fd5ad7ce1aec743387e9f","modified":1484881947330},{"_id":"public/images/4.jpg","hash":"05bab84da801b648eb82c880ad3edec0c257409c","modified":1484881947331},{"_id":"public/images/avatar.png","hash":"ac4c8fb12ba74a39a686148fabc7f78ea780c4da","modified":1484881947331},{"_id":"public/images/biaoge2.jpg","hash":"314aa66ae788e8eca721808f49afc7f16869ac61","modified":1484881947331},{"_id":"public/images/biaoge3.jpg","hash":"0da0958701ed149dabc348a0932272ad4edbee87","modified":1484881947331},{"_id":"public/images/biaoge5.jpg","hash":"5c19c145c472134e756617e81995c105eb243cb1","modified":1484881947331},{"_id":"public/images/biaoge9.jpg","hash":"a8df57e34c492c2b44653a698552161181ee77e3","modified":1484881947331},{"_id":"public/images/bujv.jpg","hash":"c21d1ca64fa9f274ff272da1e0c06fbaa2c347b9","modified":1484881947331},{"_id":"public/images/cname.jpg","hash":"10e07bee84c3fac91d84104854033fc5e7f0dc60","modified":1484881947331},{"_id":"public/images/createSucc.jpg","hash":"6403c8b9b1ca1d5728e99d37140452f453724349","modified":1484881947331},{"_id":"public/images/fagnwen.jpg","hash":"f1cdfc63772946938560314c7c1350809107bc60","modified":1484881947331},{"_id":"public/images/getIp.jpg","hash":"32dd38f5780c75b907e93a0fea3efd4a3d03d39d","modified":1484881947332},{"_id":"public/images/git1.jpg","hash":"bf362114f3ba27a1359700f712527a0e3310a5b4","modified":1484881947332},{"_id":"public/images/git2.jpg","hash":"f80efb756723fa647c398db66972c1b0af4638a2","modified":1484881947332},{"_id":"public/images/git3.jpg","hash":"669605e32d472da2554adeb6ca207dd69ffc1348","modified":1484881947332},{"_id":"public/images/git4.jpg","hash":"68895efb00cae56fcd5e0e847b02604f893bdfce","modified":1484881947332},{"_id":"public/images/gitTestconnsucc.jpg","hash":"598132a5b7689614e8ab565ef2d34ce8a31a81ed","modified":1484881947332},{"_id":"public/images/gitaddFile.jpg","hash":"fa78982614c742575a7c9e50f96545e28ec534b8","modified":1484881947332},{"_id":"public/images/gitbuildbook.jpg","hash":"acdea181bfb2f89abb60c576ce95d15b40e5a105","modified":1484881947332},{"_id":"public/images/gitinitfile.jpg","hash":"3cf7edb4c0a44cc424d9fdeb604908577bdf541a","modified":1484881947332},{"_id":"public/images/gitpushinputpass.jpg","hash":"483d501611082fb8104bf10b6c5673f27fad843d","modified":1484881947332},{"_id":"public/images/gitpushinputpasssucc.jpg","hash":"6a2e37d82076bd1b8caebe170fc1b85354df8f20","modified":1484881947332},{"_id":"public/images/inputInfo.jpg","hash":"142b3f79e6f7da6615b40cde3c8a77e8c5d1c5ce","modified":1484881947333},{"_id":"public/images/jqueryRadio1.png","hash":"46704bed7715e22f4891c1a1eaeee09252459608","modified":1484881947333},{"_id":"public/images/jqueryRadio2.png","hash":"5eda50da10c4d5d2cf2152ce50aa4f7b40d8bbca","modified":1484881947333},{"_id":"public/images/jqueryRadio3.png","hash":"a14ac03611cdd454b33d15011c9cb968dc22fed6","modified":1484881947334},{"_id":"public/images/jqueryRadio4.png","hash":"f094a2e100146f23f02c1c80279ed7ed5ea931fa","modified":1484881947334},{"_id":"public/images/linuxInter0.png","hash":"c67c79508e4b1abb8434af933a93f1b647fd17d9","modified":1484881947334},{"_id":"public/images/linuxInter1.png","hash":"0880a8120fa74fefb0beebfa14c5e740a98e2944","modified":1484881947334},{"_id":"public/images/linuxInter2.png","hash":"932f31fb182b54ab9d534a7d8fc88d7ca5c89dde","modified":1484881947334},{"_id":"public/images/linuxInter3.png","hash":"289533dbd3ce53e781ba4034aa9e366d0cece690","modified":1484881947334},{"_id":"public/images/linuxInter4.png","hash":"52b83adde711d865a1350269b14810523a872ce6","modified":1484881947334},{"_id":"public/images/linuxKenel1.png","hash":"e854f005b8b9175046fc4f3a901cb934af6b1796","modified":1484881947334},{"_id":"public/images/markdown.jpg","hash":"f0c83b56b37d054083b3687465f4afaeeb33c2d2","modified":1484881947334},{"_id":"public/images/mygitbook.jpg","hash":"217a2e4ab7791be3bf15cdaa6f327f0cbcd89c82","modified":1484881947334},{"_id":"public/images/mysql1.png","hash":"27477ffd5318981782aa85a51e767c715b32fd47","modified":1484881947334},{"_id":"public/images/mysql2.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1484881947334},{"_id":"public/images/mysql3.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1484881947334},{"_id":"public/images/mysql8.png","hash":"a2a62d7e36f20d8b7261b4dc4b083eda60d53696","modified":1484881947334},{"_id":"public/images/mysqlCode1.png","hash":"812d6c96b35ad48d91aaa7cee365b70480946bb9","modified":1484881947334},{"_id":"public/images/newRepository.jpg","hash":"db4e148318613b840781b25b5bb2cb512344d3d7","modified":1484881947334},{"_id":"public/images/newmaven1.png","hash":"79d872989bc6e2215c171810ae87db93a12d1bc3","modified":1484881947334},{"_id":"public/images/newmaven2.png","hash":"a43fc7c9309e8960f5a87257e28b1e3190dc4a9e","modified":1484881947334},{"_id":"public/images/newmaven3.png","hash":"d38e3ebe323acdf55039141ca9c73a61e629481b","modified":1484881947334},{"_id":"public/images/newmavenproject.png","hash":"59e100c2fcbf56d98a5f2b1538e0bf073c66771c","modified":1484881947334},{"_id":"public/images/nodejsdownload.jpg","hash":"8cc73c0300f74907ec8489975b4c09e977a40b13","modified":1484881947334},{"_id":"public/images/pingIP.jpg","hash":"e4102d7a30ff1d02e20c4606eee14fb5158ed407","modified":1484881947334},{"_id":"public/images/poi1.png","hash":"9017543b6d8860f5e69a54977eac17e07ad19b78","modified":1484881947334},{"_id":"public/images/publishSuccess.jpg","hash":"4e8e91a979c5b613f7618cdcaa2f635e0538e17a","modified":1484881947334},{"_id":"public/images/rocketMQ2.png","hash":"dfebc65e8f739fde0cb2af456257cc2032c3e3c6","modified":1484881947335},{"_id":"public/images/rocketMQ3.png","hash":"580cdcb92a54694b6744dcfc29f100b2638dcfbb","modified":1484881947335},{"_id":"public/images/selectLayout.jpg","hash":"fd99d2dec31e5ed5531fd5d49b5b34776beea0a1","modified":1484881947335},{"_id":"public/images/spring1.jpg","hash":"346d581fae54ac19b5e88bf139c4d254a1b32aa3","modified":1484881947335},{"_id":"public/images/spring2.png","hash":"5ebeec5d037bfd85fe36e79eb12ab51d277d4302","modified":1484881947335},{"_id":"public/images/spring3.jpg","hash":"2d384f95b6a4df0799db2db67870b8ae5ba23a25","modified":1484881947335},{"_id":"public/images/succblog.jpg","hash":"c924ba65f4bcdd71ea3886cd70514ee48b006c43","modified":1484881947335},{"_id":"public/images/thy1.png","hash":"55f2f5be2cae7360a52eb9a5a2fbe2d2298a4530","modified":1484881947335},{"_id":"public/images/thy2.png","hash":"2b3a1042d70001a64bfbc324b6e087c6bdccd4df","modified":1484881947335},{"_id":"public/images/thy3.png","hash":"085aa49561fad7693829badc440fd596d78a8dbb","modified":1484881947335},{"_id":"public/images/thy4.png","hash":"cd4da596d6179c816efba8d7aa1b882965600e88","modified":1484881947335},{"_id":"public/images/thy6.png","hash":"af8f9114e4eabe2013a9c5109bd3f9cc3b431f64","modified":1484881947335},{"_id":"public/images/thy7.png","hash":"5109c4385eb10a0660d5e8c9af6bfdd35add3617","modified":1484881947335},{"_id":"public/images/thyemleafshow.png","hash":"d0f49ce9408c3cce91437483208f941b412804fd","modified":1484881947335},{"_id":"public/images/tianjiagitfile.jpg","hash":"56d6151f6b1e8d6552d5708ed969628ca822060d","modified":1484881947335},{"_id":"public/images/vSphere0.jpg","hash":"9f973edbaace7047d6615c9f91ddbd69d4ec98a0","modified":1484881947335},{"_id":"public/images/vSphere00.jpg","hash":"0835e6ff2f6babb963c87bd0d1f992277bfa2ce7","modified":1484881947335},{"_id":"public/images/useGitPages.jpg","hash":"7dfb31e260cc4802f3ce9791c442693fb07c1fe0","modified":1484881947335},{"_id":"public/images/vSphere01.jpg","hash":"90a1afdf9ce7f15ac38cc3b92d3ce5c18f5b26ad","modified":1484881947335},{"_id":"public/images/vSphere02.jpg","hash":"137f172fa7c7c2dc16648e7405d015fc7dd33206","modified":1484881947335},{"_id":"public/images/vSphere03.jpg","hash":"9fa77f62ec89afaa8b8ef2bacb784c5a32315ada","modified":1484881947335},{"_id":"public/images/vSphere04.jpg","hash":"cb1109a9f0b4061a318d2e1f367a42a05413b33b","modified":1484881947335},{"_id":"public/images/vSphere05.jpg","hash":"d5fbeda9ec4cb9682af424289dc2c7f84e33d054","modified":1484881947335},{"_id":"public/images/vSphere06.jpg","hash":"708ac251c2afdad8759a83d4f155662271ee8f47","modified":1484881947335},{"_id":"public/images/vSphere1.jpg","hash":"96a4f6ef1a837211a7ad42eed3b4325ed9bb372b","modified":1484881947335},{"_id":"public/images/vSphere11.jpg","hash":"b0873d659259a7e228f078366b4e3222cdd15b93","modified":1484881947336},{"_id":"public/images/vSphere2.jpg","hash":"7bb8fdba14b1e03d21519cc764be06b2c447970f","modified":1484881947336},{"_id":"public/images/vSphere4.jpg","hash":"aeadaa97120f8dc4b36812c6f420c00d417abed6","modified":1484881947336},{"_id":"public/images/vSphere5.jpg","hash":"fb5b42b3f074e1bd8adc98afd10669f064aeb16d","modified":1484881947336},{"_id":"public/images/vSphere7.jpg","hash":"b438a5184735169c2a025464ff5e8cbff9a12cf6","modified":1484881947336},{"_id":"public/images/vSphere8.jpg","hash":"eeadea0b726df446e97676dbc68b819ddbce1005","modified":1484881947336},{"_id":"public/images/vSphere9.jpg","hash":"75e4e4e651cc537fc7e8d99a6ef983bda8e8b3f1","modified":1484881947336},{"_id":"public/images/wangka.jpg","hash":"39a2a3bd7e4bb60cab1b39f0630fddecff0113ba","modified":1484881947336},{"_id":"public/images/wankapeizhi.jpg","hash":"8216b06ae346667837a938e17f0c5f6d034b7dfa","modified":1484881947336},{"_id":"public/images/yumingmanage.jpg","hash":"72b945bb05264898a82c274ac0e2c1be7b9840c8","modified":1484881947336},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484881947336},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484881947336},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484881947336},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484881947337},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484881947337},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484881947337},{"_id":"public/images/3.jpg","hash":"ceafae6c44b27e16a104252c47eed3f77a49862f","modified":1484881947371},{"_id":"public/images/biaoge1.jpg","hash":"2c8a80180cdb8e1ad1b6391766c9ffd5262d559d","modified":1484881947371},{"_id":"public/images/biaoge6.jpg","hash":"6585a9060e5e2e78d0a990005ef96b2f427212fc","modified":1484881947373},{"_id":"public/images/ippeizhi.jpg","hash":"63c1cb0f1737b80b6c31b80067ec9f828c9f9549","modified":1484881947373},{"_id":"public/images/javaStream2.png","hash":"1e106ac4e9dba1a969a1224a0946e97c3de3a9d3","modified":1484881947373},{"_id":"public/images/jqwidgets.png","hash":"fbe64a40edf567eef733447ea48d19b8ad2bc8d4","modified":1484881947373},{"_id":"public/images/kuayu.jpg","hash":"cb4e30c0c2b0885cc9e4db2b6c3e697be877c550","modified":1484881947374},{"_id":"public/images/mycsdnblog.jpg","hash":"ad4f73fe7fa0cace00f47e0af59b20a5e3d88e98","modified":1484881947374},{"_id":"public/images/mysql10.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1484881947374},{"_id":"public/images/mysql4.png","hash":"0da5dcf1a60d2a703f0fbe0141aa2d5b902a0c37","modified":1484881947374},{"_id":"public/images/mysql7.png","hash":"df72c1597111b502074fee572e8c674a5ed0e0ef","modified":1484881947374},{"_id":"public/images/mysql6.png","hash":"744ed2148b8f8c2371d1e88bd845cf23068cf216","modified":1484881947374},{"_id":"public/images/mysql5.png","hash":"bcbdf5513c5715a69789dab6cf18890bb6d5125d","modified":1484881947374},{"_id":"public/images/mysql9.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1484881947374},{"_id":"public/images/mysqlCode2.png","hash":"7840767464027409927b06a3ebb0e10ac039afed","modified":1484881947374},{"_id":"public/images/thymeleafFollow.png","hash":"40fd2d4a8830eb959741865128a4c6833cebbac7","modified":1484881947374},{"_id":"public/images/vSphere10.jpg","hash":"2deff4ad654a211f4f121a54ff36ec9af77d4642","modified":1484881947374},{"_id":"public/images/vSphere3.jpg","hash":"f0488e5a1dc4f0cae6172f3de0b209d57a70ef83","modified":1484881947374},{"_id":"public/images/vSphere6.jpg","hash":"fedd20137372dd88c82b5de096deb5b69db92084","modified":1484881947374},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1484881947384},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1484881947384},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1484881947384},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1484881947384},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1484881947384},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1484881947384},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1484881947384},{"_id":"public/css/style.css","hash":"5e031463c49be0e099889655aaec8538d489b43d","modified":1484881947384},{"_id":"public/images/gitinit.jpg","hash":"8c972e2bbef3c8e321ed1853e2667ae1df552f27","modified":1484881947384},{"_id":"public/images/gitmerge1.png","hash":"5a7289c15913fd8ec43e33f00078a2615c4f3afa","modified":1484881947384},{"_id":"public/images/biaoge4.jpg","hash":"c1f8d9343290d26a2a065abce3f1743d029f5151","modified":1484881947401},{"_id":"public/images/rocketMQ1.png","hash":"529d5d0556f67b79a928a5e7ff5e0f44f7988698","modified":1484881947511}],"Category":[{"name":"github","_id":"ciy58ddqc0005gco0f7jcl1u8"},{"name":"IDE","_id":"ciy58ddqt000ngco04kds7lzz"},{"name":"UI","_id":"ciy58ddr1000tgco0cp4iz2fm"},{"name":"javascript","_id":"ciy58ddr4000zgco01691x01c"},{"name":"Linux","_id":"ciy58ddrc001agco0arj42h4c"},{"name":"Maven","_id":"ciy58ddrz001zgco0bezd4s0r"},{"name":"Mysql","_id":"ciy58ddsc002bgco0jrwoadvv"},{"name":"Mybatis","_id":"ciy58ddsk002ogco06vapd2u4"},{"name":"Redis","_id":"ciy58ddsv0030gco03j6g52u8"},{"name":"RocketMQ","_id":"ciy58ddt00038gco0p4g3i6oj"},{"name":"Tomcat","_id":"ciy58ddt7003ggco0qx8suu9b"},{"name":"vSphere","_id":"ciy58ddt8003lgco08lvnfpm2"},{"name":"git","_id":"ciy58ddta003pgco00n08jo2l"},{"name":"java","_id":"ciy58ddtb003tgco0yrvh4szb"},{"name":"oracle","_id":"ciy58ddti004cgco0l2mf38ei"},{"name":"spring","_id":"ciy58ddti004hgco0bk94cukr"},{"name":"thymeleaf","_id":"ciy58ddtm004sgco0jibz4ay8"},{"name":"Nginx","_id":"ciy58ddtx005jgco0obnwxq0j"}],"Data":[],"Page":[{"title":"about","date":"2016-06-29T04:25:34.000Z","type":"about","_content":"# 个人信息\n\n - 马平升/男\n - Github：https://github.com/mapingsheng\n - 邮箱：mapingsheng1025@163.com\n - 微信 ：maps503981739\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-06-29 12:25:34\ntype: \"about\"\n---\n# 个人信息\n\n - 马平升/男\n - Github：https://github.com/mapingsheng\n - 邮箱：mapingsheng1025@163.com\n - 微信 ：maps503981739\n\n\n\n\n\n\n\n","updated":"2017-01-11T02:06:24.918Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciy58ddpw0000gco05u7b55wz","content":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>马平升/男</li>\n<li>Github：<a href=\"https://github.com/mapingsheng\" target=\"_blank\" rel=\"external\">https://github.com/mapingsheng</a></li>\n<li>邮箱：mapingsheng1025@163.com</li>\n<li>微信 ：maps503981739</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>马平升/男</li>\n<li>Github：<a href=\"https://github.com/mapingsheng\">https://github.com/mapingsheng</a></li>\n<li>邮箱：mapingsheng1025@163.com</li>\n<li>微信 ：maps503981739</li>\n</ul>\n"},{"title":"categories","date":"2016-06-29T04:19:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-29 12:19:52\ntype: \"categories\"\n---\n","updated":"2017-01-11T02:06:24.918Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciy58ddq40002gco0lwhxx1nu","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-06-29T04:19:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-29 12:19:25\ntype: \"tags\"\n---\n","updated":"2017-01-11T02:06:25.100Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciy58ddqe0006gco0q2q6om5m","content":"","excerpt":"","more":""}],"Post":[{"title":"添加KEY后，每次push时让输入密码","date":"2016-06-28T10:03:13.000Z","_content":"\n我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中\n\t\n1. 当从github上面clone项目时，还老是提示输入密码，如下图：\n\t><code>Enter passphrase for key '/c/Users/maps/.ssh/id_rsa':\n\t>\n\t>![Alt text](http://soujava.com/images/getIp.jpg \"git push\")\n2. 按照先后顺序执行以下两条命令：\n\t><code>$ ssh-agent bash\n\t>\n\t><code>$ ssh-add /c/Users/maps/.ssh/id_rsa\n\n\t>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径\n3. 通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功\n\t>![Alt text](http://soujava.com/images/gitTestconnsucc.jpg)\n4. 最后来一个完整的图片\n\t>![Alt text](http://soujava.com/images/gitpushinputpasssucc.jpg)","source":"_posts/2016-06-28-添加KEY后，每次push时让输入密码.md","raw":"---\ntitle: 添加KEY后，每次push时让输入密码\ndate: 2016-06-28 18:03:13\ncategories: github\ntags: github\n---\n\n我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中\n\t\n1. 当从github上面clone项目时，还老是提示输入密码，如下图：\n\t><code>Enter passphrase for key '/c/Users/maps/.ssh/id_rsa':\n\t>\n\t>![Alt text](http://soujava.com/images/getIp.jpg \"git push\")\n2. 按照先后顺序执行以下两条命令：\n\t><code>$ ssh-agent bash\n\t>\n\t><code>$ ssh-add /c/Users/maps/.ssh/id_rsa\n\n\t>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径\n3. 通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功\n\t>![Alt text](http://soujava.com/images/gitTestconnsucc.jpg)\n4. 最后来一个完整的图片\n\t>![Alt text](http://soujava.com/images/gitpushinputpasssucc.jpg)","slug":"2016-06-28-添加KEY后，每次push时让输入密码","published":1,"updated":"2017-01-11T02:06:24.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddpz0001gco0ynlfd2jy","content":"<p>我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中</p>\n<ol>\n<li>当从github上面clone项目时，还老是提示输入密码，如下图：<blockquote>\n<p><code>Enter passphrase for key ‘/c/Users/maps/.ssh/id_rsa’:</code></p>\n<p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n</blockquote>\n</li>\n<li><p>按照先后顺序执行以下两条命令：</p>\n<blockquote>\n<p><code>$ ssh-agent bash</code></p>\n<p><code>$ ssh-add /c/Users/maps/.ssh/id_rsa</code></p>\n<p>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径</p>\n</blockquote>\n</li>\n<li>通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功<blockquote>\n<p><img src=\"http://soujava.com/images/gitTestconnsucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n<li>最后来一个完整的图片<blockquote>\n<p><img src=\"http://soujava.com/images/gitpushinputpasssucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<p>我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中</p>\n<ol>\n<li>当从github上面clone项目时，还老是提示输入密码，如下图：<blockquote>\n<p><code>Enter passphrase for key ‘/c/Users/maps/.ssh/id_rsa’:</p>\n<p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n</blockquote>\n</li>\n<li><p>按照先后顺序执行以下两条命令：</p>\n<blockquote>\n<p><code>$ ssh-agent bash</p>\n<p><code>$ ssh-add /c/Users/maps/.ssh/id_rsa</p>\n<p>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径</p>\n</blockquote>\n</li>\n<li>通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功<blockquote>\n<p><img src=\"http://soujava.com/images/gitTestconnsucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n<li>最后来一个完整的图片<blockquote>\n<p><img src=\"http://soujava.com/images/gitpushinputpasssucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"为github pages绑定独立域名","date":"2016-06-28T09:47:28.000Z","_content":"> 如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！\n\n**<p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！**\n\n\n**<p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！**\n\t\n- 登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名\n>![Alt text](http://soujava.com/images/yumingmanage.jpg)\n<p>![Alt text](http://soujava.com/images/ippeizhi.jpg)\n<p><code>下面讲解此步骤配置的ip如何获取\n\n**<p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址**\n<p>![Alt text](http://soujava.com/images/getIp.jpg)\n\n**<p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！**\n<p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！\n","source":"_posts/2016-06-28-为github-pages绑定独立域名.md","raw":"---\ntitle: 为github pages绑定独立域名\ndate: 2016-06-28 17:47:28\ncategories: github\ntags: github\n---\n> 如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！\n\n**<p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！**\n\n\n**<p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！**\n\t\n- 登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名\n>![Alt text](http://soujava.com/images/yumingmanage.jpg)\n<p>![Alt text](http://soujava.com/images/ippeizhi.jpg)\n<p><code>下面讲解此步骤配置的ip如何获取\n\n**<p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址**\n<p>![Alt text](http://soujava.com/images/getIp.jpg)\n\n**<p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！**\n<p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！\n","slug":"2016-06-28-为github-pages绑定独立域名","published":1,"updated":"2017-01-11T02:06:24.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddq50003gco02acf1icn","content":"<blockquote>\n<p>如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！</p>\n</blockquote>\n<p><strong><p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！</p></strong></p>\n<p><strong><p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！</p></strong></p>\n<ul>\n<li>登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名<blockquote>\n<p><img src=\"http://soujava.com/images/yumingmanage.jpg\" alt=\"Alt text\"><br></p><p><img src=\"http://soujava.com/images/ippeizhi.jpg\" alt=\"Alt text\"><br></p><p><code>下面讲解此步骤配置的ip如何获取</code></p>\n</blockquote>\n</li>\n</ul>\n<p><strong><p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址</p></strong></p>\n<p></p><p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\"></p>\n<p><strong><p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！</p></strong></p>\n<p></p><p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！</code></p>\n","excerpt":"","more":"<blockquote>\n<p>如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！</p>\n</blockquote>\n<p><strong><p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！</strong></p>\n<p><strong><p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！</strong></p>\n<ul>\n<li>登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名<blockquote>\n<p><img src=\"http://soujava.com/images/yumingmanage.jpg\" alt=\"Alt text\"><br><p><img src=\"http://soujava.com/images/ippeizhi.jpg\" alt=\"Alt text\"><br><p><code>下面讲解此步骤配置的ip如何获取</p>\n</blockquote>\n</li>\n</ul>\n<p><strong><p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址</strong></p>\n<p><p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\"></p>\n<p><strong><p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！</strong></p>\n<p><p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！</p>\n"},{"title":"通过gitBook让网站更实用","date":"2016-06-28T09:48:54.000Z","_content":"1. 前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);\n\t>csdn上面的博客查看方式\n\t>![Alt text](http://soujava.com/images/mycsdnblog.jpg)\n\t<p>采用gitBook构建的博客\n\t<p>![Alt text](http://soujava.com/images/mygitbook.jpg)\n\t<p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)\n\t<p>\n2. gitBook是什么\n\t<p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。\n\tGitBook支持输出多种文档格式：\n\t·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；\n\t·PDF：需要安装gitbook-pdf依赖；\n\t·eBook：需要安装ebook-convert；\n\t·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；\n\t·JSON：一般用于电子书的调试或元数据提取。\n\t使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md\n\t<p>官网:https://www.gitbook.com\n\t<p>\n3. 如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：\n\t>1)、下载、安装node.js;官网：http://nodejs.cn/\n\t>\n\t>![Alt text](http://soujava.com/images/nodejsdownload.jpg)\n\t>\n\t>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！\n\t>\n\t>2)、通过window命令安装gitbook服务；\n\t><code>npm install gitbook -g\n\t>\n\t>![Alt text](http://soujava.com/images/1.jpg)\n\t>\n\t>3)、通过window命令安装gitbook命令服务（gitbook-cli）；\n\t><code>npm install gitbook-cli -g\n\t>\n\t>4)、下载安装markdown；\n\t>下载地址：http://markdownpad.com/download.html；\n\t>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标\n\t>\n\t>![Alt text](http://soujava.com/images/markdown.jpg)\n\t>\n\t>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：\n\t>\n\t>![Alt text](http://soujava.com/images/3.jpg)\n\t>\n\t>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,\n\t>SUMMARY.md文件内容如图\n\t<p>![Alt text](http://soujava.com/images/gitinit.jpg)\n\n\t>运行gitbook init命令后生成的目录结构如图\n\t>\n\t<p>![Alt text](http://soujava.com/images/gitinitfile.jpg)\n\t>\n\t>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;\n\t>\n\t>![Alt text](http://soujava.com/images/gitbuildbook.jpg)\n\t>\n\t>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；\n\t>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！\n3. 总结\n\t>安装node.js、gitbook、markdown\n\t>\n\t>通过gitbook init命令初始化目录结构\n\t>\n\t>通过markdown工具编辑目录结构文章对应的.md文件\n\t>\n\t>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)\n\t>\n\t>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面","source":"_posts/2016-06-28-通过gitBook让网站更实用.md","raw":"---\ntitle: 通过gitBook让网站更实用\ndate: 2016-06-28 17:48:54\ncategories: github\ntags: github\n---\n1. 前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);\n\t>csdn上面的博客查看方式\n\t>![Alt text](http://soujava.com/images/mycsdnblog.jpg)\n\t<p>采用gitBook构建的博客\n\t<p>![Alt text](http://soujava.com/images/mygitbook.jpg)\n\t<p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)\n\t<p>\n2. gitBook是什么\n\t<p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。\n\tGitBook支持输出多种文档格式：\n\t·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；\n\t·PDF：需要安装gitbook-pdf依赖；\n\t·eBook：需要安装ebook-convert；\n\t·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；\n\t·JSON：一般用于电子书的调试或元数据提取。\n\t使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md\n\t<p>官网:https://www.gitbook.com\n\t<p>\n3. 如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：\n\t>1)、下载、安装node.js;官网：http://nodejs.cn/\n\t>\n\t>![Alt text](http://soujava.com/images/nodejsdownload.jpg)\n\t>\n\t>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！\n\t>\n\t>2)、通过window命令安装gitbook服务；\n\t><code>npm install gitbook -g\n\t>\n\t>![Alt text](http://soujava.com/images/1.jpg)\n\t>\n\t>3)、通过window命令安装gitbook命令服务（gitbook-cli）；\n\t><code>npm install gitbook-cli -g\n\t>\n\t>4)、下载安装markdown；\n\t>下载地址：http://markdownpad.com/download.html；\n\t>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标\n\t>\n\t>![Alt text](http://soujava.com/images/markdown.jpg)\n\t>\n\t>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：\n\t>\n\t>![Alt text](http://soujava.com/images/3.jpg)\n\t>\n\t>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,\n\t>SUMMARY.md文件内容如图\n\t<p>![Alt text](http://soujava.com/images/gitinit.jpg)\n\n\t>运行gitbook init命令后生成的目录结构如图\n\t>\n\t<p>![Alt text](http://soujava.com/images/gitinitfile.jpg)\n\t>\n\t>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;\n\t>\n\t>![Alt text](http://soujava.com/images/gitbuildbook.jpg)\n\t>\n\t>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；\n\t>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！\n3. 总结\n\t>安装node.js、gitbook、markdown\n\t>\n\t>通过gitbook init命令初始化目录结构\n\t>\n\t>通过markdown工具编辑目录结构文章对应的.md文件\n\t>\n\t>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)\n\t>\n\t>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面","slug":"2016-06-28-通过gitBook让网站更实用","published":1,"updated":"2017-01-11T02:06:24.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqe0007gco09dahqmbx","content":"<ol>\n<li>前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);<blockquote>\n<p>csdn上面的博客查看方式<br><img src=\"http://soujava.com/images/mycsdnblog.jpg\" alt=\"Alt text\"><br> </p><p>采用gitBook构建的博客<br> </p><p><img src=\"http://soujava.com/images/mygitbook.jpg\" alt=\"Alt text\"><br> </p><p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)</p>\n <p></p></blockquote>\n</li>\n<li>gitBook是什么<br> <p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br> GitBook支持输出多种文档格式：<br> ·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；<br> ·PDF：需要安装gitbook-pdf依赖；<br> ·eBook：需要安装ebook-convert；<br> ·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；<br> ·JSON：一般用于电子书的调试或元数据提取。<br> 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md<br> </p><p>官网:<a href=\"https://www.gitbook.com\" target=\"_blank\" rel=\"external\">https://www.gitbook.com</a> </p><p></p></li>\n<li><p>如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：</p>\n<blockquote>\n<p>1)、下载、安装node.js;官网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">http://nodejs.cn/</a></p>\n<p><img src=\"http://soujava.com/images/nodejsdownload.jpg\" alt=\"Alt text\"></p>\n<p>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！</p>\n<p>2)、通过window命令安装gitbook服务；<br><code>npm install gitbook -g</code></p>\n<p><img src=\"http://soujava.com/images/1.jpg\" alt=\"Alt text\"></p>\n<p>3)、通过window命令安装gitbook命令服务（gitbook-cli）；<br><code>npm install gitbook-cli -g</code></p>\n<p>4)、下载安装markdown；<br>下载地址：<a href=\"http://markdownpad.com/download.html；\" target=\"_blank\" rel=\"external\">http://markdownpad.com/download.html；</a><br>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标</p>\n<p><img src=\"http://soujava.com/images/markdown.jpg\" alt=\"Alt text\"></p>\n<p>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：</p>\n<p><img src=\"http://soujava.com/images/3.jpg\" alt=\"Alt text\"></p>\n<p>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,<br>SUMMARY.md文件内容如图<br> </p><p><img src=\"http://soujava.com/images/gitinit.jpg\" alt=\"Alt text\"></p>\n<p>运行gitbook init命令后生成的目录结构如图</p>\n<p> </p><p><img src=\"http://soujava.com/images/gitinitfile.jpg\" alt=\"Alt text\"></p>\n<p>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;</p>\n<p><img src=\"http://soujava.com/images/gitbuildbook.jpg\" alt=\"Alt text\"></p>\n<p>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；<br>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！</p>\n</blockquote>\n</li>\n<li>总结<blockquote>\n<p>安装node.js、gitbook、markdown</p>\n<p>通过gitbook init命令初始化目录结构</p>\n<p>通过markdown工具编辑目录结构文章对应的.md文件</p>\n<p>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)</p>\n<p>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面</p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);<blockquote>\n<p>csdn上面的博客查看方式<br><img src=\"http://soujava.com/images/mycsdnblog.jpg\" alt=\"Alt text\"><br> <p>采用gitBook构建的博客<br> <p><img src=\"http://soujava.com/images/mygitbook.jpg\" alt=\"Alt text\"><br> <p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)</p>\n <p></blockquote>\n</li>\n<li>gitBook是什么<br> <p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br> GitBook支持输出多种文档格式：<br> ·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；<br> ·PDF：需要安装gitbook-pdf依赖；<br> ·eBook：需要安装ebook-convert；<br> ·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；<br> ·JSON：一般用于电子书的调试或元数据提取。<br> 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md<br> <p>官网:<a href=\"https://www.gitbook.com\">https://www.gitbook.com</a> <p></li>\n<li><p>如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：</p>\n<blockquote>\n<p>1)、下载、安装node.js;官网：<a href=\"http://nodejs.cn/\">http://nodejs.cn/</a></p>\n<p><img src=\"http://soujava.com/images/nodejsdownload.jpg\" alt=\"Alt text\"></p>\n<p>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！</p>\n<p>2)、通过window命令安装gitbook服务；<br><code>npm install gitbook -g</p>\n<p><img src=\"http://soujava.com/images/1.jpg\" alt=\"Alt text\"></p>\n<p>3)、通过window命令安装gitbook命令服务（gitbook-cli）；<br><code>npm install gitbook-cli -g</p>\n<p>4)、下载安装markdown；<br>下载地址：<a href=\"http://markdownpad.com/download.html；\">http://markdownpad.com/download.html；</a><br>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标</p>\n<p><img src=\"http://soujava.com/images/markdown.jpg\" alt=\"Alt text\"></p>\n<p>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：</p>\n<p><img src=\"http://soujava.com/images/3.jpg\" alt=\"Alt text\"></p>\n<p>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,<br>SUMMARY.md文件内容如图<br> <p><img src=\"http://soujava.com/images/gitinit.jpg\" alt=\"Alt text\"></p>\n<p>运行gitbook init命令后生成的目录结构如图</p>\n<p> <p><img src=\"http://soujava.com/images/gitinitfile.jpg\" alt=\"Alt text\"></p>\n<p>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;</p>\n<p><img src=\"http://soujava.com/images/gitbuildbook.jpg\" alt=\"Alt text\"></p>\n<p>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；<br>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！</p>\n</blockquote>\n</li>\n<li>总结<blockquote>\n<p>安装node.js、gitbook、markdown</p>\n<p>通过gitbook init命令初始化目录结构</p>\n<p>通过markdown工具编辑目录结构文章对应的.md文件</p>\n<p>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)</p>\n<p>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"通过github pages生成网站","date":"2016-06-28T09:43:00.000Z","_content":"**1 什么是github pages**\n>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\ngithub Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等\n\n**2 新建仓库**\n>![Alt text](http://soujava.com/images/newRepository.jpg)\n\n**3 输入仓库信息**\n>![Alt text](http://soujava.com/images/inputInfo.jpg \"输入仓库信息\")\n\n**4 添加成功后，点击“settings”按钮**\n>![Alt text](http://soujava.com/images/createSucc.jpg \"仓库添加成功\")\n\n**5 使用Github Pages生成页面**\n>![Alt text](http://soujava.com/images/useGitPages.jpg \"使用gitHub pages生服务\")\n\n**6 点击选择博客布局按钮进入选择布局界面**\n>![Alt text](http://soujava.com/images/selectLayout.jpg \"选择样式布局\") \n\n**7 切换布局选择操作,最后点击“publish page”按钮**\n>![Alt text](http://soujava.com/images/succblog.jpg \"切换布局选择操作\")\n\n**8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问**\n>![Alt text](http://soujava.com/images/publishSuccess.jpg \"发布成功\")\n\n**9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示**\n>![Alt text](http://soujava.com/images/fagnwen.jpg \"点击访问url地址访问博客\")\n<p>点击上图中红框中的访问url地址访问博客\n\n**10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址**\n>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行\n>![Alt text](http://soujava.com/images/tianjiagitfile.jpg)\n>\n>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME\n>![Alt text](http://soujava.com/images/gitaddFile.jpg)\n>\n>![Alt text](http://soujava.com/images/cname.jpg)","source":"_posts/2016-06-28-通过github-pages生成网站.md","raw":"---\ntitle: 通过github pages生成网站\ndate: 2016-06-28 17:43:00\ncategories:\ntags:\n---\n**1 什么是github pages**\n>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\ngithub Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等\n\n**2 新建仓库**\n>![Alt text](http://soujava.com/images/newRepository.jpg)\n\n**3 输入仓库信息**\n>![Alt text](http://soujava.com/images/inputInfo.jpg \"输入仓库信息\")\n\n**4 添加成功后，点击“settings”按钮**\n>![Alt text](http://soujava.com/images/createSucc.jpg \"仓库添加成功\")\n\n**5 使用Github Pages生成页面**\n>![Alt text](http://soujava.com/images/useGitPages.jpg \"使用gitHub pages生服务\")\n\n**6 点击选择博客布局按钮进入选择布局界面**\n>![Alt text](http://soujava.com/images/selectLayout.jpg \"选择样式布局\") \n\n**7 切换布局选择操作,最后点击“publish page”按钮**\n>![Alt text](http://soujava.com/images/succblog.jpg \"切换布局选择操作\")\n\n**8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问**\n>![Alt text](http://soujava.com/images/publishSuccess.jpg \"发布成功\")\n\n**9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示**\n>![Alt text](http://soujava.com/images/fagnwen.jpg \"点击访问url地址访问博客\")\n<p>点击上图中红框中的访问url地址访问博客\n\n**10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址**\n>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行\n>![Alt text](http://soujava.com/images/tianjiagitfile.jpg)\n>\n>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME\n>![Alt text](http://soujava.com/images/gitaddFile.jpg)\n>\n>![Alt text](http://soujava.com/images/cname.jpg)","slug":"2016-06-28-通过github-pages生成网站","published":1,"updated":"2017-01-11T02:06:24.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqg0008gco0c1xc1zay","content":"<p><strong>1 什么是github pages</strong></p>\n<blockquote>\n<p>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>github Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等</p>\n</blockquote>\n<p><strong>2 新建仓库</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/newRepository.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n<p><strong>3 输入仓库信息</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/inputInfo.jpg\" alt=\"Alt text\" title=\"输入仓库信息\"></p>\n</blockquote>\n<p><strong>4 添加成功后，点击“settings”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/createSucc.jpg\" alt=\"Alt text\" title=\"仓库添加成功\"></p>\n</blockquote>\n<p><strong>5 使用Github Pages生成页面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/useGitPages.jpg\" alt=\"Alt text\" title=\"使用gitHub pages生服务\"></p>\n</blockquote>\n<p><strong>6 点击选择博客布局按钮进入选择布局界面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/selectLayout.jpg\" alt=\"Alt text\" title=\"选择样式布局\"> </p>\n</blockquote>\n<p><strong>7 切换布局选择操作,最后点击“publish page”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/succblog.jpg\" alt=\"Alt text\" title=\"切换布局选择操作\"></p>\n</blockquote>\n<p><strong>8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/publishSuccess.jpg\" alt=\"Alt text\" title=\"发布成功\"></p>\n</blockquote>\n<p><strong>9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/fagnwen.jpg\" alt=\"Alt text\" title=\"点击访问url地址访问博客\"></p>\n<p></p><p>点击上图中红框中的访问url地址访问博客</p>\n</blockquote>\n<p><strong>10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址</strong></p>\n<blockquote>\n<p>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行<br><img src=\"http://soujava.com/images/tianjiagitfile.jpg\" alt=\"Alt text\"></p>\n<p>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME<br><img src=\"http://soujava.com/images/gitaddFile.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/cname.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n","excerpt":"","more":"<p><strong>1 什么是github pages</strong></p>\n<blockquote>\n<p>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>github Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等</p>\n</blockquote>\n<p><strong>2 新建仓库</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/newRepository.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n<p><strong>3 输入仓库信息</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/inputInfo.jpg\" alt=\"Alt text\" title=\"输入仓库信息\"></p>\n</blockquote>\n<p><strong>4 添加成功后，点击“settings”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/createSucc.jpg\" alt=\"Alt text\" title=\"仓库添加成功\"></p>\n</blockquote>\n<p><strong>5 使用Github Pages生成页面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/useGitPages.jpg\" alt=\"Alt text\" title=\"使用gitHub pages生服务\"></p>\n</blockquote>\n<p><strong>6 点击选择博客布局按钮进入选择布局界面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/selectLayout.jpg\" alt=\"Alt text\" title=\"选择样式布局\"> </p>\n</blockquote>\n<p><strong>7 切换布局选择操作,最后点击“publish page”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/succblog.jpg\" alt=\"Alt text\" title=\"切换布局选择操作\"></p>\n</blockquote>\n<p><strong>8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/publishSuccess.jpg\" alt=\"Alt text\" title=\"发布成功\"></p>\n</blockquote>\n<p><strong>9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/fagnwen.jpg\" alt=\"Alt text\" title=\"点击访问url地址访问博客\"></p>\n<p><p>点击上图中红框中的访问url地址访问博客</p>\n</blockquote>\n<p><strong>10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址</strong></p>\n<blockquote>\n<p>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行<br><img src=\"http://soujava.com/images/tianjiagitfile.jpg\" alt=\"Alt text\"></p>\n<p>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME<br><img src=\"http://soujava.com/images/gitaddFile.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/cname.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n"},{"title":"Java was started but returned exit code异常","date":"2016-06-30T07:56:30.000Z","_content":"今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369.........等等\n将eclipse.ini内容改为：\n（注：最下面的几行是调整后的配置）\n\n-startup\nplugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503\n-product\norg.eclipse.epp.package.jee.product\n--launcher.defaultAction\nopenFile\n--launcher.XXMaxPermSize\n256M\n-showsplash\norg.eclipse.platform\n-vmargs\n-Dosgi.requiredJavaVersion=1.5\n\n> -Xms1024m\n-Xmx1024m\n-XX:MaxPermSize=128m\n-XX:+CMSClassUnloadingEnabled\n-XX:+CMSPermGenSweepingEnabled\n-XX:+UseParallelGC\n-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith\n","source":"_posts/2016-06-30-Java-was-started-but-returned-exit-code异常.md","raw":"---\ntitle: Java was started but returned exit code异常\ndate: 2016-06-30 15:56:30\ncategories: IDE\ntags: eclipse\n---\n今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369.........等等\n将eclipse.ini内容改为：\n（注：最下面的几行是调整后的配置）\n\n-startup\nplugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503\n-product\norg.eclipse.epp.package.jee.product\n--launcher.defaultAction\nopenFile\n--launcher.XXMaxPermSize\n256M\n-showsplash\norg.eclipse.platform\n-vmargs\n-Dosgi.requiredJavaVersion=1.5\n\n> -Xms1024m\n-Xmx1024m\n-XX:MaxPermSize=128m\n-XX:+CMSClassUnloadingEnabled\n-XX:+CMSPermGenSweepingEnabled\n-XX:+UseParallelGC\n-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith\n","slug":"2016-06-30-Java-was-started-but-returned-exit-code异常","published":1,"updated":"2017-01-11T02:06:24.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddql000agco04kbf01aq","content":"<p>今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369………等等<br>将eclipse.ini内容改为：<br>（注：最下面的几行是调整后的配置）</p>\n<p>-startup<br>plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar<br>–launcher.library<br>plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503<br>-product<br>org.eclipse.epp.package.jee.product<br>–launcher.defaultAction<br>openFile<br>–launcher.XXMaxPermSize<br>256M<br>-showsplash<br>org.eclipse.platform<br>-vmargs<br>-Dosgi.requiredJavaVersion=1.5</p>\n<blockquote>\n<p>-Xms1024m<br>-Xmx1024m<br>-XX:MaxPermSize=128m<br>-XX:+CMSClassUnloadingEnabled<br>-XX:+CMSPermGenSweepingEnabled<br>-XX:+UseParallelGC<br>-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith</p>\n</blockquote>\n","excerpt":"","more":"<p>今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369………等等<br>将eclipse.ini内容改为：<br>（注：最下面的几行是调整后的配置）</p>\n<p>-startup<br>plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar<br>–launcher.library<br>plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503<br>-product<br>org.eclipse.epp.package.jee.product<br>–launcher.defaultAction<br>openFile<br>–launcher.XXMaxPermSize<br>256M<br>-showsplash<br>org.eclipse.platform<br>-vmargs<br>-Dosgi.requiredJavaVersion=1.5</p>\n<blockquote>\n<p>-Xms1024m<br>-Xmx1024m<br>-XX:MaxPermSize=128m<br>-XX:+CMSClassUnloadingEnabled<br>-XX:+CMSPermGenSweepingEnabled<br>-XX:+UseParallelGC<br>-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith</p>\n</blockquote>\n"},{"title":"界面框架","date":"2016-06-30T08:39:11.000Z","_content":"**1、布局框架**\n\n 访问地址：http://layout.jquery-dev.com/index.cfm \n demo：http://layout.jquery-dev.com/demos.cfm\n 可以满足多种复杂或者简单的布局，支持拖拉操作：\n\n![Alt text](http://soujava.com/images/bujv.jpg \"git push\")\n\n**2、表格框架**\n2.1、SlickGrid（https://github.com/Celebio/SlickGrid）\n\n \t1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n\n \n![Alt text](http://soujava.com/images/biaoge1.jpg \"表格\")\n\n![Alt text](http://soujava.com/images/biaoge2.jpg \"表格\")\n\n   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴\n\n![Alt text](http://soujava.com/images/biaoge3.jpg \"表格\")\n\t\n   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间\n\t\t\n![Alt text](http://soujava.com/images/biaoge4.jpg \"表格\")\n\n2.2、 paramquery（http://paramquery.com/grid）\n\t\n  1)、表格拖拉控制宽度、排序、可编辑\n\n![Alt text](http://soujava.com/images/biaoge5.jpg \"表格\")\n\n  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条\n\t\n![Alt text](http://soujava.com/images/biaoge6.jpg \"表格\")\n\t\n\t3)、可以对表格头部进行复杂的嵌套汇总显示：\n\t\n![Alt text](http://soujava.com/images/biaoge9.jpg \"表格\")\n\n2.3、 jqwidgets（http://www.jqwidgets.com/）\n\n\t这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\t\n\tDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n\n![Alt text](http://soujava.com/images/jqwidgets.png \"表格\")\n\n**3、界面风格**\n\n3.1、 semantic-ui (http://semantic-ui.com/) \n\n3.2、 topcoat (http://topcoat.io/topcoat/) \n\n","source":"_posts/2016-06-30-界面框架.md","raw":"---\ntitle: 界面框架\ndate: 2016-06-30 16:39:11\ncategories: UI\ntags: 界面框架\n---\n**1、布局框架**\n\n 访问地址：http://layout.jquery-dev.com/index.cfm \n demo：http://layout.jquery-dev.com/demos.cfm\n 可以满足多种复杂或者简单的布局，支持拖拉操作：\n\n![Alt text](http://soujava.com/images/bujv.jpg \"git push\")\n\n**2、表格框架**\n2.1、SlickGrid（https://github.com/Celebio/SlickGrid）\n\n \t1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n\n \n![Alt text](http://soujava.com/images/biaoge1.jpg \"表格\")\n\n![Alt text](http://soujava.com/images/biaoge2.jpg \"表格\")\n\n   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴\n\n![Alt text](http://soujava.com/images/biaoge3.jpg \"表格\")\n\t\n   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间\n\t\t\n![Alt text](http://soujava.com/images/biaoge4.jpg \"表格\")\n\n2.2、 paramquery（http://paramquery.com/grid）\n\t\n  1)、表格拖拉控制宽度、排序、可编辑\n\n![Alt text](http://soujava.com/images/biaoge5.jpg \"表格\")\n\n  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条\n\t\n![Alt text](http://soujava.com/images/biaoge6.jpg \"表格\")\n\t\n\t3)、可以对表格头部进行复杂的嵌套汇总显示：\n\t\n![Alt text](http://soujava.com/images/biaoge9.jpg \"表格\")\n\n2.3、 jqwidgets（http://www.jqwidgets.com/）\n\n\t这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\t\n\tDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n\n![Alt text](http://soujava.com/images/jqwidgets.png \"表格\")\n\n**3、界面风格**\n\n3.1、 semantic-ui (http://semantic-ui.com/) \n\n3.2、 topcoat (http://topcoat.io/topcoat/) \n\n","slug":"2016-06-30-界面框架","published":1,"updated":"2017-01-11T02:06:24.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqo000dgco0rb1zgdjh","content":"<p><strong>1、布局框架</strong></p>\n<p> 访问地址：<a href=\"http://layout.jquery-dev.com/index.cfm\" target=\"_blank\" rel=\"external\">http://layout.jquery-dev.com/index.cfm</a><br> demo：<a href=\"http://layout.jquery-dev.com/demos.cfm\" target=\"_blank\" rel=\"external\">http://layout.jquery-dev.com/demos.cfm</a><br> 可以满足多种复杂或者简单的布局，支持拖拉操作：</p>\n<p><img src=\"http://soujava.com/images/bujv.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n<p><strong>2、表格框架</strong><br>2.1、SlickGrid（<a href=\"https://github.com/Celebio/SlickGrid）\" target=\"_blank\" rel=\"external\">https://github.com/Celebio/SlickGrid）</a></p>\n<pre><code>1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n</code></pre><p><img src=\"http://soujava.com/images/biaoge1.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p><img src=\"http://soujava.com/images/biaoge2.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴</p>\n<p><img src=\"http://soujava.com/images/biaoge3.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间</p>\n<p><img src=\"http://soujava.com/images/biaoge4.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.2、 paramquery（<a href=\"http://paramquery.com/grid）\" target=\"_blank\" rel=\"external\">http://paramquery.com/grid）</a></p>\n<p>  1)、表格拖拉控制宽度、排序、可编辑</p>\n<p><img src=\"http://soujava.com/images/biaoge5.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条</p>\n<p><img src=\"http://soujava.com/images/biaoge6.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<pre><code>3)、可以对表格头部进行复杂的嵌套汇总显示：\n</code></pre><p><img src=\"http://soujava.com/images/biaoge9.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.3、 jqwidgets（<a href=\"http://www.jqwidgets.com/）\" target=\"_blank\" rel=\"external\">http://www.jqwidgets.com/）</a></p>\n<pre><code>这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\nDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n</code></pre><p><img src=\"http://soujava.com/images/jqwidgets.png\" alt=\"Alt text\" title=\"表格\"></p>\n<p><strong>3、界面风格</strong></p>\n<p>3.1、 semantic-ui (<a href=\"http://semantic-ui.com/\" target=\"_blank\" rel=\"external\">http://semantic-ui.com/</a>) </p>\n<p>3.2、 topcoat (<a href=\"http://topcoat.io/topcoat/\" target=\"_blank\" rel=\"external\">http://topcoat.io/topcoat/</a>) </p>\n","excerpt":"","more":"<p><strong>1、布局框架</strong></p>\n<p> 访问地址：<a href=\"http://layout.jquery-dev.com/index.cfm\">http://layout.jquery-dev.com/index.cfm</a><br> demo：<a href=\"http://layout.jquery-dev.com/demos.cfm\">http://layout.jquery-dev.com/demos.cfm</a><br> 可以满足多种复杂或者简单的布局，支持拖拉操作：</p>\n<p><img src=\"http://soujava.com/images/bujv.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n<p><strong>2、表格框架</strong><br>2.1、SlickGrid（<a href=\"https://github.com/Celebio/SlickGrid）\">https://github.com/Celebio/SlickGrid）</a></p>\n<pre><code>1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n</code></pre><p><img src=\"http://soujava.com/images/biaoge1.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p><img src=\"http://soujava.com/images/biaoge2.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴</p>\n<p><img src=\"http://soujava.com/images/biaoge3.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间</p>\n<p><img src=\"http://soujava.com/images/biaoge4.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.2、 paramquery（<a href=\"http://paramquery.com/grid）\">http://paramquery.com/grid）</a></p>\n<p>  1)、表格拖拉控制宽度、排序、可编辑</p>\n<p><img src=\"http://soujava.com/images/biaoge5.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条</p>\n<p><img src=\"http://soujava.com/images/biaoge6.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<pre><code>3)、可以对表格头部进行复杂的嵌套汇总显示：\n</code></pre><p><img src=\"http://soujava.com/images/biaoge9.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.3、 jqwidgets（<a href=\"http://www.jqwidgets.com/）\">http://www.jqwidgets.com/）</a></p>\n<pre><code>这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\nDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n</code></pre><p><img src=\"http://soujava.com/images/jqwidgets.png\" alt=\"Alt text\" title=\"表格\"></p>\n<p><strong>3、界面风格</strong></p>\n<p>3.1、 semantic-ui (<a href=\"http://semantic-ui.com/\">http://semantic-ui.com/</a>) </p>\n<p>3.2、 topcoat (<a href=\"http://topcoat.io/topcoat/\">http://topcoat.io/topcoat/</a>) </p>\n"},{"title":"关闭父窗口刷新子窗口","date":"2016-06-30T08:21:45.000Z","_content":"比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。\n\n**父窗口-index.html**\n\n     <html>  \n     <head>  \n      <title>index.htmll</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    \t<SCRIPT LANGUAGE=\"JavaScript\">  \n    \t<!--   \n    \tfunction clicks(){   \n    \t window.open(\"other.html\");   \n    \t}   \n    \t//-->  \n    \t</SCRIPT>  \n     </head>  \n     <body>  \n     <a  onClick=\"clicks();\" target=\"_blank\">选择数据</a>  \n     </body>  \n    </html>  \n\n**子窗口-other.html**\n\n     <html>  \n     <head>  \n      <title>子窗口</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    <SCRIPT LANGUAGE=\"JavaScript\">  \n    <!--   \n    function Close()   \n    {\n      window.opener.location.href=\"index.html\";\n    }\n    //-->  \n    </script>  \n     </head>  \n     <body>  \n     <a href=\"javascript:Close();\">关闭当前子窗口，打开父窗口</a>  \n     </body>  \n    </html>  \n    ","source":"_posts/2016-06-30-关闭父窗口刷新子窗口.md","raw":"---\ntitle: 关闭父窗口刷新子窗口\ndate: 2016-06-30 16:21:45\ncategories: javascript\ntags: javascript\n---\n比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。\n\n**父窗口-index.html**\n\n     <html>  \n     <head>  \n      <title>index.htmll</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    \t<SCRIPT LANGUAGE=\"JavaScript\">  \n    \t<!--   \n    \tfunction clicks(){   \n    \t window.open(\"other.html\");   \n    \t}   \n    \t//-->  \n    \t</SCRIPT>  \n     </head>  \n     <body>  \n     <a  onClick=\"clicks();\" target=\"_blank\">选择数据</a>  \n     </body>  \n    </html>  \n\n**子窗口-other.html**\n\n     <html>  \n     <head>  \n      <title>子窗口</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    <SCRIPT LANGUAGE=\"JavaScript\">  \n    <!--   \n    function Close()   \n    {\n      window.opener.location.href=\"index.html\";\n    }\n    //-->  \n    </script>  \n     </head>  \n     <body>  \n     <a href=\"javascript:Close();\">关闭当前子窗口，打开父窗口</a>  \n     </body>  \n    </html>  \n    ","slug":"2016-06-30-关闭父窗口刷新子窗口","published":1,"updated":"2017-01-11T02:06:24.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqq000ggco091vvttle","content":"<p>比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。</p>\n<p><strong>父窗口-index.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;index.htmll&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n    &lt;!--   \n    function clicks(){   \n     window.open(&quot;other.html&quot;);   \n    }   \n    //--&gt;  \n    &lt;/SCRIPT&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a  onClick=&quot;clicks();&quot; target=&quot;_blank&quot;&gt;选择数据&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre><p><strong>子窗口-other.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;子窗口&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n&lt;!--   \nfunction Close()   \n{\n  window.opener.location.href=&quot;index.html&quot;;\n}\n//--&gt;  \n&lt;/script&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a href=&quot;javascript:Close();&quot;&gt;关闭当前子窗口，打开父窗口&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>","excerpt":"","more":"<p>比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。</p>\n<p><strong>父窗口-index.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;index.htmll&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n    &lt;!--   \n    function clicks(){   \n     window.open(&quot;other.html&quot;);   \n    }   \n    //--&gt;  \n    &lt;/SCRIPT&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a  onClick=&quot;clicks();&quot; target=&quot;_blank&quot;&gt;选择数据&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre><p><strong>子窗口-other.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;子窗口&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n&lt;!--   \nfunction Close()   \n{\n  window.opener.location.href=&quot;index.html&quot;;\n}\n//--&gt;  \n&lt;/script&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a href=&quot;javascript:Close();&quot;&gt;关闭当前子窗口，打开父窗口&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>"},{"title":"页面中添加'ENTER'键点击事件","date":"2016-06-30T08:31:17.000Z","_content":"通常有以下场景：\n当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。\n那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！\n\n**jquery**\n\n\t$(\"body\").keydown(function(e){\n        if(e.keyCode==\"13\"){\n            alert('点击了Enter键');\n        }\n    });\n\n**javascript**\n\n\tdocument.body.onclick=function(){\n        if(e.keyCode==\"13\"){\n           alert('点击了Enter键');\n        }\n    };","source":"_posts/2016-06-30-页面中添加-ENTER-键点击事件.md","raw":"---\ntitle: 页面中添加'ENTER'键点击事件\ndate: 2016-06-30 16:31:17\ncategories: javascript\ntags: 添加enter事件\n---\n通常有以下场景：\n当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。\n那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！\n\n**jquery**\n\n\t$(\"body\").keydown(function(e){\n        if(e.keyCode==\"13\"){\n            alert('点击了Enter键');\n        }\n    });\n\n**javascript**\n\n\tdocument.body.onclick=function(){\n        if(e.keyCode==\"13\"){\n           alert('点击了Enter键');\n        }\n    };","slug":"2016-06-30-页面中添加-ENTER-键点击事件","published":1,"updated":"2017-01-11T02:06:24.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqs000jgco0mvvxd5cj","content":"<p>通常有以下场景：<br>当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。<br>那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！</p>\n<p><strong>jquery</strong></p>\n<pre><code>$(&quot;body&quot;).keydown(function(e){\n    if(e.keyCode==&quot;13&quot;){\n        alert(&apos;点击了Enter键&apos;);\n    }\n});\n</code></pre><p><strong>javascript</strong></p>\n<pre><code>document.body.onclick=function(){\n    if(e.keyCode==&quot;13&quot;){\n       alert(&apos;点击了Enter键&apos;);\n    }\n};\n</code></pre>","excerpt":"","more":"<p>通常有以下场景：<br>当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。<br>那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！</p>\n<p><strong>jquery</strong></p>\n<pre><code>$(&quot;body&quot;).keydown(function(e){\n    if(e.keyCode==&quot;13&quot;){\n        alert(&apos;点击了Enter键&apos;);\n    }\n});\n</code></pre><p><strong>javascript</strong></p>\n<pre><code>document.body.onclick=function(){\n    if(e.keyCode==&quot;13&quot;){\n       alert(&apos;点击了Enter键&apos;);\n    }\n};\n</code></pre>"},{"title":"CentOS-6.4内核升级操作","date":"2016-08-19T08:00:13.000Z","_content":"Linux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。\n```java\n\t注意：\n     如果在make menuconfig步骤报错，可尝试以下方法：\n     1、修改scripts/kconfig/Makefile 文件\n     2、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo\n```\n**一、先查看当前centos的系统内核**\n\n![Alt text](http://soujava.com/images/linuxKenel1.png)\n\n**二、下载内核包，如：linux-3.4.56.tar.xz**\n\t\n```java\n\thttps://www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz\n```\n\n**三、安装内核**\n```java\n\t# tar -Jxvf linux-3.4.56.tar.xz\n\t# mv linux-3.4.56 /usr/src/linux-3.4.56\n\t# cd linux-3.4.56\n\t# make mrproper #清除环境变量\n\t# make menuconfig \n\t# make clean\n\t# make bzImage\n\t# make modules\n\t# make modules_install\n\t# make install\n```\n\n**四、编辑/etc/grub.conf文件，将default=1改成default=0**\n\t\n\n**五、重启系统并检查内核**\n","source":"_posts/CentOS-6-4内核升级操作.md","raw":"---\ntitle: CentOS-6.4内核升级操作\ndate: 2016-08-19 16:00:13\ncategories: Linux\ntags: Linux\n---\nLinux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。\n```java\n\t注意：\n     如果在make menuconfig步骤报错，可尝试以下方法：\n     1、修改scripts/kconfig/Makefile 文件\n     2、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo\n```\n**一、先查看当前centos的系统内核**\n\n![Alt text](http://soujava.com/images/linuxKenel1.png)\n\n**二、下载内核包，如：linux-3.4.56.tar.xz**\n\t\n```java\n\thttps://www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz\n```\n\n**三、安装内核**\n```java\n\t# tar -Jxvf linux-3.4.56.tar.xz\n\t# mv linux-3.4.56 /usr/src/linux-3.4.56\n\t# cd linux-3.4.56\n\t# make mrproper #清除环境变量\n\t# make menuconfig \n\t# make clean\n\t# make bzImage\n\t# make modules\n\t# make modules_install\n\t# make install\n```\n\n**四、编辑/etc/grub.conf文件，将default=1改成default=0**\n\t\n\n**五、重启系统并检查内核**\n","slug":"CentOS-6-4内核升级操作","published":1,"updated":"2017-01-11T02:06:24.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqt000mgco0iwipjbkl","content":"<p>Linux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">    如果在make menuconfig步骤报错，可尝试以下方法：</div><div class=\"line\">    <span class=\"number\">1</span>、修改scripts/kconfig/Makefile 文件</div><div class=\"line\">    <span class=\"number\">2</span>、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo</div></pre></td></tr></table></figure></p>\n<p><strong>一、先查看当前centos的系统内核</strong></p>\n<p><img src=\"http://soujava.com/images/linuxKenel1.png\" alt=\"Alt text\"></p>\n<p><strong>二、下载内核包，如：linux-3.4.56.tar.xz</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"comment\">//www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz</span></div></pre></td></tr></table></figure>\n<p><strong>三、安装内核</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tar -Jxvf linux-3.4.56.tar.xz</div><div class=\"line\"># mv linux-3.4.56 /usr/src/linux-3.4.56</div><div class=\"line\"># cd linux-3.4.56</div><div class=\"line\"># make mrproper #清除环境变量</div><div class=\"line\"># make menuconfig </div><div class=\"line\"># make clean</div><div class=\"line\"># make bzImage</div><div class=\"line\"># make modules</div><div class=\"line\"># make modules_install</div><div class=\"line\"># make install</div></pre></td></tr></table></figure></p>\n<p><strong>四、编辑/etc/grub.conf文件，将default=1改成default=0</strong></p>\n<p><strong>五、重启系统并检查内核</strong></p>\n","excerpt":"","more":"<p>Linux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">    如果在make menuconfig步骤报错，可尝试以下方法：</div><div class=\"line\">    <span class=\"number\">1</span>、修改scripts/kconfig/Makefile 文件</div><div class=\"line\">    <span class=\"number\">2</span>、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo</div></pre></td></tr></table></figure></p>\n<p><strong>一、先查看当前centos的系统内核</strong></p>\n<p><img src=\"http://soujava.com/images/linuxKenel1.png\" alt=\"Alt text\"></p>\n<p><strong>二、下载内核包，如：linux-3.4.56.tar.xz</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"comment\">//www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz</span></div></pre></td></tr></table></figure>\n<p><strong>三、安装内核</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tar -Jxvf linux-3.4.56.tar.xz</div><div class=\"line\"># mv linux-3.4.56 /usr/src/linux-3.4.56</div><div class=\"line\"># cd linux-3.4.56</div><div class=\"line\"># make mrproper #清除环境变量</div><div class=\"line\"># make menuconfig </div><div class=\"line\"># make clean</div><div class=\"line\"># make bzImage</div><div class=\"line\"># make modules</div><div class=\"line\"># make modules_install</div><div class=\"line\"># make install</div></pre></td></tr></table></figure></p>\n<p><strong>四、编辑/etc/grub.conf文件，将default=1改成default=0</strong></p>\n<p><strong>五、重启系统并检查内核</strong></p>\n"},{"title":"Linux双网卡配置(内外网同时访问)","date":"2016-08-17T02:28:50.000Z","_content":"\n事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n**一、Ubuntu篇**\n\n1、进入/etc/network目录中，编辑interfaces文件\n\n\n![](http://soujava.com/images/linuxInter0.png)\n\n\n2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息\n\t\n![](http://soujava.com/images/linuxInter1.png)\n\n3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)\n\n\t>vim /etc/resolvconf/resolv.conf.d/base\n\n![](http://soujava.com/images/linuxInter2.png)\n\n4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。\n\n![](http://soujava.com/images/linuxInter4.png)\n\n5、把外网网关地址添加为默认路由，同时删除内网网关的路由\n\n\t>route add default  gw 192.168.1.1\n\t\n\t>route del default  gw 192.168.0.253\n\n6、路由配置完成后，运行route命令我们可以看到default变成了eth1\n\n![](http://soujava.com/images/linuxInter3.png)\n\n7、重启网络服务\n\n\t>/etc/init.d/networking restart\n\n8、总结：\n\n- 查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备\n- 配置eth1网卡配置文件\n- 添加外网dns地址\n- 设置外网网关为默认路由\n- 重启网络服务\n\n\n注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。\n\n\n**一、Cent0S篇**\n\n1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。\n\n3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。\n\n\t>cp ifcfg-eth0 ifcfg-eth1\n\n4、修改ifcfg-eth1配置文件,具体信息如下\n```java\n\tDEVICE=eth1\n\tTYPE=Ethernet\n\tNOBOOT=yes\n\tNM_CONTROLLED=yes\n\tBOOTPROTO=none\n\tIPADDR=192.168.*.*\n\tPREFIX=24\n\tGATEWAY=192.168.*.*\n\tDEFROUTE=yes\t\n\tIPV4_FAILURE_FATAL=yes\n\tIPV6INIT=no\n\tNAME=\"System eth1\"\n\tDNS1=*.*.*.*\n\tHWADDR=你的虚拟机的网卡设备的mac地址\n\tLAST_CONNECT=1465192940\n\tUSERCTL=no\t\n```\n\n5、重启网络服务(下面两条命令都可以)\n\t> service network restart\n\t> /etc/init.d/network restart","source":"_posts/Linux双网卡配置-内外网同时访问.md","raw":"---\ntitle: Linux双网卡配置(内外网同时访问)\ndate: 2016-08-17 10:28:50\ncategories: Linux\ntags: 网卡\n---\n\n事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n**一、Ubuntu篇**\n\n1、进入/etc/network目录中，编辑interfaces文件\n\n\n![](http://soujava.com/images/linuxInter0.png)\n\n\n2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息\n\t\n![](http://soujava.com/images/linuxInter1.png)\n\n3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)\n\n\t>vim /etc/resolvconf/resolv.conf.d/base\n\n![](http://soujava.com/images/linuxInter2.png)\n\n4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。\n\n![](http://soujava.com/images/linuxInter4.png)\n\n5、把外网网关地址添加为默认路由，同时删除内网网关的路由\n\n\t>route add default  gw 192.168.1.1\n\t\n\t>route del default  gw 192.168.0.253\n\n6、路由配置完成后，运行route命令我们可以看到default变成了eth1\n\n![](http://soujava.com/images/linuxInter3.png)\n\n7、重启网络服务\n\n\t>/etc/init.d/networking restart\n\n8、总结：\n\n- 查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备\n- 配置eth1网卡配置文件\n- 添加外网dns地址\n- 设置外网网关为默认路由\n- 重启网络服务\n\n\n注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。\n\n\n**一、Cent0S篇**\n\n1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。\n\n3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。\n\n\t>cp ifcfg-eth0 ifcfg-eth1\n\n4、修改ifcfg-eth1配置文件,具体信息如下\n```java\n\tDEVICE=eth1\n\tTYPE=Ethernet\n\tNOBOOT=yes\n\tNM_CONTROLLED=yes\n\tBOOTPROTO=none\n\tIPADDR=192.168.*.*\n\tPREFIX=24\n\tGATEWAY=192.168.*.*\n\tDEFROUTE=yes\t\n\tIPV4_FAILURE_FATAL=yes\n\tIPV6INIT=no\n\tNAME=\"System eth1\"\n\tDNS1=*.*.*.*\n\tHWADDR=你的虚拟机的网卡设备的mac地址\n\tLAST_CONNECT=1465192940\n\tUSERCTL=no\t\n```\n\n5、重启网络服务(下面两条命令都可以)\n\t> service network restart\n\t> /etc/init.d/network restart","slug":"Linux双网卡配置-内外网同时访问","published":1,"updated":"2017-01-11T02:06:24.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqu000pgco0e9d94l79","content":"<p>事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p><strong>一、Ubuntu篇</strong></p>\n<p>1、进入/etc/network目录中，编辑interfaces文件</p>\n<p><img src=\"http://soujava.com/images/linuxInter0.png\" alt=\"\"></p>\n<p>2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息</p>\n<p><img src=\"http://soujava.com/images/linuxInter1.png\" alt=\"\"></p>\n<p>3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)</p>\n<pre><code>&gt;vim /etc/resolvconf/resolv.conf.d/base\n</code></pre><p><img src=\"http://soujava.com/images/linuxInter2.png\" alt=\"\"></p>\n<p>4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。</p>\n<p><img src=\"http://soujava.com/images/linuxInter4.png\" alt=\"\"></p>\n<p>5、把外网网关地址添加为默认路由，同时删除内网网关的路由</p>\n<pre><code>&gt;route add default  gw 192.168.1.1\n\n&gt;route del default  gw 192.168.0.253\n</code></pre><p>6、路由配置完成后，运行route命令我们可以看到default变成了eth1</p>\n<p><img src=\"http://soujava.com/images/linuxInter3.png\" alt=\"\"></p>\n<p>7、重启网络服务</p>\n<pre><code>&gt;/etc/init.d/networking restart\n</code></pre><p>8、总结：</p>\n<ul>\n<li>查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备</li>\n<li>配置eth1网卡配置文件</li>\n<li>添加外网dns地址</li>\n<li>设置外网网关为默认路由</li>\n<li>重启网络服务</li>\n</ul>\n<p>注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。</p>\n<p><strong>一、Cent0S篇</strong></p>\n<p>1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。</p>\n<p>3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。</p>\n<pre><code>&gt;cp ifcfg-eth0 ifcfg-eth1\n</code></pre><p>4、修改ifcfg-eth1配置文件,具体信息如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=eth1</div><div class=\"line\">TYPE=Ethernet</div><div class=\"line\">NOBOOT=yes</div><div class=\"line\">NM_CONTROLLED=yes</div><div class=\"line\">BOOTPROTO=none</div><div class=\"line\">IPADDR=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">PREFIX=<span class=\"number\">24</span></div><div class=\"line\">GATEWAY=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">DEFROUTE=yes\t</div><div class=\"line\">IPV4_FAILURE_FATAL=yes</div><div class=\"line\">IPV6INIT=no</div><div class=\"line\">NAME=<span class=\"string\">\"System eth1\"</span></div><div class=\"line\">DNS1=*.*.*.*</div><div class=\"line\">HWADDR=你的虚拟机的网卡设备的mac地址</div><div class=\"line\">LAST_CONNECT=<span class=\"number\">1465192940</span></div><div class=\"line\">USERCTL=no</div></pre></td></tr></table></figure></p>\n<p>5、重启网络服务(下面两条命令都可以)</p>\n<pre><code>&gt; service network restart\n&gt; /etc/init.d/network restart\n</code></pre>","excerpt":"","more":"<p>事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p><strong>一、Ubuntu篇</strong></p>\n<p>1、进入/etc/network目录中，编辑interfaces文件</p>\n<p><img src=\"http://soujava.com/images/linuxInter0.png\" alt=\"\"></p>\n<p>2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息</p>\n<p><img src=\"http://soujava.com/images/linuxInter1.png\" alt=\"\"></p>\n<p>3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)</p>\n<pre><code>&gt;vim /etc/resolvconf/resolv.conf.d/base\n</code></pre><p><img src=\"http://soujava.com/images/linuxInter2.png\" alt=\"\"></p>\n<p>4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。</p>\n<p><img src=\"http://soujava.com/images/linuxInter4.png\" alt=\"\"></p>\n<p>5、把外网网关地址添加为默认路由，同时删除内网网关的路由</p>\n<pre><code>&gt;route add default  gw 192.168.1.1\n\n&gt;route del default  gw 192.168.0.253\n</code></pre><p>6、路由配置完成后，运行route命令我们可以看到default变成了eth1</p>\n<p><img src=\"http://soujava.com/images/linuxInter3.png\" alt=\"\"></p>\n<p>7、重启网络服务</p>\n<pre><code>&gt;/etc/init.d/networking restart\n</code></pre><p>8、总结：</p>\n<ul>\n<li>查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备</li>\n<li>配置eth1网卡配置文件</li>\n<li>添加外网dns地址</li>\n<li>设置外网网关为默认路由</li>\n<li>重启网络服务</li>\n</ul>\n<p>注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。</p>\n<p><strong>一、Cent0S篇</strong></p>\n<p>1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。</p>\n<p>3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。</p>\n<pre><code>&gt;cp ifcfg-eth0 ifcfg-eth1\n</code></pre><p>4、修改ifcfg-eth1配置文件,具体信息如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=eth1</div><div class=\"line\">TYPE=Ethernet</div><div class=\"line\">NOBOOT=yes</div><div class=\"line\">NM_CONTROLLED=yes</div><div class=\"line\">BOOTPROTO=none</div><div class=\"line\">IPADDR=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">PREFIX=<span class=\"number\">24</span></div><div class=\"line\">GATEWAY=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">DEFROUTE=yes\t</div><div class=\"line\">IPV4_FAILURE_FATAL=yes</div><div class=\"line\">IPV6INIT=no</div><div class=\"line\">NAME=<span class=\"string\">\"System eth1\"</span></div><div class=\"line\">DNS1=*.*.*.*</div><div class=\"line\">HWADDR=你的虚拟机的网卡设备的mac地址</div><div class=\"line\">LAST_CONNECT=<span class=\"number\">1465192940</span></div><div class=\"line\">USERCTL=no</div></pre></td></tr></table></figure></p>\n<p>5、重启网络服务(下面两条命令都可以)</p>\n<pre><code>&gt; service network restart\n&gt; /etc/init.d/network restart\n</code></pre>"},{"title":"Linux开机启动后经常需要配置网卡","date":"2016-07-25T09:27:42.000Z","_content":"在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。\n\n![Alt text](http://soujava.com/images/wangka.jpg)\n\n然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！\n\n![Alt text](http://soujava.com/images/wankapeizhi.jpg)\n\n解决方法：\n使用如下命令编辑网卡信息：\n``` java\n   vim /etc/sysconfig/network-scripts/ifcfg-eth0\n```\n网卡信息的内容大致如下：\n```\n\tDEVICE=\"eth0\"\n\tTYPE=ethernet\n\tUUID=1221231K-4DFSD-8SDFA\n\tONBOOT=\"yes\"\n\tIPADDR=192.168.1.152\n\tNETMASK=255.255.255.0\n\tGATEWAY=192.168.1.1\n\tBOOTPROTO=static\n```\n然后在网卡信息中找到\"NOBOOT=no\"配置选项，改成\"NOBOOT=yes\"\n\n再重启电脑后就不需要再次手动配置激活网卡了！","source":"_posts/Linux开机启动后经常需要配置网卡.md","raw":"---\ntitle: Linux开机启动后经常需要配置网卡\ndate: 2016-07-25 17:27:42\ncategories: Linux\ntags: 网卡\n---\n在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。\n\n![Alt text](http://soujava.com/images/wangka.jpg)\n\n然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！\n\n![Alt text](http://soujava.com/images/wankapeizhi.jpg)\n\n解决方法：\n使用如下命令编辑网卡信息：\n``` java\n   vim /etc/sysconfig/network-scripts/ifcfg-eth0\n```\n网卡信息的内容大致如下：\n```\n\tDEVICE=\"eth0\"\n\tTYPE=ethernet\n\tUUID=1221231K-4DFSD-8SDFA\n\tONBOOT=\"yes\"\n\tIPADDR=192.168.1.152\n\tNETMASK=255.255.255.0\n\tGATEWAY=192.168.1.1\n\tBOOTPROTO=static\n```\n然后在网卡信息中找到\"NOBOOT=no\"配置选项，改成\"NOBOOT=yes\"\n\n再重启电脑后就不需要再次手动配置激活网卡了！","slug":"Linux开机启动后经常需要配置网卡","published":1,"updated":"2017-01-11T02:06:24.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddqw000rgco0r7z6xcb7","content":"<p>在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。</p>\n<p><img src=\"http://soujava.com/images/wangka.jpg\" alt=\"Alt text\"></p>\n<p>然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！</p>\n<p><img src=\"http://soujava.com/images/wankapeizhi.jpg\" alt=\"Alt text\"></p>\n<p>解决方法：<br>使用如下命令编辑网卡信息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure></p>\n<p>网卡信息的内容大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=&quot;eth0&quot;</div><div class=\"line\">TYPE=ethernet</div><div class=\"line\">UUID=1221231K-4DFSD-8SDFA</div><div class=\"line\">ONBOOT=&quot;yes&quot;</div><div class=\"line\">IPADDR=192.168.1.152</div><div class=\"line\">NETMASK=255.255.255.0</div><div class=\"line\">GATEWAY=192.168.1.1</div><div class=\"line\">BOOTPROTO=static</div></pre></td></tr></table></figure></p>\n<p>然后在网卡信息中找到”NOBOOT=no”配置选项，改成”NOBOOT=yes”</p>\n<p>再重启电脑后就不需要再次手动配置激活网卡了！</p>\n","excerpt":"","more":"<p>在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。</p>\n<p><img src=\"http://soujava.com/images/wangka.jpg\" alt=\"Alt text\"></p>\n<p>然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！</p>\n<p><img src=\"http://soujava.com/images/wankapeizhi.jpg\" alt=\"Alt text\"></p>\n<p>解决方法：<br>使用如下命令编辑网卡信息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure></p>\n<p>网卡信息的内容大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=&quot;eth0&quot;</div><div class=\"line\">TYPE=ethernet</div><div class=\"line\">UUID=1221231K-4DFSD-8SDFA</div><div class=\"line\">ONBOOT=&quot;yes&quot;</div><div class=\"line\">IPADDR=192.168.1.152</div><div class=\"line\">NETMASK=255.255.255.0</div><div class=\"line\">GATEWAY=192.168.1.1</div><div class=\"line\">BOOTPROTO=static</div></pre></td></tr></table></figure></p>\n<p>然后在网卡信息中找到”NOBOOT=no”配置选项，改成”NOBOOT=yes”</p>\n<p>再重启电脑后就不需要再次手动配置激活网卡了！</p>\n"},{"title":"Linux查看端口占用","date":"2016-08-17T03:30:49.000Z","_content":"在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。\n\n一、分步操作\n\n1. 先使用下面命令，查看当前环境的所有进程\n\t\n\t>netstat  -apn\n\n2. 然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止\n\n\t>kill -9 pid号\n\t\n二、快捷操作\n\n 使用如下命令查看对应的端口是否被占用\n\n\t>netstat  -apn | grep  protNO（端口号）\n\n例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。\n\n\t>[maps@localhost bin]$ netstat -apn|grep 8983\n    >(Not all processes could be identified, non-owned process info\n    >will not be shown, you would have to be root to see it all.)\n    >tcp6       0      0 :::8983                 :::*                    LISTEN      3272/java \n    \n  我们可以看到占用8983端口的进程id号为:3272\n \n  然后通过命令查看对应进程号的信息\n  \n\t>ps -aux|grep 3272\n\n\t[maps@localhost bin]$ ps -aux|grep 3272\n    >maps      3272  0.4 11.3 2596728 173412 pts/0  Sl   22:04   0:03 java -server -Xms512m -Xmx512m -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-6.3.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M -Dsolr.log.dir=/usr/local/develop/soft/solr-6.3.0/server/logs -Djetty.port=8983 -DSTOP.PORT=7983 -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-6.3.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-6.3.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-6.3.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-6.3.0/bin/oom_solr.sh 8983 /usr/local/develop/soft/solr-6.3.0/server/logs -jar start.jar --module=http\n    >maps     30521  0.0  0.0 112660   964 pts/0    R+   22:15   0:00 grep --color=auto 3272","source":"_posts/Linux查看端口占用.md","raw":"---\ntitle: Linux查看端口占用\ndate: 2016-08-17 11:30:49\ncategories: Linux\ntags: 网卡\n---\n在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。\n\n一、分步操作\n\n1. 先使用下面命令，查看当前环境的所有进程\n\t\n\t>netstat  -apn\n\n2. 然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止\n\n\t>kill -9 pid号\n\t\n二、快捷操作\n\n 使用如下命令查看对应的端口是否被占用\n\n\t>netstat  -apn | grep  protNO（端口号）\n\n例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。\n\n\t>[maps@localhost bin]$ netstat -apn|grep 8983\n    >(Not all processes could be identified, non-owned process info\n    >will not be shown, you would have to be root to see it all.)\n    >tcp6       0      0 :::8983                 :::*                    LISTEN      3272/java \n    \n  我们可以看到占用8983端口的进程id号为:3272\n \n  然后通过命令查看对应进程号的信息\n  \n\t>ps -aux|grep 3272\n\n\t[maps@localhost bin]$ ps -aux|grep 3272\n    >maps      3272  0.4 11.3 2596728 173412 pts/0  Sl   22:04   0:03 java -server -Xms512m -Xmx512m -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-6.3.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M -Dsolr.log.dir=/usr/local/develop/soft/solr-6.3.0/server/logs -Djetty.port=8983 -DSTOP.PORT=7983 -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-6.3.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-6.3.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-6.3.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-6.3.0/bin/oom_solr.sh 8983 /usr/local/develop/soft/solr-6.3.0/server/logs -jar start.jar --module=http\n    >maps     30521  0.0  0.0 112660   964 pts/0    R+   22:15   0:00 grep --color=auto 3272","slug":"Linux查看端口占用","published":1,"updated":"2017-01-20T02:39:55.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddr2000vgco08fpoj1bg","content":"<p>在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。</p>\n<p>一、分步操作</p>\n<ol>\n<li><p>先使用下面命令，查看当前环境的所有进程</p>\n<blockquote>\n<p>netstat  -apn</p>\n</blockquote>\n</li>\n<li><p>然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止</p>\n<blockquote>\n<p>kill -9 pid号</p>\n</blockquote>\n</li>\n</ol>\n<p>二、快捷操作</p>\n<p> 使用如下命令查看对应的端口是否被占用</p>\n<pre><code>&gt;netstat  -apn | grep  protNO（端口号）\n</code></pre><p>例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。</p>\n<pre><code>&gt;[maps@localhost bin]$ netstat -apn|grep 8983\n&gt;(Not all processes could be identified, non-owned process info\n&gt;will not be shown, you would have to be root to see it all.)\n&gt;tcp6       0      0 :::8983                 :::*                    LISTEN      3272/java \n</code></pre><p>  我们可以看到占用8983端口的进程id号为:3272</p>\n<p>  然后通过命令查看对应进程号的信息</p>\n<pre><code>&gt;ps -aux|grep 3272\n\n[maps@localhost bin]$ ps -aux|grep 3272\n&gt;maps      3272  0.4 11.3 2596728 173412 pts/0  Sl   22:04   0:03 java -server -Xms512m -Xmx512m -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-6.3.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M -Dsolr.log.dir=/usr/local/develop/soft/solr-6.3.0/server/logs -Djetty.port=8983 -DSTOP.PORT=7983 -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-6.3.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-6.3.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-6.3.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-6.3.0/bin/oom_solr.sh 8983 /usr/local/develop/soft/solr-6.3.0/server/logs -jar start.jar --module=http\n&gt;maps     30521  0.0  0.0 112660   964 pts/0    R+   22:15   0:00 grep --color=auto 3272\n</code></pre>","excerpt":"","more":"<p>在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。</p>\n<p>一、分步操作</p>\n<ol>\n<li><p>先使用下面命令，查看当前环境的所有进程</p>\n<blockquote>\n<p>netstat  -apn</p>\n</blockquote>\n</li>\n<li><p>然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止</p>\n<blockquote>\n<p>kill -9 pid号</p>\n</blockquote>\n</li>\n</ol>\n<p>二、快捷操作</p>\n<p> 使用如下命令查看对应的端口是否被占用</p>\n<pre><code>&gt;netstat  -apn | grep  protNO（端口号）\n</code></pre><p>例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。</p>\n<pre><code>&gt;[maps@localhost bin]$ netstat -apn|grep 8983\n&gt;(Not all processes could be identified, non-owned process info\n&gt;will not be shown, you would have to be root to see it all.)\n&gt;tcp6       0      0 :::8983                 :::*                    LISTEN      3272/java \n</code></pre><p>  我们可以看到占用8983端口的进程id号为:3272</p>\n<p>  然后通过命令查看对应进程号的信息</p>\n<pre><code>&gt;ps -aux|grep 3272\n\n[maps@localhost bin]$ ps -aux|grep 3272\n&gt;maps      3272  0.4 11.3 2596728 173412 pts/0  Sl   22:04   0:03 java -server -Xms512m -Xmx512m -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-6.3.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M -Dsolr.log.dir=/usr/local/develop/soft/solr-6.3.0/server/logs -Djetty.port=8983 -DSTOP.PORT=7983 -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-6.3.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-6.3.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-6.3.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-6.3.0/bin/oom_solr.sh 8983 /usr/local/develop/soft/solr-6.3.0/server/logs -jar start.jar --module=http\n&gt;maps     30521  0.0  0.0 112660   964 pts/0    R+   22:15   0:00 grep --color=auto 3272\n</code></pre>"},{"title":"Maven忽略其他依赖jar包插件-maven-enforcer-plugin","date":"2016-09-20T02:54:31.000Z","_content":"我们在开发产品时，可能不同人开发不同的功能模块，比如：\n\n•现在A开发a模块，B开发b模块\n\n•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本\n\n•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中\n\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\n•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示\n\n\n其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了\n\n```java\n\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-enforcer-plugin</artifactId>\n\t\t\t<version>1.2</version>\n\t\t\t<executions>\n\t\t\t\t<execution>\n\t\t\t\t\t<id>enforce-banned-dependencies</id>\n\t\t\t\t\t<goals>\n\t\t\t\t\t\t<goal>enforce</goal>\n\t\t\t\t\t</goals>\n\t\t\t\t\t<configuration>\n\t\t\t\t\t\t<rules>\n\t\t\t\t\t\t\t<bannedDependencies>\n\t\t\t\t\t\t\t\t<searchTransitive>true</searchTransitive>\n\t\t\t\t\t\t\t\t<excludes>\n\t\t\t\t\t\t\t\t\t<!--在下面添加忽略的相关jar包 -->\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:dictionary:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:flow</exclude>\n\t\t\t\t\t\t\t\t</excludes>\n\t\t\t\t\t\t\t</bannedDependencies>\n\t\t\t\t\t\t</rules>\n\t\t\t\t\t\t<fail>true</fail>\n\t\t\t\t\t</configuration>\n\t\t\t\t</execution>\n\t\t\t</executions>\n\t</plugin>\n```\n","source":"_posts/Maven忽略其他依赖jar包插件.md","raw":"---\ntitle: Maven忽略其他依赖jar包插件-maven-enforcer-plugin\ndate: 2016-09-20 10:54:31\ncategories: Maven\ntags: Maven插件\n---\n我们在开发产品时，可能不同人开发不同的功能模块，比如：\n\n•现在A开发a模块，B开发b模块\n\n•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本\n\n•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中\n\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\n•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示\n\n\n其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了\n\n```java\n\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-enforcer-plugin</artifactId>\n\t\t\t<version>1.2</version>\n\t\t\t<executions>\n\t\t\t\t<execution>\n\t\t\t\t\t<id>enforce-banned-dependencies</id>\n\t\t\t\t\t<goals>\n\t\t\t\t\t\t<goal>enforce</goal>\n\t\t\t\t\t</goals>\n\t\t\t\t\t<configuration>\n\t\t\t\t\t\t<rules>\n\t\t\t\t\t\t\t<bannedDependencies>\n\t\t\t\t\t\t\t\t<searchTransitive>true</searchTransitive>\n\t\t\t\t\t\t\t\t<excludes>\n\t\t\t\t\t\t\t\t\t<!--在下面添加忽略的相关jar包 -->\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:dictionary:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:flow</exclude>\n\t\t\t\t\t\t\t\t</excludes>\n\t\t\t\t\t\t\t</bannedDependencies>\n\t\t\t\t\t\t</rules>\n\t\t\t\t\t\t<fail>true</fail>\n\t\t\t\t\t</configuration>\n\t\t\t\t</execution>\n\t\t\t</executions>\n\t</plugin>\n```\n","slug":"Maven忽略其他依赖jar包插件","published":1,"updated":"2017-01-11T02:06:24.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddr3000wgco03boi4988","content":"<p>我们在开发产品时，可能不同人开发不同的功能模块，比如：</p>\n<p>•现在A开发a模块，B开发b模块</p>\n<p>•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本</p>\n<p>•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中<br>    <exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude></p>\n<p>•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示</p>\n<p>其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;plugin&gt;</div><div class=\"line\">\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">\t\t&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;</div><div class=\"line\">\t\t&lt;version&gt;1.2&lt;/version&gt;</div><div class=\"line\">\t\t&lt;executions&gt;</div><div class=\"line\">\t\t\t&lt;execution&gt;</div><div class=\"line\">\t\t\t\t&lt;id&gt;enforce-banned-dependencies&lt;/id&gt;</div><div class=\"line\">\t\t\t\t&lt;goals&gt;</div><div class=\"line\">\t\t\t\t\t&lt;goal&gt;enforce&lt;/goal&gt;</div><div class=\"line\">\t\t\t\t&lt;/goals&gt;</div><div class=\"line\">\t\t\t\t&lt;configuration&gt;</div><div class=\"line\">\t\t\t\t\t&lt;rules&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;searchTransitive&gt;true&lt;/searchTransitive&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;!--在下面添加忽略的相关jar包 --&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:modelman:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:dictionary:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:flow&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;/excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;/bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/rules&gt;</div><div class=\"line\">\t\t\t\t\t&lt;fail&gt;true&lt;/fail&gt;</div><div class=\"line\">\t\t\t\t&lt;/configuration&gt;</div><div class=\"line\">\t\t\t&lt;/execution&gt;</div><div class=\"line\">\t\t&lt;/executions&gt;</div><div class=\"line\">&lt;/plugin&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>我们在开发产品时，可能不同人开发不同的功能模块，比如：</p>\n<p>•现在A开发a模块，B开发b模块</p>\n<p>•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本</p>\n<p>•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中<br>    <exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude></p>\n<p>•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示</p>\n<p>其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;plugin&gt;</div><div class=\"line\">\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">\t\t&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;</div><div class=\"line\">\t\t&lt;version&gt;1.2&lt;/version&gt;</div><div class=\"line\">\t\t&lt;executions&gt;</div><div class=\"line\">\t\t\t&lt;execution&gt;</div><div class=\"line\">\t\t\t\t&lt;id&gt;enforce-banned-dependencies&lt;/id&gt;</div><div class=\"line\">\t\t\t\t&lt;goals&gt;</div><div class=\"line\">\t\t\t\t\t&lt;goal&gt;enforce&lt;/goal&gt;</div><div class=\"line\">\t\t\t\t&lt;/goals&gt;</div><div class=\"line\">\t\t\t\t&lt;configuration&gt;</div><div class=\"line\">\t\t\t\t\t&lt;rules&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;searchTransitive&gt;true&lt;/searchTransitive&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;!--在下面添加忽略的相关jar包 --&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:modelman:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:dictionary:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:flow&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;/excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;/bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/rules&gt;</div><div class=\"line\">\t\t\t\t\t&lt;fail&gt;true&lt;/fail&gt;</div><div class=\"line\">\t\t\t\t&lt;/configuration&gt;</div><div class=\"line\">\t\t\t&lt;/execution&gt;</div><div class=\"line\">\t\t&lt;/executions&gt;</div><div class=\"line\">&lt;/plugin&gt;</div></pre></td></tr></table></figure>\n"},{"title":"Linux系统添加配置随开机启动的服务-rc.local配置","date":"2016-07-25T09:46:24.000Z","_content":"在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：\n\n1. 以root身份才能启动的服务\n2. 以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)\n\n**一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下**\n```java\n\ttomcat的安装路径：/usr/local/server/apache-tomcat-8\n```\n那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了\n```java\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：\n   \n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n**二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）**\n```java\n\tredis的安装路径：/usr/local/cache/redis-2.8.19\n```\n如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)\n```java\n\t/usr/local/cache/redis-2.8.19/src/redis-server\n```\n如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：\n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\tsu redis -c \"/usr/local/cache/redis-2.8.19/src/redis-server\"\n```\n**三、总结**\n我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？\n\nrc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。","source":"_posts/Linux系统添加配置随开机启动的服务.md","raw":"---\ntitle: Linux系统添加配置随开机启动的服务-rc.local配置\ndate: 2016-07-25 17:46:24\ncategories: Linux\ntags: 服务开机启动\n---\n在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：\n\n1. 以root身份才能启动的服务\n2. 以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)\n\n**一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下**\n```java\n\ttomcat的安装路径：/usr/local/server/apache-tomcat-8\n```\n那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了\n```java\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：\n   \n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n**二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）**\n```java\n\tredis的安装路径：/usr/local/cache/redis-2.8.19\n```\n如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)\n```java\n\t/usr/local/cache/redis-2.8.19/src/redis-server\n```\n如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：\n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\tsu redis -c \"/usr/local/cache/redis-2.8.19/src/redis-server\"\n```\n**三、总结**\n我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？\n\nrc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。","slug":"Linux系统添加配置随开机启动的服务","published":1,"updated":"2017-01-11T02:06:24.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddr40010gco0tfnoxid3","content":"<p>在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：</p>\n<ol>\n<li>以root身份才能启动的服务</li>\n<li>以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)</li>\n</ol>\n<p><strong>一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tomcat的安装路径：/usr/local/server/apache-tomcat-<span class=\"number\">8</span></div></pre></td></tr></table></figure></p>\n<p>那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis的安装路径：/usr/local/cache/redis-<span class=\"number\">2.8</span>.19</div></pre></td></tr></table></figure></p>\n<p>如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/cache/redis-<span class=\"number\">2.8</span>.19/src/redis-server</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">su redis -c <span class=\"string\">\"/usr/local/cache/redis-2.8.19/src/redis-server\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>三、总结</strong><br>我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？</p>\n<p>rc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。</p>\n","excerpt":"","more":"<p>在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：</p>\n<ol>\n<li>以root身份才能启动的服务</li>\n<li>以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)</li>\n</ol>\n<p><strong>一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tomcat的安装路径：/usr/local/server/apache-tomcat-<span class=\"number\">8</span></div></pre></td></tr></table></figure></p>\n<p>那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis的安装路径：/usr/local/cache/redis-<span class=\"number\">2.8</span>.19</div></pre></td></tr></table></figure></p>\n<p>如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/cache/redis-<span class=\"number\">2.8</span>.19/src/redis-server</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">su redis -c <span class=\"string\">\"/usr/local/cache/redis-2.8.19/src/redis-server\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>三、总结</strong><br>我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？</p>\n<p>rc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。</p>\n"},{"title":"Mysql--Lock wait timeout exceeded try restarting transaction","date":"2016-08-19T08:46:36.000Z","_content":"一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。\n查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。\n\n**一、临时解决办法**\n\n1.  执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword\n2.\t执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。\n3.\t执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。\n\n**二、Mysql数据库设置**\n\n1.\t设置innodb_lock_wait_timeout参数。通过show variables like 'innodb_lock_wait_timeout';查看当前设置的值。\n2.\t执行set global innodb_lock_wait_timeout=120;设置超时时间。\n3.\t设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。\n\n*注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！*\n\n","source":"_posts/Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction.md","raw":"---\ntitle: Mysql--Lock wait timeout exceeded try restarting transaction\ndate: 2016-08-19 16:46:36\ncategories: Mysql\ntags: Mysql\n---\n一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。\n查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。\n\n**一、临时解决办法**\n\n1.  执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword\n2.\t执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。\n3.\t执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。\n\n**二、Mysql数据库设置**\n\n1.\t设置innodb_lock_wait_timeout参数。通过show variables like 'innodb_lock_wait_timeout';查看当前设置的值。\n2.\t执行set global innodb_lock_wait_timeout=120;设置超时时间。\n3.\t设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。\n\n*注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！*\n\n","slug":"Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction","published":1,"updated":"2017-01-11T02:06:24.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddr60012gco00fpoemsi","content":"<p>一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。<br>查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。</p>\n<p><strong>一、临时解决办法</strong></p>\n<ol>\n<li>执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword</li>\n<li>执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。</li>\n<li>执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。</li>\n</ol>\n<p><strong>二、Mysql数据库设置</strong></p>\n<ol>\n<li>设置innodb_lock_wait_timeout参数。通过show variables like ‘innodb_lock_wait_timeout’;查看当前设置的值。</li>\n<li>执行set global innodb_lock_wait_timeout=120;设置超时时间。</li>\n<li>设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。</li>\n</ol>\n<p><em>注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！</em></p>\n","excerpt":"","more":"<p>一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。<br>查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。</p>\n<p><strong>一、临时解决办法</strong></p>\n<ol>\n<li>执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword</li>\n<li>执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。</li>\n<li>执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。</li>\n</ol>\n<p><strong>二、Mysql数据库设置</strong></p>\n<ol>\n<li>设置innodb_lock_wait_timeout参数。通过show variables like ‘innodb_lock_wait_timeout’;查看当前设置的值。</li>\n<li>执行set global innodb_lock_wait_timeout=120;设置超时时间。</li>\n<li>设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。</li>\n</ol>\n<p><em>注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！</em></p>\n"},{"title":"MySql安装后添加的用户不能远程连接登陆","date":"2016-08-19T08:23:54.000Z","_content":"\n**一、添加一个用户fileserver并授权操作**\n![Alt text](http://soujava.com/images/mysql1.png)\n\n*注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 *\n\n**二、查询刚才添加的用户是否存在**\n![Alt text](http://soujava.com/images/mysql2.png)\n\n*注：可以看到刚才的fileserver用户已经创建完毕 *\n\n**三、用刚才添加成功的用户登陆操作报异常**\n![Alt text](http://soujava.com/images/mysql3.png)\n\n*注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户*\n\n**四、在添加一个fileserver用户并分配可以本地localhost登录**\n![Alt text](http://soujava.com/images/mysql4.png)\n\n**五、再查下刚才创建的用户是否已经存在**\n![Alt text](http://soujava.com/images/mysql5.png)\n\n\n**六、再次用刚刚创建的fileserver登录操作，可以正常登录**\n![Alt text](http://soujava.com/images/mysql6.png)\n*注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 *\n\n**七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务**\n![Alt text](http://soujava.com/images/mysql7.png)\n*注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限*\n\n**八、在mysql配置文件中配置该IP的访问操作**\n![Alt text](http://soujava.com/images/mysql8.png)\n\n**九、配置完成后重启mysql服务**\n![Alt text](http://soujava.com/images/mysql9.png)\n\n**十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功**\n![Alt text](http://soujava.com/images/mysql10.png)","source":"_posts/MySql安装后添加的用户不能远程连接登陆.md","raw":"---\ntitle: MySql安装后添加的用户不能远程连接登陆\ndate: 2016-08-19 16:23:54\ncategories: Mysql\ntags: Mysql\n---\n\n**一、添加一个用户fileserver并授权操作**\n![Alt text](http://soujava.com/images/mysql1.png)\n\n*注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 *\n\n**二、查询刚才添加的用户是否存在**\n![Alt text](http://soujava.com/images/mysql2.png)\n\n*注：可以看到刚才的fileserver用户已经创建完毕 *\n\n**三、用刚才添加成功的用户登陆操作报异常**\n![Alt text](http://soujava.com/images/mysql3.png)\n\n*注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户*\n\n**四、在添加一个fileserver用户并分配可以本地localhost登录**\n![Alt text](http://soujava.com/images/mysql4.png)\n\n**五、再查下刚才创建的用户是否已经存在**\n![Alt text](http://soujava.com/images/mysql5.png)\n\n\n**六、再次用刚刚创建的fileserver登录操作，可以正常登录**\n![Alt text](http://soujava.com/images/mysql6.png)\n*注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 *\n\n**七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务**\n![Alt text](http://soujava.com/images/mysql7.png)\n*注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限*\n\n**八、在mysql配置文件中配置该IP的访问操作**\n![Alt text](http://soujava.com/images/mysql8.png)\n\n**九、配置完成后重启mysql服务**\n![Alt text](http://soujava.com/images/mysql9.png)\n\n**十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功**\n![Alt text](http://soujava.com/images/mysql10.png)","slug":"MySql安装后添加的用户不能远程连接登陆","published":1,"updated":"2017-01-11T02:06:24.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddr80016gco0uo4f7sq7","content":"<p><strong>一、添加一个用户fileserver并授权操作</strong><br><img src=\"http://soujava.com/images/mysql1.png\" alt=\"Alt text\"></p>\n<p><em>注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 </em></p>\n<p><strong>二、查询刚才添加的用户是否存在</strong><br><img src=\"http://soujava.com/images/mysql2.png\" alt=\"Alt text\"></p>\n<p><em>注：可以看到刚才的fileserver用户已经创建完毕 </em></p>\n<p><strong>三、用刚才添加成功的用户登陆操作报异常</strong><br><img src=\"http://soujava.com/images/mysql3.png\" alt=\"Alt text\"></p>\n<p><em>注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户</em></p>\n<p><strong>四、在添加一个fileserver用户并分配可以本地localhost登录</strong><br><img src=\"http://soujava.com/images/mysql4.png\" alt=\"Alt text\"></p>\n<p><strong>五、再查下刚才创建的用户是否已经存在</strong><br><img src=\"http://soujava.com/images/mysql5.png\" alt=\"Alt text\"></p>\n<p><strong>六、再次用刚刚创建的fileserver登录操作，可以正常登录</strong><br><img src=\"http://soujava.com/images/mysql6.png\" alt=\"Alt text\"><br><em>注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 </em></p>\n<p><strong>七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务</strong><br><img src=\"http://soujava.com/images/mysql7.png\" alt=\"Alt text\"><br><em>注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限</em></p>\n<p><strong>八、在mysql配置文件中配置该IP的访问操作</strong><br><img src=\"http://soujava.com/images/mysql8.png\" alt=\"Alt text\"></p>\n<p><strong>九、配置完成后重启mysql服务</strong><br><img src=\"http://soujava.com/images/mysql9.png\" alt=\"Alt text\"></p>\n<p><strong>十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功</strong><br><img src=\"http://soujava.com/images/mysql10.png\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<p><strong>一、添加一个用户fileserver并授权操作</strong><br><img src=\"http://soujava.com/images/mysql1.png\" alt=\"Alt text\"></p>\n<p><em>注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 </em></p>\n<p><strong>二、查询刚才添加的用户是否存在</strong><br><img src=\"http://soujava.com/images/mysql2.png\" alt=\"Alt text\"></p>\n<p><em>注：可以看到刚才的fileserver用户已经创建完毕 </em></p>\n<p><strong>三、用刚才添加成功的用户登陆操作报异常</strong><br><img src=\"http://soujava.com/images/mysql3.png\" alt=\"Alt text\"></p>\n<p><em>注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户</em></p>\n<p><strong>四、在添加一个fileserver用户并分配可以本地localhost登录</strong><br><img src=\"http://soujava.com/images/mysql4.png\" alt=\"Alt text\"></p>\n<p><strong>五、再查下刚才创建的用户是否已经存在</strong><br><img src=\"http://soujava.com/images/mysql5.png\" alt=\"Alt text\"></p>\n<p><strong>六、再次用刚刚创建的fileserver登录操作，可以正常登录</strong><br><img src=\"http://soujava.com/images/mysql6.png\" alt=\"Alt text\"><br><em>注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 </em></p>\n<p><strong>七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务</strong><br><img src=\"http://soujava.com/images/mysql7.png\" alt=\"Alt text\"><br><em>注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限</em></p>\n<p><strong>八、在mysql配置文件中配置该IP的访问操作</strong><br><img src=\"http://soujava.com/images/mysql8.png\" alt=\"Alt text\"></p>\n<p><strong>九、配置完成后重启mysql服务</strong><br><img src=\"http://soujava.com/images/mysql9.png\" alt=\"Alt text\"></p>\n<p><strong>十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功</strong><br><img src=\"http://soujava.com/images/mysql10.png\" alt=\"Alt text\"></p>\n"},{"title":"Mybatis动态传入tableName--非预编译(STATEMENT)","date":"2016-07-28T11:12:02.000Z","_content":"在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：\n**1、正常的查询**\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM user WHERE userid = #{userid}\n   </select>\n```\n上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM user WHERE userid = ?\"); \n\tpreState.setString(1,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；\n这个参数是什么作用呢：\n1. 设定mybatis执行sql的模式\n2. STATEMENT设定为非预编译语句模式\n3. PREPARED设定为预编译语句模式--mybatis默认\n4. CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。\n\n\n综上所述,mybatis默认按照预编译语句方式执行sql语句\n\n**2、动态传入表名**\n\n其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的\"user\"是动态传入的，动态传入表名是mybatis中的一种特殊情况，\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM #{user} WHERE userid = #{userid} //错误的写法\n   </select>\n```\n针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM ? WHERE userid = ?\"); \n\tpreState.setString(1,\"USER\");\n\tpreState.setString(2,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n我们把该段JDBC代码通过java代码执行后，发现会报异常：\n```java\n   java.sql.SQLException: ORA-00903: 表名无效\n```\n所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：\n1. select标签语句中添加statementType=\"STATEMENT\"的属性配置\n2. 标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;\n```java\n   <select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM ${user} WHERE userid = ${userid} //正确的写法\n   </select>\n```\n上面的语句标签中通过添加statementType=\"STATEMENT\"配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=\"STATEMENT\"非预编译配置后，为什么还需要把#换成$呢？其实是这样：\n1. \"#\" 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。\n2. \"$\" 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！","source":"_posts/Mybatis动态传入tableName-非预编译-STATEMENT.md","raw":"---\ntitle: Mybatis动态传入tableName--非预编译(STATEMENT)\ndate: 2016-07-28 19:12:02\ncategories: Mybatis\ntags: 动态传入tableName\n---\n在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：\n**1、正常的查询**\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM user WHERE userid = #{userid}\n   </select>\n```\n上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM user WHERE userid = ?\"); \n\tpreState.setString(1,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；\n这个参数是什么作用呢：\n1. 设定mybatis执行sql的模式\n2. STATEMENT设定为非预编译语句模式\n3. PREPARED设定为预编译语句模式--mybatis默认\n4. CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。\n\n\n综上所述,mybatis默认按照预编译语句方式执行sql语句\n\n**2、动态传入表名**\n\n其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的\"user\"是动态传入的，动态传入表名是mybatis中的一种特殊情况，\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM #{user} WHERE userid = #{userid} //错误的写法\n   </select>\n```\n针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM ? WHERE userid = ?\"); \n\tpreState.setString(1,\"USER\");\n\tpreState.setString(2,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n我们把该段JDBC代码通过java代码执行后，发现会报异常：\n```java\n   java.sql.SQLException: ORA-00903: 表名无效\n```\n所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：\n1. select标签语句中添加statementType=\"STATEMENT\"的属性配置\n2. 标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;\n```java\n   <select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM ${user} WHERE userid = ${userid} //正确的写法\n   </select>\n```\n上面的语句标签中通过添加statementType=\"STATEMENT\"配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=\"STATEMENT\"非预编译配置后，为什么还需要把#换成$呢？其实是这样：\n1. \"#\" 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。\n2. \"$\" 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！","slug":"Mybatis动态传入tableName-非预编译-STATEMENT","published":1,"updated":"2017-01-11T02:06:24.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrb0018gco0dz8fecff","content":"<p>在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：<br><strong>1、正常的查询</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM user WHERE userid = #&#123;userid&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM user WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；<br>这个参数是什么作用呢：</p>\n<ol>\n<li>设定mybatis执行sql的模式</li>\n<li>STATEMENT设定为非预编译语句模式</li>\n<li>PREPARED设定为预编译语句模式–mybatis默认</li>\n<li>CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。</li>\n</ol>\n<p>综上所述,mybatis默认按照预编译语句方式执行sql语句</p>\n<p><strong>2、动态传入表名</strong></p>\n<p>其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的”user”是动态传入的，动态传入表名是mybatis中的一种特殊情况，<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM #&#123;user&#125; WHERE userid = #&#123;userid&#125; //错误的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM ? WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"USER\"</span>);</div><div class=\"line\">preState.setString(<span class=\"number\">2</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们把该段JDBC代码通过java代码执行后，发现会报异常：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.sql.SQLException: ORA-<span class=\"number\">00903</span>: 表名无效</div></pre></td></tr></table></figure></p>\n<p>所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：</p>\n<ol>\n<li>select标签语句中添加statementType=”STATEMENT”的属性配置</li>\n<li>标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM $&#123;user&#125; WHERE userid = $&#123;userid&#125; //正确的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的语句标签中通过添加statementType=”STATEMENT”配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=”STATEMENT”非预编译配置后，为什么还需要把#换成$呢？其实是这样：</p>\n<ol>\n<li>“#” 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。</li>\n<li>“$” 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！</li>\n</ol>\n","excerpt":"","more":"<p>在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：<br><strong>1、正常的查询</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM user WHERE userid = #&#123;userid&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM user WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；<br>这个参数是什么作用呢：</p>\n<ol>\n<li>设定mybatis执行sql的模式</li>\n<li>STATEMENT设定为非预编译语句模式</li>\n<li>PREPARED设定为预编译语句模式–mybatis默认</li>\n<li>CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。</li>\n</ol>\n<p>综上所述,mybatis默认按照预编译语句方式执行sql语句</p>\n<p><strong>2、动态传入表名</strong></p>\n<p>其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的”user”是动态传入的，动态传入表名是mybatis中的一种特殊情况，<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM #&#123;user&#125; WHERE userid = #&#123;userid&#125; //错误的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM ? WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"USER\"</span>);</div><div class=\"line\">preState.setString(<span class=\"number\">2</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们把该段JDBC代码通过java代码执行后，发现会报异常：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.sql.SQLException: ORA-<span class=\"number\">00903</span>: 表名无效</div></pre></td></tr></table></figure></p>\n<p>所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：</p>\n<ol>\n<li>select标签语句中添加statementType=”STATEMENT”的属性配置</li>\n<li>标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM $&#123;user&#125; WHERE userid = $&#123;userid&#125; //正确的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的语句标签中通过添加statementType=”STATEMENT”配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=”STATEMENT”非预编译配置后，为什么还需要把#换成$呢？其实是这样：</p>\n<ol>\n<li>“#” 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。</li>\n<li>“$” 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！</li>\n</ol>\n"},{"title":"Mysql数据库编码更改","date":"2016-09-20T02:46:29.000Z","_content":"在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：\n\n### 1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\n\n![Alt text](http://soujava.com/images/mysqlCode1.png)\n\n### 2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\n```java\n\tselect concat('alter table ', table_name,' character set utf8 collate utf8_bin;') from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c \n\twhere c.collation_name = t.table_collation and t.table_schema='confluence' and (c.character_set_name!='utf8' or c.collation_name!='utf8_bin');\t\n```\n\n### 3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\n\n![Alt text](http://soujava.com/images/mysqlCode2.png)","source":"_posts/Mysql数据库编码更改.md","raw":"---\ntitle: Mysql数据库编码更改\ndate: 2016-09-20 10:46:29\ncategories: Mysql\ntags: Mysql\n---\n在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：\n\n### 1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\n\n![Alt text](http://soujava.com/images/mysqlCode1.png)\n\n### 2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\n```java\n\tselect concat('alter table ', table_name,' character set utf8 collate utf8_bin;') from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c \n\twhere c.collation_name = t.table_collation and t.table_schema='confluence' and (c.character_set_name!='utf8' or c.collation_name!='utf8_bin');\t\n```\n\n### 3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\n\n![Alt text](http://soujava.com/images/mysqlCode2.png)","slug":"Mysql数据库编码更改","published":1,"updated":"2017-01-11T02:06:24.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrd001cgco0yhetv5n4","content":"<p>在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：</p>\n<h3 id=\"1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"><a href=\"#1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\" class=\"headerlink\" title=\"1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"></a>1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息</h3><p><img src=\"http://soujava.com/images/mysqlCode1.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"><a href=\"#2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\" class=\"headerlink\" title=\"2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"></a>2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">select <span class=\"title\">concat</span><span class=\"params\">(<span class=\"string\">'alter table '</span>, table_name,<span class=\"string\">' character set utf8 collate utf8_bin;'</span>)</span> from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c </span></div><div class=\"line\">where c.collation_name = t.table_collation and t.table_schema=<span class=\"string\">'confluence'</span> and (c.character_set_name!=<span class=\"string\">'utf8'</span> or c.collation_name!=<span class=\"string\">'utf8_bin'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"><a href=\"#3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\" class=\"headerlink\" title=\"3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"></a>3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作</h3><p><img src=\"http://soujava.com/images/mysqlCode2.png\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<p>在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：</p>\n<h3 id=\"1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"><a href=\"#1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\" class=\"headerlink\" title=\"1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"></a>1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息</h3><p><img src=\"http://soujava.com/images/mysqlCode1.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"><a href=\"#2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\" class=\"headerlink\" title=\"2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"></a>2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">select <span class=\"title\">concat</span><span class=\"params\">(<span class=\"string\">'alter table '</span>, table_name,<span class=\"string\">' character set utf8 collate utf8_bin;'</span>)</span> from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c </div><div class=\"line\">where c.collation_name </span>= t.table_collation and t.table_schema=<span class=\"string\">'confluence'</span> and (c.character_set_name!=<span class=\"string\">'utf8'</span> or c.collation_name!=<span class=\"string\">'utf8_bin'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"><a href=\"#3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\" class=\"headerlink\" title=\"3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"></a>3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作</h3><p><img src=\"http://soujava.com/images/mysqlCode2.png\" alt=\"Alt text\"></p>\n"},{"title":"Redis--安装","date":"2016-08-19T09:21:43.000Z","_content":"**一、下载安装包**\n  下载redis安装包，下载方式很多比如如下方式都可以：\n    1)、到官网下载http://redis.io需要的版本\n    2)、在linux系统中用命令下载 $ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n    下载成功后得到redis-2.8.17.tar.gz安装包   \n**二、安装**\n    1)、用命令解压缩安装包\n       $ tar xzf redis-2.8.17.tar.gz\n\n    2)、进入解压后的文件中\n         $ cd redis-2.8.17\n\n    3)、编译安装\n          $ make\n\n  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli \n**三、启动服务**\n     1)、进入到redis安装目录src下面\n          $ cd /usr/local/redis-2.8.17/src\n     2)、启动服务操作，启动服务主要有两种方式：\n           A：采用默认配置方式启动(不推荐)\n                $ ./redis-server\n           B：采用制定配置文件启动(推荐)\n                 $ ./redis-server ../redis.conf\n     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行\n \n**四、测试** \n   1)、进入安装目录，运行redis-cli\n         $ ./redis-cli\n         redis> set username maps\n         redis>get username\n         \"maps\" \n      ","source":"_posts/Redis-安装.md","raw":"---\ntitle: Redis--安装\ndate: 2016-08-19 17:21:43\ncategories: Redis\ntags: Redis安装\n---\n**一、下载安装包**\n  下载redis安装包，下载方式很多比如如下方式都可以：\n    1)、到官网下载http://redis.io需要的版本\n    2)、在linux系统中用命令下载 $ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n    下载成功后得到redis-2.8.17.tar.gz安装包   \n**二、安装**\n    1)、用命令解压缩安装包\n       $ tar xzf redis-2.8.17.tar.gz\n\n    2)、进入解压后的文件中\n         $ cd redis-2.8.17\n\n    3)、编译安装\n          $ make\n\n  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli \n**三、启动服务**\n     1)、进入到redis安装目录src下面\n          $ cd /usr/local/redis-2.8.17/src\n     2)、启动服务操作，启动服务主要有两种方式：\n           A：采用默认配置方式启动(不推荐)\n                $ ./redis-server\n           B：采用制定配置文件启动(推荐)\n                 $ ./redis-server ../redis.conf\n     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行\n \n**四、测试** \n   1)、进入安装目录，运行redis-cli\n         $ ./redis-cli\n         redis> set username maps\n         redis>get username\n         \"maps\" \n      ","slug":"Redis-安装","published":1,"updated":"2017-01-11T02:06:24.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddre001egco0tmugiyr6","content":"<p><strong>一、下载安装包</strong><br>  下载redis安装包，下载方式很多比如如下方式都可以：<br>    1)、到官网下载<a href=\"http://redis.io需要的版本\" target=\"_blank\" rel=\"external\">http://redis.io需要的版本</a><br>    2)、在linux系统中用命令下载 $ wget <a href=\"http://download.redis.io/releases/redis-2.8.17.tar.gz\" target=\"_blank\" rel=\"external\">http://download.redis.io/releases/redis-2.8.17.tar.gz</a><br>    下载成功后得到redis-2.8.17.tar.gz安装包<br><strong>二、安装</strong><br>    1)、用命令解压缩安装包<br>       $ tar xzf redis-2.8.17.tar.gz</p>\n<pre><code>2)、进入解压后的文件中\n     $ cd redis-2.8.17\n\n3)、编译安装\n      $ make\n</code></pre><p>  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli<br><strong>三、启动服务</strong><br>     1)、进入到redis安装目录src下面<br>          $ cd /usr/local/redis-2.8.17/src<br>     2)、启动服务操作，启动服务主要有两种方式：<br>           A：采用默认配置方式启动(不推荐)<br>                $ ./redis-server<br>           B：采用制定配置文件启动(推荐)<br>                 $ ./redis-server ../redis.conf<br>     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行</p>\n<p><strong>四、测试</strong><br>   1)、进入安装目录，运行redis-cli<br>         $ ./redis-cli<br>         redis&gt; set username maps<br>         redis&gt;get username<br>         “maps” </p>\n","excerpt":"","more":"<p><strong>一、下载安装包</strong><br>  下载redis安装包，下载方式很多比如如下方式都可以：<br>    1)、到官网下载<a href=\"http://redis.io需要的版本\">http://redis.io需要的版本</a><br>    2)、在linux系统中用命令下载 $ wget <a href=\"http://download.redis.io/releases/redis-2.8.17.tar.gz\">http://download.redis.io/releases/redis-2.8.17.tar.gz</a><br>    下载成功后得到redis-2.8.17.tar.gz安装包<br><strong>二、安装</strong><br>    1)、用命令解压缩安装包<br>       $ tar xzf redis-2.8.17.tar.gz</p>\n<pre><code>2)、进入解压后的文件中\n     $ cd redis-2.8.17\n\n3)、编译安装\n      $ make\n</code></pre><p>  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli<br><strong>三、启动服务</strong><br>     1)、进入到redis安装目录src下面<br>          $ cd /usr/local/redis-2.8.17/src<br>     2)、启动服务操作，启动服务主要有两种方式：<br>           A：采用默认配置方式启动(不推荐)<br>                $ ./redis-server<br>           B：采用制定配置文件启动(推荐)<br>                 $ ./redis-server ../redis.conf<br>     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行</p>\n<p><strong>四、测试</strong><br>   1)、进入安装目录，运行redis-cli<br>         $ ./redis-cli<br>         redis&gt; set username maps<br>         redis&gt;get username<br>         “maps” </p>\n"},{"title":"RocketMQ启动报错解决","date":"2016-09-20T02:21:53.000Z","_content":"最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！\n\n>![Alt text](http://soujava.com/images/rocketMQ1.png)\n\n注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机\n\n### 解决方法\n\n1、vim /etc/hosts   \n\t\n添加如下主机名配置信息\n\n>![Alt text](http://soujava.com/images/rocketMQ2.png)\n\n2、service network stop  \n\n关闭网卡\n\n3、service network start  \n\n启动网卡\n\n4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功\n\n>![Alt text](http://soujava.com/images/rocketMQ3.png)\n\n","source":"_posts/RocketMQ启动报错解决.md","raw":"---\ntitle: RocketMQ启动报错解决\ndate: 2016-09-20 10:21:53\ncategories: RocketMQ\ntags: RocketMQ启动错误\n---\n最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！\n\n>![Alt text](http://soujava.com/images/rocketMQ1.png)\n\n注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机\n\n### 解决方法\n\n1、vim /etc/hosts   \n\t\n添加如下主机名配置信息\n\n>![Alt text](http://soujava.com/images/rocketMQ2.png)\n\n2、service network stop  \n\n关闭网卡\n\n3、service network start  \n\n启动网卡\n\n4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功\n\n>![Alt text](http://soujava.com/images/rocketMQ3.png)\n\n","slug":"RocketMQ启动报错解决","published":1,"updated":"2017-01-11T02:06:24.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrh001ggco02gf3kgs4","content":"<p>最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ1.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>1、vim /etc/hosts   </p>\n<p>添加如下主机名配置信息</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ2.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>2、service network stop  </p>\n<p>关闭网卡</p>\n<p>3、service network start  </p>\n<p>启动网卡</p>\n<p>4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ3.png\" alt=\"Alt text\"></p>\n</blockquote>\n","excerpt":"","more":"<p>最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ1.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>1、vim /etc/hosts   </p>\n<p>添加如下主机名配置信息</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ2.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>2、service network stop  </p>\n<p>关闭网卡</p>\n<p>3、service network start  </p>\n<p>启动网卡</p>\n<p>4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ3.png\" alt=\"Alt text\"></p>\n</blockquote>\n"},{"title":"Tomcat实时查看日志信息","date":"2016-08-17T03:27:50.000Z","_content":"\n1. 先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）\n\n\t>cd  tomcat/logs/\n\t\n2. 运行如下命令就可以实时查看tomcat的运行日志信息了\n\n\t>tail -f catalina.out\n\n\n","source":"_posts/Tomcat实时查看日志信息.md","raw":"---\ntitle: Tomcat实时查看日志信息\ndate: 2016-08-17 11:27:50\ncategories: Tomcat\ntags: Tomcat日志\n---\n\n1. 先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）\n\n\t>cd  tomcat/logs/\n\t\n2. 运行如下命令就可以实时查看tomcat的运行日志信息了\n\n\t>tail -f catalina.out\n\n\n","slug":"Tomcat实时查看日志信息","published":1,"updated":"2017-01-11T02:06:24.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrl001kgco0zuym92j6","content":"<ol>\n<li><p>先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）</p>\n<blockquote>\n<p>cd  tomcat/logs/</p>\n</blockquote>\n</li>\n<li><p>运行如下命令就可以实时查看tomcat的运行日志信息了</p>\n<blockquote>\n<p>tail -f catalina.out</p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）</p>\n<blockquote>\n<p>cd  tomcat/logs/</p>\n</blockquote>\n</li>\n<li><p>运行如下命令就可以实时查看tomcat的运行日志信息了</p>\n<blockquote>\n<p>tail -f catalina.out</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置","date":"2016-08-17T01:27:45.000Z","_content":"\n一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：\n1. 买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)\n2. VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n3. 进入到VMwarevSphere中的某一台虚拟机进行网卡配置\n\n二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n\t\n1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡\n\n![](http://soujava.com/images/vSphere0.jpg)\n\n2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”--“网络”，在右侧界面中右上角点击“添加网络”\n\t\n![](http://soujava.com/images/vSphere1.jpg)\n\n3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了\n\n![](http://soujava.com/images/vSphere2.jpg)\n\n4、 选择网卡的网络类型\n\n注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。\n\n![](http://soujava.com/images/vSphere3.jpg)\n\n5、设置网卡的链接方式\n\n![](http://soujava.com/images/vSphere4.jpg)\n\n6、完成配置\n\n![](http://soujava.com/images/vSphere5.jpg)\n\n7、然后再次进入“配置”--“网络”界面中，我们可以看到我们新添加的网卡\n\n![](http://soujava.com/images/vSphere00.jpg)\n\n8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)\n\n![](http://soujava.com/images/vSphere01.jpg)\n\n![](http://soujava.com/images/vSphere02.jpg)\n\n9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”\n\n![](http://soujava.com/images/vSphere03.jpg)\n\n![](http://soujava.com/images/vSphere04.jpg)\n\n10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。\n\n![](http://soujava.com/images/vSphere05.jpg)\n\n![](http://soujava.com/images/vSphere06.jpg)\n\n11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络\n\n![](http://soujava.com/images/vSphere6.jpg)\n\n12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)\n\n![](http://soujava.com/images/vSphere7.jpg)\n\n13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)\n\n![](http://soujava.com/images/vSphere8.jpg)\n\n![](http://soujava.com/images/vSphere9.jpg)\n\n14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到\n\n![](http://soujava.com/images/vSphere10.jpg)\n\n15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n\n\n16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“[Linux双网卡配置(内外网同时访问)](http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/)”","source":"_posts/VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置.md","raw":"---\ntitle: VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置\ndate: 2016-08-17 09:27:45\ncategories: vSphere\ntags: vSphere添加物理网卡\n---\n\n一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：\n1. 买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)\n2. VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n3. 进入到VMwarevSphere中的某一台虚拟机进行网卡配置\n\n二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n\t\n1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡\n\n![](http://soujava.com/images/vSphere0.jpg)\n\n2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”--“网络”，在右侧界面中右上角点击“添加网络”\n\t\n![](http://soujava.com/images/vSphere1.jpg)\n\n3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了\n\n![](http://soujava.com/images/vSphere2.jpg)\n\n4、 选择网卡的网络类型\n\n注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。\n\n![](http://soujava.com/images/vSphere3.jpg)\n\n5、设置网卡的链接方式\n\n![](http://soujava.com/images/vSphere4.jpg)\n\n6、完成配置\n\n![](http://soujava.com/images/vSphere5.jpg)\n\n7、然后再次进入“配置”--“网络”界面中，我们可以看到我们新添加的网卡\n\n![](http://soujava.com/images/vSphere00.jpg)\n\n8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)\n\n![](http://soujava.com/images/vSphere01.jpg)\n\n![](http://soujava.com/images/vSphere02.jpg)\n\n9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”\n\n![](http://soujava.com/images/vSphere03.jpg)\n\n![](http://soujava.com/images/vSphere04.jpg)\n\n10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。\n\n![](http://soujava.com/images/vSphere05.jpg)\n\n![](http://soujava.com/images/vSphere06.jpg)\n\n11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络\n\n![](http://soujava.com/images/vSphere6.jpg)\n\n12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)\n\n![](http://soujava.com/images/vSphere7.jpg)\n\n13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)\n\n![](http://soujava.com/images/vSphere8.jpg)\n\n![](http://soujava.com/images/vSphere9.jpg)\n\n14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到\n\n![](http://soujava.com/images/vSphere10.jpg)\n\n15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n\n\n16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“[Linux双网卡配置(内外网同时访问)](http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/)”","slug":"VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置","published":1,"updated":"2017-01-11T02:06:24.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrm001mgco0fjjsofaf","content":"<p>一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：</p>\n<ol>\n<li>买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)</li>\n<li>VMwarevSphereClientk连VMwarevSphere服务器配置网卡</li>\n<li>进入到VMwarevSphere中的某一台虚拟机进行网卡配置</li>\n</ol>\n<p>二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡</p>\n<p>1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere0.jpg\" alt=\"\"></p>\n<p>2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”–“网络”，在右侧界面中右上角点击“添加网络”</p>\n<p><img src=\"http://soujava.com/images/vSphere1.jpg\" alt=\"\"></p>\n<p>3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了</p>\n<p><img src=\"http://soujava.com/images/vSphere2.jpg\" alt=\"\"></p>\n<p>4、 选择网卡的网络类型</p>\n<p>注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。</p>\n<p><img src=\"http://soujava.com/images/vSphere3.jpg\" alt=\"\"></p>\n<p>5、设置网卡的链接方式</p>\n<p><img src=\"http://soujava.com/images/vSphere4.jpg\" alt=\"\"></p>\n<p>6、完成配置</p>\n<p><img src=\"http://soujava.com/images/vSphere5.jpg\" alt=\"\"></p>\n<p>7、然后再次进入“配置”–“网络”界面中，我们可以看到我们新添加的网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere00.jpg\" alt=\"\"></p>\n<p>8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)</p>\n<p><img src=\"http://soujava.com/images/vSphere01.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere02.jpg\" alt=\"\"></p>\n<p>9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”</p>\n<p><img src=\"http://soujava.com/images/vSphere03.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere04.jpg\" alt=\"\"></p>\n<p>10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。</p>\n<p><img src=\"http://soujava.com/images/vSphere05.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere06.jpg\" alt=\"\"></p>\n<p>11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络</p>\n<p><img src=\"http://soujava.com/images/vSphere6.jpg\" alt=\"\"></p>\n<p>12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)</p>\n<p><img src=\"http://soujava.com/images/vSphere7.jpg\" alt=\"\"></p>\n<p>13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)</p>\n<p><img src=\"http://soujava.com/images/vSphere8.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere9.jpg\" alt=\"\"></p>\n<p>14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到</p>\n<p><img src=\"http://soujava.com/images/vSphere10.jpg\" alt=\"\"></p>\n<p>15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“<a href=\"http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/\" target=\"_blank\" rel=\"external\">Linux双网卡配置(内外网同时访问)</a>”</p>\n","excerpt":"","more":"<p>一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：</p>\n<ol>\n<li>买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)</li>\n<li>VMwarevSphereClientk连VMwarevSphere服务器配置网卡</li>\n<li>进入到VMwarevSphere中的某一台虚拟机进行网卡配置</li>\n</ol>\n<p>二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡</p>\n<p>1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere0.jpg\" alt=\"\"></p>\n<p>2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”–“网络”，在右侧界面中右上角点击“添加网络”</p>\n<p><img src=\"http://soujava.com/images/vSphere1.jpg\" alt=\"\"></p>\n<p>3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了</p>\n<p><img src=\"http://soujava.com/images/vSphere2.jpg\" alt=\"\"></p>\n<p>4、 选择网卡的网络类型</p>\n<p>注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。</p>\n<p><img src=\"http://soujava.com/images/vSphere3.jpg\" alt=\"\"></p>\n<p>5、设置网卡的链接方式</p>\n<p><img src=\"http://soujava.com/images/vSphere4.jpg\" alt=\"\"></p>\n<p>6、完成配置</p>\n<p><img src=\"http://soujava.com/images/vSphere5.jpg\" alt=\"\"></p>\n<p>7、然后再次进入“配置”–“网络”界面中，我们可以看到我们新添加的网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere00.jpg\" alt=\"\"></p>\n<p>8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)</p>\n<p><img src=\"http://soujava.com/images/vSphere01.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere02.jpg\" alt=\"\"></p>\n<p>9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”</p>\n<p><img src=\"http://soujava.com/images/vSphere03.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere04.jpg\" alt=\"\"></p>\n<p>10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。</p>\n<p><img src=\"http://soujava.com/images/vSphere05.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere06.jpg\" alt=\"\"></p>\n<p>11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络</p>\n<p><img src=\"http://soujava.com/images/vSphere6.jpg\" alt=\"\"></p>\n<p>12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)</p>\n<p><img src=\"http://soujava.com/images/vSphere7.jpg\" alt=\"\"></p>\n<p>13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)</p>\n<p><img src=\"http://soujava.com/images/vSphere8.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere9.jpg\" alt=\"\"></p>\n<p>14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到</p>\n<p><img src=\"http://soujava.com/images/vSphere10.jpg\" alt=\"\"></p>\n<p>15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“<a href=\"http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/\">Linux双网卡配置(内外网同时访问)</a>”</p>\n"},{"title":"git搞着玩-新建本地仓库与分支合并","date":"2016-08-19T03:01:47.000Z","_content":"用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；\n\n再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！\n\n扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。\n\n**一、新建本地仓库（git init）**\n```java\n\t$ git init\n\tInitialized empty Git repository in D:/workspace/gitDemo/.git/\n```\n提示初始化一个空的git仓库在XXXX目录中\n\n**二、新建develop分支（git branch develop）**\n*- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！*\n```java\n\t$ git branch\n\t\n```\n输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。\n\n*- 新建develop分支操作（git branch develop）*\n```java\n\t$ git branch develop\n\tfatal: Not a valid object name: 'master'.\n\t\n```\n我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗....\n\n*- 提交一下（git commit）*\n```java\n\t$ git commit -m \"按照git要求，执行一次空的提交操作\"\n\tOn branch master\n\n\tInitial commit\n\n\tnothing to commit\n\n```\n哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。\n\n出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。\n\n*- 看看刚才git自动为我新建的master分支真的创建完了吗*\n```java\n\t$ git branch\n\t\n```\n哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。\n```java\n\t$ echo \"hello maps\" >index.txt\n\n\t$ git commit -m \"commit index.txt file\"\n\t[master (root-commit) be4ae99] commit index.txt file\n \t1 file changed, 1 insertion(+)\n \tcreate mode 100644 index.txt\n\n\t$ git branch\n\t* master\n```\n通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！\n*注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！*\n\n通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。\n\n\n**三、再次新建develop分支（git branch develop）**\n```java\n\t$ git branch develop\n\t\n```\n执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）\n```java\n\t$ git branch\n  \tdevelop\n\t* master\n\t\n```\n看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个\"*\"呢，其实这个\"*\"代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。*那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。*\n\n**四、把master分支中的文件合并到develop中**\n\n- 如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：\n\n1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)\n\n   先切换到develop分支中\n\t```java\n\t\t$ git checkout develop\n\t\tSwitched to branch 'develop'\n\t\n\t```\n   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）\n\t```java\n\t\t$ git branch\n\t  * develop\n\t  \tmaster\n\t\n\t```\n\n2、执行合并分支的命令(*所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中*)\n\n   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)\n\t```java\n\t\t$ git merge master\n\t\tAlready up-to-date.\n\t\n\t```\n\n**五、修改合并到develop分支中的文件内容为hello develop，并提交**\n\n我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop\n```java\n\t原内容：hello maps\n\t新内容：hello develop\n\t\n```\n然后执行添加(add)和提交(commit)操作.\n```java\n\t$ git add index.txt\n\t\n```\n```java\n\t$ git commit -m \"修改index文件为hello develop\"\t\n\t[develop bf5d39d] 修改index文件为hello develop\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n```\n\n**六、切换到master分支,并修改文件内容为hello master**\n\n   切换到master分支\n```java\n\t$ git checkout master\n\tSwitched to branch 'master'\t\n\n```\n\n   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)\n```java\n\t原内容：hello maps\n\t新内容：hello master\n\t\n```\n   \n**七、小述一下**\n\t\n到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。\n\n**八、合并develop分支的内容到master分支中**\n \n- 先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）\n\n```java\n\t$ git branch\n  \tdevelop\n  * master\n\n```\n\n- 合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）\n```java\n\t$ git merge develop\n\tAuto-merging index.txt\n\tCONFLICT (content): Merge conflict in index.txt\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n```\n上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。\n\n- 使用git diff命令查看两个文件冲突的内容\n```java\n\t$ git diff\n\tdiff --cc index.txt\n\tindex 2e6baf7,246b739..0000000\n\t--- a/index.txt\n\t+++ b/index.txt\n\t@@@ -1,1 -1,1 +1,5 @@@\n\t- hello master\n\t -hello develop\n\t++<<<<<<< HEAD\n\t++hello master\n\t++=======\n\t++hello develop\n\t++>>>>>>> develop\n\t\t\n```\n\n- 我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n**九、冲突解决--手工**\n\t\n我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容\n\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n针对上面的文件，我们先看<<<<<<<（7个<） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master\n分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 >>>>>>>（7个>）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。\n\n所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：\n\n 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)\n\n \t文件最终内容为：hello develop\n\n 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)\n\n   文件最终内容为：hello master\n\n 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)\n\n   文件最终内容为：hello master hello develop\n\n不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(\"+\"、\"<\"、\"=\"、\">\")；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！\n\n\n**十、冲突解决--工具**\n\n第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。\n\n```java\n\t$ git mergetool\n\n\tThis message is displayed because 'merge.tool' is not configured.\n\tSee 'git mergetool --tool-help' or 'git help config' for more details.\n\t'git mergetool' will now attempt to use one of the following tools:\n\topendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff\n\tMerging:\n\tindex.txt\n\t\n\tNormal merge conflict for 'index.txt':\n\t  {local}: modified file\n\t  {remote}: modified file\n\tHit return to start merge resolution tool (tortoisemerge):\n\n```\n输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：\n![Alt text](http://soujava.com/images/gitmerge1.png \"git 合并工具\")\n\n你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。\n\n通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。","source":"_posts/git搞着玩-新建本地仓库.md","raw":"---\ntitle: git搞着玩-新建本地仓库与分支合并\ndate: 2016-08-19 11:01:47\ncategories: git\ntags: git\n---\n用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；\n\n再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！\n\n扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。\n\n**一、新建本地仓库（git init）**\n```java\n\t$ git init\n\tInitialized empty Git repository in D:/workspace/gitDemo/.git/\n```\n提示初始化一个空的git仓库在XXXX目录中\n\n**二、新建develop分支（git branch develop）**\n*- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！*\n```java\n\t$ git branch\n\t\n```\n输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。\n\n*- 新建develop分支操作（git branch develop）*\n```java\n\t$ git branch develop\n\tfatal: Not a valid object name: 'master'.\n\t\n```\n我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗....\n\n*- 提交一下（git commit）*\n```java\n\t$ git commit -m \"按照git要求，执行一次空的提交操作\"\n\tOn branch master\n\n\tInitial commit\n\n\tnothing to commit\n\n```\n哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。\n\n出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。\n\n*- 看看刚才git自动为我新建的master分支真的创建完了吗*\n```java\n\t$ git branch\n\t\n```\n哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。\n```java\n\t$ echo \"hello maps\" >index.txt\n\n\t$ git commit -m \"commit index.txt file\"\n\t[master (root-commit) be4ae99] commit index.txt file\n \t1 file changed, 1 insertion(+)\n \tcreate mode 100644 index.txt\n\n\t$ git branch\n\t* master\n```\n通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！\n*注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！*\n\n通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。\n\n\n**三、再次新建develop分支（git branch develop）**\n```java\n\t$ git branch develop\n\t\n```\n执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）\n```java\n\t$ git branch\n  \tdevelop\n\t* master\n\t\n```\n看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个\"*\"呢，其实这个\"*\"代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。*那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。*\n\n**四、把master分支中的文件合并到develop中**\n\n- 如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：\n\n1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)\n\n   先切换到develop分支中\n\t```java\n\t\t$ git checkout develop\n\t\tSwitched to branch 'develop'\n\t\n\t```\n   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）\n\t```java\n\t\t$ git branch\n\t  * develop\n\t  \tmaster\n\t\n\t```\n\n2、执行合并分支的命令(*所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中*)\n\n   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)\n\t```java\n\t\t$ git merge master\n\t\tAlready up-to-date.\n\t\n\t```\n\n**五、修改合并到develop分支中的文件内容为hello develop，并提交**\n\n我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop\n```java\n\t原内容：hello maps\n\t新内容：hello develop\n\t\n```\n然后执行添加(add)和提交(commit)操作.\n```java\n\t$ git add index.txt\n\t\n```\n```java\n\t$ git commit -m \"修改index文件为hello develop\"\t\n\t[develop bf5d39d] 修改index文件为hello develop\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n```\n\n**六、切换到master分支,并修改文件内容为hello master**\n\n   切换到master分支\n```java\n\t$ git checkout master\n\tSwitched to branch 'master'\t\n\n```\n\n   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)\n```java\n\t原内容：hello maps\n\t新内容：hello master\n\t\n```\n   \n**七、小述一下**\n\t\n到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。\n\n**八、合并develop分支的内容到master分支中**\n \n- 先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）\n\n```java\n\t$ git branch\n  \tdevelop\n  * master\n\n```\n\n- 合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）\n```java\n\t$ git merge develop\n\tAuto-merging index.txt\n\tCONFLICT (content): Merge conflict in index.txt\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n```\n上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。\n\n- 使用git diff命令查看两个文件冲突的内容\n```java\n\t$ git diff\n\tdiff --cc index.txt\n\tindex 2e6baf7,246b739..0000000\n\t--- a/index.txt\n\t+++ b/index.txt\n\t@@@ -1,1 -1,1 +1,5 @@@\n\t- hello master\n\t -hello develop\n\t++<<<<<<< HEAD\n\t++hello master\n\t++=======\n\t++hello develop\n\t++>>>>>>> develop\n\t\t\n```\n\n- 我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n**九、冲突解决--手工**\n\t\n我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容\n\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n针对上面的文件，我们先看<<<<<<<（7个<） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master\n分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 >>>>>>>（7个>）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。\n\n所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：\n\n 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)\n\n \t文件最终内容为：hello develop\n\n 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)\n\n   文件最终内容为：hello master\n\n 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)\n\n   文件最终内容为：hello master hello develop\n\n不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(\"+\"、\"<\"、\"=\"、\">\")；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！\n\n\n**十、冲突解决--工具**\n\n第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。\n\n```java\n\t$ git mergetool\n\n\tThis message is displayed because 'merge.tool' is not configured.\n\tSee 'git mergetool --tool-help' or 'git help config' for more details.\n\t'git mergetool' will now attempt to use one of the following tools:\n\topendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff\n\tMerging:\n\tindex.txt\n\t\n\tNormal merge conflict for 'index.txt':\n\t  {local}: modified file\n\t  {remote}: modified file\n\tHit return to start merge resolution tool (tortoisemerge):\n\n```\n输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：\n![Alt text](http://soujava.com/images/gitmerge1.png \"git 合并工具\")\n\n你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。\n\n通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。","slug":"git搞着玩-新建本地仓库","published":1,"updated":"2017-01-11T02:06:24.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrq001pgco0gog6bmvy","content":"<p>用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；</p>\n<p>再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！</p>\n<p>扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。</p>\n<p><strong>一、新建本地仓库（git init）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository in D:/workspace/gitDemo/.git/</div></pre></td></tr></table></figure></p>\n<p>提示初始化一个空的git仓库在XXXX目录中</p>\n<p><strong>二、新建develop分支（git branch develop）</strong><br><em>- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。</p>\n<p><em>- 新建develop分支操作（git branch develop）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div><div class=\"line\">fatal: Not a valid object name: <span class=\"string\">'master'</span>.</div></pre></td></tr></table></figure></p>\n<p>我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗….</p>\n<p><em>- 提交一下（git commit）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"按照git要求，执行一次空的提交操作\"</span></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">nothing to commit</div></pre></td></tr></table></figure></p>\n<p>哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。</p>\n<p>出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。</p>\n<p><em>- 看看刚才git自动为我新建的master分支真的创建完了吗</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo <span class=\"string\">\"hello maps\"</span> &gt;index.txt</div><div class=\"line\"></div><div class=\"line\">$ git commit -m <span class=\"string\">\"commit index.txt file\"</span></div><div class=\"line\">[master (root-commit) be4ae99] commit index.txt file</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+)</div><div class=\"line\">\tcreate mode <span class=\"number\">100644</span> index.txt</div><div class=\"line\"></div><div class=\"line\">$ git branch</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！<br><em>注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！</em></p>\n<p>通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。</p>\n<p><strong>三、再次新建develop分支（git branch develop）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div></pre></td></tr></table></figure></p>\n<p>执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个”<em>“呢，其实这个”</em>“代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。<em>那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。</em></p>\n<p><strong>四、把master分支中的文件合并到develop中</strong></p>\n<ul>\n<li>如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：</li>\n</ul>\n<p>1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)</p>\n<p>   先切换到develop分支中<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout develop</div><div class=\"line\">Switched to branch <span class=\"string\">'develop'</span></div></pre></td></tr></table></figure></p>\n<p>   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> * develop</div><div class=\"line\"> \tmaster</div></pre></td></tr></table></figure></p>\n<p>2、执行合并分支的命令(<em>所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中</em>)</p>\n<p>   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge master</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure></p>\n<p><strong>五、修改合并到develop分支中的文件内容为hello develop，并提交</strong></p>\n<p>我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello develop</div></pre></td></tr></table></figure></p>\n<p>然后执行添加(add)和提交(commit)操作.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add index.txt</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"修改index文件为hello develop\"</span>\t</div><div class=\"line\">[develop bf5d39d] 修改index文件为hello develop</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</div></pre></td></tr></table></figure>\n<p><strong>六、切换到master分支,并修改文件内容为hello master</strong></p>\n<p>   切换到master分支<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">Switched to branch <span class=\"string\">'master'</span></div></pre></td></tr></table></figure></p>\n<p>   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello master</div></pre></td></tr></table></figure></p>\n<p><strong>七、小述一下</strong></p>\n<p>到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。</p>\n<p><strong>八、合并develop分支的内容到master分支中</strong></p>\n<ul>\n<li>先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\"> * master</div></pre></td></tr></table></figure>\n<ul>\n<li>合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge develop</div><div class=\"line\">Auto-merging index.<span class=\"function\">txt</span></div><div class=\"line\"><span class=\"title\">CONFLICT</span> <span class=\"params\">(content)</span>: Merge conflict in index.txt</div><div class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。</p>\n<ul>\n<li><p>使用git diff命令查看两个文件冲突的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --cc index.txt</div><div class=\"line\">index <span class=\"number\">2e6</span>baf7,<span class=\"number\">246</span>b739..<span class=\"number\">0000000</span></div><div class=\"line\">--- a/index.txt</div><div class=\"line\">+++ b/index.txt</div><div class=\"line\">@@@ -<span class=\"number\">1</span>,<span class=\"number\">1</span> -<span class=\"number\">1</span>,<span class=\"number\">1</span> +<span class=\"number\">1</span>,<span class=\"number\">5</span> @@@</div><div class=\"line\">- hello master</div><div class=\"line\"> -hello develop</div><div class=\"line\">++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">++hello master</div><div class=\"line\">++=======</div><div class=\"line\">++hello develop</div><div class=\"line\">++&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>九、冲突解决–手工</strong></p>\n<p>我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n<p>针对上面的文件，我们先看&lt;&lt;&lt;&lt;&lt;&lt;&lt;（7个&lt;） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master<br>分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 &gt;&gt;&gt;&gt;&gt;&gt;&gt;（7个&gt;）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。</p>\n<p>所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：</p>\n<p> 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)</p>\n<pre><code>文件最终内容为：hello develop\n</code></pre><p> 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)</p>\n<p>   文件最终内容为：hello master</p>\n<p> 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)</p>\n<p>   文件最终内容为：hello master hello develop</p>\n<p>不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(“+”、”&lt;”、”=”、”&gt;”)；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！</p>\n<p><strong>十、冲突解决–工具</strong></p>\n<p>第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div><div class=\"line\"></div><div class=\"line\">This message is displayed because <span class=\"string\">'merge.tool'</span> is not configured.</div><div class=\"line\">See <span class=\"string\">'git mergetool --tool-help'</span> or <span class=\"string\">'git help config'</span> <span class=\"keyword\">for</span> more details.</div><div class=\"line\"><span class=\"string\">'git mergetool'</span> will now attempt to use one of the following tools:</div><div class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff</div><div class=\"line\">Merging:</div><div class=\"line\">index.txt</div><div class=\"line\"></div><div class=\"line\">Normal merge conflict <span class=\"keyword\">for</span> <span class=\"string\">'index.txt'</span>:</div><div class=\"line\">  &#123;local&#125;: modified file</div><div class=\"line\">  &#123;remote&#125;: <span class=\"function\">modified file</span></div><div class=\"line\">Hit return to start merge resolution <span class=\"title\">tool</span> <span class=\"params\">(tortoisemerge)</span>:</div></pre></td></tr></table></figure>\n<p>输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：<br><img src=\"http://soujava.com/images/gitmerge1.png\" alt=\"Alt text\" title=\"git 合并工具\"></p>\n<p>你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。</p>\n<p>通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。</p>\n","excerpt":"","more":"<p>用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；</p>\n<p>再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！</p>\n<p>扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。</p>\n<p><strong>一、新建本地仓库（git init）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository in D:/workspace/gitDemo/.git/</div></pre></td></tr></table></figure></p>\n<p>提示初始化一个空的git仓库在XXXX目录中</p>\n<p><strong>二、新建develop分支（git branch develop）</strong><br><em>- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。</p>\n<p><em>- 新建develop分支操作（git branch develop）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div><div class=\"line\">fatal: Not a valid object name: <span class=\"string\">'master'</span>.</div></pre></td></tr></table></figure></p>\n<p>我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗….</p>\n<p><em>- 提交一下（git commit）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"按照git要求，执行一次空的提交操作\"</span></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">nothing to commit</div></pre></td></tr></table></figure></p>\n<p>哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。</p>\n<p>出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。</p>\n<p><em>- 看看刚才git自动为我新建的master分支真的创建完了吗</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo <span class=\"string\">\"hello maps\"</span> &gt;index.txt</div><div class=\"line\"></div><div class=\"line\">$ git commit -m <span class=\"string\">\"commit index.txt file\"</span></div><div class=\"line\">[master (root-commit) be4ae99] commit index.txt file</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+)</div><div class=\"line\">\tcreate mode <span class=\"number\">100644</span> index.txt</div><div class=\"line\"></div><div class=\"line\">$ git branch</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！<br><em>注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！</em></p>\n<p>通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。</p>\n<p><strong>三、再次新建develop分支（git branch develop）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div></pre></td></tr></table></figure></p>\n<p>执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个”<em>“呢，其实这个”</em>“代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。<em>那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。</em></p>\n<p><strong>四、把master分支中的文件合并到develop中</strong></p>\n<ul>\n<li>如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：</li>\n</ul>\n<p>1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)</p>\n<p>   先切换到develop分支中<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout develop</div><div class=\"line\">Switched to branch <span class=\"string\">'develop'</span></div></pre></td></tr></table></figure></p>\n<p>   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> * develop</div><div class=\"line\"> \tmaster</div></pre></td></tr></table></figure></p>\n<p>2、执行合并分支的命令(<em>所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中</em>)</p>\n<p>   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge master</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure></p>\n<p><strong>五、修改合并到develop分支中的文件内容为hello develop，并提交</strong></p>\n<p>我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello develop</div></pre></td></tr></table></figure></p>\n<p>然后执行添加(add)和提交(commit)操作.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add index.txt</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"修改index文件为hello develop\"</span>\t</div><div class=\"line\">[develop bf5d39d] 修改index文件为hello develop</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</div></pre></td></tr></table></figure>\n<p><strong>六、切换到master分支,并修改文件内容为hello master</strong></p>\n<p>   切换到master分支<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">Switched to branch <span class=\"string\">'master'</span></div></pre></td></tr></table></figure></p>\n<p>   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello master</div></pre></td></tr></table></figure></p>\n<p><strong>七、小述一下</strong></p>\n<p>到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。</p>\n<p><strong>八、合并develop分支的内容到master分支中</strong></p>\n<ul>\n<li>先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\"> * master</div></pre></td></tr></table></figure>\n<ul>\n<li>合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge develop</div><div class=\"line\">Auto-merging index.<span class=\"function\">txt</div><div class=\"line\"><span class=\"title\">CONFLICT</span> <span class=\"params\">(content)</span>: Merge conflict in index.txt</div><div class=\"line\">Automatic merge failed</span>; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。</p>\n<ul>\n<li><p>使用git diff命令查看两个文件冲突的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --cc index.txt</div><div class=\"line\">index <span class=\"number\">2e6</span>baf7,<span class=\"number\">246</span>b739..<span class=\"number\">0000000</span></div><div class=\"line\">--- a/index.txt</div><div class=\"line\">+++ b/index.txt</div><div class=\"line\">@@@ -<span class=\"number\">1</span>,<span class=\"number\">1</span> -<span class=\"number\">1</span>,<span class=\"number\">1</span> +<span class=\"number\">1</span>,<span class=\"number\">5</span> @@@</div><div class=\"line\">- hello master</div><div class=\"line\"> -hello develop</div><div class=\"line\">++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">++hello master</div><div class=\"line\">++=======</div><div class=\"line\">++hello develop</div><div class=\"line\">++&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>九、冲突解决–手工</strong></p>\n<p>我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n<p>针对上面的文件，我们先看&lt;&lt;&lt;&lt;&lt;&lt;&lt;（7个&lt;） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master<br>分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 &gt;&gt;&gt;&gt;&gt;&gt;&gt;（7个&gt;）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。</p>\n<p>所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：</p>\n<p> 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)</p>\n<pre><code>文件最终内容为：hello develop\n</code></pre><p> 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)</p>\n<p>   文件最终内容为：hello master</p>\n<p> 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)</p>\n<p>   文件最终内容为：hello master hello develop</p>\n<p>不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(“+”、”&lt;”、”=”、”&gt;”)；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！</p>\n<p><strong>十、冲突解决–工具</strong></p>\n<p>第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div><div class=\"line\"></div><div class=\"line\">This message is displayed because <span class=\"string\">'merge.tool'</span> is not configured.</div><div class=\"line\">See <span class=\"string\">'git mergetool --tool-help'</span> or <span class=\"string\">'git help config'</span> <span class=\"keyword\">for</span> more details.</div><div class=\"line\"><span class=\"string\">'git mergetool'</span> will now attempt to use one of the following tools:</div><div class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff</div><div class=\"line\">Merging:</div><div class=\"line\">index.txt</div><div class=\"line\"></div><div class=\"line\">Normal merge conflict <span class=\"keyword\">for</span> <span class=\"string\">'index.txt'</span>:</div><div class=\"line\">  &#123;local&#125;: modified file</div><div class=\"line\">  &#123;remote&#125;: <span class=\"function\">modified file</div><div class=\"line\">Hit return to start merge resolution <span class=\"title\">tool</span> <span class=\"params\">(tortoisemerge)</span>:</span></div></pre></td></tr></table></figure>\n<p>输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：<br><img src=\"http://soujava.com/images/gitmerge1.png\" alt=\"Alt text\" title=\"git 合并工具\"></p>\n<p>你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。</p>\n<p>通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。</p>\n"},{"title":"java8中使用stream流和for循环分别对数据集合遍历的差异","date":"2016-08-31T01:44:41.000Z","_content":"最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<Map<String,Object>>）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！\n\n### 一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n\n**2、使用java8的stream的forEach遍历集合并输出**\n```java\n\tlistMap.stream().forEach(p -> System.out.println(p.get(\"id\")+\" \"+p.get(\"title\")));\n```\n控制台打印内容如下：花费1582毫秒\n```java\n\t..... ..........\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1582\n```\n**3、使用for循环遍历集合并输出**\n```java\n\t for(Map map:listMap){\n\t    System.out.println(map.get(\"id\")+\" \"+map.get(\"title\"));\n\t }\n```\n控制台打印内容如下：花费1548毫秒\n```java\n\t99995 title99995\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1548\n```\n**4、小结**\n \n 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】\n\n 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】\n\n 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】\n\n 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！\n\n### 二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n**2、声明个长度为2的集合**\n```java\n\t\t//该集合中的key键就是上面长度为10W集合中的id的值\n\t\tMap<String,Object> mapTop = new HashMap<String,Object>();\n\t    mapTop.put(\"10\", \"1\");\n\t    mapTop.put(\"90\", \"0\");\n```\n接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;\n\n**3、用java8的stream流遍历**\n```java\n\tlistMap.stream().map((s)->{\n\t\t\t\treturn s.put(\"top\",mapTop.get(String.valueOf(s.get(\"id\"))));\n\t\t\t}).collect(Collectors.toList());\n```\n上面的代码中我们通过stream流中的map进行数据追加：\n追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},...]\n追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},...]\n\n花费时间：4641毫秒\n\n**4、用for循环遍历**\n```java\n\t for(Map map:listMap){\n\t    \tmap.put(\"top\", mapTop.get(String.valueOf(map.get(\"id\"))));\n\t }\n```\n\n花费时间：5513毫秒\n\n**5、小结**\n\n当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！\n\n后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！\n\n![Alt text](http://soujava.com/images/javaStream2.png)\n","source":"_posts/java8中使用stream流和for循环分别对数据集合遍历的差异.md","raw":"---\ntitle: java8中使用stream流和for循环分别对数据集合遍历的差异\ndate: 2016-08-31 09:44:41\ncategories: java\ntags: java8 Stream\n---\n最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<Map<String,Object>>）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！\n\n### 一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n\n**2、使用java8的stream的forEach遍历集合并输出**\n```java\n\tlistMap.stream().forEach(p -> System.out.println(p.get(\"id\")+\" \"+p.get(\"title\")));\n```\n控制台打印内容如下：花费1582毫秒\n```java\n\t..... ..........\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1582\n```\n**3、使用for循环遍历集合并输出**\n```java\n\t for(Map map:listMap){\n\t    System.out.println(map.get(\"id\")+\" \"+map.get(\"title\"));\n\t }\n```\n控制台打印内容如下：花费1548毫秒\n```java\n\t99995 title99995\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1548\n```\n**4、小结**\n \n 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】\n\n 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】\n\n 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】\n\n 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！\n\n### 二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n**2、声明个长度为2的集合**\n```java\n\t\t//该集合中的key键就是上面长度为10W集合中的id的值\n\t\tMap<String,Object> mapTop = new HashMap<String,Object>();\n\t    mapTop.put(\"10\", \"1\");\n\t    mapTop.put(\"90\", \"0\");\n```\n接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;\n\n**3、用java8的stream流遍历**\n```java\n\tlistMap.stream().map((s)->{\n\t\t\t\treturn s.put(\"top\",mapTop.get(String.valueOf(s.get(\"id\"))));\n\t\t\t}).collect(Collectors.toList());\n```\n上面的代码中我们通过stream流中的map进行数据追加：\n追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},...]\n追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},...]\n\n花费时间：4641毫秒\n\n**4、用for循环遍历**\n```java\n\t for(Map map:listMap){\n\t    \tmap.put(\"top\", mapTop.get(String.valueOf(map.get(\"id\"))));\n\t }\n```\n\n花费时间：5513毫秒\n\n**5、小结**\n\n当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！\n\n后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！\n\n![Alt text](http://soujava.com/images/javaStream2.png)\n","slug":"java8中使用stream流和for循环分别对数据集合遍历的差异","published":1,"updated":"2017-01-11T02:06:24.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrs001sgco01reu652b","content":"<p>最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<map<string,object>&gt;）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！</map<string,object></p>\n<h3 id=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\"><a href=\"#一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\" class=\"headerlink\" title=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)\"></a>一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、使用java8的stream的forEach遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().forEach(p -&gt; System.out.println(p.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+p.get(<span class=\"string\">\"title\"</span>)));</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1582毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">..... ..........</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1582</span></div></pre></td></tr></table></figure></p>\n<p><strong>3、使用for循环遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   System.out.println(map.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+map.get(<span class=\"string\">\"title\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1548毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">99995</span> title99995</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1548</span></div></pre></td></tr></table></figure></p>\n<p><strong>4、小结</strong></p>\n<p> 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】</p>\n<p> 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】</p>\n<p> 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】</p>\n<p> 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！</p>\n<h3 id=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\"><a href=\"#二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\" class=\"headerlink\" title=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)\"></a>二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、声明个长度为2的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该集合中的key键就是上面长度为10W集合中的id的值</span></div><div class=\"line\">Map&lt;String,Object&gt; mapTop = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"90\"</span>, <span class=\"string\">\"0\"</span>);</div></pre></td></tr></table></figure></p>\n<p>接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;</p>\n<p><strong>3、用java8的stream流遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().map((s)-&gt;&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> s.put(<span class=\"string\">\"top\"</span>,mapTop.get(String.valueOf(s.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">\t\t&#125;).collect(Collectors.toList());</div></pre></td></tr></table></figure></p>\n<p>上面的代码中我们通过stream流中的map进行数据追加：<br>追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},…]<br>追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},…]</p>\n<p>花费时间：4641毫秒</p>\n<p><strong>4、用for循环遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   \tmap.put(<span class=\"string\">\"top\"</span>, mapTop.get(String.valueOf(map.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>花费时间：5513毫秒</p>\n<p><strong>5、小结</strong></p>\n<p>当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！</p>\n<p>后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！</p>\n<p><img src=\"http://soujava.com/images/javaStream2.png\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<p>最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<Map<String,Object>&gt;）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！</p>\n<h3 id=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\"><a href=\"#一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\" class=\"headerlink\" title=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)\"></a>一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、使用java8的stream的forEach遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().forEach(p -&gt; System.out.println(p.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+p.get(<span class=\"string\">\"title\"</span>)));</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1582毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">..... ..........</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1582</span></div></pre></td></tr></table></figure></p>\n<p><strong>3、使用for循环遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   System.out.println(map.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+map.get(<span class=\"string\">\"title\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1548毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">99995</span> title99995</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1548</span></div></pre></td></tr></table></figure></p>\n<p><strong>4、小结</strong></p>\n<p> 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】</p>\n<p> 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】</p>\n<p> 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】</p>\n<p> 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！</p>\n<h3 id=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\"><a href=\"#二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\" class=\"headerlink\" title=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)\"></a>二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、声明个长度为2的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该集合中的key键就是上面长度为10W集合中的id的值</span></div><div class=\"line\">Map&lt;String,Object&gt; mapTop = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"90\"</span>, <span class=\"string\">\"0\"</span>);</div></pre></td></tr></table></figure></p>\n<p>接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;</p>\n<p><strong>3、用java8的stream流遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().map((s)-&gt;&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> s.put(<span class=\"string\">\"top\"</span>,mapTop.get(String.valueOf(s.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">\t\t&#125;).collect(Collectors.toList());</div></pre></td></tr></table></figure></p>\n<p>上面的代码中我们通过stream流中的map进行数据追加：<br>追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},…]<br>追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},…]</p>\n<p>花费时间：4641毫秒</p>\n<p><strong>4、用for循环遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   \tmap.put(<span class=\"string\">\"top\"</span>, mapTop.get(String.valueOf(map.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>花费时间：5513毫秒</p>\n<p><strong>5、小结</strong></p>\n<p>当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！</p>\n<p>后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！</p>\n<p><img src=\"http://soujava.com/images/javaStream2.png\" alt=\"Alt text\"></p>\n"},{"title":"java使用jxl读取excel数据时特殊符号处理","date":"2016-08-17T03:40:01.000Z","_content":"\n使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。\n 未处理之前代码：\n```java\n     Workbook modelBook = Workbook.getWorkbook(input);\n\t Sheet sheet = modelBook.getSheet(0);\n```\n处理之后的代码：\n```java\n     WorkbookSettings setting = new WorkbookSettings();\n\t Locale locale = new Locale(\"zh\",\"CN\");\n\t setting.setLocale(locale);\n\t setting.setEncoding(\"ISO-8859-1\");\n\t Workbook modelBook = Workbook.getWorkbook(input,setting);\n```\n注：处理之后的代码片段中前4行代码段，用来解决乱码问题！\n\n","source":"_posts/java使用jxl读取excel数据时特殊符号处理.md","raw":"---\ntitle: java使用jxl读取excel数据时特殊符号处理\ndate: 2016-08-17 11:40:01\ncategories: java\ntags: jxl\n---\n\n使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。\n 未处理之前代码：\n```java\n     Workbook modelBook = Workbook.getWorkbook(input);\n\t Sheet sheet = modelBook.getSheet(0);\n```\n处理之后的代码：\n```java\n     WorkbookSettings setting = new WorkbookSettings();\n\t Locale locale = new Locale(\"zh\",\"CN\");\n\t setting.setLocale(locale);\n\t setting.setEncoding(\"ISO-8859-1\");\n\t Workbook modelBook = Workbook.getWorkbook(input,setting);\n```\n注：处理之后的代码片段中前4行代码段，用来解决乱码问题！\n\n","slug":"java使用jxl读取excel数据时特殊符号处理","published":1,"updated":"2017-01-11T02:06:24.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddrw001vgco0c9jvxdhp","content":"<p>使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。<br> 未处理之前代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   Workbook modelBook = Workbook.getWorkbook(input);</div><div class=\"line\">Sheet sheet = modelBook.getSheet(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>处理之后的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   WorkbookSettings setting = <span class=\"keyword\">new</span> WorkbookSettings();</div><div class=\"line\">Locale locale = <span class=\"keyword\">new</span> Locale(<span class=\"string\">\"zh\"</span>,<span class=\"string\">\"CN\"</span>);</div><div class=\"line\">setting.setLocale(locale);</div><div class=\"line\">setting.setEncoding(<span class=\"string\">\"ISO-8859-1\"</span>);</div><div class=\"line\">Workbook modelBook = Workbook.getWorkbook(input,setting);</div></pre></td></tr></table></figure></p>\n<p>注：处理之后的代码片段中前4行代码段，用来解决乱码问题！</p>\n","excerpt":"","more":"<p>使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。<br> 未处理之前代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   Workbook modelBook = Workbook.getWorkbook(input);</div><div class=\"line\">Sheet sheet = modelBook.getSheet(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>处理之后的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   WorkbookSettings setting = <span class=\"keyword\">new</span> WorkbookSettings();</div><div class=\"line\">Locale locale = <span class=\"keyword\">new</span> Locale(<span class=\"string\">\"zh\"</span>,<span class=\"string\">\"CN\"</span>);</div><div class=\"line\">setting.setLocale(locale);</div><div class=\"line\">setting.setEncoding(<span class=\"string\">\"ISO-8859-1\"</span>);</div><div class=\"line\">Workbook modelBook = Workbook.getWorkbook(input,setting);</div></pre></td></tr></table></figure></p>\n<p>注：处理之后的代码片段中前4行代码段，用来解决乱码问题！</p>\n"},{"title":"java定时任务Timer小试一下","date":"2016-09-14T07:16:26.000Z","_content":"java定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。\n\n### 一、我们定义一个需要定时执行的任务的类\n```java\n\tpackage test; \n\timport java.util.Timer; \n\tpublic class TimeTaskTest {\n\t\tpublic static void main(String[] args){ \n\t\t\tTimer timer = new Timer(); \n\t\t\ttimer.schedule(new Task(), 60 * 1000); \n\t\t} \n\t} \n```\n\n注：我们的定时任务，就在这个类的main函数里执行\n\n1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务\n\n2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，\npublic void schedule(TimerTask task,long delay) \n\n首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：\n\n```java\n\tpackage test; \n\n\timport java.util.TimerTask; \n\n\tpublic class Task extends TimerTask { \n\n\t\tpublic void run(){ \n\t\t\tSystem.out.println(\"定时任务执行\"); \n\t\t} \n\t} \n```\n我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。\n\n第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，\n所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。\n\n### 二、循环执行任务\n\n循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，\n这样就用到了schedule方法的是另一个重载函数\n```java\n\tpublic void schedule(TimerTask task,long delay,long period) \t\n```\n\n前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），\n比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。\n\n### 三、定时\n\n指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，\n就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：\n\n```java\n\tpublic void schedule(TimerTask task,Date time) \n```\n比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。\n有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。\n\nschedule最后一个重载的方法是\n```java\n\tpublic void schedule(TimerTask task,Date firstTime,long period) \n```\n### 四、扩展\n\nj2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧\n\n","source":"_posts/java定时任务Timer小试一下.md","raw":"---\ntitle: java定时任务Timer小试一下\ndate: 2016-09-14 15:16:26\ncategories: java\ntags: java定时任务\n---\njava定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。\n\n### 一、我们定义一个需要定时执行的任务的类\n```java\n\tpackage test; \n\timport java.util.Timer; \n\tpublic class TimeTaskTest {\n\t\tpublic static void main(String[] args){ \n\t\t\tTimer timer = new Timer(); \n\t\t\ttimer.schedule(new Task(), 60 * 1000); \n\t\t} \n\t} \n```\n\n注：我们的定时任务，就在这个类的main函数里执行\n\n1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务\n\n2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，\npublic void schedule(TimerTask task,long delay) \n\n首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：\n\n```java\n\tpackage test; \n\n\timport java.util.TimerTask; \n\n\tpublic class Task extends TimerTask { \n\n\t\tpublic void run(){ \n\t\t\tSystem.out.println(\"定时任务执行\"); \n\t\t} \n\t} \n```\n我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。\n\n第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，\n所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。\n\n### 二、循环执行任务\n\n循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，\n这样就用到了schedule方法的是另一个重载函数\n```java\n\tpublic void schedule(TimerTask task,long delay,long period) \t\n```\n\n前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），\n比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。\n\n### 三、定时\n\n指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，\n就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：\n\n```java\n\tpublic void schedule(TimerTask task,Date time) \n```\n比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。\n有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。\n\nschedule最后一个重载的方法是\n```java\n\tpublic void schedule(TimerTask task,Date firstTime,long period) \n```\n### 四、扩展\n\nj2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧\n\n","slug":"java定时任务Timer小试一下","published":1,"updated":"2017-01-11T02:06:24.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddry001ygco00ok7ni9s","content":"<p>java定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。</p>\n<h3 id=\"一、我们定义一个需要定时执行的任务的类\"><a href=\"#一、我们定义一个需要定时执行的任务的类\" class=\"headerlink\" title=\"一、我们定义一个需要定时执行的任务的类\"></a>一、我们定义一个需要定时执行的任务的类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Timer; </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeTaskTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </div><div class=\"line\">\t\tTimer timer = <span class=\"keyword\">new</span> Timer(); </div><div class=\"line\">\t\ttimer.schedule(<span class=\"keyword\">new</span> Task(), <span class=\"number\">60</span> * <span class=\"number\">1000</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：我们的定时任务，就在这个类的main函数里执行</p>\n<p>1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务</p>\n<p>2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，<br>public void schedule(TimerTask task,long delay) </p>\n<p>首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span> </span>&#123; </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123; </div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"定时任务执行\"</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。</p>\n<p>第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，<br>所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。</p>\n<h3 id=\"二、循环执行任务\"><a href=\"#二、循环执行任务\" class=\"headerlink\" title=\"二、循环执行任务\"></a>二、循环执行任务</h3><p>循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，<br>这样就用到了schedule方法的是另一个重载函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,<span class=\"keyword\">long</span> delay,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<p>前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），<br>比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。</p>\n<h3 id=\"三、定时\"><a href=\"#三、定时\" class=\"headerlink\" title=\"三、定时\"></a>三、定时</h3><p>指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，<br>就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date time)</span></span></div></pre></td></tr></table></figure>\n<p>比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。<br>有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。</p>\n<p>schedule最后一个重载的方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date firstTime,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"四、扩展\"><a href=\"#四、扩展\" class=\"headerlink\" title=\"四、扩展\"></a>四、扩展</h3><p>j2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧</p>\n","excerpt":"","more":"<p>java定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。</p>\n<h3 id=\"一、我们定义一个需要定时执行的任务的类\"><a href=\"#一、我们定义一个需要定时执行的任务的类\" class=\"headerlink\" title=\"一、我们定义一个需要定时执行的任务的类\"></a>一、我们定义一个需要定时执行的任务的类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Timer; </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeTaskTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </div><div class=\"line\">\t\tTimer timer = <span class=\"keyword\">new</span> Timer(); </div><div class=\"line\">\t\ttimer.schedule(<span class=\"keyword\">new</span> Task(), <span class=\"number\">60</span> * <span class=\"number\">1000</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：我们的定时任务，就在这个类的main函数里执行</p>\n<p>1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务</p>\n<p>2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，<br>public void schedule(TimerTask task,long delay) </p>\n<p>首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span> </span>&#123; </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123; </div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"定时任务执行\"</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。</p>\n<p>第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，<br>所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。</p>\n<h3 id=\"二、循环执行任务\"><a href=\"#二、循环执行任务\" class=\"headerlink\" title=\"二、循环执行任务\"></a>二、循环执行任务</h3><p>循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，<br>这样就用到了schedule方法的是另一个重载函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,<span class=\"keyword\">long</span> delay,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<p>前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），<br>比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。</p>\n<h3 id=\"三、定时\"><a href=\"#三、定时\" class=\"headerlink\" title=\"三、定时\"></a>三、定时</h3><p>指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，<br>就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date time)</span></span></div></pre></td></tr></table></figure>\n<p>比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。<br>有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。</p>\n<p>schedule最后一个重载的方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date firstTime,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"四、扩展\"><a href=\"#四、扩展\" class=\"headerlink\" title=\"四、扩展\"></a>四、扩展</h3><p>j2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧</p>\n"},{"title":"java接收oracle中clob类型字段值","date":"2016-07-06T08:16:33.000Z","_content":"oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？\n \n    Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\n    Reader is = columnContentClob.getCharacterStream();//用reader接收\n    BufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\n    String columnContent = bf.readLine();//读取大文本的内容\n\n**实例**\n\n\tString driver = \"oracle.jdbc.OracleDriver\";\n    String url = \"jdbc:oracle:thin:@127.0.0.1:1521/databaseName\";\n    String username = \"username\";\n    String password = \"password\";\n    Class.forName(driver);\n    Connection conn = DriverManager.getConnection(url, username, password);\n\n \tResultSet rs = null;\n    PreparedStatement pstmt = null;\n    String query = \"SELECT description FROM mytable WHERE id = ?\";\n    try {\n      conn = getConnection();\n      pstmt = conn.prepareStatement(query);\n      pstmt.setInt(1, id);\n      rs = pstmt.executeQuery();\n      rs.next();\n      Clob clob = rs.getClob(1);//rs.getClob(\"description\");\n      \n    } finally {\n      rs.close();\n      pstmt.close();\n      conn.close();\n    }","source":"_posts/java接收oracle中clob类型字段值.md","raw":"---\ntitle: java接收oracle中clob类型字段值\ndate: 2016-07-06 16:16:33\ncategories: java\ntags: java接收clob字段\n---\noracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？\n \n    Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\n    Reader is = columnContentClob.getCharacterStream();//用reader接收\n    BufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\n    String columnContent = bf.readLine();//读取大文本的内容\n\n**实例**\n\n\tString driver = \"oracle.jdbc.OracleDriver\";\n    String url = \"jdbc:oracle:thin:@127.0.0.1:1521/databaseName\";\n    String username = \"username\";\n    String password = \"password\";\n    Class.forName(driver);\n    Connection conn = DriverManager.getConnection(url, username, password);\n\n \tResultSet rs = null;\n    PreparedStatement pstmt = null;\n    String query = \"SELECT description FROM mytable WHERE id = ?\";\n    try {\n      conn = getConnection();\n      pstmt = conn.prepareStatement(query);\n      pstmt.setInt(1, id);\n      rs = pstmt.executeQuery();\n      rs.next();\n      Clob clob = rs.getClob(1);//rs.getClob(\"description\");\n      \n    } finally {\n      rs.close();\n      pstmt.close();\n      conn.close();\n    }","slug":"java接收oracle中clob类型字段值","published":1,"updated":"2017-01-11T02:06:24.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58dds00021gco0y9qm8fql","content":"<p>oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？</p>\n<pre><code>Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\nReader is = columnContentClob.getCharacterStream();//用reader接收\nBufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\nString columnContent = bf.readLine();//读取大文本的内容\n</code></pre><p><strong>实例</strong></p>\n<pre><code>String driver = &quot;oracle.jdbc.OracleDriver&quot;;\nString url = &quot;jdbc:oracle:thin:@127.0.0.1:1521/databaseName&quot;;\nString username = &quot;username&quot;;\nString password = &quot;password&quot;;\nClass.forName(driver);\nConnection conn = DriverManager.getConnection(url, username, password);\n\n ResultSet rs = null;\nPreparedStatement pstmt = null;\nString query = &quot;SELECT description FROM mytable WHERE id = ?&quot;;\ntry {\n  conn = getConnection();\n  pstmt = conn.prepareStatement(query);\n  pstmt.setInt(1, id);\n  rs = pstmt.executeQuery();\n  rs.next();\n  Clob clob = rs.getClob(1);//rs.getClob(&quot;description&quot;);\n\n} finally {\n  rs.close();\n  pstmt.close();\n  conn.close();\n}\n</code></pre>","excerpt":"","more":"<p>oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？</p>\n<pre><code>Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\nReader is = columnContentClob.getCharacterStream();//用reader接收\nBufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\nString columnContent = bf.readLine();//读取大文本的内容\n</code></pre><p><strong>实例</strong></p>\n<pre><code>String driver = &quot;oracle.jdbc.OracleDriver&quot;;\nString url = &quot;jdbc:oracle:thin:@127.0.0.1:1521/databaseName&quot;;\nString username = &quot;username&quot;;\nString password = &quot;password&quot;;\nClass.forName(driver);\nConnection conn = DriverManager.getConnection(url, username, password);\n\n ResultSet rs = null;\nPreparedStatement pstmt = null;\nString query = &quot;SELECT description FROM mytable WHERE id = ?&quot;;\ntry {\n  conn = getConnection();\n  pstmt = conn.prepareStatement(query);\n  pstmt.setInt(1, id);\n  rs = pstmt.executeQuery();\n  rs.next();\n  Clob clob = rs.getClob(1);//rs.getClob(&quot;description&quot;);\n\n} finally {\n  rs.close();\n  pstmt.close();\n  conn.close();\n}\n</code></pre>"},{"title":"java通过Stream对list集合分组","date":"2016-07-15T06:00:11.000Z","_content":"现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下\n\n```java\n\n\tpackage com.maps;\n\n    public class User{\n    \tprivate Integer id;\n\t\tprivate String type;\n\t\tprivate String name; \n\t\t\n\t\tpublic User(){}\n\t\tpublic User(Integer id,String type,String name){\n\t\t\tthis.id = id;\n\t\t\tthis.type = type;\n\t\t\tthis.name = name;\n\t\t}   \n\n\t\tpublic void setId(Integer id){\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Integer getId(){\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setType(String type){\n\t\t\tthis.type = type;\n\t\t}\n\t\t\n\t\tpublic String getType(){\n\t\t\treturn type;\n\t\t}\n\t\t\n\t\tpublic void setName(String name){\n\t\t\tthis.name = name;\n\t\t}\n\t\t\n\t\tpublic String getName(){\n\t\t\treturn name;\n\t\t}\n    }\n```\n\n```java\n\n\tpackage com.maps;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\timport java.util.stream.Collectors;\n\n    public class MainUser{\n    \t\n\t\tpublic static void main(String[] args){\n\t\t\tList<User> list = getUserList();\n\t\t\tMap<String,List<User>> userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));\n\t\t}\n\n\n\t\tpublic static List<User> getUserList(){\n\t\t\tUser user1 = new User(1,\"张三\",\"小学\");\n\t\t\tUser user2 = new User(2,\"李四\",\"小学\");\n\t\t\tUser user3 = new User(3,\"王五\",\"初中\");\n\t\t\tUser user4 = new User(4,\"马六\",\"高中\");\n\t\t\t\n\t\t\tList<User> list = new ArrayList<User>();\n\t\t\tlist.add(user1);\n\t\t\tlist.add(user2);\n\t\t\tlist.add(user3);\n\t\t\tlist.add(user4);\n\t\t\t\t\n\t\t\treturn list;\n\t\t}\n    }\n```\n\n运行上面例子得到下面的结果\n```java\n    {高中=[com.maps.User@448139f0], 初中=[com.maps.User@7cca494b], 小学=[com.maps.User@7ba4f24f, com.maps.User@3b9a45b3]}\n```\n是不是感觉不用for循环挺爽！","source":"_posts/java通过Stream对list集合分组.md","raw":"---\ntitle: java通过Stream对list集合分组\ndate: 2016-07-15 14:00:11\ncategories: java\ntags: java8 Stream\n---\n现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下\n\n```java\n\n\tpackage com.maps;\n\n    public class User{\n    \tprivate Integer id;\n\t\tprivate String type;\n\t\tprivate String name; \n\t\t\n\t\tpublic User(){}\n\t\tpublic User(Integer id,String type,String name){\n\t\t\tthis.id = id;\n\t\t\tthis.type = type;\n\t\t\tthis.name = name;\n\t\t}   \n\n\t\tpublic void setId(Integer id){\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Integer getId(){\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setType(String type){\n\t\t\tthis.type = type;\n\t\t}\n\t\t\n\t\tpublic String getType(){\n\t\t\treturn type;\n\t\t}\n\t\t\n\t\tpublic void setName(String name){\n\t\t\tthis.name = name;\n\t\t}\n\t\t\n\t\tpublic String getName(){\n\t\t\treturn name;\n\t\t}\n    }\n```\n\n```java\n\n\tpackage com.maps;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\timport java.util.stream.Collectors;\n\n    public class MainUser{\n    \t\n\t\tpublic static void main(String[] args){\n\t\t\tList<User> list = getUserList();\n\t\t\tMap<String,List<User>> userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));\n\t\t}\n\n\n\t\tpublic static List<User> getUserList(){\n\t\t\tUser user1 = new User(1,\"张三\",\"小学\");\n\t\t\tUser user2 = new User(2,\"李四\",\"小学\");\n\t\t\tUser user3 = new User(3,\"王五\",\"初中\");\n\t\t\tUser user4 = new User(4,\"马六\",\"高中\");\n\t\t\t\n\t\t\tList<User> list = new ArrayList<User>();\n\t\t\tlist.add(user1);\n\t\t\tlist.add(user2);\n\t\t\tlist.add(user3);\n\t\t\tlist.add(user4);\n\t\t\t\t\n\t\t\treturn list;\n\t\t}\n    }\n```\n\n运行上面例子得到下面的结果\n```java\n    {高中=[com.maps.User@448139f0], 初中=[com.maps.User@7cca494b], 小学=[com.maps.User@7ba4f24f, com.maps.User@3b9a45b3]}\n```\n是不是感觉不用for循环挺爽！","slug":"java通过Stream对list集合分组","published":1,"updated":"2017-01-11T02:06:24.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58dds60024gco06evomgx2","content":"<p>现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">   \t<span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String type;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Integer id,String type,String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;   </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainUser</span></span>&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tList&lt;User&gt; list = getUserList();</div><div class=\"line\">\t\tMap&lt;String,List&lt;User&gt;&gt; userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"张三\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>,<span class=\"string\">\"王五\"</span>,<span class=\"string\">\"初中\"</span>);</div><div class=\"line\">\t\tUser user4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>,<span class=\"string\">\"马六\"</span>,<span class=\"string\">\"高中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</div><div class=\"line\">\t\tlist.add(user1);</div><div class=\"line\">\t\tlist.add(user2);</div><div class=\"line\">\t\tlist.add(user3);</div><div class=\"line\">\t\tlist.add(user4);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>运行上面例子得到下面的结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;高中=[com.maps.User@<span class=\"number\">448139f</span>0], 初中=[com.maps.User@<span class=\"number\">7</span>cca494b], 小学=[com.maps.User@<span class=\"number\">7</span>ba4f24f, com.maps.User@<span class=\"number\">3</span>b9a45b3]&#125;</div></pre></td></tr></table></figure></p>\n<p>是不是感觉不用for循环挺爽！</p>\n","excerpt":"","more":"<p>现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">   \t<span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String type;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Integer id,String type,String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;   </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainUser</span></span>&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tList&lt;User&gt; list = getUserList();</div><div class=\"line\">\t\tMap&lt;String,List&lt;User&gt;&gt; userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"张三\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>,<span class=\"string\">\"王五\"</span>,<span class=\"string\">\"初中\"</span>);</div><div class=\"line\">\t\tUser user4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>,<span class=\"string\">\"马六\"</span>,<span class=\"string\">\"高中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</div><div class=\"line\">\t\tlist.add(user1);</div><div class=\"line\">\t\tlist.add(user2);</div><div class=\"line\">\t\tlist.add(user3);</div><div class=\"line\">\t\tlist.add(user4);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>运行上面例子得到下面的结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;高中=[com.maps.User@<span class=\"number\">448139f</span>0], 初中=[com.maps.User@<span class=\"number\">7</span>cca494b], 小学=[com.maps.User@<span class=\"number\">7</span>ba4f24f, com.maps.User@<span class=\"number\">3</span>b9a45b3]&#125;</div></pre></td></tr></table></figure></p>\n<p>是不是感觉不用for循环挺爽！</p>\n"},{"title":"jquery获取单选按钮值的诡异之处","date":"2016-08-21T04:17:10.000Z","_content":"最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name='types']这种方式获取选中的值时是没有问题的，但是当你使用[type='radio'][name='language']这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：\n\n表单元素如下：\n```java\n\t<input type=\"radio\" name=\"language\"  value=\"php\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"mysql\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"java\"/>\n```\n\n**一、方式一 [checked] (正确)**\n\n通过使用`[checked]`获取选中的单选按钮的值，类型选择器使用的`:radio`\n\n    $('input:radio[name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio2.png \"可以获取单选值\")\n\n*注：这种方式`可以`获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。*\n\n\n**二、方式二 [checked] (错误)**\n\n通过使用`[checked]`获取选中的单选按钮的值，，类型选择器使用的`[type=\"radio\"]`\n\n    $('input[type=\"radio\"][name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio1.png \"不可以获取单选值\")\n\n*注：这种方式`不可以`获取选中的单选按钮的值，获取的值始终为undefined。*\n\n\n**三、小结 **\n\n上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=\"radio\")、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：\n\n![Alt text](http://soujava.com/images/jqueryRadio3.png \"官方文档\")\n\n官网文档中关于选择器的描述大致这样说：$(\":radio\")和$(\"[type=radio]\")是等价的,在效率方面还更倾向使用标准的类型选择器\n\n\n**四、方式三 :checked (没有任何问题)**\n\n使用`[type=\"radio\"]`类型选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n使用`:radio`伪类选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio4.png \"获取值\")\n\n*注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！*\n\n**五、总结**\n\n获取单选按钮元素选中的值时，统一采用`:checked`这种方式获取，不要再使用`[checked]`或者`[checked=\"checked\"]`这种方式。","source":"_posts/jquery获取单选按钮值的诡异之处.md","raw":"---\ntitle: jquery获取单选按钮值的诡异之处\ndate: 2016-08-21 12:17:10\ncategories: javascript\ntags: jquery\n---\n最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name='types']这种方式获取选中的值时是没有问题的，但是当你使用[type='radio'][name='language']这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：\n\n表单元素如下：\n```java\n\t<input type=\"radio\" name=\"language\"  value=\"php\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"mysql\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"java\"/>\n```\n\n**一、方式一 [checked] (正确)**\n\n通过使用`[checked]`获取选中的单选按钮的值，类型选择器使用的`:radio`\n\n    $('input:radio[name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio2.png \"可以获取单选值\")\n\n*注：这种方式`可以`获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。*\n\n\n**二、方式二 [checked] (错误)**\n\n通过使用`[checked]`获取选中的单选按钮的值，，类型选择器使用的`[type=\"radio\"]`\n\n    $('input[type=\"radio\"][name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio1.png \"不可以获取单选值\")\n\n*注：这种方式`不可以`获取选中的单选按钮的值，获取的值始终为undefined。*\n\n\n**三、小结 **\n\n上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=\"radio\")、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：\n\n![Alt text](http://soujava.com/images/jqueryRadio3.png \"官方文档\")\n\n官网文档中关于选择器的描述大致这样说：$(\":radio\")和$(\"[type=radio]\")是等价的,在效率方面还更倾向使用标准的类型选择器\n\n\n**四、方式三 :checked (没有任何问题)**\n\n使用`[type=\"radio\"]`类型选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n使用`:radio`伪类选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio4.png \"获取值\")\n\n*注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！*\n\n**五、总结**\n\n获取单选按钮元素选中的值时，统一采用`:checked`这种方式获取，不要再使用`[checked]`或者`[checked=\"checked\"]`这种方式。","slug":"jquery获取单选按钮值的诡异之处","published":1,"updated":"2017-01-11T02:06:24.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58dds80027gco03cvwwwsj","content":"<p>最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name=’types’]这种方式获取选中的值时是没有问题的，但是当你使用[type=’radio’][name=’language’]这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：</p>\n<p>表单元素如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"php\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"mysql\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"java\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>一、方式一 [checked] (正确)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，类型选择器使用的<code>:radio</code></p>\n<pre><code>$(&apos;input:radio[name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio2.png\" alt=\"Alt text\" title=\"可以获取单选值\"></p>\n<p><em>注：这种方式<code>可以</code>获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。</em></p>\n<p><strong>二、方式二 [checked] (错误)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，，类型选择器使用的<code>[type=&quot;radio&quot;]</code></p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio1.png\" alt=\"Alt text\" title=\"不可以获取单选值\"></p>\n<p><em>注：这种方式<code>不可以</code>获取选中的单选按钮的值，获取的值始终为undefined。</em></p>\n<p><strong>三、小结 </strong></p>\n<p>上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=”radio”)、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：</p>\n<p><img src=\"http://soujava.com/images/jqueryRadio3.png\" alt=\"Alt text\" title=\"官方文档\"></p>\n<p>官网文档中关于选择器的描述大致这样说：$(“:radio”)和$(“[type=radio]”)是等价的,在效率方面还更倾向使用标准的类型选择器</p>\n<p><strong>四、方式三 :checked (没有任何问题)</strong></p>\n<p>使用<code>[type=&quot;radio&quot;]</code>类型选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p>使用<code>:radio</code>伪类选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio4.png\" alt=\"Alt text\" title=\"获取值\"></p>\n<p><em>注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！</em></p>\n<p><strong>五、总结</strong></p>\n<p>获取单选按钮元素选中的值时，统一采用<code>:checked</code>这种方式获取，不要再使用<code>[checked]</code>或者<code>[checked=&quot;checked&quot;]</code>这种方式。</p>\n","excerpt":"","more":"<p>最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name=’types’]这种方式获取选中的值时是没有问题的，但是当你使用[type=’radio’][name=’language’]这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：</p>\n<p>表单元素如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"php\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"mysql\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"java\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>一、方式一 [checked] (正确)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，类型选择器使用的<code>:radio</code></p>\n<pre><code>$(&apos;input:radio[name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio2.png\" alt=\"Alt text\" title=\"可以获取单选值\"></p>\n<p><em>注：这种方式<code>可以</code>获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。</em></p>\n<p><strong>二、方式二 [checked] (错误)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，，类型选择器使用的<code>[type=&quot;radio&quot;]</code></p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio1.png\" alt=\"Alt text\" title=\"不可以获取单选值\"></p>\n<p><em>注：这种方式<code>不可以</code>获取选中的单选按钮的值，获取的值始终为undefined。</em></p>\n<p><strong>三、小结 </strong></p>\n<p>上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=”radio”)、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：</p>\n<p><img src=\"http://soujava.com/images/jqueryRadio3.png\" alt=\"Alt text\" title=\"官方文档\"></p>\n<p>官网文档中关于选择器的描述大致这样说：$(“:radio”)和$(“[type=radio]”)是等价的,在效率方面还更倾向使用标准的类型选择器</p>\n<p><strong>四、方式三 :checked (没有任何问题)</strong></p>\n<p>使用<code>[type=&quot;radio&quot;]</code>类型选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p>使用<code>:radio</code>伪类选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio4.png\" alt=\"Alt text\" title=\"获取值\"></p>\n<p><em>注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！</em></p>\n<p><strong>五、总结</strong></p>\n<p>获取单选按钮元素选中的值时，统一采用<code>:checked</code>这种方式获取，不要再使用<code>[checked]</code>或者<code>[checked=&quot;checked&quot;]</code>这种方式。</p>\n"},{"title":"oracle11G导出数据时空表无法导出","date":"2016-07-06T00:49:02.000Z","_content":"  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是\n  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。\n\n> 注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。\n  \n\n**解决方法：**\n\n        1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n        2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n        3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n        4）下面我们通过select 来生成修改语句：\n            select 'alter table '||table_name||' allocate extent;' from user_tables where num_rows=0\n             后复制生成的修改语句执行，问题解决！\n\n**总结：解决方法共3个途径：**\n\n\t1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n    2：修改系统参数\n\t\t  alter system set deferred_segment_creation=false;\n         （对以后新增的表系统会分配 segment），重启数据库。\n    3：批量对现有的空表分配空间\n         select 'alter table ' || table_name ||  ' allocate extent;' as sql from all_tables where num_rows = 0 and OWNER=username ;\n\n\n","source":"_posts/oracle11G导出数据时空表无法导出.md","raw":"---\ntitle: oracle11G导出数据时空表无法导出\ndate: 2016-07-06 08:49:02\ncategories: oracle\ntags: oracle导出空表\n---\n  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是\n  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。\n\n> 注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。\n  \n\n**解决方法：**\n\n        1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n        2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n        3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n        4）下面我们通过select 来生成修改语句：\n            select 'alter table '||table_name||' allocate extent;' from user_tables where num_rows=0\n             后复制生成的修改语句执行，问题解决！\n\n**总结：解决方法共3个途径：**\n\n\t1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n    2：修改系统参数\n\t\t  alter system set deferred_segment_creation=false;\n         （对以后新增的表系统会分配 segment），重启数据库。\n    3：批量对现有的空表分配空间\n         select 'alter table ' || table_name ||  ' allocate extent;' as sql from all_tables where num_rows = 0 and OWNER=username ;\n\n\n","slug":"oracle11G导出数据时空表无法导出","published":1,"updated":"2017-01-11T02:06:24.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsb0029gco08wqlschl","content":"<p>  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是<br>  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。</p>\n<blockquote>\n<p>注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。</p>\n</blockquote>\n<p><strong>解决方法：</strong></p>\n<pre><code>1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n4）下面我们通过select 来生成修改语句：\n    select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; from user_tables where num_rows=0\n     后复制生成的修改语句执行，问题解决！\n</code></pre><p><strong>总结：解决方法共3个途径：</strong></p>\n<pre><code>1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n2：修改系统参数\n      alter system set deferred_segment_creation=false;\n     （对以后新增的表系统会分配 segment），重启数据库。\n3：批量对现有的空表分配空间\n     select &apos;alter table &apos; || table_name ||  &apos; allocate extent;&apos; as sql from all_tables where num_rows = 0 and OWNER=username ;\n</code></pre>","excerpt":"","more":"<p>  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是<br>  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。</p>\n<blockquote>\n<p>注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。</p>\n</blockquote>\n<p><strong>解决方法：</strong></p>\n<pre><code>1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n4）下面我们通过select 来生成修改语句：\n    select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; from user_tables where num_rows=0\n     后复制生成的修改语句执行，问题解决！\n</code></pre><p><strong>总结：解决方法共3个途径：</strong></p>\n<pre><code>1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n2：修改系统参数\n      alter system set deferred_segment_creation=false;\n     （对以后新增的表系统会分配 segment），重启数据库。\n3：批量对现有的空表分配空间\n     select &apos;alter table &apos; || table_name ||  &apos; allocate extent;&apos; as sql from all_tables where num_rows = 0 and OWNER=username ;\n</code></pre>"},{"title":"spring3.1.1入门讲解一(非注解篇)","date":"2016-09-12T05:43:45.000Z","_content":"在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！\n\n### 一、准备\n\n1、spring版本：spring-framework-3.1.1.RELEASE\n\n2、jar包：spring包下面的dist文件夹下的所有jar包\n\n![](http://soujava.com/images/spring1.jpg)\n\n3、第三方jar包：\n\tjsp标签包：jstl-api-1.2.jar、standard.jar\n\n\t日志包：commons-logging-1.0.4.jar\n\n### 二、环境搭建\n\n1、新建Dynamic Web Project项目：spring\n\n![](http://soujava.com/images/spring2.png)\n\t\n2、在web.xml文件中添加如下配置\n```java\n\t <servlet>  \n      <servlet-name>spring</servlet-name>  \n      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  \n      <init-param>  \n\t  \t<description>加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件</description>  \n\t  \t<param-name>contextConfigLocation</param-name>  \n\t  \t<param-value>/WEB-INF/spring-mvc*.xml</param-value>  \n\t  </init-param>  \n      \t<!-- load-on-startup：表示启动容器时初始化该Servlet -->  \n      \t<load-on-startup>1</load-on-startup>  \n  \t</servlet>  \n  \t<servlet-mapping>  \n      <servlet-name>spring</servlet-name>  \n      <!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 -->  \n      <url-pattern>*.action</url-pattern>  \n  \t</servlet-mapping>  \n```\n3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n\t    xmlns:context=\"http://www.springframework.org/schema/context\"  \n\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  \n\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  \n\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\">  \n   \n    \t<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" />  \n  \n\t    <!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。-->  \n\t    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" />  \n\t      \n\t     <!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  \n\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  \n\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； -->\n\t\t <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">  \n\t        <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />  \n\t        <property name=\"prefix\" value=\"/view/\" />  \n\t        <property name=\"suffix\" value=\".jsp\" />  \n\t    </bean>\n\n\t\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>  \n\t\t<!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --> \n  \n</beans>  \n```\n\n4、在src下面添加controller类：HelloWorldController.java\n```java\n\tpackage com.spring.mvc;  \n  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport javax.servlet.http.HttpServletResponse;  \n\t  \n\timport org.springframework.web.context.request.RequestContextHolder;  \n\timport org.springframework.web.context.request.ServletRequestAttributes;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\timport org.springframework.web.servlet.mvc.Controller;  \n\t  \n\t  \n\tpublic class HelloWorldController implements Controller {  \n       \n\t    public ModelAndView handleRequest(HttpServletRequest arg0, HttpServletResponse arg1) throws Exception {  \n\t          \n\t       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  \n\t\n\t        ModelAndView mv = new ModelAndView();  \n\t        // 添加模型数据，可以是任意的POJO对象  \n\t        mv.addObject(\"message\", \"Hello World!\");  \n\t        // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  \n\t        mv.setViewName(\"hello\");  \n\t        return mv;  \n\t    }\n  }\n```\n\n4、在WebContent/view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>\n```\n5、启动tomcat服务器，访问一下\n\n![](http://soujava.com/images/spring3.jpg)\n\n注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）","source":"_posts/spring3-1-1入门讲解一-非注解篇.md","raw":"---\ntitle: spring3.1.1入门讲解一(非注解篇)\ndate: 2016-09-12 13:43:45\ncategories: spring\ntags: spring\n---\n在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！\n\n### 一、准备\n\n1、spring版本：spring-framework-3.1.1.RELEASE\n\n2、jar包：spring包下面的dist文件夹下的所有jar包\n\n![](http://soujava.com/images/spring1.jpg)\n\n3、第三方jar包：\n\tjsp标签包：jstl-api-1.2.jar、standard.jar\n\n\t日志包：commons-logging-1.0.4.jar\n\n### 二、环境搭建\n\n1、新建Dynamic Web Project项目：spring\n\n![](http://soujava.com/images/spring2.png)\n\t\n2、在web.xml文件中添加如下配置\n```java\n\t <servlet>  \n      <servlet-name>spring</servlet-name>  \n      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  \n      <init-param>  \n\t  \t<description>加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件</description>  \n\t  \t<param-name>contextConfigLocation</param-name>  \n\t  \t<param-value>/WEB-INF/spring-mvc*.xml</param-value>  \n\t  </init-param>  \n      \t<!-- load-on-startup：表示启动容器时初始化该Servlet -->  \n      \t<load-on-startup>1</load-on-startup>  \n  \t</servlet>  \n  \t<servlet-mapping>  \n      <servlet-name>spring</servlet-name>  \n      <!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 -->  \n      <url-pattern>*.action</url-pattern>  \n  \t</servlet-mapping>  \n```\n3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n\t    xmlns:context=\"http://www.springframework.org/schema/context\"  \n\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  \n\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  \n\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\">  \n   \n    \t<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" />  \n  \n\t    <!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。-->  \n\t    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" />  \n\t      \n\t     <!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  \n\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  \n\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； -->\n\t\t <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">  \n\t        <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />  \n\t        <property name=\"prefix\" value=\"/view/\" />  \n\t        <property name=\"suffix\" value=\".jsp\" />  \n\t    </bean>\n\n\t\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>  \n\t\t<!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --> \n  \n</beans>  \n```\n\n4、在src下面添加controller类：HelloWorldController.java\n```java\n\tpackage com.spring.mvc;  \n  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport javax.servlet.http.HttpServletResponse;  \n\t  \n\timport org.springframework.web.context.request.RequestContextHolder;  \n\timport org.springframework.web.context.request.ServletRequestAttributes;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\timport org.springframework.web.servlet.mvc.Controller;  \n\t  \n\t  \n\tpublic class HelloWorldController implements Controller {  \n       \n\t    public ModelAndView handleRequest(HttpServletRequest arg0, HttpServletResponse arg1) throws Exception {  \n\t          \n\t       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  \n\t\n\t        ModelAndView mv = new ModelAndView();  \n\t        // 添加模型数据，可以是任意的POJO对象  \n\t        mv.addObject(\"message\", \"Hello World!\");  \n\t        // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  \n\t        mv.setViewName(\"hello\");  \n\t        return mv;  \n\t    }\n  }\n```\n\n4、在WebContent/view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>\n```\n5、启动tomcat服务器，访问一下\n\n![](http://soujava.com/images/spring3.jpg)\n\n注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）","slug":"spring3-1-1入门讲解一-非注解篇","published":1,"updated":"2017-01-11T02:06:24.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsc002dgco0bbx6k8a9","content":"<p>在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！</p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>1、spring版本：spring-framework-3.1.1.RELEASE</p>\n<p>2、jar包：spring包下面的dist文件夹下的所有jar包</p>\n<p><img src=\"http://soujava.com/images/spring1.jpg\" alt=\"\"></p>\n<p>3、第三方jar包：<br>    jsp标签包：jstl-api-1.2.jar、standard.jar</p>\n<pre><code>日志包：commons-logging-1.0.4.jar\n</code></pre><h3 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h3><p>1、新建Dynamic Web Project项目：spring</p>\n<p><img src=\"http://soujava.com/images/spring2.png\" alt=\"\"></p>\n<p>2、在web.xml文件中添加如下配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  </div><div class=\"line\">    &lt;init-param&gt;  </div><div class=\"line\"> \t&lt;description&gt;加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件&lt;/description&gt;  </div><div class=\"line\"> \t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </div><div class=\"line\"> \t&lt;param-value&gt;/WEB-INF/spring-mvc*.xml&lt;/param-value&gt;  </div><div class=\"line\"> &lt;/init-param&gt;  </div><div class=\"line\">    \t&lt;!-- load-on-startup：表示启动容器时初始化该Servlet --&gt;  </div><div class=\"line\">    \t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class=\"line\">\t&lt;/servlet&gt;  </div><div class=\"line\">\t&lt;servlet-mapping&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 --&gt;  </div><div class=\"line\">    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;  </div><div class=\"line\">\t&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>\n<p>3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">\t&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"  </div><div class=\"line\">\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  </div><div class=\"line\">\t    xmlns:context=\"http://www.springframework.org/schema/context\"  </div><div class=\"line\">\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  </div><div class=\"line\">\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\"&gt;  </div><div class=\"line\">   </div><div class=\"line\">    \t&lt;bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" /&gt;  </div><div class=\"line\">  </div><div class=\"line\">\t    &lt;!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。--&gt;  </div><div class=\"line\">\t    &lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" /&gt;  </div><div class=\"line\">\t      </div><div class=\"line\">\t     &lt;!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  </div><div class=\"line\">\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  </div><div class=\"line\">\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； --&gt;</div><div class=\"line\">\t\t &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;  </div><div class=\"line\">\t        &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"prefix\" value=\"/view/\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"suffix\" value=\".jsp\" /&gt;  </div><div class=\"line\">\t    &lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t\t&lt;bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/&gt;  </div><div class=\"line\">\t\t&lt;!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --&gt; </div><div class=\"line\">  </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4、在src下面添加controller类：HelloWorldController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.Controller;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest arg0, HttpServletResponse arg1)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  </div><div class=\"line\"></div><div class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">        <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">        mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">        <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  </span></div><div class=\"line\">        mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> mv;  </div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>4、在WebContent/view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、启动tomcat服务器，访问一下</p>\n<p><img src=\"http://soujava.com/images/spring3.jpg\" alt=\"\"></p>\n<p>注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）</p>\n","excerpt":"","more":"<p>在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！</p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>1、spring版本：spring-framework-3.1.1.RELEASE</p>\n<p>2、jar包：spring包下面的dist文件夹下的所有jar包</p>\n<p><img src=\"http://soujava.com/images/spring1.jpg\" alt=\"\"></p>\n<p>3、第三方jar包：<br>    jsp标签包：jstl-api-1.2.jar、standard.jar</p>\n<pre><code>日志包：commons-logging-1.0.4.jar\n</code></pre><h3 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h3><p>1、新建Dynamic Web Project项目：spring</p>\n<p><img src=\"http://soujava.com/images/spring2.png\" alt=\"\"></p>\n<p>2、在web.xml文件中添加如下配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  </div><div class=\"line\">    &lt;init-param&gt;  </div><div class=\"line\"> \t&lt;description&gt;加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件&lt;/description&gt;  </div><div class=\"line\"> \t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </div><div class=\"line\"> \t&lt;param-value&gt;/WEB-INF/spring-mvc*.xml&lt;/param-value&gt;  </div><div class=\"line\"> &lt;/init-param&gt;  </div><div class=\"line\">    \t&lt;!-- load-on-startup：表示启动容器时初始化该Servlet --&gt;  </div><div class=\"line\">    \t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class=\"line\">\t&lt;/servlet&gt;  </div><div class=\"line\">\t&lt;servlet-mapping&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 --&gt;  </div><div class=\"line\">    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;  </div><div class=\"line\">\t&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>\n<p>3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">\t&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"  </div><div class=\"line\">\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  </div><div class=\"line\">\t    xmlns:context=\"http://www.springframework.org/schema/context\"  </div><div class=\"line\">\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  </div><div class=\"line\">\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\"&gt;  </div><div class=\"line\">   </div><div class=\"line\">    \t&lt;bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" /&gt;  </div><div class=\"line\">  </div><div class=\"line\">\t    &lt;!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。--&gt;  </div><div class=\"line\">\t    &lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" /&gt;  </div><div class=\"line\">\t      </div><div class=\"line\">\t     &lt;!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  </div><div class=\"line\">\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  </div><div class=\"line\">\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； --&gt;</div><div class=\"line\">\t\t &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;  </div><div class=\"line\">\t        &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"prefix\" value=\"/view/\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"suffix\" value=\".jsp\" /&gt;  </div><div class=\"line\">\t    &lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t\t&lt;bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/&gt;  </div><div class=\"line\">\t\t&lt;!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --&gt; </div><div class=\"line\">  </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4、在src下面添加controller类：HelloWorldController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.Controller;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest arg0, HttpServletResponse arg1)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  </div><div class=\"line\"></div><div class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">        <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">        mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">        <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  </span></div><div class=\"line\">        mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> mv;  </div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>4、在WebContent/view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、启动tomcat服务器，访问一下</p>\n<p><img src=\"http://soujava.com/images/spring3.jpg\" alt=\"\"></p>\n<p>注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）</p>\n"},{"title":"spring3.1.1入门讲解二(注解篇)","date":"2016-09-12T06:00:34.000Z","_content":"在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！\n\n### 一、准备篇-jar包的准备\n\n这里就不详细说明了详见上一篇博客--spring3.1.1入门讲解一（非注解篇）中的准备篇讲解\n\n### 二、环境搭建篇\n\n1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 \n\n2、配置spring-mvc.xml，重点就在这里，重点配置如下：\n\n\t1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>\n\n\t2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n\t<!-- 在com.spring.mvc包下寻找控制器组件 -->      \n\t<context:component-scan base-package=\"com.spring.mvc\"></context:component-scan>\n\n上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。\n\n3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java\n```java\n\tpackage com.spring.mvc;  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport org.springframework.stereotype.Controller;  \n\timport org.springframework.web.bind.annotation.RequestMapping;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\t  \n\t/** \n\t * 页面控制器 \n\t *  \n\t * @version 1.0 2015-02-11 下午05:39:25 \n\t */  \n\t//使用注解@Controller声明该类是一个控制器       \n\t@Controller  \n\t@RequestMapping(value=\"helloWorldAnnocationController\")  \n\tpublic class HelloWorldAnnocationController{  \n\t     //使用注解@RequestMapping声明这个控制器处理index.html的请求       \n\t      @RequestMapping(\"/hello\")  \n\t      public ModelAndView helloAnotherWorld( final HttpServletRequest request){     \n\t          ModelAndView mv = new ModelAndView();  \n\t            // 添加模型数据，可以是任意的POJO对象  \n\t            mv.addObject(\"message\", \"Hello World!\");  \n\t            // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  \n\t            mv.setViewName(\"hello\");  \n\t        //将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       \n\t        return mv;      \n\t      }  \n\t}  \n\n```\n\n4、在view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>  \n```\n5、访问注解版的controller控制器","source":"_posts/spring3-1-1入门讲解二-注解篇.md","raw":"---\ntitle: spring3.1.1入门讲解二(注解篇)\ndate: 2016-09-12 14:00:34\ncategories: spring\ntags: spring\n---\n在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！\n\n### 一、准备篇-jar包的准备\n\n这里就不详细说明了详见上一篇博客--spring3.1.1入门讲解一（非注解篇）中的准备篇讲解\n\n### 二、环境搭建篇\n\n1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 \n\n2、配置spring-mvc.xml，重点就在这里，重点配置如下：\n\n\t1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>\n\n\t2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n\t<!-- 在com.spring.mvc包下寻找控制器组件 -->      \n\t<context:component-scan base-package=\"com.spring.mvc\"></context:component-scan>\n\n上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。\n\n3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java\n```java\n\tpackage com.spring.mvc;  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport org.springframework.stereotype.Controller;  \n\timport org.springframework.web.bind.annotation.RequestMapping;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\t  \n\t/** \n\t * 页面控制器 \n\t *  \n\t * @version 1.0 2015-02-11 下午05:39:25 \n\t */  \n\t//使用注解@Controller声明该类是一个控制器       \n\t@Controller  \n\t@RequestMapping(value=\"helloWorldAnnocationController\")  \n\tpublic class HelloWorldAnnocationController{  \n\t     //使用注解@RequestMapping声明这个控制器处理index.html的请求       \n\t      @RequestMapping(\"/hello\")  \n\t      public ModelAndView helloAnotherWorld( final HttpServletRequest request){     \n\t          ModelAndView mv = new ModelAndView();  \n\t            // 添加模型数据，可以是任意的POJO对象  \n\t            mv.addObject(\"message\", \"Hello World!\");  \n\t            // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  \n\t            mv.setViewName(\"hello\");  \n\t        //将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       \n\t        return mv;      \n\t      }  \n\t}  \n\n```\n\n4、在view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>  \n```\n5、访问注解版的controller控制器","slug":"spring3-1-1入门讲解二-注解篇","published":1,"updated":"2017-01-11T02:06:24.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddse002ggco0vf5jvczf","content":"<p>在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！</p>\n<h3 id=\"一、准备篇-jar包的准备\"><a href=\"#一、准备篇-jar包的准备\" class=\"headerlink\" title=\"一、准备篇-jar包的准备\"></a>一、准备篇-jar包的准备</h3><p>这里就不详细说明了详见上一篇博客–spring3.1.1入门讲解一（非注解篇）中的准备篇讲解</p>\n<h3 id=\"二、环境搭建篇\"><a href=\"#二、环境搭建篇\" class=\"headerlink\" title=\"二、环境搭建篇\"></a>二、环境搭建篇</h3><p>1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 </p>\n<p>2、配置spring-mvc.xml，重点就在这里，重点配置如下：</p>\n<pre><code>1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n&lt;bean name=&quot;/hello&quot; class=&quot;com.spring.mvc.HelloWorldController&quot;/&gt;\n\n2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n&lt;!-- 在com.spring.mvc包下寻找控制器组件 --&gt;      \n&lt;context:component-scan base-package=&quot;com.spring.mvc&quot;&gt;&lt;/context:component-scan&gt;\n</code></pre><p>上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。</p>\n<p>3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * 页面控制器 </div><div class=\"line\"> *  </div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0 2015-02-11 下午05:39:25 </div><div class=\"line\"> */  </div><div class=\"line\"><span class=\"comment\">//使用注解@Controller声明该类是一个控制器       </span></div><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"helloWorldAnnocationController\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldAnnocationController</span></span>&#123;  </div><div class=\"line\">     <span class=\"comment\">//使用注解@RequestMapping声明这个控制器处理index.html的请求       </span></div><div class=\"line\">      <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)  </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">helloAnotherWorld</span><span class=\"params\">( <span class=\"keyword\">final</span> HttpServletRequest request)</span></span>&#123;     </div><div class=\"line\">          ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">            <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">            mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">            <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  </span></div><div class=\"line\">            mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       </span></div><div class=\"line\">        <span class=\"keyword\">return</span> mv;      </div><div class=\"line\">      &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、在view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、访问注解版的controller控制器</p>\n","excerpt":"","more":"<p>在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！</p>\n<h3 id=\"一、准备篇-jar包的准备\"><a href=\"#一、准备篇-jar包的准备\" class=\"headerlink\" title=\"一、准备篇-jar包的准备\"></a>一、准备篇-jar包的准备</h3><p>这里就不详细说明了详见上一篇博客–spring3.1.1入门讲解一（非注解篇）中的准备篇讲解</p>\n<h3 id=\"二、环境搭建篇\"><a href=\"#二、环境搭建篇\" class=\"headerlink\" title=\"二、环境搭建篇\"></a>二、环境搭建篇</h3><p>1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 </p>\n<p>2、配置spring-mvc.xml，重点就在这里，重点配置如下：</p>\n<pre><code>1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n&lt;bean name=&quot;/hello&quot; class=&quot;com.spring.mvc.HelloWorldController&quot;/&gt;\n\n2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n&lt;!-- 在com.spring.mvc包下寻找控制器组件 --&gt;      \n&lt;context:component-scan base-package=&quot;com.spring.mvc&quot;&gt;&lt;/context:component-scan&gt;\n</code></pre><p>上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。</p>\n<p>3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\"> * 页面控制器 </div><div class=\"line\"> *  </div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0 2015-02-11 下午05:39:25 </div><div class=\"line\"> */</span>  </div><div class=\"line\"><span class=\"comment\">//使用注解@Controller声明该类是一个控制器       </span></div><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"helloWorldAnnocationController\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldAnnocationController</span></span>&#123;  </div><div class=\"line\">     <span class=\"comment\">//使用注解@RequestMapping声明这个控制器处理index.html的请求       </span></div><div class=\"line\">      <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)  </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">helloAnotherWorld</span><span class=\"params\">( <span class=\"keyword\">final</span> HttpServletRequest request)</span></span>&#123;     </div><div class=\"line\">          ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">            <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">            mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">            <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  </span></div><div class=\"line\">            mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       </span></div><div class=\"line\">        <span class=\"keyword\">return</span> mv;      </div><div class=\"line\">      &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、在view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、访问注解版的controller控制器</p>\n"},{"title":"springBoot编写不同风格的restAPI接口","date":"2016-08-31T11:38:46.000Z","_content":"平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明\n\n### 一、静态url+动态参数(param)形式的api ###\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/info?id=123\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"/api\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@RequestParam(value = \"id\") String id）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的\n2、@RequestMapping  其提供路由信息，它告诉Spring任何来自\"/\"路径的HTTP请求都应该被映射到该Controller入口中\n3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法\n3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=\"id\") String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起\n\n\n### 二、动态url+动态参数(param)形式的api ###\n\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/{id}/info?status=1\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"user/{id}/info\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@PathVariable(value = \"id\") String id,\n\t\t\t\t\t\t @RequestParam(value = \"status\") String status）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面\n\n\n### 三、总结 ###\n\n1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)\n\n2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)","source":"_posts/springBoot编写不同风格的restAPI接口.md","raw":"---\ntitle: springBoot编写不同风格的restAPI接口\ndate: 2016-08-31 19:38:46\ncategories: spring\ntags: springBoot\n---\n平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明\n\n### 一、静态url+动态参数(param)形式的api ###\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/info?id=123\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"/api\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@RequestParam(value = \"id\") String id）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的\n2、@RequestMapping  其提供路由信息，它告诉Spring任何来自\"/\"路径的HTTP请求都应该被映射到该Controller入口中\n3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法\n3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=\"id\") String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起\n\n\n### 二、动态url+动态参数(param)形式的api ###\n\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/{id}/info?status=1\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"user/{id}/info\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@PathVariable(value = \"id\") String id,\n\t\t\t\t\t\t @RequestParam(value = \"status\") String status）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面\n\n\n### 三、总结 ###\n\n1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)\n\n2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)","slug":"springBoot编写不同风格的restAPI接口","published":1,"updated":"2017-01-11T02:06:24.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsg002jgco0r9tu3ek7","content":"<p>平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明</p>\n<h3 id=\"一、静态url-动态参数-param-形式的api\"><a href=\"#一、静态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"一、静态url+动态参数(param)形式的api\"></a>一、静态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/info?id=123</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"id\"</span>)</span> String id）</span>&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的<br>2、@RequestMapping  其提供路由信息，它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到该Controller入口中<br>3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法<br>3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=”id”) String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起</p>\n<h3 id=\"二、动态url-动态参数-param-形式的api\"><a href=\"#二、动态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"二、动态url+动态参数(param)形式的api\"></a>二、动态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/&#123;id&#125;/info?status=1</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"user/&#123;id&#125;/info\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@PathVariable(value = <span class=\"string\">\"id\"</span>)</span> String id,</span></div><div class=\"line\">\t\t\t\t\t @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"status\"</span>)</span> String status）&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面</p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)</p>\n<p>2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)</p>\n","excerpt":"","more":"<p>平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明</p>\n<h3 id=\"一、静态url-动态参数-param-形式的api\"><a href=\"#一、静态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"一、静态url+动态参数(param)形式的api\"></a>一、静态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/info?id=123</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"id\"</span>)</span> String id）</span>&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的<br>2、@RequestMapping  其提供路由信息，它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到该Controller入口中<br>3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法<br>3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=”id”) String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起</p>\n<h3 id=\"二、动态url-动态参数-param-形式的api\"><a href=\"#二、动态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"二、动态url+动态参数(param)形式的api\"></a>二、动态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/&#123;id&#125;/info?status=1</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"user/&#123;id&#125;/info\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@PathVariable(value = <span class=\"string\">\"id\"</span>)</span> String id,</div><div class=\"line\">\t\t\t\t\t @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"status\"</span>)</span> String status）</span>&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面</p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)</p>\n<p>2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)</p>\n"},{"title":"thymeleaf教程2-后台数据封装与页面渲染","date":"2016-08-23T08:32:50.000Z","_content":"我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。\n\n**一、添加一个表单页面--登陆操作**\n![](http://soujava.com/images/thy6.png)\n\n**二、新建业务控制器(doLogin)--获取登陆表单中提交的数据**\n```java\n\t\tString username = request.getParameter(\"username\");\n    \tString password = request.getParameter(\"password\");\n    \t//实例化一个thymeleaf文本上下文\n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n\t\t//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中\n        ctx.setVariable(\"username\", username);\n        ctx.setVariable(\"password\", password);\n        //调用模板引擎转向到对应的模板页面--desc模板页面\n        templateEngine.process(\"desc\", ctx, response.getWriter());\n```\n**三、新建模板页面(desc)--显示doLogin控制器中封装的数据**\n\n![](http://soujava.com/images/thy7.png)\n\n*注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=\"${XX}\"这种形式。*\n\n\n**四、编译工程项目--启动web服务器测试**\n\n1、在登陆表单中输入对应的用户名和密码，点击提交按钮\n![](http://soujava.com/images/thy1.png)\n\n1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。\n![](http://soujava.com/images/thy2.png)\n\n\n**五、在控制器doLogin中封装一些稍微复杂的数据集-数组**\n\n1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中\n```java\n\tString[] types = {\"足球\",\"篮球\",\"羽毛球\"};\n    ctx.setVariable(\"types\", types);\n```\n\n2、在desc模板页面中遍历显示封装好的集合数据\n\n```java\n\t<p th:each=\"type : ${types}\">\n    \t<span th:text=\"${type}\"></span>\n    </p>\n```\n*注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。*\n\n3、针对刚刚封装好的集合数据到页面测试一下\n\n![](http://soujava.com/images/thy3.png)\n\n![](http://soujava.com/images/thy4.png)\n\n\n**六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean**\n\n1、我们新建一个User的Bean实体\n```java\n\tpublic class User {\n\t \tprivate String firstName = null;\n\t    private String lastName = null;\n\t    private String nationality = null;\n\t    private Integer age = null；\n\t    \n\t    public User(final String firstName, final String lastName, \n\t            final String nationality, final Integer age) {\n\t        super();\n\t        this.firstName = firstName;\n\t        this.lastName = lastName;\n\t        this.nationality = nationality;\n\t        this.age = age;\n\t    }\n\t}\n```\n\n2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中\n\n```java\n\t\tUser user = new User(\"zhang\",\"san\",\"china\",25);\n        ctx.setVariable(\"user\", user);\n```\n\n3、在desc模板页面中显示封装好的User实体bean数据\n```java\n\n\t<p th:text=\"${user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age}\"></p>\n```\n注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。\n\n**六、总结**\n\n1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等\n2、通过thymeleaf模板引擎转向到对应的模板页面\n3、用thymeleaf提供的方法渲染后台封装的数据到页面中","source":"_posts/thymeleaf教程2-后台数据封装与页面渲染.md","raw":"---\ntitle: thymeleaf教程2-后台数据封装与页面渲染\ndate: 2016-08-23 16:32:50\ncategories: thymeleaf\ntags: thymeleaf\n---\n我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。\n\n**一、添加一个表单页面--登陆操作**\n![](http://soujava.com/images/thy6.png)\n\n**二、新建业务控制器(doLogin)--获取登陆表单中提交的数据**\n```java\n\t\tString username = request.getParameter(\"username\");\n    \tString password = request.getParameter(\"password\");\n    \t//实例化一个thymeleaf文本上下文\n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n\t\t//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中\n        ctx.setVariable(\"username\", username);\n        ctx.setVariable(\"password\", password);\n        //调用模板引擎转向到对应的模板页面--desc模板页面\n        templateEngine.process(\"desc\", ctx, response.getWriter());\n```\n**三、新建模板页面(desc)--显示doLogin控制器中封装的数据**\n\n![](http://soujava.com/images/thy7.png)\n\n*注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=\"${XX}\"这种形式。*\n\n\n**四、编译工程项目--启动web服务器测试**\n\n1、在登陆表单中输入对应的用户名和密码，点击提交按钮\n![](http://soujava.com/images/thy1.png)\n\n1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。\n![](http://soujava.com/images/thy2.png)\n\n\n**五、在控制器doLogin中封装一些稍微复杂的数据集-数组**\n\n1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中\n```java\n\tString[] types = {\"足球\",\"篮球\",\"羽毛球\"};\n    ctx.setVariable(\"types\", types);\n```\n\n2、在desc模板页面中遍历显示封装好的集合数据\n\n```java\n\t<p th:each=\"type : ${types}\">\n    \t<span th:text=\"${type}\"></span>\n    </p>\n```\n*注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。*\n\n3、针对刚刚封装好的集合数据到页面测试一下\n\n![](http://soujava.com/images/thy3.png)\n\n![](http://soujava.com/images/thy4.png)\n\n\n**六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean**\n\n1、我们新建一个User的Bean实体\n```java\n\tpublic class User {\n\t \tprivate String firstName = null;\n\t    private String lastName = null;\n\t    private String nationality = null;\n\t    private Integer age = null；\n\t    \n\t    public User(final String firstName, final String lastName, \n\t            final String nationality, final Integer age) {\n\t        super();\n\t        this.firstName = firstName;\n\t        this.lastName = lastName;\n\t        this.nationality = nationality;\n\t        this.age = age;\n\t    }\n\t}\n```\n\n2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中\n\n```java\n\t\tUser user = new User(\"zhang\",\"san\",\"china\",25);\n        ctx.setVariable(\"user\", user);\n```\n\n3、在desc模板页面中显示封装好的User实体bean数据\n```java\n\n\t<p th:text=\"${user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age}\"></p>\n```\n注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。\n\n**六、总结**\n\n1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等\n2、通过thymeleaf模板引擎转向到对应的模板页面\n3、用thymeleaf提供的方法渲染后台封装的数据到页面中","slug":"thymeleaf教程2-后台数据封装与页面渲染","published":1,"updated":"2017-01-11T02:06:24.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsj002mgco0tlk5h1da","content":"<p>我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。</p>\n<p><strong>一、添加一个表单页面–登陆操作</strong><br><img src=\"http://soujava.com/images/thy6.png\" alt=\"\"></p>\n<p><strong>二、新建业务控制器(doLogin)–获取登陆表单中提交的数据</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String username = request.getParameter(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">  \tString password = request.getParameter(<span class=\"string\">\"password\"</span>);</div><div class=\"line\">  \t<span class=\"comment\">//实例化一个thymeleaf文本上下文</span></div><div class=\"line\">      WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\"><span class=\"comment\">//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中</span></div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">      <span class=\"comment\">//调用模板引擎转向到对应的模板页面--desc模板页面</span></div><div class=\"line\">      templateEngine.process(<span class=\"string\">\"desc\"</span>, ctx, response.getWriter());</div></pre></td></tr></table></figure></p>\n<p><strong>三、新建模板页面(desc)–显示doLogin控制器中封装的数据</strong></p>\n<p><img src=\"http://soujava.com/images/thy7.png\" alt=\"\"></p>\n<p><em>注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=”${XX}”这种形式。</em></p>\n<p><strong>四、编译工程项目–启动web服务器测试</strong></p>\n<p>1、在登陆表单中输入对应的用户名和密码，点击提交按钮<br><img src=\"http://soujava.com/images/thy1.png\" alt=\"\"></p>\n<p>1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。<br><img src=\"http://soujava.com/images/thy2.png\" alt=\"\"></p>\n<p><strong>五、在控制器doLogin中封装一些稍微复杂的数据集-数组</strong></p>\n<p>1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] types = &#123;<span class=\"string\">\"足球\"</span>,<span class=\"string\">\"篮球\"</span>,<span class=\"string\">\"羽毛球\"</span>&#125;;</div><div class=\"line\">   ctx.setVariable(<span class=\"string\">\"types\"</span>, types);</div></pre></td></tr></table></figure></p>\n<p>2、在desc模板页面中遍历显示封装好的集合数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p th:each=\"type : $&#123;types&#125;\"&gt;</div><div class=\"line\">   \t&lt;span th:text=\"$&#123;type&#125;\"&gt;&lt;/span&gt;</div><div class=\"line\">   &lt;/p&gt;</div></pre></td></tr></table></figure>\n<p><em>注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。</em></p>\n<p>3、针对刚刚封装好的集合数据到页面测试一下</p>\n<p><img src=\"http://soujava.com/images/thy3.png\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/thy4.png\" alt=\"\"></p>\n<p><strong>六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean</strong></p>\n<p>1、我们新建一个User的Bean实体<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"> \t<span class=\"keyword\">private</span> String firstName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String lastName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nationality = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer age = <span class=\"keyword\">null</span>；</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">final</span> String firstName, <span class=\"keyword\">final</span> String lastName, </span></span></div><div class=\"line\">            <span class=\"keyword\">final</span> String nationality, <span class=\"keyword\">final</span> Integer age) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.nationality = nationality;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"zhang\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"china\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"user\"</span>, user);</div></pre></td></tr></table></figure>\n<p>3、在desc模板页面中显示封装好的User实体bean数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;p th:text=\"$&#123;user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age&#125;\"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。</p>\n<p><strong>六、总结</strong></p>\n<p>1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等<br>2、通过thymeleaf模板引擎转向到对应的模板页面<br>3、用thymeleaf提供的方法渲染后台封装的数据到页面中</p>\n","excerpt":"","more":"<p>我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。</p>\n<p><strong>一、添加一个表单页面–登陆操作</strong><br><img src=\"http://soujava.com/images/thy6.png\" alt=\"\"></p>\n<p><strong>二、新建业务控制器(doLogin)–获取登陆表单中提交的数据</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String username = request.getParameter(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">  \tString password = request.getParameter(<span class=\"string\">\"password\"</span>);</div><div class=\"line\">  \t<span class=\"comment\">//实例化一个thymeleaf文本上下文</span></div><div class=\"line\">      WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\"><span class=\"comment\">//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中</span></div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">      <span class=\"comment\">//调用模板引擎转向到对应的模板页面--desc模板页面</span></div><div class=\"line\">      templateEngine.process(<span class=\"string\">\"desc\"</span>, ctx, response.getWriter());</div></pre></td></tr></table></figure></p>\n<p><strong>三、新建模板页面(desc)–显示doLogin控制器中封装的数据</strong></p>\n<p><img src=\"http://soujava.com/images/thy7.png\" alt=\"\"></p>\n<p><em>注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=”${XX}”这种形式。</em></p>\n<p><strong>四、编译工程项目–启动web服务器测试</strong></p>\n<p>1、在登陆表单中输入对应的用户名和密码，点击提交按钮<br><img src=\"http://soujava.com/images/thy1.png\" alt=\"\"></p>\n<p>1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。<br><img src=\"http://soujava.com/images/thy2.png\" alt=\"\"></p>\n<p><strong>五、在控制器doLogin中封装一些稍微复杂的数据集-数组</strong></p>\n<p>1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] types = &#123;<span class=\"string\">\"足球\"</span>,<span class=\"string\">\"篮球\"</span>,<span class=\"string\">\"羽毛球\"</span>&#125;;</div><div class=\"line\">   ctx.setVariable(<span class=\"string\">\"types\"</span>, types);</div></pre></td></tr></table></figure></p>\n<p>2、在desc模板页面中遍历显示封装好的集合数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p th:each=\"type : $&#123;types&#125;\"&gt;</div><div class=\"line\">   \t&lt;span th:text=\"$&#123;type&#125;\"&gt;&lt;/span&gt;</div><div class=\"line\">   &lt;/p&gt;</div></pre></td></tr></table></figure>\n<p><em>注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。</em></p>\n<p>3、针对刚刚封装好的集合数据到页面测试一下</p>\n<p><img src=\"http://soujava.com/images/thy3.png\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/thy4.png\" alt=\"\"></p>\n<p><strong>六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean</strong></p>\n<p>1、我们新建一个User的Bean实体<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"> \t<span class=\"keyword\">private</span> String firstName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String lastName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nationality = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer age = <span class=\"keyword\">null</span>；</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">final</span> String firstName, <span class=\"keyword\">final</span> String lastName, </div><div class=\"line\">            <span class=\"keyword\">final</span> String nationality, <span class=\"keyword\">final</span> Integer age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.nationality = nationality;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"zhang\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"china\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"user\"</span>, user);</div></pre></td></tr></table></figure>\n<p>3、在desc模板页面中显示封装好的User实体bean数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;p th:text=\"$&#123;user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age&#125;\"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。</p>\n<p><strong>六、总结</strong></p>\n<p>1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等<br>2、通过thymeleaf模板引擎转向到对应的模板页面<br>3、用thymeleaf提供的方法渲染后台封装的数据到页面中</p>\n"},{"title":"thymeleaf教程1-环境搭建","date":"2016-08-08T07:16:41.000Z","_content":"一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：\n1. 在你的springboot项目工程中添加thymeleaf的依赖配置\n\n```java\n\t compile(\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\");\n```\n2. 编写一个测试页面(html),对thymeleaf进行使用\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\">\n\t<head>\n\t</head>\n\t<body>\n\t\thello thymeleaf!\n\t</body>\n```\n> 我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用**<th:XX **这样的标签把数据渲染到html模板中了；\n\n由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是<th:XX 标签被忽略的效果！\n\n**二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含**\n\n1. eclipse新建maven工程\n\t![](http://soujava.com/images/newmavenproject.png)\n\t![](http://soujava.com/images/newmaven1.png)\n\t![](http://soujava.com/images/newmaven2.png)\n\t![](http://soujava.com/images/newmaven3.png)\n2. 在pom.xml配置对Thymeleaf的依赖\n```python\n\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  \t<modelVersion>4.0.0</modelVersion>\n  \t<groupId>com.maps</groupId>\n  \t<artifactId>theymeleaf</artifactId>\n  \t<packaging>war</packaging>\n  \t<version>0.0.1-SNAPSHOT</version>\n  \t<name>theymeleaf Maven Webapp</name>\n  \t<url>http://maven.apache.org</url>\n  \n    <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n    </repository>\n    </repositories>\n  \n  \n    <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n     <dependency>\n      <groupId>org.thymeleaf</groupId>\n      <artifactId>thymeleaf</artifactId>\n      <version>3.0.1.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n        \n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.15</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>com.sun.jdmk</groupId>\n          <artifactId>jmxtools</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.sun.jmx</groupId>\n          <artifactId>jmxri</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>javax.jms</groupId>\n          <artifactId>jms</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  \t</dependencies>\n  \n  \n  \t<build>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n      </resource>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.properties</include>\n          <include>**/*.xml</include>\n          <include>**/*.html</include>\n        </includes>\n      </resource>\n    </resources>\n        \n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.2</version>\n        <configuration>\n          <source>1.5</source>\n          <target>1.5</target>\n        </configuration>\n      </plugin>\n      \n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>2.7</version>\n        <configuration>\n          <encoding>ISO-8859-1</encoding>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  \t</build>\n\t</project>\t\n```\n\n3. 中断一下，先讲解一下该demo的执行流程\n\t![模板引擎执行流程](http://soujava.com/images/thymeleafFollow.png)\n\n4. MyApplication--应用装载器\n```java\n\tpackage application;\n\n\timport java.util.HashMap;\n\timport java.util.Map;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.TemplateEngine;\n\timport org.thymeleaf.templatemode.TemplateMode;\n\timport org.thymeleaf.templateresolver.ServletContextTemplateResolver;\n\n\timport controller.HomeController;\n\timport controller.Controller;\n\n\tpublic class MyApplication {\n\n   \t \tprivate TemplateEngine templateEngine;\n   \t \tprivate Map<String, Controller> controllersByURL;\n    \n    \tpublic MyApplication(final ServletContext servletContext) {\n        \tsuper();\n\t        /*1、实例化模板解析器，并配置相关选项*/\n\t        ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(servletContext);\n\t        /*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/ \n\t        templateResolver.setTemplateMode(TemplateMode.HTML);\n\t        /*1.2、设置模板引擎的默认加载路径*/\n\t        templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\t        /*1.3、设置模板引擎的文件后缀*/\n\t        templateResolver.setSuffix(\".html\");\n\t        /*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/\n\t        templateResolver.setCacheTTLMs(Long.valueOf(3600000L));\n\t        /*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/\n\t        templateResolver.setCacheable(false);\n\n\t        /*2、实例化模板引擎*/\n\t        this.templateEngine = new TemplateEngine();\n\t        /*3、将模板解析器装载到模板引擎中*/\n\t        this.templateEngine.setTemplateResolver(templateResolver);\n\t        \n\t        /*4、针对不同的url实例化不同的业务控制器*/\n\t        this.controllersByURL = new HashMap<String, Controller>();\n\t        this.controllersByURL.put(\"/\", new HomeController());\n    \t}\n    \n    \tpublic Controller resolveControllerForRequest(final HttpServletRequest request) {\n       \t \tfinal String path = getRequestPath(request);\n        \treturn this.controllersByURL.get(path);\n    \t}\n    \n    \n\t    public ITemplateEngine getTemplateEngine() {\n\t        return this.templateEngine;\n\t    }\n\n    \n\t    private static String getRequestPath(final HttpServletRequest request) {\n\t        String requestURI = request.getRequestURI();\n\t        final String contextPath = request.getContextPath();\n\t        \n\t        final int fragmentIndex = requestURI.indexOf(';'); \n\t        if (fragmentIndex != -1) {\n\t            requestURI = requestURI.substring(0, fragmentIndex);\n\t        }\n\t        \n\t        if (requestURI.startsWith(contextPath)) {\n\t            return requestURI.substring(contextPath.length());\n\t        }\n\t        return requestURI;\n\t    }\n}\t\n```\n5. Controller--控制器接口\n```java\n\tpackage controller;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\tpublic interface Controller {\n\t\tpublic void process(\n            HttpServletRequest request, HttpServletResponse response,\n            ServletContext servletContext, ITemplateEngine templateEngine)\n            throws Exception;\n\t}\n```\n6. HomeController--首页控制器业务类,实现controller接口\n```java\n\tpackage controller;\n\n\timport java.util.Calendar;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.context.WebContext;\n\n\tpublic class HomeController implements Controller{\n\t \n\t    public HomeController() {\n\t        super();\n\t    }\n    \n    \tpublic void process(\n            final HttpServletRequest request, final HttpServletResponse response,\n            final ServletContext servletContext, final ITemplateEngine templateEngine)\n            throws Exception {\n        \n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n        ctx.setVariable(\"today\", Calendar.getInstance());//thymeleaf的上下文中设置变量数据\n        \n        templateEngine.process(\"home\", ctx, response.getWriter());//模板引擎转向到对应的模板页面\n   \t\t}\n\t}\n\n```\n7. MyFilter--过滤器类\n```java\n\tpackage filter;\n\n\timport java.io.IOException;\n\n\timport javax.servlet.Filter;\n\timport javax.servlet.FilterChain;\n\timport javax.servlet.FilterConfig;\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.ServletRequest;\n\timport javax.servlet.ServletResponse;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\timport application.MyApplication;\n\timport controller.Controller;\n\timport entity.User;\n\t\n\tpublic class MyFilter implements Filter{\n\t\tprivate ServletContext servletContext;\n    \tprivate MyApplication application;\n    \n    \tpublic MyFilter() {\n    \t    super();\n    \t}\n  \n\n    \tpublic void init(final FilterConfig filterConfig) throws ServletException {\n        \tthis.servletContext = filterConfig.getServletContext();\n        \tthis.application = new MyApplication(this.servletContext);\n    \t}\n\n    \tpublic void doFilter(final ServletRequest request, final ServletResponse response,\n            final FilterChain chain) throws IOException, ServletException {\n        \n        \tif (!process((HttpServletRequest)request, (HttpServletResponse)response)) {\n            \tchain.doFilter(request, response);\n        \t}\n    \t}\n\n    \tpublic void destroy() {}\n\n    \tprivate boolean process(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException {\n        \ttry {\n            \t//针对资源请求url进行排除\n           \t if (request.getRequestURI().startsWith(\"/css\") ||\n                    request.getRequestURI().startsWith(\"/images\") ||\n                    request.getRequestURI().startsWith(\"/favicon\")) {\n                return false;\n           \t }\n            \n            /*\n             * 根据URL映射，获得处理该请求的控制器。\n             */\n            Controller controller = this.application.resolveControllerForRequest(request);\n            if (controller == null) {\n                return false;\n            }\n\n            /*\n             * 获取TemplateEngine(模板引擎)实例\n             */\n            ITemplateEngine templateEngine = this.application.getTemplateEngine();\n\n            /*\n             * 写入响应头部信息\n             */\n            response.setContentType(\"text/html;charset=UTF-8\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setDateHeader(\"Expires\", 0);\n\n            /*\n             * 执行控制器，并转向到对应的模板视图\n             */\n            controller.process(request, response, this.servletContext, templateEngine);\n            return true;\n       \t } catch (Exception e) {\n            try {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            } catch (final IOException ignored) {\n            }\n            throw new ServletException(e);\n        }\n    }\t\n}\n\n```\n8. web.xml配置\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<web-app id=\"gtvg\"\n         version=\"3.1\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">\n\n    <display-name>thymeleafexamples-gtvg</display-name>\n\n    <session-config>\n        <session-timeout>60</session-timeout>\n    </session-config>\n\n    <filter>\n        <filter-name>gtvgfilter</filter-name>\n        <filter-class>filter.MyFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>gtvgfilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    \n</web-app>\n```\n9. 在webapp/WEB-INF目录下面新建templates(模板目录)\n\n<p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。\n\t\n\t>/*1.2、设置模板引擎的默认加载路径*/\n\t templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\n10. 在templates目录下面新建home.html模板文件\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\">\n\t  <head>\n\t    <title>Good Thymes Virtual Grocery</title>\n\t    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n\t  </head>\n\t  <body>\n\t    <p>hello <span th:text=\"'Thymeleaf'\">word!</span>.</p>\n\t  </body>\n\t</html>\n```\n<p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中\n\n11. 运行pom.xml编译构建完成后，启动tomcat服务器预览测试\n\n\t![显示页面](http://soujava.com/images/thyemleafshow.png)\n\n<p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!\n\n\n\n<p><code>该demo已经上传至github上面，https://github.com/mapingsheng/theymeleaf\n","source":"_posts/thymeleaf教程1-环境搭建.md","raw":"---\ntitle: thymeleaf教程1-环境搭建\ndate: 2016-08-08 15:16:41\ncategories: thymeleaf\ntags: thymeleaf\n---\n一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：\n1. 在你的springboot项目工程中添加thymeleaf的依赖配置\n\n```java\n\t compile(\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\");\n```\n2. 编写一个测试页面(html),对thymeleaf进行使用\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\">\n\t<head>\n\t</head>\n\t<body>\n\t\thello thymeleaf!\n\t</body>\n```\n> 我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用**<th:XX **这样的标签把数据渲染到html模板中了；\n\n由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是<th:XX 标签被忽略的效果！\n\n**二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含**\n\n1. eclipse新建maven工程\n\t![](http://soujava.com/images/newmavenproject.png)\n\t![](http://soujava.com/images/newmaven1.png)\n\t![](http://soujava.com/images/newmaven2.png)\n\t![](http://soujava.com/images/newmaven3.png)\n2. 在pom.xml配置对Thymeleaf的依赖\n```python\n\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  \t<modelVersion>4.0.0</modelVersion>\n  \t<groupId>com.maps</groupId>\n  \t<artifactId>theymeleaf</artifactId>\n  \t<packaging>war</packaging>\n  \t<version>0.0.1-SNAPSHOT</version>\n  \t<name>theymeleaf Maven Webapp</name>\n  \t<url>http://maven.apache.org</url>\n  \n    <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n    </repository>\n    </repositories>\n  \n  \n    <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n     <dependency>\n      <groupId>org.thymeleaf</groupId>\n      <artifactId>thymeleaf</artifactId>\n      <version>3.0.1.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n        \n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.15</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>com.sun.jdmk</groupId>\n          <artifactId>jmxtools</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.sun.jmx</groupId>\n          <artifactId>jmxri</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>javax.jms</groupId>\n          <artifactId>jms</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  \t</dependencies>\n  \n  \n  \t<build>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n      </resource>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.properties</include>\n          <include>**/*.xml</include>\n          <include>**/*.html</include>\n        </includes>\n      </resource>\n    </resources>\n        \n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.2</version>\n        <configuration>\n          <source>1.5</source>\n          <target>1.5</target>\n        </configuration>\n      </plugin>\n      \n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>2.7</version>\n        <configuration>\n          <encoding>ISO-8859-1</encoding>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  \t</build>\n\t</project>\t\n```\n\n3. 中断一下，先讲解一下该demo的执行流程\n\t![模板引擎执行流程](http://soujava.com/images/thymeleafFollow.png)\n\n4. MyApplication--应用装载器\n```java\n\tpackage application;\n\n\timport java.util.HashMap;\n\timport java.util.Map;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.TemplateEngine;\n\timport org.thymeleaf.templatemode.TemplateMode;\n\timport org.thymeleaf.templateresolver.ServletContextTemplateResolver;\n\n\timport controller.HomeController;\n\timport controller.Controller;\n\n\tpublic class MyApplication {\n\n   \t \tprivate TemplateEngine templateEngine;\n   \t \tprivate Map<String, Controller> controllersByURL;\n    \n    \tpublic MyApplication(final ServletContext servletContext) {\n        \tsuper();\n\t        /*1、实例化模板解析器，并配置相关选项*/\n\t        ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(servletContext);\n\t        /*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/ \n\t        templateResolver.setTemplateMode(TemplateMode.HTML);\n\t        /*1.2、设置模板引擎的默认加载路径*/\n\t        templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\t        /*1.3、设置模板引擎的文件后缀*/\n\t        templateResolver.setSuffix(\".html\");\n\t        /*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/\n\t        templateResolver.setCacheTTLMs(Long.valueOf(3600000L));\n\t        /*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/\n\t        templateResolver.setCacheable(false);\n\n\t        /*2、实例化模板引擎*/\n\t        this.templateEngine = new TemplateEngine();\n\t        /*3、将模板解析器装载到模板引擎中*/\n\t        this.templateEngine.setTemplateResolver(templateResolver);\n\t        \n\t        /*4、针对不同的url实例化不同的业务控制器*/\n\t        this.controllersByURL = new HashMap<String, Controller>();\n\t        this.controllersByURL.put(\"/\", new HomeController());\n    \t}\n    \n    \tpublic Controller resolveControllerForRequest(final HttpServletRequest request) {\n       \t \tfinal String path = getRequestPath(request);\n        \treturn this.controllersByURL.get(path);\n    \t}\n    \n    \n\t    public ITemplateEngine getTemplateEngine() {\n\t        return this.templateEngine;\n\t    }\n\n    \n\t    private static String getRequestPath(final HttpServletRequest request) {\n\t        String requestURI = request.getRequestURI();\n\t        final String contextPath = request.getContextPath();\n\t        \n\t        final int fragmentIndex = requestURI.indexOf(';'); \n\t        if (fragmentIndex != -1) {\n\t            requestURI = requestURI.substring(0, fragmentIndex);\n\t        }\n\t        \n\t        if (requestURI.startsWith(contextPath)) {\n\t            return requestURI.substring(contextPath.length());\n\t        }\n\t        return requestURI;\n\t    }\n}\t\n```\n5. Controller--控制器接口\n```java\n\tpackage controller;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\tpublic interface Controller {\n\t\tpublic void process(\n            HttpServletRequest request, HttpServletResponse response,\n            ServletContext servletContext, ITemplateEngine templateEngine)\n            throws Exception;\n\t}\n```\n6. HomeController--首页控制器业务类,实现controller接口\n```java\n\tpackage controller;\n\n\timport java.util.Calendar;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.context.WebContext;\n\n\tpublic class HomeController implements Controller{\n\t \n\t    public HomeController() {\n\t        super();\n\t    }\n    \n    \tpublic void process(\n            final HttpServletRequest request, final HttpServletResponse response,\n            final ServletContext servletContext, final ITemplateEngine templateEngine)\n            throws Exception {\n        \n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n        ctx.setVariable(\"today\", Calendar.getInstance());//thymeleaf的上下文中设置变量数据\n        \n        templateEngine.process(\"home\", ctx, response.getWriter());//模板引擎转向到对应的模板页面\n   \t\t}\n\t}\n\n```\n7. MyFilter--过滤器类\n```java\n\tpackage filter;\n\n\timport java.io.IOException;\n\n\timport javax.servlet.Filter;\n\timport javax.servlet.FilterChain;\n\timport javax.servlet.FilterConfig;\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.ServletRequest;\n\timport javax.servlet.ServletResponse;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\timport application.MyApplication;\n\timport controller.Controller;\n\timport entity.User;\n\t\n\tpublic class MyFilter implements Filter{\n\t\tprivate ServletContext servletContext;\n    \tprivate MyApplication application;\n    \n    \tpublic MyFilter() {\n    \t    super();\n    \t}\n  \n\n    \tpublic void init(final FilterConfig filterConfig) throws ServletException {\n        \tthis.servletContext = filterConfig.getServletContext();\n        \tthis.application = new MyApplication(this.servletContext);\n    \t}\n\n    \tpublic void doFilter(final ServletRequest request, final ServletResponse response,\n            final FilterChain chain) throws IOException, ServletException {\n        \n        \tif (!process((HttpServletRequest)request, (HttpServletResponse)response)) {\n            \tchain.doFilter(request, response);\n        \t}\n    \t}\n\n    \tpublic void destroy() {}\n\n    \tprivate boolean process(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException {\n        \ttry {\n            \t//针对资源请求url进行排除\n           \t if (request.getRequestURI().startsWith(\"/css\") ||\n                    request.getRequestURI().startsWith(\"/images\") ||\n                    request.getRequestURI().startsWith(\"/favicon\")) {\n                return false;\n           \t }\n            \n            /*\n             * 根据URL映射，获得处理该请求的控制器。\n             */\n            Controller controller = this.application.resolveControllerForRequest(request);\n            if (controller == null) {\n                return false;\n            }\n\n            /*\n             * 获取TemplateEngine(模板引擎)实例\n             */\n            ITemplateEngine templateEngine = this.application.getTemplateEngine();\n\n            /*\n             * 写入响应头部信息\n             */\n            response.setContentType(\"text/html;charset=UTF-8\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setDateHeader(\"Expires\", 0);\n\n            /*\n             * 执行控制器，并转向到对应的模板视图\n             */\n            controller.process(request, response, this.servletContext, templateEngine);\n            return true;\n       \t } catch (Exception e) {\n            try {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            } catch (final IOException ignored) {\n            }\n            throw new ServletException(e);\n        }\n    }\t\n}\n\n```\n8. web.xml配置\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<web-app id=\"gtvg\"\n         version=\"3.1\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">\n\n    <display-name>thymeleafexamples-gtvg</display-name>\n\n    <session-config>\n        <session-timeout>60</session-timeout>\n    </session-config>\n\n    <filter>\n        <filter-name>gtvgfilter</filter-name>\n        <filter-class>filter.MyFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>gtvgfilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    \n</web-app>\n```\n9. 在webapp/WEB-INF目录下面新建templates(模板目录)\n\n<p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。\n\t\n\t>/*1.2、设置模板引擎的默认加载路径*/\n\t templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\n10. 在templates目录下面新建home.html模板文件\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\">\n\t  <head>\n\t    <title>Good Thymes Virtual Grocery</title>\n\t    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n\t  </head>\n\t  <body>\n\t    <p>hello <span th:text=\"'Thymeleaf'\">word!</span>.</p>\n\t  </body>\n\t</html>\n```\n<p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中\n\n11. 运行pom.xml编译构建完成后，启动tomcat服务器预览测试\n\n\t![显示页面](http://soujava.com/images/thyemleafshow.png)\n\n<p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!\n\n\n\n<p><code>该demo已经上传至github上面，https://github.com/mapingsheng/theymeleaf\n","slug":"thymeleaf教程1-环境搭建","published":1,"updated":"2017-01-11T02:06:24.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsm002pgco0xupzvjdm","content":"<p>一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：</p>\n<ol>\n<li>在你的springboot项目工程中添加thymeleaf的依赖配置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile(<span class=\"string\">\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\"</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>编写一个测试页面(html),对thymeleaf进行使用<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"</div><div class=\"line\">     xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\thello thymeleaf!</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用<strong>&lt;th:XX </strong>这样的标签把数据渲染到html模板中了；</html></p>\n</blockquote>\n<p>由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是&lt;th:XX 标签被忽略的效果！</p>\n<p><strong>二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含</strong></p>\n<ol>\n<li>eclipse新建maven工程<br> <img src=\"http://soujava.com/images/newmavenproject.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven1.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven2.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven3.png\" alt=\"\"></li>\n<li><p>在pom.xml配置对Thymeleaf的依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\"> \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\"> \t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"> \t&lt;groupId&gt;com.maps&lt;/groupId&gt;</div><div class=\"line\"> \t&lt;artifactId&gt;theymeleaf&lt;/artifactId&gt;</div><div class=\"line\"> \t&lt;packaging&gt;war&lt;/packaging&gt;</div><div class=\"line\"> \t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class=\"line\"> \t&lt;name&gt;theymeleaf Maven Webapp&lt;/name&gt;</div><div class=\"line\"> \t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class=\"line\"> </div><div class=\"line\">   &lt;repositories&gt;</div><div class=\"line\">   &lt;repository&gt;</div><div class=\"line\">     &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;</div><div class=\"line\">     &lt;name&gt;Sonatype Nexus Snapshots&lt;/name&gt;</div><div class=\"line\">     &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</div><div class=\"line\">     &lt;snapshots&gt;</div><div class=\"line\">       &lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">     &lt;/snapshots&gt;</div><div class=\"line\">   &lt;/repository&gt;</div><div class=\"line\">   &lt;/repositories&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">   &lt;dependencies&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.8.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   </div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.1.0&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;provided&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.2.15&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">     &lt;exclusions&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jdmk&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxtools&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jmx&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxri&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;javax.jms&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jms&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">     &lt;/exclusions&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"> \t&lt;/dependencies&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> \t&lt;build&gt;</div><div class=\"line\">   &lt;resources&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/resources&lt;/directory&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class=\"line\">       &lt;includes&gt;</div><div class=\"line\">         &lt;include&gt;**/*.properties&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.xml&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.html&lt;/include&gt;</div><div class=\"line\">       &lt;/includes&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">   &lt;/resources&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;plugins&gt;</div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;3.2&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;source&gt;1.5&lt;/source&gt;</div><div class=\"line\">         &lt;target&gt;1.5&lt;/target&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">     </div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.7&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2&lt;/version&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">   &lt;/plugins&gt;</div><div class=\"line\"> \t&lt;/build&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>中断一下，先讲解一下该demo的执行流程<br> <img src=\"http://soujava.com/images/thymeleafFollow.png\" alt=\"模板引擎执行流程\"></p>\n</li>\n<li><p>MyApplication–应用装载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> application;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.TemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templatemode.TemplateMode;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.HomeController;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> TemplateEngine templateEngine;</div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> Map&lt;String, Controller&gt; controllersByURL;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyApplication</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletContext servletContext)</span> </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t        <span class=\"comment\">/*1、实例化模板解析器，并配置相关选项*/</span></div><div class=\"line\">\t        ServletContextTemplateResolver templateResolver = <span class=\"keyword\">new</span> ServletContextTemplateResolver(servletContext);</div><div class=\"line\">\t        <span class=\"comment\">/*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/</span> </div><div class=\"line\">\t        templateResolver.setTemplateMode(TemplateMode.HTML);</div><div class=\"line\">\t        <span class=\"comment\">/*1.2、设置模板引擎的默认加载路径*/</span></div><div class=\"line\">\t        templateResolver.setPrefix(<span class=\"string\">\"/WEB-INF/templates/\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.3、设置模板引擎的文件后缀*/</span></div><div class=\"line\">\t        templateResolver.setSuffix(<span class=\"string\">\".html\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/</span></div><div class=\"line\">\t        templateResolver.setCacheTTLMs(Long.valueOf(<span class=\"number\">3600000L</span>));</div><div class=\"line\">\t        <span class=\"comment\">/*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/</span></div><div class=\"line\">\t        templateResolver.setCacheable(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"comment\">/*2、实例化模板引擎*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine = <span class=\"keyword\">new</span> TemplateEngine();</div><div class=\"line\">\t        <span class=\"comment\">/*3、将模板解析器装载到模板引擎中*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine.setTemplateResolver(templateResolver);</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"comment\">/*4、针对不同的url实例化不同的业务控制器*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL = <span class=\"keyword\">new</span> HashMap&lt;String, Controller&gt;();</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL.put(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">new</span> HomeController());</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> Controller <span class=\"title\">resolveControllerForRequest</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">       \t \t<span class=\"keyword\">final</span> String path = getRequestPath(request);</div><div class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.controllersByURL.get(path);</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> ITemplateEngine <span class=\"title\">getTemplateEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.templateEngine;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRequestPath</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t        String requestURI = request.getRequestURI();</div><div class=\"line\">\t        <span class=\"keyword\">final</span> String contextPath = request.getContextPath();</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fragmentIndex = requestURI.indexOf(<span class=\"string\">';'</span>); </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (fragmentIndex != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t            requestURI = requestURI.substring(<span class=\"number\">0</span>, fragmentIndex);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (requestURI.startsWith(contextPath)) &#123;</div><div class=\"line\">\t            <span class=\"keyword\">return</span> requestURI.substring(contextPath.length());</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> requestURI;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Controller–控制器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</span></span></div><div class=\"line\">           HttpServletRequest request, HttpServletResponse response,</div><div class=\"line\">           ServletContext servletContext, ITemplateEngine templateEngine)</div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>HomeController–首页控制器业务类,实现controller接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.context.WebContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span></span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</span></span></div><div class=\"line\">           <span class=\"keyword\">final</span> HttpServletRequest request, <span class=\"keyword\">final</span> HttpServletResponse response,</div><div class=\"line\">           <span class=\"keyword\">final</span> ServletContext servletContext, <span class=\"keyword\">final</span> ITemplateEngine templateEngine)</div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">       </div><div class=\"line\">       WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\">       ctx.setVariable(<span class=\"string\">\"today\"</span>, Calendar.getInstance());<span class=\"comment\">//thymeleaf的上下文中设置变量数据</span></div><div class=\"line\">       </div><div class=\"line\">       templateEngine.process(<span class=\"string\">\"home\"</span>, ctx, response.getWriter());<span class=\"comment\">//模板引擎转向到对应的模板页面</span></div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>MyFilter–过滤器类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> filter;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.Filter;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterChain;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterConfig;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> application.MyApplication;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\">\t<span class=\"keyword\">import</span> entity.User;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> ServletContext servletContext;</div><div class=\"line\">    \t<span class=\"keyword\">private</span> MyApplication application;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t    <span class=\"keyword\">super</span>();</div><div class=\"line\">    \t&#125;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">final</span> FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.servletContext = filterConfig.getServletContext();</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.application = <span class=\"keyword\">new</span> MyApplication(<span class=\"keyword\">this</span>.servletContext);</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response,</span></span></div><div class=\"line\">            <span class=\"keyword\">final</span> FilterChain chain) <span class=\"keyword\">throws</span> IOException, ServletException &#123;</div><div class=\"line\">        </div><div class=\"line\">        \t<span class=\"keyword\">if</span> (!process((HttpServletRequest)request, (HttpServletResponse)response)) &#123;</div><div class=\"line\">            \tchain.doFilter(request, response);</div><div class=\"line\">        \t&#125;</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException &#123;</div><div class=\"line\">        \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            \t<span class=\"comment\">//针对资源请求url进行排除</span></div><div class=\"line\">           \t <span class=\"keyword\">if</span> (request.getRequestURI().startsWith(<span class=\"string\">\"/css\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/images\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/favicon\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">           \t &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 根据URL映射，获得处理该请求的控制器。</div><div class=\"line\">             */</div><div class=\"line\">            Controller controller = <span class=\"keyword\">this</span>.application.resolveControllerForRequest(request);</div><div class=\"line\">            <span class=\"keyword\">if</span> (controller == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 获取TemplateEngine(模板引擎)实例</div><div class=\"line\">             */</div><div class=\"line\">            ITemplateEngine templateEngine = <span class=\"keyword\">this</span>.application.getTemplateEngine();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 写入响应头部信息</div><div class=\"line\">             */</div><div class=\"line\">            response.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 执行控制器，并转向到对应的模板视图</div><div class=\"line\">             */</div><div class=\"line\">            controller.process(request, response, <span class=\"keyword\">this</span>.servletContext, templateEngine);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       \t &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> IOException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">\t&lt;web-app id=\"gtvg\"</div><div class=\"line\">         version=\"3.1\"</div><div class=\"line\">         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"</div><div class=\"line\">         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;display-name&gt;thymeleafexamples-gtvg&lt;/display-name&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;session-config&gt;</div><div class=\"line\">        &lt;session-timeout&gt;60&lt;/session-timeout&gt;</div><div class=\"line\">    &lt;/session-config&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;filter-class&gt;filter.MyFilter&lt;/filter-class&gt;</div><div class=\"line\">    &lt;/filter&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter-mapping&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class=\"line\">    &lt;/filter-mapping&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在webapp/WEB-INF目录下面新建templates(模板目录)</p>\n</li>\n</ol>\n<p></p><p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。</code></p>\n<pre><code>&gt;/*1.2、设置模板引擎的默认加载路径*/\n templateResolver.setPrefix(&quot;/WEB-INF/templates/&quot;);\n</code></pre><ol>\n<li>在templates目录下面新建home.html模板文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;title&gt;Good Thymes Virtual Grocery&lt;/title&gt;</div><div class=\"line\">    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;p&gt;hello &lt;span th:text=\"'Thymeleaf'\"&gt;word!&lt;/span&gt;.&lt;/p&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p></p><p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中</code></p>\n<ol>\n<li><p>运行pom.xml编译构建完成后，启动tomcat服务器预览测试</p>\n<p><img src=\"http://soujava.com/images/thyemleafshow.png\" alt=\"显示页面\"></p>\n</li>\n</ol>\n<p></p><p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!</code></p>\n<p></p><p><code>该demo已经上传至github上面，<a href=\"https://github.com/mapingsheng/theymeleaf\" target=\"_blank\" rel=\"external\">https://github.com/mapingsheng/theymeleaf</a></code></p>\n","excerpt":"","more":"<p>一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：</p>\n<ol>\n<li>在你的springboot项目工程中添加thymeleaf的依赖配置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile(<span class=\"string\">\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\"</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>编写一个测试页面(html),对thymeleaf进行使用<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"</div><div class=\"line\">     xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\thello thymeleaf!</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用<strong>&lt;th:XX </strong>这样的标签把数据渲染到html模板中了；</p>\n</blockquote>\n<p>由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是&lt;th:XX 标签被忽略的效果！</p>\n<p><strong>二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含</strong></p>\n<ol>\n<li>eclipse新建maven工程<br> <img src=\"http://soujava.com/images/newmavenproject.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven1.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven2.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven3.png\" alt=\"\"></li>\n<li><p>在pom.xml配置对Thymeleaf的依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\"> \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\"> \t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"> \t&lt;groupId&gt;com.maps&lt;/groupId&gt;</div><div class=\"line\"> \t&lt;artifactId&gt;theymeleaf&lt;/artifactId&gt;</div><div class=\"line\"> \t&lt;packaging&gt;war&lt;/packaging&gt;</div><div class=\"line\"> \t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class=\"line\"> \t&lt;name&gt;theymeleaf Maven Webapp&lt;/name&gt;</div><div class=\"line\"> \t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class=\"line\"> </div><div class=\"line\">   &lt;repositories&gt;</div><div class=\"line\">   &lt;repository&gt;</div><div class=\"line\">     &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;</div><div class=\"line\">     &lt;name&gt;Sonatype Nexus Snapshots&lt;/name&gt;</div><div class=\"line\">     &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</div><div class=\"line\">     &lt;snapshots&gt;</div><div class=\"line\">       &lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">     &lt;/snapshots&gt;</div><div class=\"line\">   &lt;/repository&gt;</div><div class=\"line\">   &lt;/repositories&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">   &lt;dependencies&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.8.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   </div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.1.0&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;provided&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.2.15&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">     &lt;exclusions&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jdmk&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxtools&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jmx&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxri&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;javax.jms&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jms&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">     &lt;/exclusions&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"> \t&lt;/dependencies&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> \t&lt;build&gt;</div><div class=\"line\">   &lt;resources&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/resources&lt;/directory&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class=\"line\">       &lt;includes&gt;</div><div class=\"line\">         &lt;include&gt;**/*.properties&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.xml&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.html&lt;/include&gt;</div><div class=\"line\">       &lt;/includes&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">   &lt;/resources&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;plugins&gt;</div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;3.2&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;source&gt;1.5&lt;/source&gt;</div><div class=\"line\">         &lt;target&gt;1.5&lt;/target&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">     </div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.7&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2&lt;/version&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">   &lt;/plugins&gt;</div><div class=\"line\"> \t&lt;/build&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>中断一下，先讲解一下该demo的执行流程<br> <img src=\"http://soujava.com/images/thymeleafFollow.png\" alt=\"模板引擎执行流程\"></p>\n</li>\n<li><p>MyApplication–应用装载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> application;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.TemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templatemode.TemplateMode;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.HomeController;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> TemplateEngine templateEngine;</div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> Map&lt;String, Controller&gt; controllersByURL;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyApplication</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletContext servletContext)</span> </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t        <span class=\"comment\">/*1、实例化模板解析器，并配置相关选项*/</span></div><div class=\"line\">\t        ServletContextTemplateResolver templateResolver = <span class=\"keyword\">new</span> ServletContextTemplateResolver(servletContext);</div><div class=\"line\">\t        <span class=\"comment\">/*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/</span> </div><div class=\"line\">\t        templateResolver.setTemplateMode(TemplateMode.HTML);</div><div class=\"line\">\t        <span class=\"comment\">/*1.2、设置模板引擎的默认加载路径*/</span></div><div class=\"line\">\t        templateResolver.setPrefix(<span class=\"string\">\"/WEB-INF/templates/\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.3、设置模板引擎的文件后缀*/</span></div><div class=\"line\">\t        templateResolver.setSuffix(<span class=\"string\">\".html\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/</span></div><div class=\"line\">\t        templateResolver.setCacheTTLMs(Long.valueOf(<span class=\"number\">3600000L</span>));</div><div class=\"line\">\t        <span class=\"comment\">/*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/</span></div><div class=\"line\">\t        templateResolver.setCacheable(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"comment\">/*2、实例化模板引擎*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine = <span class=\"keyword\">new</span> TemplateEngine();</div><div class=\"line\">\t        <span class=\"comment\">/*3、将模板解析器装载到模板引擎中*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine.setTemplateResolver(templateResolver);</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"comment\">/*4、针对不同的url实例化不同的业务控制器*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL = <span class=\"keyword\">new</span> HashMap&lt;String, Controller&gt;();</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL.put(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">new</span> HomeController());</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> Controller <span class=\"title\">resolveControllerForRequest</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">       \t \t<span class=\"keyword\">final</span> String path = getRequestPath(request);</div><div class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.controllersByURL.get(path);</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> ITemplateEngine <span class=\"title\">getTemplateEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.templateEngine;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRequestPath</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t        String requestURI = request.getRequestURI();</div><div class=\"line\">\t        <span class=\"keyword\">final</span> String contextPath = request.getContextPath();</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fragmentIndex = requestURI.indexOf(<span class=\"string\">';'</span>); </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (fragmentIndex != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t            requestURI = requestURI.substring(<span class=\"number\">0</span>, fragmentIndex);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (requestURI.startsWith(contextPath)) &#123;</div><div class=\"line\">\t            <span class=\"keyword\">return</span> requestURI.substring(contextPath.length());</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> requestURI;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Controller–控制器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</div><div class=\"line\">           HttpServletRequest request, HttpServletResponse response,</div><div class=\"line\">           ServletContext servletContext, ITemplateEngine templateEngine)</span></div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>HomeController–首页控制器业务类,实现controller接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.context.WebContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span></span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</div><div class=\"line\">           <span class=\"keyword\">final</span> HttpServletRequest request, <span class=\"keyword\">final</span> HttpServletResponse response,</div><div class=\"line\">           <span class=\"keyword\">final</span> ServletContext servletContext, <span class=\"keyword\">final</span> ITemplateEngine templateEngine)</span></div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">       WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\">       ctx.setVariable(<span class=\"string\">\"today\"</span>, Calendar.getInstance());<span class=\"comment\">//thymeleaf的上下文中设置变量数据</span></div><div class=\"line\">       </div><div class=\"line\">       templateEngine.process(<span class=\"string\">\"home\"</span>, ctx, response.getWriter());<span class=\"comment\">//模板引擎转向到对应的模板页面</span></div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>MyFilter–过滤器类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> filter;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.Filter;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterChain;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterConfig;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> application.MyApplication;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\">\t<span class=\"keyword\">import</span> entity.User;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> ServletContext servletContext;</div><div class=\"line\">    \t<span class=\"keyword\">private</span> MyApplication application;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t    <span class=\"keyword\">super</span>();</div><div class=\"line\">    \t&#125;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">final</span> FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.servletContext = filterConfig.getServletContext();</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.application = <span class=\"keyword\">new</span> MyApplication(<span class=\"keyword\">this</span>.servletContext);</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response,</div><div class=\"line\">            <span class=\"keyword\">final</span> FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        \t<span class=\"keyword\">if</span> (!process((HttpServletRequest)request, (HttpServletResponse)response)) &#123;</div><div class=\"line\">            \tchain.doFilter(request, response);</div><div class=\"line\">        \t&#125;</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            \t<span class=\"comment\">//针对资源请求url进行排除</span></div><div class=\"line\">           \t <span class=\"keyword\">if</span> (request.getRequestURI().startsWith(<span class=\"string\">\"/css\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/images\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/favicon\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">           \t &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 根据URL映射，获得处理该请求的控制器。</div><div class=\"line\">             */</span></div><div class=\"line\">            Controller controller = <span class=\"keyword\">this</span>.application.resolveControllerForRequest(request);</div><div class=\"line\">            <span class=\"keyword\">if</span> (controller == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 获取TemplateEngine(模板引擎)实例</div><div class=\"line\">             */</span></div><div class=\"line\">            ITemplateEngine templateEngine = <span class=\"keyword\">this</span>.application.getTemplateEngine();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 写入响应头部信息</div><div class=\"line\">             */</span></div><div class=\"line\">            response.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 执行控制器，并转向到对应的模板视图</div><div class=\"line\">             */</span></div><div class=\"line\">            controller.process(request, response, <span class=\"keyword\">this</span>.servletContext, templateEngine);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       \t &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> IOException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">\t&lt;web-app id=\"gtvg\"</div><div class=\"line\">         version=\"3.1\"</div><div class=\"line\">         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"</div><div class=\"line\">         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;display-name&gt;thymeleafexamples-gtvg&lt;/display-name&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;session-config&gt;</div><div class=\"line\">        &lt;session-timeout&gt;60&lt;/session-timeout&gt;</div><div class=\"line\">    &lt;/session-config&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;filter-class&gt;filter.MyFilter&lt;/filter-class&gt;</div><div class=\"line\">    &lt;/filter&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter-mapping&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class=\"line\">    &lt;/filter-mapping&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在webapp/WEB-INF目录下面新建templates(模板目录)</p>\n</li>\n</ol>\n<p><p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。</p>\n<pre><code>&gt;/*1.2、设置模板引擎的默认加载路径*/\n templateResolver.setPrefix(&quot;/WEB-INF/templates/&quot;);\n</code></pre><ol>\n<li>在templates目录下面新建home.html模板文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;title&gt;Good Thymes Virtual Grocery&lt;/title&gt;</div><div class=\"line\">    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;p&gt;hello &lt;span th:text=\"'Thymeleaf'\"&gt;word!&lt;/span&gt;.&lt;/p&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中</p>\n<ol>\n<li><p>运行pom.xml编译构建完成后，启动tomcat服务器预览测试</p>\n<p><img src=\"http://soujava.com/images/thyemleafshow.png\" alt=\"显示页面\"></p>\n</li>\n</ol>\n<p><p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!</p>\n<p><p><code>该demo已经上传至github上面，<a href=\"https://github.com/mapingsheng/theymeleaf\">https://github.com/mapingsheng/theymeleaf</a></p>\n"},{"title":"thymeleaf教程3--with定义变量使用","date":"2016-09-28T08:11:44.000Z","_content":"在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。\n\n### th:with用法\n\n1、用来定义局部变量，用法如下：\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。\n\n通过上面的例子可以看出来用法规则为--th:with=\"key=value\"这种格式定义局部变量\n\n2、用来定义多个局部变量，用法如下：\n\n```java\n\t<div th:with=\"name=zhangsan,age=25\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。\n\n\n### th:with范围\n\n1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p id=\"inner\">hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n\t<p id=\"outer\">hello <span th:text=\"${name}\"></span>.</p>  \n```\n\n上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量\n\nname的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围\n\n### th:with定义对象\n\n我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，\n\n```java\n\t<div th:with=\"user=${userList[0]}\">  \n    \t<p>The name of the first person is <span th:text=\"${user.userName}\">Julius Caesar</span>.</p>  \n\t</div>  \n```\n\n我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。\n\n\n### th:with定义的变量在js中如何使用\n\n```java\n\t<head th:with=\"name=zhangsan\"> \n\t\t<script type=\"text/javascript\" th:inline=\"javascript\">\n\t\t\tvar name = [[${columnListJson}]];\n\t\t</script>\n\n\t</head>\n\t\n```\n上面的例子中有三个地方需要注意：\n\n1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题\n\n2、如果在js中使用那么需要在<script>标签中添加 th:inline=\"javascript\"\n\n3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用\n\n\n\n\n\n\n","source":"_posts/thymeleaf教程3-with定义变量使用.md","raw":"---\ntitle: thymeleaf教程3--with定义变量使用\ndate: 2016-09-28 16:11:44\ncategories: thymeleaf\ntags: thymeleaf\n---\n在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。\n\n### th:with用法\n\n1、用来定义局部变量，用法如下：\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。\n\n通过上面的例子可以看出来用法规则为--th:with=\"key=value\"这种格式定义局部变量\n\n2、用来定义多个局部变量，用法如下：\n\n```java\n\t<div th:with=\"name=zhangsan,age=25\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。\n\n\n### th:with范围\n\n1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p id=\"inner\">hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n\t<p id=\"outer\">hello <span th:text=\"${name}\"></span>.</p>  \n```\n\n上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量\n\nname的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围\n\n### th:with定义对象\n\n我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，\n\n```java\n\t<div th:with=\"user=${userList[0]}\">  \n    \t<p>The name of the first person is <span th:text=\"${user.userName}\">Julius Caesar</span>.</p>  \n\t</div>  \n```\n\n我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。\n\n\n### th:with定义的变量在js中如何使用\n\n```java\n\t<head th:with=\"name=zhangsan\"> \n\t\t<script type=\"text/javascript\" th:inline=\"javascript\">\n\t\t\tvar name = [[${columnListJson}]];\n\t\t</script>\n\n\t</head>\n\t\n```\n上面的例子中有三个地方需要注意：\n\n1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题\n\n2、如果在js中使用那么需要在<script>标签中添加 th:inline=\"javascript\"\n\n3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用\n\n\n\n\n\n\n","slug":"thymeleaf教程3-with定义变量使用","published":1,"updated":"2017-01-11T02:06:24.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsq002sgco06ofjy09m","content":"<p>在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。</p>\n<h3 id=\"th-with用法\"><a href=\"#th-with用法\" class=\"headerlink\" title=\"th:with用法\"></a>th:with用法</h3><p>1、用来定义局部变量，用法如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。</p>\n<p>通过上面的例子可以看出来用法规则为–th:with=”key=value”这种格式定义局部变量</p>\n<p>2、用来定义多个局部变量，用法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan,age=25\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。</p>\n<h3 id=\"th-with范围\"><a href=\"#th-with范围\" class=\"headerlink\" title=\"th:with范围\"></a>th:with范围</h3><p>1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p id=\"inner\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt; </div><div class=\"line\">&lt;p id=\"outer\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量</p>\n<p>name的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围</p>\n<h3 id=\"th-with定义对象\"><a href=\"#th-with定义对象\" class=\"headerlink\" title=\"th:with定义对象\"></a>th:with定义对象</h3><p>我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"user=$&#123;userList[0]&#125;\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;The name of the first person is &lt;span th:text=\"$&#123;user.userName&#125;\"&gt;Julius Caesar&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。</p>\n<h3 id=\"th-with定义的变量在js中如何使用\"><a href=\"#th-with定义的变量在js中如何使用\" class=\"headerlink\" title=\"th:with定义的变量在js中如何使用\"></a>th:with定义的变量在js中如何使用</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head th:with=\"name=zhangsan\"&gt; </div><div class=\"line\">\t&lt;script type=\"text/javascript\" th:inline=\"javascript\"&gt;</div><div class=\"line\">\t\tvar name = [[$&#123;columnListJson&#125;]];</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子中有三个地方需要注意：</p>\n<p>1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题</p>\n<p>2、如果在js中使用那么需要在<script>标签中添加 th:inline=”javascript”</p>\n<p>3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用</p>\n</script></p>","excerpt":"","more":"<p>在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。</p>\n<h3 id=\"th-with用法\"><a href=\"#th-with用法\" class=\"headerlink\" title=\"th:with用法\"></a>th:with用法</h3><p>1、用来定义局部变量，用法如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。</p>\n<p>通过上面的例子可以看出来用法规则为–th:with=”key=value”这种格式定义局部变量</p>\n<p>2、用来定义多个局部变量，用法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan,age=25\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。</p>\n<h3 id=\"th-with范围\"><a href=\"#th-with范围\" class=\"headerlink\" title=\"th:with范围\"></a>th:with范围</h3><p>1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p id=\"inner\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt; </div><div class=\"line\">&lt;p id=\"outer\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量</p>\n<p>name的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围</p>\n<h3 id=\"th-with定义对象\"><a href=\"#th-with定义对象\" class=\"headerlink\" title=\"th:with定义对象\"></a>th:with定义对象</h3><p>我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"user=$&#123;userList[0]&#125;\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;The name of the first person is &lt;span th:text=\"$&#123;user.userName&#125;\"&gt;Julius Caesar&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。</p>\n<h3 id=\"th-with定义的变量在js中如何使用\"><a href=\"#th-with定义的变量在js中如何使用\" class=\"headerlink\" title=\"th:with定义的变量在js中如何使用\"></a>th:with定义的变量在js中如何使用</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head th:with=\"name=zhangsan\"&gt; </div><div class=\"line\">\t&lt;script type=\"text/javascript\" th:inline=\"javascript\"&gt;</div><div class=\"line\">\t\tvar name = [[$&#123;columnListJson&#125;]];</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子中有三个地方需要注意：</p>\n<p>1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题</p>\n<p>2、如果在js中使用那么需要在<script>标签中添加 th:inline=”javascript”</p>\n<p>3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用</p>\n"},{"title":"基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具","date":"2016-09-02T03:20:33.000Z","_content":"基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。\n\n#### 平时我们开发时经常出现以下问题：\n1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，\n   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。\n\n####  功能介绍： \n1、登陆功能-- 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表\n\n2、打包功能-- 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，\n    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)\n    \n3、补丁包管理-- 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯\n\n#### 项目源码地址：\n\nhttps://github.com/mapingsheng/gitlabPatchManage \n\n#### 二次开发说明： \n1、编译gitlab项目的源码包成最新的jar包()\n\n2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置\n\n3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面\n\n#### 配置说明： \n1、src\\main\\resources是所有的资源、配置文件目录\n\n2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址\n\n3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据\n\n4、context\\文件夹下面存放oracle数据库连接的配置信息\n\n#### 声明： \n本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，\n\n所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！\n\n#### 系统界面： \n![Alt text](http://soujava.com/images/git1.jpg \"登陆\")\n\n![Alt text](http://soujava.com/images/git2.jpg \"打补丁\")\n\n![Alt text](http://soujava.com/images/git3.jpg \"补丁记录\")\n\n![Alt text](http://soujava.com/images/git4.jpg \"补丁记录\")\n\n\n\n\n","source":"_posts/基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具.md","raw":"---\ntitle: 基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具\ndate: 2016-09-02 11:20:33\ncategories: git\ntags: gitlab\n---\n基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。\n\n#### 平时我们开发时经常出现以下问题：\n1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，\n   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。\n\n####  功能介绍： \n1、登陆功能-- 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表\n\n2、打包功能-- 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，\n    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)\n    \n3、补丁包管理-- 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯\n\n#### 项目源码地址：\n\nhttps://github.com/mapingsheng/gitlabPatchManage \n\n#### 二次开发说明： \n1、编译gitlab项目的源码包成最新的jar包()\n\n2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置\n\n3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面\n\n#### 配置说明： \n1、src\\main\\resources是所有的资源、配置文件目录\n\n2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址\n\n3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据\n\n4、context\\文件夹下面存放oracle数据库连接的配置信息\n\n#### 声明： \n本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，\n\n所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！\n\n#### 系统界面： \n![Alt text](http://soujava.com/images/git1.jpg \"登陆\")\n\n![Alt text](http://soujava.com/images/git2.jpg \"打补丁\")\n\n![Alt text](http://soujava.com/images/git3.jpg \"补丁记录\")\n\n![Alt text](http://soujava.com/images/git4.jpg \"补丁记录\")\n\n\n\n\n","slug":"基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具","published":1,"updated":"2017-01-11T02:06:24.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddss002vgco0cnpqqrar","content":"<p>基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。</p>\n<h4 id=\"平时我们开发时经常出现以下问题：\"><a href=\"#平时我们开发时经常出现以下问题：\" class=\"headerlink\" title=\"平时我们开发时经常出现以下问题：\"></a>平时我们开发时经常出现以下问题：</h4><p>1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，<br>   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。</p>\n<h4 id=\"功能介绍：\"><a href=\"#功能介绍：\" class=\"headerlink\" title=\"功能介绍：\"></a>功能介绍：</h4><p>1、登陆功能– 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表</p>\n<p>2、打包功能– 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，<br>    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)</p>\n<p>3、补丁包管理– 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯</p>\n<h4 id=\"项目源码地址：\"><a href=\"#项目源码地址：\" class=\"headerlink\" title=\"项目源码地址：\"></a>项目源码地址：</h4><p><a href=\"https://github.com/mapingsheng/gitlabPatchManage\" target=\"_blank\" rel=\"external\">https://github.com/mapingsheng/gitlabPatchManage</a> </p>\n<h4 id=\"二次开发说明：\"><a href=\"#二次开发说明：\" class=\"headerlink\" title=\"二次开发说明：\"></a>二次开发说明：</h4><p>1、编译gitlab项目的源码包成最新的jar包()</p>\n<p>2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置</p>\n<p>3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面</p>\n<h4 id=\"配置说明：\"><a href=\"#配置说明：\" class=\"headerlink\" title=\"配置说明：\"></a>配置说明：</h4><p>1、src\\main\\resources是所有的资源、配置文件目录</p>\n<p>2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址</p>\n<p>3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据</p>\n<p>4、context\\文件夹下面存放oracle数据库连接的配置信息</p>\n<h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><p>本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，</p>\n<p>所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！</p>\n<h4 id=\"系统界面：\"><a href=\"#系统界面：\" class=\"headerlink\" title=\"系统界面：\"></a>系统界面：</h4><p><img src=\"http://soujava.com/images/git1.jpg\" alt=\"Alt text\" title=\"登陆\"></p>\n<p><img src=\"http://soujava.com/images/git2.jpg\" alt=\"Alt text\" title=\"打补丁\"></p>\n<p><img src=\"http://soujava.com/images/git3.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n<p><img src=\"http://soujava.com/images/git4.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n","excerpt":"","more":"<p>基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。</p>\n<h4 id=\"平时我们开发时经常出现以下问题：\"><a href=\"#平时我们开发时经常出现以下问题：\" class=\"headerlink\" title=\"平时我们开发时经常出现以下问题：\"></a>平时我们开发时经常出现以下问题：</h4><p>1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，<br>   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。</p>\n<h4 id=\"功能介绍：\"><a href=\"#功能介绍：\" class=\"headerlink\" title=\"功能介绍：\"></a>功能介绍：</h4><p>1、登陆功能– 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表</p>\n<p>2、打包功能– 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，<br>    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)</p>\n<p>3、补丁包管理– 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯</p>\n<h4 id=\"项目源码地址：\"><a href=\"#项目源码地址：\" class=\"headerlink\" title=\"项目源码地址：\"></a>项目源码地址：</h4><p><a href=\"https://github.com/mapingsheng/gitlabPatchManage\">https://github.com/mapingsheng/gitlabPatchManage</a> </p>\n<h4 id=\"二次开发说明：\"><a href=\"#二次开发说明：\" class=\"headerlink\" title=\"二次开发说明：\"></a>二次开发说明：</h4><p>1、编译gitlab项目的源码包成最新的jar包()</p>\n<p>2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置</p>\n<p>3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面</p>\n<h4 id=\"配置说明：\"><a href=\"#配置说明：\" class=\"headerlink\" title=\"配置说明：\"></a>配置说明：</h4><p>1、src\\main\\resources是所有的资源、配置文件目录</p>\n<p>2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址</p>\n<p>3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据</p>\n<p>4、context\\文件夹下面存放oracle数据库连接的配置信息</p>\n<h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><p>本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，</p>\n<p>所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！</p>\n<h4 id=\"系统界面：\"><a href=\"#系统界面：\" class=\"headerlink\" title=\"系统界面：\"></a>系统界面：</h4><p><img src=\"http://soujava.com/images/git1.jpg\" alt=\"Alt text\" title=\"登陆\"></p>\n<p><img src=\"http://soujava.com/images/git2.jpg\" alt=\"Alt text\" title=\"打补丁\"></p>\n<p><img src=\"http://soujava.com/images/git3.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n<p><img src=\"http://soujava.com/images/git4.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n"},{"title":"处理百万级以上的数据提高查询速度的方法--数据库优化篇","date":"2016-09-12T06:17:55.000Z","_content":"\n **1**.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n **2**.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n **3**.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num is null\n     可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\n     select id from t where num=0\n\n **4**.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num=10 or num=20\n     可以这样查询：\n     select id from t where num=10\n     union all\n     select id from t where num=20\n\n **5**.下面的查询也将导致全表扫描：(不能前置百分号)\n\n     select id from t where name like ‘%abc%’\n    若要提高效率，可以考虑全文检索。\n\n **6**.in 和 not in 也要慎用，否则会导致全表扫描，如：\n\n     select id from t where num in(1,2,3)\n     对于连续的数值，能用 between 就不要用 in 了：\n     select id from t where num between 1 and 3\n\n **7**.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\n\n     select id from t where num=@num\n     可以改为强制查询使用索引：\n     select id from t with(index(索引名)) where num=@num\n\n **8**.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where num/2=100\n     应改为:\n     select id from t where num=100*2\n\n **9**.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where substring(name,1,3)=’abc’–name以abc开头的id\n     select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n     应改为:\n     select id from t where name like ‘abc%’\n     select id from t where createdate>=’2005-11-30′ and createdate<’2005-12-1′\n\n **10**.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n **11**.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n **12**.不要写一些没有意义的查询，如需要生成一个空表结构：\n\n     select col1,col2 into #t from t where 1=0\n     这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n     create table #t(…)\n\n **13**.很多时候用 exists 代替 in 是一个好的选择：\n\n     select num from a where num in(select num from b)\n     用下面的语句替换：\n     select num from a where exists(select 1 from b where num=a.num)\n\n **14**.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n **15**.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n **16**.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n\n **17**.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n **18**.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n **19**.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n **20**.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。\n\n **21**.避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n **22**.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。\n\n **23**.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n **24**.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n **25**.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n **26**.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n **27**.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n **28**.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n\n **29**.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n\n **30**.尽量避免大事务操作，提高系统并发能力。\n\n\n\n####　一、查询速度慢的原因：\n\n1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) \n \n2、I/O吞吐量小，形成了瓶颈效应。  \n\n3、没有创建计算列导致查询不优化。 \n \n4、内存不足  \n\n5、网络速度慢  \n\n6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  \n\n7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  \n\n8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。\n  \n9、返回了不必要的行和列  \n\n10、查询语句不好，没有优化  \n\n####　可以通过如下方法来优化查询  \n\n1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  \n\n2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  \n\n3、升级硬件  \n\n4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  \n\n5、提高网速;  \n\n6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  \n\n\n\n8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   'a%'   使用索引   like   '%a'   不使用索引用   like   '%a%'   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  \n\n9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  \n\n11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：  \n    1、   查询语句的词法、语法检查          \n    2、   将语句提交给DBMS的查询优化器  \n    3、   优化器做代数优化和存取路径的优化  \n    4、   由预编译模块生成查询规划  \n    5、   然后在合适的时间提交给系统处理执行  \n    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  \n\n\n13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  \n\n\n16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  \n\n17、注意UNion和UNion   all   的区别。UNION   all好  \n\n18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  \n\n19、查询时不要返回不需要的行、列  \n\n20、用sp_configure   'query   governor   cost   limit'或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  \n\n21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  \n\n22、在SQL2000以前，一般不要用如下的字句 “IS   NULL\",   \" <> \",   \"!=\",   \"!> \",   \"! <\",   \"NOT\",   \"NOT   EXISTS\",   \"NOT   IN\",   \"NOT   LIKE\",   and   \"LIKE   '%500'\"，因为他们不走索引全是表扫描。\n也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   'm'改为WHERE   firstname   like   'm%'（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。\nNOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT\",   \"NOT   EXISTS\",   \"NOT   IN\"能优化她，而” <> ”等还是不能优化，用不到索引。  \n\n\n24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  \n\n25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  \n\n26、MIN()   和   MAX()能使用到合适的索引  \n\n\n28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  \n\n29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   *   from   chineseresume   where   title   in   ('男','女')   Select   *   from   chineseresume   where   between   '男'   and   '女'   是一样的。由于in会在比较多次，所以有时会慢些。  \n\n\n32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  \n\n34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in('JCNAD00329667','JCNAD132168','JCNAD00337748','JCNAD00338345','JCNAD00333138','JCNAD00303570',   'JCNAD00303569','JCNAD00303568','JCNAD00306698','JCNAD00231935','JCNAD00231933','JCNAD00254567',   'JCNAD00254585','JCNAD00254608','JCNAD00254607','JCNAD00258524','JCNAD00332133','JCNAD00268618',   'JCNAD00279196','JCNAD00268613')   order   by   postdate   desc  \n\n35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  \n\n36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   *   into   t_lxh   from   chineseresume   where   name   =   'XYZ'   --commit   在另一个连接中SELECT   *   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  \n\n37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  \n\n38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  \n\n39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  \n\n40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  \n\n  a、计算字段的表达是确定的  \n  b、不能用在TEXT,Ntext，Image数据类型  \n  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  \n\n\n42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  \n\n43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  \n\n\n47、分析select   emp_name   form   employee   where   salary   >   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。\n\n注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！","source":"_posts/处理百万级以上的数据提高查询速度的方法-数据库优化篇.md","raw":"---\ntitle: 处理百万级以上的数据提高查询速度的方法--数据库优化篇\ndate: 2016-09-12 14:17:55\ncategories: Mysql\ntags: Mysql\n---\n\n **1**.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n **2**.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n **3**.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num is null\n     可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\n     select id from t where num=0\n\n **4**.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num=10 or num=20\n     可以这样查询：\n     select id from t where num=10\n     union all\n     select id from t where num=20\n\n **5**.下面的查询也将导致全表扫描：(不能前置百分号)\n\n     select id from t where name like ‘%abc%’\n    若要提高效率，可以考虑全文检索。\n\n **6**.in 和 not in 也要慎用，否则会导致全表扫描，如：\n\n     select id from t where num in(1,2,3)\n     对于连续的数值，能用 between 就不要用 in 了：\n     select id from t where num between 1 and 3\n\n **7**.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\n\n     select id from t where num=@num\n     可以改为强制查询使用索引：\n     select id from t with(index(索引名)) where num=@num\n\n **8**.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where num/2=100\n     应改为:\n     select id from t where num=100*2\n\n **9**.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where substring(name,1,3)=’abc’–name以abc开头的id\n     select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n     应改为:\n     select id from t where name like ‘abc%’\n     select id from t where createdate>=’2005-11-30′ and createdate<’2005-12-1′\n\n **10**.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n **11**.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n **12**.不要写一些没有意义的查询，如需要生成一个空表结构：\n\n     select col1,col2 into #t from t where 1=0\n     这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n     create table #t(…)\n\n **13**.很多时候用 exists 代替 in 是一个好的选择：\n\n     select num from a where num in(select num from b)\n     用下面的语句替换：\n     select num from a where exists(select 1 from b where num=a.num)\n\n **14**.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n **15**.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n **16**.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n\n **17**.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n **18**.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n **19**.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n **20**.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。\n\n **21**.避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n **22**.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。\n\n **23**.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n **24**.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n **25**.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n **26**.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n **27**.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n **28**.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n\n **29**.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n\n **30**.尽量避免大事务操作，提高系统并发能力。\n\n\n\n####　一、查询速度慢的原因：\n\n1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) \n \n2、I/O吞吐量小，形成了瓶颈效应。  \n\n3、没有创建计算列导致查询不优化。 \n \n4、内存不足  \n\n5、网络速度慢  \n\n6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  \n\n7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  \n\n8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。\n  \n9、返回了不必要的行和列  \n\n10、查询语句不好，没有优化  \n\n####　可以通过如下方法来优化查询  \n\n1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  \n\n2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  \n\n3、升级硬件  \n\n4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  \n\n5、提高网速;  \n\n6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  \n\n\n\n8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   'a%'   使用索引   like   '%a'   不使用索引用   like   '%a%'   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  \n\n9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  \n\n11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：  \n    1、   查询语句的词法、语法检查          \n    2、   将语句提交给DBMS的查询优化器  \n    3、   优化器做代数优化和存取路径的优化  \n    4、   由预编译模块生成查询规划  \n    5、   然后在合适的时间提交给系统处理执行  \n    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  \n\n\n13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  \n\n\n16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  \n\n17、注意UNion和UNion   all   的区别。UNION   all好  \n\n18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  \n\n19、查询时不要返回不需要的行、列  \n\n20、用sp_configure   'query   governor   cost   limit'或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  \n\n21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  \n\n22、在SQL2000以前，一般不要用如下的字句 “IS   NULL\",   \" <> \",   \"!=\",   \"!> \",   \"! <\",   \"NOT\",   \"NOT   EXISTS\",   \"NOT   IN\",   \"NOT   LIKE\",   and   \"LIKE   '%500'\"，因为他们不走索引全是表扫描。\n也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   'm'改为WHERE   firstname   like   'm%'（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。\nNOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT\",   \"NOT   EXISTS\",   \"NOT   IN\"能优化她，而” <> ”等还是不能优化，用不到索引。  \n\n\n24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  \n\n25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  \n\n26、MIN()   和   MAX()能使用到合适的索引  \n\n\n28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  \n\n29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   *   from   chineseresume   where   title   in   ('男','女')   Select   *   from   chineseresume   where   between   '男'   and   '女'   是一样的。由于in会在比较多次，所以有时会慢些。  \n\n\n32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  \n\n34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in('JCNAD00329667','JCNAD132168','JCNAD00337748','JCNAD00338345','JCNAD00333138','JCNAD00303570',   'JCNAD00303569','JCNAD00303568','JCNAD00306698','JCNAD00231935','JCNAD00231933','JCNAD00254567',   'JCNAD00254585','JCNAD00254608','JCNAD00254607','JCNAD00258524','JCNAD00332133','JCNAD00268618',   'JCNAD00279196','JCNAD00268613')   order   by   postdate   desc  \n\n35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  \n\n36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   *   into   t_lxh   from   chineseresume   where   name   =   'XYZ'   --commit   在另一个连接中SELECT   *   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  \n\n37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  \n\n38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  \n\n39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  \n\n40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  \n\n  a、计算字段的表达是确定的  \n  b、不能用在TEXT,Ntext，Image数据类型  \n  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  \n\n\n42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  \n\n43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  \n\n\n47、分析select   emp_name   form   employee   where   salary   >   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。\n\n注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！","slug":"处理百万级以上的数据提高查询速度的方法-数据库优化篇","published":1,"updated":"2017-01-11T02:06:24.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsu002xgco0h878orxy","content":"<p> <strong>1</strong>.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p> <strong>2</strong>.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n<p> <strong>3</strong>.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num is null\n可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n</code></pre><p> <strong>4</strong>.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n</code></pre><p> <strong>5</strong>.下面的查询也将导致全表扫描：(不能前置百分号)</p>\n<pre><code> select id from t where name like ‘%abc%’\n若要提高效率，可以考虑全文检索。\n</code></pre><p> <strong>6</strong>.in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n<pre><code>select id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n</code></pre><p> <strong>7</strong>.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p>\n<pre><code>select id from t where num=@num\n可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n</code></pre><p> <strong>8</strong>.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where num/2=100\n应改为:\nselect id from t where num=100*2\n</code></pre><p> <strong>9</strong>.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where substring(name,1,3)=’abc’–name以abc开头的id\nselect id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n应改为:\nselect id from t where name like ‘abc%’\nselect id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′\n</code></pre><p> <strong>10</strong>.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n<p> <strong>11</strong>.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n<p> <strong>12</strong>.不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<pre><code>select col1,col2 into #t from t where 1=0\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\ncreate table #t(…)\n</code></pre><p> <strong>13</strong>.很多时候用 exists 代替 in 是一个好的选择：</p>\n<pre><code>select num from a where num in(select num from b)\n用下面的语句替换：\nselect num from a where exists(select 1 from b where num=a.num)\n</code></pre><p> <strong>14</strong>.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n<p> <strong>15</strong>.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>\n<p> <strong>16</strong>.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>\n<p> <strong>17</strong>.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n<p> <strong>18</strong>.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n<p> <strong>19</strong>.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p>\n<p> <strong>20</strong>.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>\n<p> <strong>21</strong>.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n<p> <strong>22</strong>.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。</p>\n<p> <strong>23</strong>.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n<p> <strong>24</strong>.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n<p> <strong>25</strong>.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n<p> <strong>26</strong>.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n<p> <strong>27</strong>.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n<p> <strong>28</strong>.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>\n<p> <strong>29</strong>.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n<p> <strong>30</strong>.尽量避免大事务操作，提高系统并发能力。</p>\n<p>####　一、查询速度慢的原因：</p>\n<p>1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) </p>\n<p>2、I/O吞吐量小，形成了瓶颈效应。  </p>\n<p>3、没有创建计算列导致查询不优化。 </p>\n<p>4、内存不足  </p>\n<p>5、网络速度慢  </p>\n<p>6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  </p>\n<p>7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  </p>\n<p>8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。</p>\n<p>9、返回了不必要的行和列  </p>\n<p>10、查询语句不好，没有优化  </p>\n<p>####　可以通过如下方法来优化查询  </p>\n<p>1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  </p>\n<p>2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  </p>\n<p>3、升级硬件  </p>\n<p>4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  </p>\n<p>5、提高网速;  </p>\n<p>6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  </p>\n<p>8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   ‘a%’   使用索引   like   ‘%a’   不使用索引用   like   ‘%a%’   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  </p>\n<p>9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  </p>\n<p>11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：<br>    1、   查询语句的词法、语法检查<br>    2、   将语句提交给DBMS的查询优化器<br>    3、   优化器做代数优化和存取路径的优化<br>    4、   由预编译模块生成查询规划<br>    5、   然后在合适的时间提交给系统处理执行<br>    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  </p>\n<p>13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  </p>\n<p>16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  </p>\n<p>17、注意UNion和UNion   all   的区别。UNION   all好  </p>\n<p>18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  </p>\n<p>19、查询时不要返回不需要的行、列  </p>\n<p>20、用sp_configure   ‘query   governor   cost   limit’或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  </p>\n<p>21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  </p>\n<p>22、在SQL2000以前，一般不要用如下的字句 “IS   NULL”,   “ &lt;&gt; “,   “!=”,   “!&gt; “,   “! &lt;”,   “NOT”,   “NOT   EXISTS”,   “NOT   IN”,   “NOT   LIKE”,   and   “LIKE   ‘%500’”，因为他们不走索引全是表扫描。<br>也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   ‘m’改为WHERE   firstname   like   ‘m%’（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。<br>NOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT”,   “NOT   EXISTS”,   “NOT   IN”能优化她，而” &lt;&gt; ”等还是不能优化，用不到索引。  </p>\n<p>24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  </p>\n<p>25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  </p>\n<p>26、MIN()   和   MAX()能使用到合适的索引  </p>\n<p>28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  </p>\n<p>29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   <em>   from   chineseresume   where   title   in   (‘男’,’女’)   Select   </em>   from   chineseresume   where   between   ‘男’   and   ‘女’   是一样的。由于in会在比较多次，所以有时会慢些。  </p>\n<p>32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  </p>\n<p>34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in(‘JCNAD00329667’,’JCNAD132168’,’JCNAD00337748’,’JCNAD00338345’,’JCNAD00333138’,’JCNAD00303570’,   ‘JCNAD00303569’,’JCNAD00303568’,’JCNAD00306698’,’JCNAD00231935’,’JCNAD00231933’,’JCNAD00254567’,   ‘JCNAD00254585’,’JCNAD00254608’,’JCNAD00254607’,’JCNAD00258524’,’JCNAD00332133’,’JCNAD00268618’,   ‘JCNAD00279196’,’JCNAD00268613’)   order   by   postdate   desc  </p>\n<p>35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  </p>\n<p>36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   <em>   into   t_lxh   from   chineseresume   where   name   =   ‘XYZ’   –commit   在另一个连接中SELECT   </em>   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  </p>\n<p>37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  </p>\n<p>38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  </p>\n<p>39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  </p>\n<p>40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  </p>\n<p>  a、计算字段的表达是确定的<br>  b、不能用在TEXT,Ntext，Image数据类型<br>  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  </p>\n<p>42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  </p>\n<p>43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  </p>\n<p>47、分析select   emp_name   form   employee   where   salary   &gt;   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。</p>\n<p>注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！</p>\n","excerpt":"","more":"<p> <strong>1</strong>.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p> <strong>2</strong>.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n<p> <strong>3</strong>.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num is null\n可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n</code></pre><p> <strong>4</strong>.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n</code></pre><p> <strong>5</strong>.下面的查询也将导致全表扫描：(不能前置百分号)</p>\n<pre><code> select id from t where name like ‘%abc%’\n若要提高效率，可以考虑全文检索。\n</code></pre><p> <strong>6</strong>.in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n<pre><code>select id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n</code></pre><p> <strong>7</strong>.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p>\n<pre><code>select id from t where num=@num\n可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n</code></pre><p> <strong>8</strong>.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where num/2=100\n应改为:\nselect id from t where num=100*2\n</code></pre><p> <strong>9</strong>.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where substring(name,1,3)=’abc’–name以abc开头的id\nselect id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n应改为:\nselect id from t where name like ‘abc%’\nselect id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′\n</code></pre><p> <strong>10</strong>.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n<p> <strong>11</strong>.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n<p> <strong>12</strong>.不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<pre><code>select col1,col2 into #t from t where 1=0\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\ncreate table #t(…)\n</code></pre><p> <strong>13</strong>.很多时候用 exists 代替 in 是一个好的选择：</p>\n<pre><code>select num from a where num in(select num from b)\n用下面的语句替换：\nselect num from a where exists(select 1 from b where num=a.num)\n</code></pre><p> <strong>14</strong>.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n<p> <strong>15</strong>.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>\n<p> <strong>16</strong>.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>\n<p> <strong>17</strong>.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n<p> <strong>18</strong>.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n<p> <strong>19</strong>.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p>\n<p> <strong>20</strong>.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>\n<p> <strong>21</strong>.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n<p> <strong>22</strong>.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。</p>\n<p> <strong>23</strong>.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n<p> <strong>24</strong>.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n<p> <strong>25</strong>.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n<p> <strong>26</strong>.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n<p> <strong>27</strong>.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n<p> <strong>28</strong>.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>\n<p> <strong>29</strong>.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n<p> <strong>30</strong>.尽量避免大事务操作，提高系统并发能力。</p>\n<p>####　一、查询速度慢的原因：</p>\n<p>1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) </p>\n<p>2、I/O吞吐量小，形成了瓶颈效应。  </p>\n<p>3、没有创建计算列导致查询不优化。 </p>\n<p>4、内存不足  </p>\n<p>5、网络速度慢  </p>\n<p>6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  </p>\n<p>7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  </p>\n<p>8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。</p>\n<p>9、返回了不必要的行和列  </p>\n<p>10、查询语句不好，没有优化  </p>\n<p>####　可以通过如下方法来优化查询  </p>\n<p>1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  </p>\n<p>2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  </p>\n<p>3、升级硬件  </p>\n<p>4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  </p>\n<p>5、提高网速;  </p>\n<p>6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  </p>\n<p>8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   ‘a%’   使用索引   like   ‘%a’   不使用索引用   like   ‘%a%’   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  </p>\n<p>9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  </p>\n<p>11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：<br>    1、   查询语句的词法、语法检查<br>    2、   将语句提交给DBMS的查询优化器<br>    3、   优化器做代数优化和存取路径的优化<br>    4、   由预编译模块生成查询规划<br>    5、   然后在合适的时间提交给系统处理执行<br>    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  </p>\n<p>13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  </p>\n<p>16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  </p>\n<p>17、注意UNion和UNion   all   的区别。UNION   all好  </p>\n<p>18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  </p>\n<p>19、查询时不要返回不需要的行、列  </p>\n<p>20、用sp_configure   ‘query   governor   cost   limit’或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  </p>\n<p>21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  </p>\n<p>22、在SQL2000以前，一般不要用如下的字句 “IS   NULL”,   “ &lt;&gt; “,   “!=”,   “!&gt; “,   “! &lt;”,   “NOT”,   “NOT   EXISTS”,   “NOT   IN”,   “NOT   LIKE”,   and   “LIKE   ‘%500’”，因为他们不走索引全是表扫描。<br>也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   ‘m’改为WHERE   firstname   like   ‘m%’（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。<br>NOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT”,   “NOT   EXISTS”,   “NOT   IN”能优化她，而” &lt;&gt; ”等还是不能优化，用不到索引。  </p>\n<p>24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  </p>\n<p>25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  </p>\n<p>26、MIN()   和   MAX()能使用到合适的索引  </p>\n<p>28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  </p>\n<p>29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   <em>   from   chineseresume   where   title   in   (‘男’,’女’)   Select   </em>   from   chineseresume   where   between   ‘男’   and   ‘女’   是一样的。由于in会在比较多次，所以有时会慢些。  </p>\n<p>32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  </p>\n<p>34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in(‘JCNAD00329667’,’JCNAD132168’,’JCNAD00337748’,’JCNAD00338345’,’JCNAD00333138’,’JCNAD00303570’,   ‘JCNAD00303569’,’JCNAD00303568’,’JCNAD00306698’,’JCNAD00231935’,’JCNAD00231933’,’JCNAD00254567’,   ‘JCNAD00254585’,’JCNAD00254608’,’JCNAD00254607’,’JCNAD00258524’,’JCNAD00332133’,’JCNAD00268618’,   ‘JCNAD00279196’,’JCNAD00268613’)   order   by   postdate   desc  </p>\n<p>35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  </p>\n<p>36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   <em>   into   t_lxh   from   chineseresume   where   name   =   ‘XYZ’   –commit   在另一个连接中SELECT   </em>   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  </p>\n<p>37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  </p>\n<p>38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  </p>\n<p>39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  </p>\n<p>40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  </p>\n<p>  a、计算字段的表达是确定的<br>  b、不能用在TEXT,Ntext，Image数据类型<br>  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  </p>\n<p>42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  </p>\n<p>43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  </p>\n<p>47、分析select   emp_name   form   employee   where   salary   &gt;   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。</p>\n<p>注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！</p>\n"},{"title":"如何查看当前的linux系统是哪个发行商","date":"2016-08-03T08:06:33.000Z","_content":"我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：\n\n一、 通用方法-适用于当前市面上绝大多数linux\n\n  **lsb_release -a**\n```java\n\t[maps@iZ25017n0ruZ conf]$ lsb_release -a\n\tLSB Version:\t:core-4.1-amd64:core-4.1-noarch\n\tDistributor ID:\tCentOS\n\tDescription:\tCentOS Linux release 7.0.1406 (Core) \n\tRelease:\t7.0.1406\n\tCodename:\tCore\n```\n输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406\n\n二、 非通用-技巧\n\n1. 首先通过cat /proc/version命令查看当前linux系统内核信息\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014\n```\n通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014\n```\n通过上面输出信息我们可以看到系统为Ubuntu系列\n\n2. 然后切换到/etc/目录下面，看看是否os.release文件，然后通过\"cat os.release\"命令查看该文件内容信息\n```java\n\t[**cat /etc/redhat-release**@iZ25017n0ruZ etc]$ cat ./os-release \n\tNAME=\"CentOS Linux\"\n\tVERSION=\"7 (Core)\"\n\tID=\"centos\"\n\tID_LIKE=\"rhel fedora\"\n\tVERSION_ID=\"7\"\n\tPRETTY_NAME=\"CentOS Linux 7 (Core)\"\n\tANSI_COLOR=\"0;31\"\n\tCPE_NAME=\"cpe:/o:centos:centos:7\"\n\tHOME_URL=\"https://www.centos.org/\"\n\tBUG_REPORT_URL=\"https://bugs.centos.org/\"\n```\n通过上面的输出信息我们可以确定该系统为CentOs 7\n\n注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过**cat /etc/redhat-release**命令也可以查看系统发行商信息\n```java\n\t[maps@iZ25017n0ruZ conf]$ cat /etc/redhat-release\n\tCentOS Linux release 7.0.1406 (Core) \n```\n","source":"_posts/如何查看当前的linux系统是哪个发行商.md","raw":"---\ntitle: 如何查看当前的linux系统是哪个发行商\ndate: 2016-08-03 16:06:33\ncategories: Linux\ntags: Linux\n---\n我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：\n\n一、 通用方法-适用于当前市面上绝大多数linux\n\n  **lsb_release -a**\n```java\n\t[maps@iZ25017n0ruZ conf]$ lsb_release -a\n\tLSB Version:\t:core-4.1-amd64:core-4.1-noarch\n\tDistributor ID:\tCentOS\n\tDescription:\tCentOS Linux release 7.0.1406 (Core) \n\tRelease:\t7.0.1406\n\tCodename:\tCore\n```\n输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406\n\n二、 非通用-技巧\n\n1. 首先通过cat /proc/version命令查看当前linux系统内核信息\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014\n```\n通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014\n```\n通过上面输出信息我们可以看到系统为Ubuntu系列\n\n2. 然后切换到/etc/目录下面，看看是否os.release文件，然后通过\"cat os.release\"命令查看该文件内容信息\n```java\n\t[**cat /etc/redhat-release**@iZ25017n0ruZ etc]$ cat ./os-release \n\tNAME=\"CentOS Linux\"\n\tVERSION=\"7 (Core)\"\n\tID=\"centos\"\n\tID_LIKE=\"rhel fedora\"\n\tVERSION_ID=\"7\"\n\tPRETTY_NAME=\"CentOS Linux 7 (Core)\"\n\tANSI_COLOR=\"0;31\"\n\tCPE_NAME=\"cpe:/o:centos:centos:7\"\n\tHOME_URL=\"https://www.centos.org/\"\n\tBUG_REPORT_URL=\"https://bugs.centos.org/\"\n```\n通过上面的输出信息我们可以确定该系统为CentOs 7\n\n注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过**cat /etc/redhat-release**命令也可以查看系统发行商信息\n```java\n\t[maps@iZ25017n0ruZ conf]$ cat /etc/redhat-release\n\tCentOS Linux release 7.0.1406 (Core) \n```\n","slug":"如何查看当前的linux系统是哪个发行商","published":1,"updated":"2017-01-11T02:06:24.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsw0031gco0plaey5vl","content":"<p>我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：</p>\n<p>一、 通用方法-适用于当前市面上绝大多数linux</p>\n<p>  <strong>lsb_release -a</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ lsb_release -a</div><div class=\"line\">LSB Version:\t:core-<span class=\"number\">4.1</span>-amd64:core-<span class=\"number\">4.1</span>-noarch</div><div class=\"line\">Distributor ID:\tCentOS</div><div class=\"line\">Description:\tCentOS Linux release <span class=\"number\">7.0</span>.1406 (Core) </div><div class=\"line\">Release:\t<span class=\"number\">7.0</span>.1406</div><div class=\"line\">Codename:\tCore</div></pre></td></tr></table></figure></p>\n<p>输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406</p>\n<p>二、 非通用-技巧</p>\n<ol>\n<li>首先通过cat /proc/version命令查看当前linux系统内核信息<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014</div></pre></td></tr></table></figure></p>\n<p>通过上面输出信息我们可以看到系统为Ubuntu系列</p>\n<ol>\n<li>然后切换到/etc/目录下面，看看是否os.release文件，然后通过”cat os.release”命令查看该文件内容信息<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[**cat /etc/redhat-release**<span class=\"meta\">@iZ</span>25017n0ruZ etc]$ cat ./os-release </div><div class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></div><div class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></div><div class=\"line\">ID=<span class=\"string\">\"centos\"</span></div><div class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></div><div class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></div><div class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></div><div class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></div><div class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></div><div class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></div><div class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面的输出信息我们可以确定该系统为CentOs 7</p>\n<p>注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过<strong>cat /etc/redhat-release</strong>命令也可以查看系统发行商信息<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ cat /etc/redhat-release</div><div class=\"line\">CentOS Linux release <span class=\"number\">7.0</span>.1406 (Core)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：</p>\n<p>一、 通用方法-适用于当前市面上绝大多数linux</p>\n<p>  <strong>lsb_release -a</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ lsb_release -a</div><div class=\"line\">LSB Version:\t:core-<span class=\"number\">4.1</span>-amd64:core-<span class=\"number\">4.1</span>-noarch</div><div class=\"line\">Distributor ID:\tCentOS</div><div class=\"line\">Description:\tCentOS Linux release <span class=\"number\">7.0</span>.1406 (Core) </div><div class=\"line\">Release:\t<span class=\"number\">7.0</span>.1406</div><div class=\"line\">Codename:\tCore</div></pre></td></tr></table></figure></p>\n<p>输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406</p>\n<p>二、 非通用-技巧</p>\n<ol>\n<li>首先通过cat /proc/version命令查看当前linux系统内核信息<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014</div></pre></td></tr></table></figure></p>\n<p>通过上面输出信息我们可以看到系统为Ubuntu系列</p>\n<ol>\n<li>然后切换到/etc/目录下面，看看是否os.release文件，然后通过”cat os.release”命令查看该文件内容信息<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[**cat /etc/redhat-release**<span class=\"meta\">@iZ</span>25017n0ruZ etc]$ cat ./os-release </div><div class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></div><div class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></div><div class=\"line\">ID=<span class=\"string\">\"centos\"</span></div><div class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></div><div class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></div><div class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></div><div class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></div><div class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></div><div class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></div><div class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面的输出信息我们可以确定该系统为CentOs 7</p>\n<p>注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过<strong>cat /etc/redhat-release</strong>命令也可以查看系统发行商信息<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ cat /etc/redhat-release</div><div class=\"line\">CentOS Linux release <span class=\"number\">7.0</span>.1406 (Core)</div></pre></td></tr></table></figure></p>\n"},{"title":"带附件的enctype表单中普通属性的获取","date":"2016-09-07T01:33:04.000Z","_content":"我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式\n\n### 一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request){\n            Map returnMap = new HashMap();\n            Iterator entries = request.getParameterMap().entrySet().iterator();\n            Map.Entry entry;\n            while (entries.hasNext()) {\n                String name = \"\";\n                String value = \"\";\n                entry = (Map.Entry) entries.next();\n                name = (String) entry.getKey();\n                Object valueObj = entry.getValue();\n                if(null == valueObj){\n                    value = \"\";\n                }else if(valueObj instanceof String[]){\n                    String[] values = (String[])valueObj;\n                    for(int i=0;i<values.length;i++){\n                        value = values[i] + \",\";\n                    }\n                    value = value.substring(0, value.length()-1);\n                }else{\n                    value = valueObj.toString();\n                }\n                returnMap.put(name, value);\n            }\n        return  returnMap;\n    }\n\n```\n  \n### 一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request,String url){\n        Map returnMap = new HashMap();\n        boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n\n\t\t//如果multipart/form-data类型的表单（带附件）\n        if (isMultipart){  \n                FileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload( factory );\n                try {\n                    List<FileItem> uploadItemList = upload.parseRequest(request);\n                    for( FileItem uploadItem : uploadItemList ){\n\n\t\t\t\t\t\t//文件表单中的普通form表单域，比如username、phone等属性\n                        if( uploadItem.isFormField() ){ \n                            String fieldName = uploadItem.getFieldName();\n                            String value = uploadItem.getString();\n                            returnMap.put(fieldName,value);\n\n                        }else{  //form表单中的file文件域\n                        \t \n                            try{\n                            \t/**\n                            \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息\n                            \t */\n                            \t String fieldname = uploadItem.getFieldName();\n                                 String filename = FilenameUtils.getName(uploadItem.getName());\n                                 InputStream filecontent = uploadItem.getInputStream();\n                                 \n                                 byte[] bytes = uploadItem.get();\n                                 \t\n                                 /**\n                             \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面\n                             \t * \n                             \t * ........\n                             \t */\n                                 \n                                 returnMap.put(fieldname,filename);//此处这是例子，具体根据你自己的业务封装\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            } finally {\n                            }\n                        }\n                    }\n                } catch (FileUploadException e) {\n                    e.printStackTrace();\n                } catch (Exception e){\n                    e.printStackTrace();\n                }\n        }\n\t\treturn  returnMap;\n\t}\n```\n注：将reques对象封装成map集合工具类，主要解决如下问题：\n\n  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回\n\n  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理\n","source":"_posts/带附件的enctype表单中普通属性的获取.md","raw":"---\ntitle: 带附件的enctype表单中普通属性的获取\ndate: 2016-09-07 09:33:04\ncategories: java\ntags: 表单元素获取\n---\n我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式\n\n### 一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request){\n            Map returnMap = new HashMap();\n            Iterator entries = request.getParameterMap().entrySet().iterator();\n            Map.Entry entry;\n            while (entries.hasNext()) {\n                String name = \"\";\n                String value = \"\";\n                entry = (Map.Entry) entries.next();\n                name = (String) entry.getKey();\n                Object valueObj = entry.getValue();\n                if(null == valueObj){\n                    value = \"\";\n                }else if(valueObj instanceof String[]){\n                    String[] values = (String[])valueObj;\n                    for(int i=0;i<values.length;i++){\n                        value = values[i] + \",\";\n                    }\n                    value = value.substring(0, value.length()-1);\n                }else{\n                    value = valueObj.toString();\n                }\n                returnMap.put(name, value);\n            }\n        return  returnMap;\n    }\n\n```\n  \n### 一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request,String url){\n        Map returnMap = new HashMap();\n        boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n\n\t\t//如果multipart/form-data类型的表单（带附件）\n        if (isMultipart){  \n                FileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload( factory );\n                try {\n                    List<FileItem> uploadItemList = upload.parseRequest(request);\n                    for( FileItem uploadItem : uploadItemList ){\n\n\t\t\t\t\t\t//文件表单中的普通form表单域，比如username、phone等属性\n                        if( uploadItem.isFormField() ){ \n                            String fieldName = uploadItem.getFieldName();\n                            String value = uploadItem.getString();\n                            returnMap.put(fieldName,value);\n\n                        }else{  //form表单中的file文件域\n                        \t \n                            try{\n                            \t/**\n                            \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息\n                            \t */\n                            \t String fieldname = uploadItem.getFieldName();\n                                 String filename = FilenameUtils.getName(uploadItem.getName());\n                                 InputStream filecontent = uploadItem.getInputStream();\n                                 \n                                 byte[] bytes = uploadItem.get();\n                                 \t\n                                 /**\n                             \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面\n                             \t * \n                             \t * ........\n                             \t */\n                                 \n                                 returnMap.put(fieldname,filename);//此处这是例子，具体根据你自己的业务封装\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            } finally {\n                            }\n                        }\n                    }\n                } catch (FileUploadException e) {\n                    e.printStackTrace();\n                } catch (Exception e){\n                    e.printStackTrace();\n                }\n        }\n\t\treturn  returnMap;\n\t}\n```\n注：将reques对象封装成map集合工具类，主要解决如下问题：\n\n  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回\n\n  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理\n","slug":"带附件的enctype表单中普通属性的获取","published":1,"updated":"2017-01-11T02:06:24.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsy0034gco0xuw0350p","content":"<p>我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式</p>\n<h3 id=\"一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\"><a href=\"#一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\"></a>一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">           Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">           Iterator entries = request.getParameterMap().entrySet().iterator();</div><div class=\"line\">           Map.Entry entry;</div><div class=\"line\">           <span class=\"keyword\">while</span> (entries.hasNext()) &#123;</div><div class=\"line\">               String name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               String value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               entry = (Map.Entry) entries.next();</div><div class=\"line\">               name = (String) entry.getKey();</div><div class=\"line\">               Object valueObj = entry.getValue();</div><div class=\"line\">               <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == valueObj)&#123;</div><div class=\"line\">                   value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(valueObj <span class=\"keyword\">instanceof</span> String[])&#123;</div><div class=\"line\">                   String[] values = (String[])valueObj;</div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;values.length;i++)&#123;</div><div class=\"line\">                       value = values[i] + <span class=\"string\">\",\"</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   value = value.substring(<span class=\"number\">0</span>, value.length()-<span class=\"number\">1</span>);</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                   value = valueObj.toString();</div><div class=\"line\">               &#125;</div><div class=\"line\">               returnMap.put(name, value);</div><div class=\"line\">           &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\"><a href=\"#一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\"></a>一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request,String url)</span></span>&#123;</div><div class=\"line\">       Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">       <span class=\"keyword\">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//如果multipart/form-data类型的表单（带附件）</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isMultipart)&#123;  </div><div class=\"line\">               FileItemFactory factory = <span class=\"keyword\">new</span> DiskFileItemFactory();</div><div class=\"line\">               ServletFileUpload upload = <span class=\"keyword\">new</span> ServletFileUpload( factory );</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   List&lt;FileItem&gt; uploadItemList = upload.parseRequest(request);</div><div class=\"line\">                   <span class=\"keyword\">for</span>( FileItem uploadItem : uploadItemList )&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//文件表单中的普通form表单域，比如username、phone等属性</span></div><div class=\"line\">                       <span class=\"keyword\">if</span>( uploadItem.isFormField() )&#123; </div><div class=\"line\">                           String fieldName = uploadItem.getFieldName();</div><div class=\"line\">                           String value = uploadItem.getString();</div><div class=\"line\">                           returnMap.put(fieldName,value);</div><div class=\"line\"></div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//form表单中的file文件域</span></div><div class=\"line\">                       \t </div><div class=\"line\">                           <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                           \t<span class=\"comment\">/**</span></div><div class=\"line\">                           \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息</div><div class=\"line\">                           \t */</div><div class=\"line\">                           \t String fieldname = uploadItem.getFieldName();</div><div class=\"line\">                                String filename = FilenameUtils.getName(uploadItem.getName());</div><div class=\"line\">                                InputStream filecontent = uploadItem.getInputStream();</div><div class=\"line\">                                </div><div class=\"line\">                                <span class=\"keyword\">byte</span>[] bytes = uploadItem.get();</div><div class=\"line\">                                \t</div><div class=\"line\">                                <span class=\"comment\">/**</span></div><div class=\"line\">                            \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面</div><div class=\"line\">                            \t * </div><div class=\"line\">                            \t * ........</div><div class=\"line\">                            \t */</div><div class=\"line\">                                </div><div class=\"line\">                                returnMap.put(fieldname,filename);<span class=\"comment\">//此处这是例子，具体根据你自己的业务封装</span></div><div class=\"line\">                           &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                               e.printStackTrace();</div><div class=\"line\">                           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (FileUploadException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：将reques对象封装成map集合工具类，主要解决如下问题：</p>\n<p>  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回</p>\n<p>  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理</p>\n","excerpt":"","more":"<p>我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式</p>\n<h3 id=\"一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\"><a href=\"#一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\"></a>一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">           Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">           Iterator entries = request.getParameterMap().entrySet().iterator();</div><div class=\"line\">           Map.Entry entry;</div><div class=\"line\">           <span class=\"keyword\">while</span> (entries.hasNext()) &#123;</div><div class=\"line\">               String name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               String value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               entry = (Map.Entry) entries.next();</div><div class=\"line\">               name = (String) entry.getKey();</div><div class=\"line\">               Object valueObj = entry.getValue();</div><div class=\"line\">               <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == valueObj)&#123;</div><div class=\"line\">                   value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(valueObj <span class=\"keyword\">instanceof</span> String[])&#123;</div><div class=\"line\">                   String[] values = (String[])valueObj;</div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;values.length;i++)&#123;</div><div class=\"line\">                       value = values[i] + <span class=\"string\">\",\"</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   value = value.substring(<span class=\"number\">0</span>, value.length()-<span class=\"number\">1</span>);</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                   value = valueObj.toString();</div><div class=\"line\">               &#125;</div><div class=\"line\">               returnMap.put(name, value);</div><div class=\"line\">           &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\"><a href=\"#一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\"></a>一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request,String url)</span></span>&#123;</div><div class=\"line\">       Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">       <span class=\"keyword\">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//如果multipart/form-data类型的表单（带附件）</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isMultipart)&#123;  </div><div class=\"line\">               FileItemFactory factory = <span class=\"keyword\">new</span> DiskFileItemFactory();</div><div class=\"line\">               ServletFileUpload upload = <span class=\"keyword\">new</span> ServletFileUpload( factory );</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   List&lt;FileItem&gt; uploadItemList = upload.parseRequest(request);</div><div class=\"line\">                   <span class=\"keyword\">for</span>( FileItem uploadItem : uploadItemList )&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//文件表单中的普通form表单域，比如username、phone等属性</span></div><div class=\"line\">                       <span class=\"keyword\">if</span>( uploadItem.isFormField() )&#123; </div><div class=\"line\">                           String fieldName = uploadItem.getFieldName();</div><div class=\"line\">                           String value = uploadItem.getString();</div><div class=\"line\">                           returnMap.put(fieldName,value);</div><div class=\"line\"></div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//form表单中的file文件域</span></div><div class=\"line\">                       \t </div><div class=\"line\">                           <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                           \t<span class=\"comment\">/**</div><div class=\"line\">                           \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息</div><div class=\"line\">                           \t */</span></div><div class=\"line\">                           \t String fieldname = uploadItem.getFieldName();</div><div class=\"line\">                                String filename = FilenameUtils.getName(uploadItem.getName());</div><div class=\"line\">                                InputStream filecontent = uploadItem.getInputStream();</div><div class=\"line\">                                </div><div class=\"line\">                                <span class=\"keyword\">byte</span>[] bytes = uploadItem.get();</div><div class=\"line\">                                \t</div><div class=\"line\">                                <span class=\"comment\">/**</div><div class=\"line\">                            \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面</div><div class=\"line\">                            \t * </div><div class=\"line\">                            \t * ........</div><div class=\"line\">                            \t */</span></div><div class=\"line\">                                </div><div class=\"line\">                                returnMap.put(fieldname,filename);<span class=\"comment\">//此处这是例子，具体根据你自己的业务封装</span></div><div class=\"line\">                           &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                               e.printStackTrace();</div><div class=\"line\">                           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (FileUploadException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：将reques对象封装成map集合工具类，主要解决如下问题：</p>\n<p>  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回</p>\n<p>  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理</p>\n"},{"title":"整型字面值与进制运算之间的关系","date":"2016-08-20T09:19:18.000Z","_content":"何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息\n\n1. 二进制表示：int i = 0b111010110;其实0b111010110就是字面值\n2. 八进制表示：long l3 = 0123;其实0123就是字面值\n3. 十进制表示：long l2 = 225;其实225就是字面值\n4. 十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值\n\n好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。\n\n**一、十进制**\n\n地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。\n\n**二、二进制**\n\n计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；\n\n举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，\t这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：\n\n    1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n\t\t30转换成二进制数字(11110)\n    2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n\t\t实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的和逢2进1就行了。\n\n**二、八进制**\n\n除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）\n\n    8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n\t并且标示数值串中只能包含0~7之间的数字，例如：\n\tint i = 0123;\n\tint m = 01354;\n\tint n =0238;（不合格）\n\n    8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n\t我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n\t比如013=3*8的0次方+1*8的1次方=3+8=11；\n\n**三、十六进制**\n\n16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算\n\n    可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n    0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n\n\n\n**四、二进制表示十进制**\n\n从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。\n\n比如：int x = 0b1010;\n*其实x的真实值是二进制1010运算十进制后的值10.*\n\nint u = 0B111010110;\n*其实u的真实值是二进制111010110运算十进制后的值470.*","source":"_posts/整型字面值与进制运算之间的关系.md","raw":"---\ntitle: 整型字面值与进制运算之间的关系\ndate: 2016-08-20 17:19:18\ncategories: java\ntags: 进制运算\n---\n何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息\n\n1. 二进制表示：int i = 0b111010110;其实0b111010110就是字面值\n2. 八进制表示：long l3 = 0123;其实0123就是字面值\n3. 十进制表示：long l2 = 225;其实225就是字面值\n4. 十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值\n\n好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。\n\n**一、十进制**\n\n地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。\n\n**二、二进制**\n\n计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；\n\n举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，\t这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：\n\n    1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n\t\t30转换成二进制数字(11110)\n    2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n\t\t实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的和逢2进1就行了。\n\n**二、八进制**\n\n除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）\n\n    8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n\t并且标示数值串中只能包含0~7之间的数字，例如：\n\tint i = 0123;\n\tint m = 01354;\n\tint n =0238;（不合格）\n\n    8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n\t我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n\t比如013=3*8的0次方+1*8的1次方=3+8=11；\n\n**三、十六进制**\n\n16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算\n\n    可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n    0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n\n\n\n**四、二进制表示十进制**\n\n从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。\n\n比如：int x = 0b1010;\n*其实x的真实值是二进制1010运算十进制后的值10.*\n\nint u = 0B111010110;\n*其实u的真实值是二进制111010110运算十进制后的值470.*","slug":"整型字面值与进制运算之间的关系","published":1,"updated":"2017-01-11T02:06:24.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddsz0037gco0vkm1qyzq","content":"<p>何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息</p>\n<ol>\n<li>二进制表示：int i = 0b111010110;其实0b111010110就是字面值</li>\n<li>八进制表示：long l3 = 0123;其实0123就是字面值</li>\n<li>十进制表示：long l2 = 225;其实225就是字面值</li>\n<li>十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值</li>\n</ol>\n<p>好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。</p>\n<p><strong>一、十进制</strong></p>\n<p>地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。</p>\n<p><strong>二、二进制</strong></p>\n<p>计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；</p>\n<p>举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，    这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：</p>\n<pre><code>1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n    30转换成二进制数字(11110)\n2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n    实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的和逢2进1就行了。\n</code></pre><p><strong>二、八进制</strong></p>\n<p>除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）</p>\n<pre><code>8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n并且标示数值串中只能包含0~7之间的数字，例如：\nint i = 0123;\nint m = 01354;\nint n =0238;（不合格）\n\n8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n比如013=3*8的0次方+1*8的1次方=3+8=11；\n</code></pre><p><strong>三、十六进制</strong></p>\n<p>16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算</p>\n<pre><code>可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n</code></pre><p><strong>四、二进制表示十进制</strong></p>\n<p>从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。</p>\n<p>比如：int x = 0b1010;<br><em>其实x的真实值是二进制1010运算十进制后的值10.</em></p>\n<p>int u = 0B111010110;<br><em>其实u的真实值是二进制111010110运算十进制后的值470.</em></p>\n","excerpt":"","more":"<p>何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息</p>\n<ol>\n<li>二进制表示：int i = 0b111010110;其实0b111010110就是字面值</li>\n<li>八进制表示：long l3 = 0123;其实0123就是字面值</li>\n<li>十进制表示：long l2 = 225;其实225就是字面值</li>\n<li>十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值</li>\n</ol>\n<p>好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。</p>\n<p><strong>一、十进制</strong></p>\n<p>地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。</p>\n<p><strong>二、二进制</strong></p>\n<p>计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；</p>\n<p>举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，    这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：</p>\n<pre><code>1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n    30转换成二进制数字(11110)\n2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n    实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的和逢2进1就行了。\n</code></pre><p><strong>二、八进制</strong></p>\n<p>除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）</p>\n<pre><code>8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n并且标示数值串中只能包含0~7之间的数字，例如：\nint i = 0123;\nint m = 01354;\nint n =0238;（不合格）\n\n8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n比如013=3*8的0次方+1*8的1次方=3+8=11；\n</code></pre><p><strong>三、十六进制</strong></p>\n<p>16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算</p>\n<pre><code>可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n</code></pre><p><strong>四、二进制表示十进制</strong></p>\n<p>从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。</p>\n<p>比如：int x = 0b1010;<br><em>其实x的真实值是二进制1010运算十进制后的值10.</em></p>\n<p>int u = 0B111010110;<br><em>其实u的真实值是二进制111010110运算十进制后的值470.</em></p>\n"},{"title":"用POI3.9写一个基于office系列文档的转换系统(设计篇)","date":"2016-09-12T06:11:22.000Z","_content":"想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。\n\n### 一、需求\n\n由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：\n\n![](http://soujava.com/images/poi1.png)\n\n### 二、问题\n\n通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：\n1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。\n\n2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。\n\n3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。\n\n### 三、改进\n\n想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。\n\n注：因为jcob不能在linux中使用，故目前选择POI方案。\n\n### 三、疑惑\n\n1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)\n\n2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。\n\n结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。\n\n\n","source":"_posts/用POI3-9写一个基于office系列文档的转换系统-设计篇.md","raw":"---\ntitle: 用POI3.9写一个基于office系列文档的转换系统(设计篇)\ndate: 2016-09-12 14:11:22\ncategories: java\ntags: poi\n---\n想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。\n\n### 一、需求\n\n由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：\n\n![](http://soujava.com/images/poi1.png)\n\n### 二、问题\n\n通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：\n1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。\n\n2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。\n\n3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。\n\n### 三、改进\n\n想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。\n\n注：因为jcob不能在linux中使用，故目前选择POI方案。\n\n### 三、疑惑\n\n1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)\n\n2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。\n\n结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。\n\n\n","slug":"用POI3-9写一个基于office系列文档的转换系统-设计篇","published":1,"updated":"2017-01-11T02:06:24.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddt1003cgco0layfp1fv","content":"<p>想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。</p>\n<h3 id=\"一、需求\"><a href=\"#一、需求\" class=\"headerlink\" title=\"一、需求\"></a>一、需求</h3><p>由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：</p>\n<p><img src=\"http://soujava.com/images/poi1.png\" alt=\"\"></p>\n<h3 id=\"二、问题\"><a href=\"#二、问题\" class=\"headerlink\" title=\"二、问题\"></a>二、问题</h3><p>通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：<br>1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。</p>\n<p>2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。</p>\n<p>3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。</p>\n<h3 id=\"三、改进\"><a href=\"#三、改进\" class=\"headerlink\" title=\"三、改进\"></a>三、改进</h3><p>想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。</p>\n<p>注：因为jcob不能在linux中使用，故目前选择POI方案。</p>\n<h3 id=\"三、疑惑\"><a href=\"#三、疑惑\" class=\"headerlink\" title=\"三、疑惑\"></a>三、疑惑</h3><p>1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)</p>\n<p>2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。</p>\n<p>结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。</p>\n","excerpt":"","more":"<p>想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。</p>\n<h3 id=\"一、需求\"><a href=\"#一、需求\" class=\"headerlink\" title=\"一、需求\"></a>一、需求</h3><p>由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：</p>\n<p><img src=\"http://soujava.com/images/poi1.png\" alt=\"\"></p>\n<h3 id=\"二、问题\"><a href=\"#二、问题\" class=\"headerlink\" title=\"二、问题\"></a>二、问题</h3><p>通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：<br>1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。</p>\n<p>2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。</p>\n<p>3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。</p>\n<h3 id=\"三、改进\"><a href=\"#三、改进\" class=\"headerlink\" title=\"三、改进\"></a>三、改进</h3><p>想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。</p>\n<p>注：因为jcob不能在linux中使用，故目前选择POI方案。</p>\n<h3 id=\"三、疑惑\"><a href=\"#三、疑惑\" class=\"headerlink\" title=\"三、疑惑\"></a>三、疑惑</h3><p>1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)</p>\n<p>2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。</p>\n<p>结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。</p>\n"},{"title":"通过Nginx反向代理解决跨域问题","date":"2016-07-19T09:26:32.000Z","_content":" 有以下需求：\n\n1. 有两个独立运行的系统，用户系统(user)、发布系统(publish)\n2. publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；\n3. 因为两个系统部署在不同的服务器中运行，所以存在跨域问题\n4. 解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码\n\n![Alt text](http://soujava.com/images/kuayu.jpg)\n\n\n\n**注**：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：\n```java\n\tresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n```","source":"_posts/通过反向代理解决跨域问题.md","raw":"---\ntitle: 通过Nginx反向代理解决跨域问题\ndate: 2016-07-19 17:26:32\ncategories: Nginx\ntags: 跨域\n---\n 有以下需求：\n\n1. 有两个独立运行的系统，用户系统(user)、发布系统(publish)\n2. publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；\n3. 因为两个系统部署在不同的服务器中运行，所以存在跨域问题\n4. 解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码\n\n![Alt text](http://soujava.com/images/kuayu.jpg)\n\n\n\n**注**：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：\n```java\n\tresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n```","slug":"通过反向代理解决跨域问题","published":1,"updated":"2017-01-11T02:06:24.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy58ddt6003fgco01zricznq","content":"<p> 有以下需求：</p>\n<ol>\n<li>有两个独立运行的系统，用户系统(user)、发布系统(publish)</li>\n<li>publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；</li>\n<li>因为两个系统部署在不同的服务器中运行，所以存在跨域问题</li>\n<li>解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码</li>\n</ol>\n<p><img src=\"http://soujava.com/images/kuayu.jpg\" alt=\"Alt text\"></p>\n<p><strong>注</strong>：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p> 有以下需求：</p>\n<ol>\n<li>有两个独立运行的系统，用户系统(user)、发布系统(publish)</li>\n<li>publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；</li>\n<li>因为两个系统部署在不同的服务器中运行，所以存在跨域问题</li>\n<li>解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码</li>\n</ol>\n<p><img src=\"http://soujava.com/images/kuayu.jpg\" alt=\"Alt text\"></p>\n<p><strong>注</strong>：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciy58ddpz0001gco0ynlfd2jy","category_id":"ciy58ddqc0005gco0f7jcl1u8","_id":"ciy58ddqp000egco0b6fqfehe"},{"post_id":"ciy58ddq50003gco02acf1icn","category_id":"ciy58ddqc0005gco0f7jcl1u8","_id":"ciy58ddqs000kgco0blwfeaa4"},{"post_id":"ciy58ddqe0007gco09dahqmbx","category_id":"ciy58ddqc0005gco0f7jcl1u8","_id":"ciy58ddqw000qgco0o3njekre"},{"post_id":"ciy58ddql000agco04kbf01aq","category_id":"ciy58ddqt000ngco04kds7lzz","_id":"ciy58ddr3000xgco04x8gqv5k"},{"post_id":"ciy58ddqo000dgco0rb1zgdjh","category_id":"ciy58ddr1000tgco0cp4iz2fm","_id":"ciy58ddr80013gco04tmlto8j"},{"post_id":"ciy58ddqq000ggco091vvttle","category_id":"ciy58ddr4000zgco01691x01c","_id":"ciy58ddrc0019gco0p81fjqa0"},{"post_id":"ciy58ddqs000jgco0mvvxd5cj","category_id":"ciy58ddr4000zgco01691x01c","_id":"ciy58ddrg001fgco04prx9fbe"},{"post_id":"ciy58ddqt000mgco0iwipjbkl","category_id":"ciy58ddrc001agco0arj42h4c","_id":"ciy58ddrm001lgco08m0342zq"},{"post_id":"ciy58ddqu000pgco0e9d94l79","category_id":"ciy58ddrc001agco0arj42h4c","_id":"ciy58ddrs001rgco0bm8khaov"},{"post_id":"ciy58ddqw000rgco0r7z6xcb7","category_id":"ciy58ddrc001agco0arj42h4c","_id":"ciy58ddry001xgco0gy08459p"},{"post_id":"ciy58ddr2000vgco08fpoj1bg","category_id":"ciy58ddrc001agco0arj42h4c","_id":"ciy58dds60023gco0v82pc7jk"},{"post_id":"ciy58ddr3000wgco03boi4988","category_id":"ciy58ddrz001zgco0bezd4s0r","_id":"ciy58ddsb002agco06ruowcgp"},{"post_id":"ciy58dds80027gco03cvwwwsj","category_id":"ciy58ddr4000zgco01691x01c","_id":"ciy58ddsd002fgco0bmsjgbch"},{"post_id":"ciy58ddr40010gco0tfnoxid3","category_id":"ciy58ddrc001agco0arj42h4c","_id":"ciy58ddsg002igco0rv3cu93k"},{"post_id":"ciy58ddr60012gco00fpoemsi","category_id":"ciy58ddsc002bgco0jrwoadvv","_id":"ciy58ddsk002ngco02o0nh6n1"},{"post_id":"ciy58ddr80016gco0uo4f7sq7","category_id":"ciy58ddsc002bgco0jrwoadvv","_id":"ciy58ddss002tgco0wdqzcwn3"},{"post_id":"ciy58ddrb0018gco0dz8fecff","category_id":"ciy58ddsk002ogco06vapd2u4","_id":"ciy58ddsv002zgco015db5yiz"},{"post_id":"ciy58ddrd001cgco0yhetv5n4","category_id":"ciy58ddsc002bgco0jrwoadvv","_id":"ciy58ddsz0036gco0b91w12t3"},{"post_id":"ciy58ddsu002xgco0h878orxy","category_id":"ciy58ddsc002bgco0jrwoadvv","_id":"ciy58ddt0003agco0zcwnhrel"},{"post_id":"ciy58ddsw0031gco0plaey5vl","category_id":"ciy58ddrc001agco0arj42h4c","_id":"ciy58ddt5003egco0vth6noq6"},{"post_id":"ciy58ddre001egco0tmugiyr6","category_id":"ciy58ddsv0030gco03j6g52u8","_id":"ciy58ddt7003hgco0sis7ydc0"},{"post_id":"ciy58ddrh001ggco02gf3kgs4","category_id":"ciy58ddt00038gco0p4g3i6oj","_id":"ciy58ddt8003kgco0r6wfp28r"},{"post_id":"ciy58ddrl001kgco0zuym92j6","category_id":"ciy58ddt7003ggco0qx8suu9b","_id":"ciy58ddta003ogco0vehhrfq3"},{"post_id":"ciy58ddrm001mgco0fjjsofaf","category_id":"ciy58ddt8003lgco08lvnfpm2","_id":"ciy58ddtb003sgco0cd5zm5cj"},{"post_id":"ciy58ddrq001pgco0gog6bmvy","category_id":"ciy58ddta003pgco00n08jo2l","_id":"ciy58ddtc003wgco0vzcndinv"},{"post_id":"ciy58ddrs001sgco01reu652b","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddte0040gco0ldedtwn8"},{"post_id":"ciy58ddrw001vgco0c9jvxdhp","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddtf0044gco05eahldh9"},{"post_id":"ciy58ddry001ygco00ok7ni9s","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddth0047gco0nb39if0h"},{"post_id":"ciy58dds00021gco0y9qm8fql","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddti004bgco00uivy4h2"},{"post_id":"ciy58dds60024gco06evomgx2","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddti004fgco00axbhmdn"},{"post_id":"ciy58ddsb0029gco08wqlschl","category_id":"ciy58ddti004cgco0l2mf38ei","_id":"ciy58ddtj004jgco0gud0oes5"},{"post_id":"ciy58ddsc002dgco0bbx6k8a9","category_id":"ciy58ddti004hgco0bk94cukr","_id":"ciy58ddtk004ngco0t4co57gz"},{"post_id":"ciy58ddse002ggco0vf5jvczf","category_id":"ciy58ddti004hgco0bk94cukr","_id":"ciy58ddtl004rgco0rheduo6l"},{"post_id":"ciy58ddsg002jgco0r9tu3ek7","category_id":"ciy58ddti004hgco0bk94cukr","_id":"ciy58ddtm004vgco0g6zie1u0"},{"post_id":"ciy58ddsj002mgco0tlk5h1da","category_id":"ciy58ddtm004sgco0jibz4ay8","_id":"ciy58ddtp004zgco0qsyprkxi"},{"post_id":"ciy58ddsm002pgco0xupzvjdm","category_id":"ciy58ddtm004sgco0jibz4ay8","_id":"ciy58ddtq0052gco0yziiryzr"},{"post_id":"ciy58ddsq002sgco06ofjy09m","category_id":"ciy58ddtm004sgco0jibz4ay8","_id":"ciy58ddtt0056gco0ebegbsy6"},{"post_id":"ciy58ddss002vgco0cnpqqrar","category_id":"ciy58ddta003pgco00n08jo2l","_id":"ciy58ddtu005agco0esg38zan"},{"post_id":"ciy58ddsy0034gco0xuw0350p","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddtw005egco0ejwgyip1"},{"post_id":"ciy58ddsz0037gco0vkm1qyzq","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddtx005igco0rgz5baie"},{"post_id":"ciy58ddt1003cgco0layfp1fv","category_id":"ciy58ddtb003tgco0yrvh4szb","_id":"ciy58ddty005mgco0pyn7y84j"},{"post_id":"ciy58ddt6003fgco01zricznq","category_id":"ciy58ddtx005jgco0obnwxq0j","_id":"ciy58ddtz005pgco0cbu49hyn"}],"PostTag":[{"post_id":"ciy58ddpz0001gco0ynlfd2jy","tag_id":"ciy58ddq80004gco0r6pf0w9b","_id":"ciy58ddqo000cgco0zqyltnvt"},{"post_id":"ciy58ddq50003gco02acf1icn","tag_id":"ciy58ddq80004gco0r6pf0w9b","_id":"ciy58ddqr000igco0epzynons"},{"post_id":"ciy58ddqe0007gco09dahqmbx","tag_id":"ciy58ddq80004gco0r6pf0w9b","_id":"ciy58ddqu000ogco0k65dhtoa"},{"post_id":"ciy58ddql000agco04kbf01aq","tag_id":"ciy58ddqt000lgco05hz0mxgl","_id":"ciy58ddr2000ugco0hfjt24g3"},{"post_id":"ciy58ddqo000dgco0rb1zgdjh","tag_id":"ciy58ddqz000sgco05n0ozmif","_id":"ciy58ddr50011gco0l5p62moz"},{"post_id":"ciy58ddqq000ggco091vvttle","tag_id":"ciy58ddr4000ygco0t8g6gz2r","_id":"ciy58ddrb0017gco0o2j7uaro"},{"post_id":"ciy58ddqs000jgco0mvvxd5cj","tag_id":"ciy58ddr80014gco00kg5pqt3","_id":"ciy58ddre001dgco03pek8che"},{"post_id":"ciy58ddqt000mgco0iwipjbkl","tag_id":"ciy58ddrc001bgco0yksskgod","_id":"ciy58ddrk001jgco0252jq27p"},{"post_id":"ciy58ddqu000pgco0e9d94l79","tag_id":"ciy58ddrj001igco0f71zt4cz","_id":"ciy58ddrr001qgco0498v0i6q"},{"post_id":"ciy58ddqw000rgco0r7z6xcb7","tag_id":"ciy58ddrj001igco0f71zt4cz","_id":"ciy58ddry001wgco0em6p3amw"},{"post_id":"ciy58ddr2000vgco08fpoj1bg","tag_id":"ciy58ddrj001igco0f71zt4cz","_id":"ciy58dds50022gco0ty3bupbp"},{"post_id":"ciy58ddr3000wgco03boi4988","tag_id":"ciy58dds00020gco0ho74qj7b","_id":"ciy58ddsb0028gco0zgb07ewm"},{"post_id":"ciy58ddr40010gco0tfnoxid3","tag_id":"ciy58dds70026gco0j7ch4y9p","_id":"ciy58ddsd002egco0m6ybz51o"},{"post_id":"ciy58ddr60012gco00fpoemsi","tag_id":"ciy58ddsc002cgco0cend5xvx","_id":"ciy58ddsi002lgco0p9c0002t"},{"post_id":"ciy58ddr80016gco0uo4f7sq7","tag_id":"ciy58ddsc002cgco0cend5xvx","_id":"ciy58ddsq002rgco0o9xb26ct"},{"post_id":"ciy58ddrb0018gco0dz8fecff","tag_id":"ciy58ddsp002qgco0p5q5ou76","_id":"ciy58ddsv002ygco0admx4k6g"},{"post_id":"ciy58ddsu002xgco0h878orxy","tag_id":"ciy58ddsc002cgco0cend5xvx","_id":"ciy58ddsx0033gco0uhm4bu7b"},{"post_id":"ciy58ddrd001cgco0yhetv5n4","tag_id":"ciy58ddsc002cgco0cend5xvx","_id":"ciy58ddsz0035gco0d2upl4cd"},{"post_id":"ciy58ddsw0031gco0plaey5vl","tag_id":"ciy58ddrc001bgco0yksskgod","_id":"ciy58ddt00039gco0y8ex8j8o"},{"post_id":"ciy58ddre001egco0tmugiyr6","tag_id":"ciy58ddsx0032gco0hsaifebl","_id":"ciy58ddt4003dgco0vjvc9l8f"},{"post_id":"ciy58ddrh001ggco02gf3kgs4","tag_id":"ciy58ddt0003bgco0kucf294h","_id":"ciy58ddt8003jgco0jwh7acq5"},{"post_id":"ciy58ddrl001kgco0zuym92j6","tag_id":"ciy58ddt7003igco0acmzmgi7","_id":"ciy58ddt9003ngco0f11xye7l"},{"post_id":"ciy58ddrm001mgco0fjjsofaf","tag_id":"ciy58ddt8003mgco0a2ahh35e","_id":"ciy58ddtb003rgco08wuehwdg"},{"post_id":"ciy58ddrq001pgco0gog6bmvy","tag_id":"ciy58ddtb003qgco04dwaqx0q","_id":"ciy58ddtc003vgco0gwcwfqvq"},{"post_id":"ciy58ddrs001sgco01reu652b","tag_id":"ciy58ddtc003ugco0np1jnjue","_id":"ciy58ddtd003zgco09ioo7a3w"},{"post_id":"ciy58ddrw001vgco0c9jvxdhp","tag_id":"ciy58ddtd003ygco0w4sl7oca","_id":"ciy58ddtf0043gco0fqzl9xb0"},{"post_id":"ciy58ddry001ygco00ok7ni9s","tag_id":"ciy58ddtf0042gco0dpjvp2p2","_id":"ciy58ddth0048gco0o102z9ps"},{"post_id":"ciy58dds00021gco0y9qm8fql","tag_id":"ciy58ddtg0046gco0y7jxwl0x","_id":"ciy58ddti004dgco0wqwu3mt2"},{"post_id":"ciy58dds60024gco06evomgx2","tag_id":"ciy58ddtc003ugco0np1jnjue","_id":"ciy58ddti004ggco0e3el1j8n"},{"post_id":"ciy58dds80027gco03cvwwwsj","tag_id":"ciy58ddti004egco0m6lxmeub","_id":"ciy58ddtj004kgco0ra6dk9ky"},{"post_id":"ciy58ddsb0029gco08wqlschl","tag_id":"ciy58ddtj004igco0wez1aezd","_id":"ciy58ddtk004pgco06sjr3k6y"},{"post_id":"ciy58ddsc002dgco0bbx6k8a9","tag_id":"ciy58ddtk004mgco0wcc7vvsx","_id":"ciy58ddtm004tgco0p9gabmed"},{"post_id":"ciy58ddse002ggco0vf5jvczf","tag_id":"ciy58ddtk004mgco0wcc7vvsx","_id":"ciy58ddtn004xgco06vg5qcnt"},{"post_id":"ciy58ddsg002jgco0r9tu3ek7","tag_id":"ciy58ddtm004ugco0kcanaz0z","_id":"ciy58ddtp0051gco0ublm8zzd"},{"post_id":"ciy58ddsj002mgco0tlk5h1da","tag_id":"ciy58ddto004ygco0cr9n2u95","_id":"ciy58ddtr0055gco0kr6xz0ik"},{"post_id":"ciy58ddsm002pgco0xupzvjdm","tag_id":"ciy58ddto004ygco0cr9n2u95","_id":"ciy58ddtu0059gco0ikk9q8kq"},{"post_id":"ciy58ddsq002sgco06ofjy09m","tag_id":"ciy58ddto004ygco0cr9n2u95","_id":"ciy58ddtv005dgco01ksr9zp8"},{"post_id":"ciy58ddss002vgco0cnpqqrar","tag_id":"ciy58ddtv005bgco0wg7h85r0","_id":"ciy58ddtw005hgco0avgq1puz"},{"post_id":"ciy58ddsy0034gco0xuw0350p","tag_id":"ciy58ddtw005ggco0jj1htdky","_id":"ciy58ddty005lgco02f8d8mxs"},{"post_id":"ciy58ddsz0037gco0vkm1qyzq","tag_id":"ciy58ddtx005kgco0lnmgu6dp","_id":"ciy58ddty005ogco0f1s42gtw"},{"post_id":"ciy58ddt1003cgco0layfp1fv","tag_id":"ciy58ddty005ngco0vp1s4k51","_id":"ciy58ddu0005rgco080ktb037"},{"post_id":"ciy58ddt6003fgco01zricznq","tag_id":"ciy58ddtz005qgco0xiukqcca","_id":"ciy58ddu0005sgco0gxb4bp5w"}],"Tag":[{"name":"github","_id":"ciy58ddq80004gco0r6pf0w9b"},{"name":"eclipse","_id":"ciy58ddqt000lgco05hz0mxgl"},{"name":"界面框架","_id":"ciy58ddqz000sgco05n0ozmif"},{"name":"javascript","_id":"ciy58ddr4000ygco0t8g6gz2r"},{"name":"添加enter事件","_id":"ciy58ddr80014gco00kg5pqt3"},{"name":"Linux","_id":"ciy58ddrc001bgco0yksskgod"},{"name":"网卡","_id":"ciy58ddrj001igco0f71zt4cz"},{"name":"Maven插件","_id":"ciy58dds00020gco0ho74qj7b"},{"name":"服务开机启动","_id":"ciy58dds70026gco0j7ch4y9p"},{"name":"Mysql","_id":"ciy58ddsc002cgco0cend5xvx"},{"name":"动态传入tableName","_id":"ciy58ddsp002qgco0p5q5ou76"},{"name":"Redis安装","_id":"ciy58ddsx0032gco0hsaifebl"},{"name":"RocketMQ启动错误","_id":"ciy58ddt0003bgco0kucf294h"},{"name":"Tomcat日志","_id":"ciy58ddt7003igco0acmzmgi7"},{"name":"vSphere添加物理网卡","_id":"ciy58ddt8003mgco0a2ahh35e"},{"name":"git","_id":"ciy58ddtb003qgco04dwaqx0q"},{"name":"java8 Stream","_id":"ciy58ddtc003ugco0np1jnjue"},{"name":"jxl","_id":"ciy58ddtd003ygco0w4sl7oca"},{"name":"java定时任务","_id":"ciy58ddtf0042gco0dpjvp2p2"},{"name":"java接收clob字段","_id":"ciy58ddtg0046gco0y7jxwl0x"},{"name":"jquery","_id":"ciy58ddti004egco0m6lxmeub"},{"name":"oracle导出空表","_id":"ciy58ddtj004igco0wez1aezd"},{"name":"spring","_id":"ciy58ddtk004mgco0wcc7vvsx"},{"name":"springBoot","_id":"ciy58ddtm004ugco0kcanaz0z"},{"name":"thymeleaf","_id":"ciy58ddto004ygco0cr9n2u95"},{"name":"gitlab","_id":"ciy58ddtv005bgco0wg7h85r0"},{"name":"表单元素获取","_id":"ciy58ddtw005ggco0jj1htdky"},{"name":"进制运算","_id":"ciy58ddtx005kgco0lnmgu6dp"},{"name":"poi","_id":"ciy58ddty005ngco0vp1s4k51"},{"name":"跨域","_id":"ciy58ddtz005qgco0xiukqcca"}]}}