{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/000000.png","path":"images/000000.png","modified":1,"renderable":0},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0},{"_id":"source/images/2.jpg","path":"images/2.jpg","modified":1,"renderable":0},{"_id":"source/images/4.jpg","path":"images/4.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"source/images/biaoge2.jpg","path":"images/biaoge2.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge3.jpg","path":"images/biaoge3.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge5.jpg","path":"images/biaoge5.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge9.jpg","path":"images/biaoge9.jpg","modified":1,"renderable":0},{"_id":"source/images/bujv.jpg","path":"images/bujv.jpg","modified":1,"renderable":0},{"_id":"source/images/cname.jpg","path":"images/cname.jpg","modified":1,"renderable":0},{"_id":"source/images/createSucc.jpg","path":"images/createSucc.jpg","modified":1,"renderable":0},{"_id":"source/images/deleteinvoke.png","path":"images/deleteinvoke.png","modified":1,"renderable":0},{"_id":"source/images/deleteresult.png","path":"images/deleteresult.png","modified":1,"renderable":0},{"_id":"source/images/dump.png","path":"images/dump.png","modified":1,"renderable":0},{"_id":"source/images/dumpfenxi.png","path":"images/dumpfenxi.png","modified":1,"renderable":0},{"_id":"source/images/fagnwen.jpg","path":"images/fagnwen.jpg","modified":1,"renderable":0},{"_id":"source/images/fanghuoqiang1.png","path":"images/fanghuoqiang1.png","modified":1,"renderable":0},{"_id":"source/images/fanghuoqiang2.png","path":"images/fanghuoqiang2.png","modified":1,"renderable":0},{"_id":"source/images/fanghuoqiang3.png","path":"images/fanghuoqiang3.png","modified":1,"renderable":0},{"_id":"source/images/getIp.jpg","path":"images/getIp.jpg","modified":1,"renderable":0},{"_id":"source/images/git1.jpg","path":"images/git1.jpg","modified":1,"renderable":0},{"_id":"source/images/git2.jpg","path":"images/git2.jpg","modified":1,"renderable":0},{"_id":"source/images/git3.jpg","path":"images/git3.jpg","modified":1,"renderable":0},{"_id":"source/images/git4.jpg","path":"images/git4.jpg","modified":1,"renderable":0},{"_id":"source/images/gitTestconnsucc.jpg","path":"images/gitTestconnsucc.jpg","modified":1,"renderable":0},{"_id":"source/images/gitaddFile.jpg","path":"images/gitaddFile.jpg","modified":1,"renderable":0},{"_id":"source/images/gitbuildbook.jpg","path":"images/gitbuildbook.jpg","modified":1,"renderable":0},{"_id":"source/images/gitinitfile.jpg","path":"images/gitinitfile.jpg","modified":1,"renderable":0},{"_id":"source/images/gitpushinputpass.jpg","path":"images/gitpushinputpass.jpg","modified":1,"renderable":0},{"_id":"source/images/gitpushinputpasssucc.jpg","path":"images/gitpushinputpasssucc.jpg","modified":1,"renderable":0},{"_id":"source/images/inputInfo.jpg","path":"images/inputInfo.jpg","modified":1,"renderable":0},{"_id":"source/images/jerseyhello.png","path":"images/jerseyhello.png","modified":1,"renderable":0},{"_id":"source/images/jerseykuangjiatu.png","path":"images/jerseykuangjiatu.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio1.png","path":"images/jqueryRadio1.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio2.png","path":"images/jqueryRadio2.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio3.png","path":"images/jqueryRadio3.png","modified":1,"renderable":0},{"_id":"source/images/jqueryRadio4.png","path":"images/jqueryRadio4.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter0.png","path":"images/linuxInter0.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter1.png","path":"images/linuxInter1.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter2.png","path":"images/linuxInter2.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter3.png","path":"images/linuxInter3.png","modified":1,"renderable":0},{"_id":"source/images/linuxInter4.png","path":"images/linuxInter4.png","modified":1,"renderable":0},{"_id":"source/images/linuxKenel1.png","path":"images/linuxKenel1.png","modified":1,"renderable":0},{"_id":"source/images/loadclass.png","path":"images/loadclass.png","modified":1,"renderable":0},{"_id":"source/images/loadclasslock.png","path":"images/loadclasslock.png","modified":1,"renderable":0},{"_id":"source/images/log1.png","path":"images/log1.png","modified":1,"renderable":0},{"_id":"source/images/log3.png","path":"images/log3.png","modified":1,"renderable":0},{"_id":"source/images/markdown.jpg","path":"images/markdown.jpg","modified":1,"renderable":0},{"_id":"source/images/model.jpg","path":"images/model.jpg","modified":1,"renderable":0},{"_id":"source/images/mygitbook.jpg","path":"images/mygitbook.jpg","modified":1,"renderable":0},{"_id":"source/images/mysql1.png","path":"images/mysql1.png","modified":1,"renderable":0},{"_id":"source/images/mysql2.png","path":"images/mysql2.png","modified":1,"renderable":0},{"_id":"source/images/mysql3.png","path":"images/mysql3.png","modified":1,"renderable":0},{"_id":"source/images/mysql8.png","path":"images/mysql8.png","modified":1,"renderable":0},{"_id":"source/images/mysqlCode1.png","path":"images/mysqlCode1.png","modified":1,"renderable":0},{"_id":"source/images/newRepository.jpg","path":"images/newRepository.jpg","modified":1,"renderable":0},{"_id":"source/images/newmaven1.png","path":"images/newmaven1.png","modified":1,"renderable":0},{"_id":"source/images/newmaven2.png","path":"images/newmaven2.png","modified":1,"renderable":0},{"_id":"source/images/newmaven3.png","path":"images/newmaven3.png","modified":1,"renderable":0},{"_id":"source/images/newmavenproject.png","path":"images/newmavenproject.png","modified":1,"renderable":0},{"_id":"source/images/nodejsdownload.jpg","path":"images/nodejsdownload.jpg","modified":1,"renderable":0},{"_id":"source/images/paramForClass.png","path":"images/paramForClass.png","modified":1,"renderable":0},{"_id":"source/images/paramForClass2.png","path":"images/paramForClass2.png","modified":1,"renderable":0},{"_id":"source/images/paramjsontype.png","path":"images/paramjsontype.png","modified":1,"renderable":0},{"_id":"source/images/paramjsontype4.png","path":"images/paramjsontype4.png","modified":1,"renderable":0},{"_id":"source/images/paramjsontype3.png","path":"images/paramjsontype3.png","modified":1,"renderable":0},{"_id":"source/images/paramjsontype5.png","path":"images/paramjsontype5.png","modified":1,"renderable":0},{"_id":"source/images/paramjsontype6.png","path":"images/paramjsontype6.png","modified":1,"renderable":0},{"_id":"source/images/paramjsontype7.png","path":"images/paramjsontype7.png","modified":1,"renderable":0},{"_id":"source/images/pingIP.jpg","path":"images/pingIP.jpg","modified":1,"renderable":0},{"_id":"source/images/poi1.png","path":"images/poi1.png","modified":1,"renderable":0},{"_id":"source/images/publishSuccess.jpg","path":"images/publishSuccess.jpg","modified":1,"renderable":0},{"_id":"source/images/restinvokepost.png","path":"images/restinvokepost.png","modified":1,"renderable":0},{"_id":"source/images/restinvokepostresponse.png","path":"images/restinvokepostresponse.png","modified":1,"renderable":0},{"_id":"source/images/restpostheader.png","path":"images/restpostheader.png","modified":1,"renderable":0},{"_id":"source/images/restpostheaderresult.png","path":"images/restpostheaderresult.png","modified":1,"renderable":0},{"_id":"source/images/rocketMQ2.png","path":"images/rocketMQ2.png","modified":1,"renderable":0},{"_id":"source/images/rocketMQ3.png","path":"images/rocketMQ3.png","modified":1,"renderable":0},{"_id":"source/images/selectLayout.jpg","path":"images/selectLayout.jpg","modified":1,"renderable":0},{"_id":"source/images/spring1.jpg","path":"images/spring1.jpg","modified":1,"renderable":0},{"_id":"source/images/spring2.png","path":"images/spring2.png","modified":1,"renderable":0},{"_id":"source/images/spring3.jpg","path":"images/spring3.jpg","modified":1,"renderable":0},{"_id":"source/images/succblog.jpg","path":"images/succblog.jpg","modified":1,"renderable":0},{"_id":"source/images/threaddump.png","path":"images/threaddump.png","modified":1,"renderable":0},{"_id":"source/images/thy1.png","path":"images/thy1.png","modified":1,"renderable":0},{"_id":"source/images/thy2.png","path":"images/thy2.png","modified":1,"renderable":0},{"_id":"source/images/thy3.png","path":"images/thy3.png","modified":1,"renderable":0},{"_id":"source/images/thy4.png","path":"images/thy4.png","modified":1,"renderable":0},{"_id":"source/images/thy6.png","path":"images/thy6.png","modified":1,"renderable":0},{"_id":"source/images/thy7.png","path":"images/thy7.png","modified":1,"renderable":0},{"_id":"source/images/thyemleafshow.png","path":"images/thyemleafshow.png","modified":1,"renderable":0},{"_id":"source/images/useGitPages.jpg","path":"images/useGitPages.jpg","modified":1,"renderable":0},{"_id":"source/images/tianjiagitfile.jpg","path":"images/tianjiagitfile.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere0.jpg","path":"images/vSphere0.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere00.jpg","path":"images/vSphere00.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere01.jpg","path":"images/vSphere01.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere02.jpg","path":"images/vSphere02.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere03.jpg","path":"images/vSphere03.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere04.jpg","path":"images/vSphere04.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere05.jpg","path":"images/vSphere05.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere06.jpg","path":"images/vSphere06.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere1.jpg","path":"images/vSphere1.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere11.jpg","path":"images/vSphere11.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere2.jpg","path":"images/vSphere2.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere4.jpg","path":"images/vSphere4.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere5.jpg","path":"images/vSphere5.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere7.jpg","path":"images/vSphere7.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere8.jpg","path":"images/vSphere8.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere9.jpg","path":"images/vSphere9.jpg","modified":1,"renderable":0},{"_id":"source/images/wangka.jpg","path":"images/wangka.jpg","modified":1,"renderable":0},{"_id":"source/images/wankapeizhi.jpg","path":"images/wankapeizhi.jpg","modified":1,"renderable":0},{"_id":"source/images/webgl2.png","path":"images/webgl2.png","modified":1,"renderable":0},{"_id":"source/images/webgl3.png","path":"images/webgl3.png","modified":1,"renderable":0},{"_id":"source/images/yumingmanage.jpg","path":"images/yumingmanage.jpg","modified":1,"renderable":0},{"_id":"source/images/3.jpg","path":"images/3.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge1.jpg","path":"images/biaoge1.jpg","modified":1,"renderable":0},{"_id":"source/images/biaoge6.jpg","path":"images/biaoge6.jpg","modified":1,"renderable":0},{"_id":"source/images/bk.png","path":"images/bk.png","modified":1,"renderable":0},{"_id":"source/images/guanchazhe.jpg","path":"images/guanchazhe.jpg","modified":1,"renderable":0},{"_id":"source/images/ippeizhi.jpg","path":"images/ippeizhi.jpg","modified":1,"renderable":0},{"_id":"source/images/javaStream2.png","path":"images/javaStream2.png","modified":1,"renderable":0},{"_id":"source/images/jiance.png","path":"images/jiance.png","modified":1,"renderable":0},{"_id":"source/images/jqwidgets.png","path":"images/jqwidgets.png","modified":1,"renderable":0},{"_id":"source/images/kuayu.jpg","path":"images/kuayu.jpg","modified":1,"renderable":0},{"_id":"source/images/log0.jpg","path":"images/log0.jpg","modified":1,"renderable":0},{"_id":"source/images/log2.png","path":"images/log2.png","modified":1,"renderable":0},{"_id":"source/images/mycsdnblog.jpg","path":"images/mycsdnblog.jpg","modified":1,"renderable":0},{"_id":"source/images/mysql10.png","path":"images/mysql10.png","modified":1,"renderable":0},{"_id":"source/images/mysql4.png","path":"images/mysql4.png","modified":1,"renderable":0},{"_id":"source/images/mysql5.png","path":"images/mysql5.png","modified":1,"renderable":0},{"_id":"source/images/mysql6.png","path":"images/mysql6.png","modified":1,"renderable":0},{"_id":"source/images/mysql7.png","path":"images/mysql7.png","modified":1,"renderable":0},{"_id":"source/images/mysql9.png","path":"images/mysql9.png","modified":1,"renderable":0},{"_id":"source/images/mysqlCode2.png","path":"images/mysqlCode2.png","modified":1,"renderable":0},{"_id":"source/images/mysqlDownload.png","path":"images/mysqlDownload.png","modified":1,"renderable":0},{"_id":"source/images/restTemplate.png","path":"images/restTemplate.png","modified":1,"renderable":0},{"_id":"source/images/threadBlcked.png","path":"images/threadBlcked.png","modified":1,"renderable":0},{"_id":"source/images/thymeleafFollow.png","path":"images/thymeleafFollow.png","modified":1,"renderable":0},{"_id":"source/images/vSphere10.jpg","path":"images/vSphere10.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere3.jpg","path":"images/vSphere3.jpg","modified":1,"renderable":0},{"_id":"source/images/vSphere6.jpg","path":"images/vSphere6.jpg","modified":1,"renderable":0},{"_id":"source/images/webgl1.png","path":"images/webgl1.png","modified":1,"renderable":0},{"_id":"source/images/webgl4.png","path":"images/webgl4.png","modified":1,"renderable":0},{"_id":"source/images/fanghuoqiang4.png","path":"images/fanghuoqiang4.png","modified":1,"renderable":0},{"_id":"source/images/gitinit.jpg","path":"images/gitinit.jpg","modified":1,"renderable":0},{"_id":"source/images/gitmerge1.png","path":"images/gitmerge1.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/biaoge4.jpg","path":"images/biaoge4.jpg","modified":1,"renderable":0},{"_id":"source/images/fanghuoqiang0.png","path":"images/fanghuoqiang0.png","modified":1,"renderable":0},{"_id":"source/images/fanghuoqiang7.jpg","path":"images/fanghuoqiang7.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/rocketMQ1.png","path":"images/rocketMQ1.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/images/jerseyabort.png","path":"images/jerseyabort.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/model2.png","path":"images/model2.png","modified":1,"renderable":0},{"_id":"source/images/webgl5.gif","path":"images/webgl5.gif","modified":1,"renderable":0},{"_id":"source/images/webgl6.gif","path":"images/webgl6.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b742f0f7a172db4d51f00b28fcdaabbcb307eab1","modified":1531042668482},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1531042669242},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1531042669244},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1531042669249},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1531042669250},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1531042669252},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1531042669253},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1531042669254},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1531042669256},{"_id":"themes/next/_config.yml","hash":"bc85f80f4bb2c3f2396fcb26deae76f3550d769f","modified":1531042669257},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1531042669259},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1531042669260},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1531042669365},{"_id":"source/about/index.md","hash":"2bb7a87ed29f5ab8926a81e209d18205b0eb023c","modified":1531042668598},{"_id":"source/_posts/10进制与2进制转换.md","hash":"7f4326ed9c201c4707c8e0214bdb84166005cf9b","modified":1531042668484},{"_id":"source/_posts/2016-06-28-为github-pages绑定独立域名.md","hash":"b9f2e0a85ca8741f96b2bbfed33ab998d14527bf","modified":1531042668486},{"_id":"source/_posts/2016-06-28-通过github-pages生成网站.md","hash":"0a423428ab77dd30bfaa6ceb743970ea535112bf","modified":1531042668490},{"_id":"source/_posts/2016-06-28-添加KEY后，每次push时让输入密码.md","hash":"66209e891ef01922afb564804da460bf7094761f","modified":1531042668487},{"_id":"source/_posts/2016-06-28-通过gitBook让网站更实用.md","hash":"1ac317420927559d1afb0adf9e20251169945cbd","modified":1531042668488},{"_id":"source/_posts/2016-06-30-Java-was-started-but-returned-exit-code异常.md","hash":"94709dc4b9b3e7ee13d6d57a3cff30dfa29ff4a3","modified":1531042668492},{"_id":"source/_posts/2016-06-30-关闭父窗口刷新子窗口.md","hash":"e7d61a58611bf094fe0fde3c4f59f1c394371658","modified":1531042668493},{"_id":"source/_posts/2016-06-30-界面框架.md","hash":"b3e43c2726bbfda27604f7476eff3bb058d4cf80","modified":1531042668494},{"_id":"source/_posts/2016-06-30-页面中添加-ENTER-键点击事件.md","hash":"325b4e9759548490b548980b8cc29d1de849c1e6","modified":1531042668496},{"_id":"source/_posts/CentOS-6-4内核升级操作.md","hash":"1f3936f9825ddacec973d45b0fd32c425282055e","modified":1531042668497},{"_id":"source/_posts/CentOS系统安装nodeJs.md","hash":"76bc812a8d62af4e1b587070ec64b5bc1fc6f202","modified":1531042668499},{"_id":"source/_posts/DataOutputStream-write方法入坑.md","hash":"694a8547c057e1cc7218bae6a9cd60610edf5248","modified":1531042668500},{"_id":"source/_posts/Jquery中prop和attr使用时的问题.md","hash":"9c83c9d5e518e1d3fa946687329a24d2a3d733e7","modified":1531042668502},{"_id":"source/_posts/Linux双网卡配置-内外网同时访问.md","hash":"2794d760af7574fd8c30abbb9fd57df819af8116","modified":1531042668503},{"_id":"source/_posts/Linux开机启动后经常需要配置网卡.md","hash":"bee86d40f8a7acb40d84559612f0023c0e59e5a8","modified":1531042668504},{"_id":"source/_posts/Linux服务器中查看log日志技巧.md","hash":"0f99a0bf20c4ab89b7ab2fa7bb6cd37e7a2d4d14","modified":1531042668507},{"_id":"source/_posts/Linux查看端口占用.md","hash":"2b9eb6e7c6250d5ec330361f58bb88998028b7b1","modified":1531042668509},{"_id":"source/_posts/Linux系统添加配置随开机启动的服务.md","hash":"3795828589c8211b963ede946aa9ffaae320a24d","modified":1531042668510},{"_id":"source/_posts/Maven忽略其他依赖jar包插件.md","hash":"9a2acb86ff6bfd95df60f0d03fd815735b34ad73","modified":1531042668511},{"_id":"source/_posts/MySql安装后添加的用户不能远程连接登陆.md","hash":"413dcc2fc55e5e038aa6deaf4b2f1760e57fcd46","modified":1531042668513},{"_id":"source/_posts/Mybatis动态传入tableName-非预编译-STATEMENT.md","hash":"0b767186dc6ae1c13d3c2174e1ff5599acadf70b","modified":1531042668514},{"_id":"source/_posts/Mysql-8-0-安装笔记.md","hash":"2043c80e537dbadc0e38f2495a483a65c9e149da","modified":1531046698495},{"_id":"source/_posts/Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction.md","hash":"c4ff2fc9305159c36d197bbc34cbf5f7dce1db51","modified":1531042668516},{"_id":"source/_posts/Mysql数据库编码更改.md","hash":"4a5f7cd97d4b4a0aec2d44e8ff8802f6c8535e67","modified":1531042668517},{"_id":"source/_posts/Redis-使用SortedSet分页处理.md","hash":"a92da631cddfb089b93b9b59351f211a08768a72","modified":1531042668519},{"_id":"source/_posts/Redis-安装.md","hash":"3b5216ea78d98cf6ea4d2027657c1c45302076c9","modified":1531042668520},{"_id":"source/_posts/Redis-定时操作篇.md","hash":"7353a4c3eeb0141a27260f12ffaec99b74fd6d95","modified":1531042668522},{"_id":"source/_posts/RocketMQ启动报错解决.md","hash":"3db750d3fd385dd7353cfc3222b2ce384e09c3f2","modified":1531042668523},{"_id":"source/_posts/Tomcat实时查看日志信息.md","hash":"902f603d0aa04b830db06b24f370932d28d278fd","modified":1531042668525},{"_id":"source/_posts/VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置.md","hash":"9f3b4417daabe7948be2550edd089efa6d0ddee9","modified":1531042668526},{"_id":"source/_posts/git搞着玩-新建本地仓库.md","hash":"b85c4ea7b95615c4dfaa0062b301057f9d1109b5","modified":1531042668528},{"_id":"source/_posts/java8中使用stream流和for循环分别对数据集合遍历的差异.md","hash":"c5401a5f378adda30de8149f02b47b1554004106","modified":1531042668529},{"_id":"source/_posts/java8使用stream对简单数据集排序.md","hash":"c354a1b576bd407cbe67bc7b21892556cf5504ac","modified":1531042668531},{"_id":"source/_posts/java三目运算符之规则-坑.md","hash":"de2df3086bd3bf43a3f1784ba3f3bf49774ca5f0","modified":1531042668532},{"_id":"source/_posts/java中集合使用中遇到的-坑.md","hash":"4d1ec78fd6b0f604a99ee67a74302ed220667248","modified":1531042668534},{"_id":"source/_posts/java使用jxl读取excel数据时特殊符号处理.md","hash":"4687578147721ebc96d3630a7cd10b15c37ab89a","modified":1531042668535},{"_id":"source/_posts/java和javaScript代码进行交互初探一.md","hash":"fd3018647f728ac293b3893f3159a98e9cdcc167","modified":1531042668537},{"_id":"source/_posts/java定时任务Timer小试一下.md","hash":"7768e21ec2fb528afd384d54d09060b1a8cca8ce","modified":1531042668538},{"_id":"source/_posts/java接收oracle中clob类型字段值.md","hash":"42216ffb034ca5ab0e5d763078bf98881dcf9e8c","modified":1531042668540},{"_id":"source/_posts/java新旧版本的排序.md","hash":"2713631bec5cd4eb74d2fae1769c4b7b8b302781","modified":1531042668542},{"_id":"source/_posts/java通过Stream对list集合分组.md","hash":"5cdf8aca860305b87bce38abcbcf9bca98ea063f","modified":1531042668544},{"_id":"source/_posts/java通过反射操作类.md","hash":"6aee266e3746c257e46e2f792723c3c53ff9a08a","modified":1531042668545},{"_id":"source/_posts/jersey-1-轻量级Rest接口后台服务框架搭建.md","hash":"65298e3edc249c93f1f444f5c7b67b613cc591c5","modified":1531042668547},{"_id":"source/_posts/jersey-2-轻量级Rest接口后台服务常规接口开发.md","hash":"ff59ccfee8024d279810f371bd780fae6a6b59c8","modified":1531042668549},{"_id":"source/_posts/jersey-3-轻量级Rest接口服务开发之入参.md","hash":"bf77cac1077ee4e25a677bddd8757cd8548fa860","modified":1531042668550},{"_id":"source/_posts/jersey-4-轻量级Rest接口服务开发之对象入参.md","hash":"7023ebd7190c6ccb6574473c6374c319180ae810","modified":1531042668552},{"_id":"source/_posts/jquery获取单选按钮值的诡异之处.md","hash":"e3a877140c4960d16f3b6a5f809445813b4ef2cd","modified":1531042668553},{"_id":"source/_posts/oracle11G导出数据时空表无法导出.md","hash":"fefd5d5ff47273847e881fa06a2746dfd0451e09","modified":1531042668554},{"_id":"source/_posts/spring3-1-1入门讲解一-非注解篇.md","hash":"0126d92ffa37781363dcc4483afddc4a3c6fbcf4","modified":1531042668556},{"_id":"source/_posts/spring3-1-1入门讲解二-注解篇.md","hash":"b014bc7d7879aae61a6862ab96852451fb025bcf","modified":1531042668557},{"_id":"source/_posts/springBoot编写不同风格的restAPI接口.md","hash":"0ed6a74b6fb6ac5540d6c37bb9f27d85dca4e147","modified":1531042668558},{"_id":"source/_posts/thymeleaf教程1-环境搭建.md","hash":"99691976c53861887e74b110bd1f1b5c8f605341","modified":1531042668560},{"_id":"source/_posts/thymeleaf教程2-后台数据封装与页面渲染.md","hash":"30e8f3058b30b6d3f37529f1aff3fc89330fa580","modified":1531042668561},{"_id":"source/_posts/thymeleaf教程3-with定义变量使用.md","hash":"98cdccd585212e33fa10053fbce1d78462856c90","modified":1531042668562},{"_id":"source/_posts/使用spring的RestTemplate调用REST接口.md","hash":"65dcabe0a4b0adb17718bc0ae53f54415ff555c0","modified":1531042668563},{"_id":"source/_posts/使用spring的RestTemplate调用REST接口时出现线程阻塞.md","hash":"8d959d78f41667e89d2875022ac3910f7be41f12","modified":1531042668565},{"_id":"source/_posts/前台向后台上传文件报net-ERR-CONNECTION-RESET问题入坑.md","hash":"11b903d3c19fc95d94787d110cbd8a5c2dfda813","modified":1531042668566},{"_id":"source/_posts/勒索病毒-永恒之蓝防范处理.md","hash":"68e26e5399a8ee5d92d269afa0c0687efaaf957a","modified":1531042668567},{"_id":"source/_posts/基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具.md","hash":"0f0fe957d16337a55f34a72cc0067584a5d65ba7","modified":1531042668569},{"_id":"source/_posts/如何查看当前的linux系统是哪个发行商.md","hash":"eae793d4c78418df17448f5d0c4d60d21ee50927","modified":1531042668572},{"_id":"source/_posts/处理百万级以上的数据提高查询速度的方法-数据库优化篇.md","hash":"4b8d5ec939d68084dd9ca1b116b2ab963671496d","modified":1531042668570},{"_id":"source/_posts/带附件的enctype表单中普通属性的获取.md","hash":"ef42e8f9473929ab80e1885e48b6c2ce2adae07f","modified":1531042668574},{"_id":"source/_posts/我所理解的nodeJs的两个概念.md","hash":"f3ab0e19ba4cb7ed49e4c29fb62de8804b2ebd7a","modified":1531042668576},{"_id":"source/_posts/整型字面值与进制运算之间的关系.md","hash":"956b62fcb16a07b01b5a6129c7583525c3ba0ffa","modified":1531042668577},{"_id":"source/_posts/最近开发app后台的一些小结.md","hash":"acadd612ee170f7410c0a1d0cb28360ff30146e5","modified":1531042668578},{"_id":"source/_posts/用POI3-9写一个基于office系列文档的转换系统-设计篇.md","hash":"a327935f8c4d03641dfc5ebd364363bd9c94e23e","modified":1531042668580},{"_id":"source/_posts/设计模式-单例模式.md","hash":"71121fce49636b126e9c0be12b1f4e99063684da","modified":1531042668581},{"_id":"source/_posts/设计模式-工厂方法模式.md","hash":"17ff6b88a2f7a2b8a5ea2fd42c89c3f80613d151","modified":1531042668583},{"_id":"source/_posts/设计模式-引入模式雏形.md","hash":"6d7a1fd2b51dc2a19fb0a5eecffbf3e1c77b5d65","modified":1531042668584},{"_id":"source/_posts/设计模式-抽象工厂模式.md","hash":"cc0e0da9f31cd3c68fb733be7e518d207161ad3a","modified":1531042668586},{"_id":"source/_posts/设计模式-无模式.md","hash":"d94fe12d5ce365fc9c89232f76d90cc9bb796354","modified":1531042668587},{"_id":"source/_posts/设计模式-装饰者模式.md","hash":"14b723323906b15af1f921a459e2136aa0427d41","modified":1531042668589},{"_id":"source/_posts/设计模式-观察者模式-用java原生Observable、Observer简化观察者模式实现.md","hash":"9817acba377a0b54bda7311223bf2d76b2b0f097","modified":1531042668590},{"_id":"source/_posts/设计模式-观察者模式.md","hash":"b13ec1beeca5088c35713b3b2f803cd7ce81994b","modified":1531042668592},{"_id":"source/_posts/运用webGL实现3D效果-机器组装.md","hash":"53cf5e2099beccb805468430f9c7409c725cddb5","modified":1531042668593},{"_id":"source/_posts/通过curl命令调用调试RestApi接口.md","hash":"b45100602af9aa94c99533462fc64b5cede8dd9b","modified":1531042668594},{"_id":"source/_posts/通过反向代理解决跨域问题.md","hash":"7547bd0ca795954b8ee3a616a12d9e7f2d5a055e","modified":1531042668596},{"_id":"source/categories/index.md","hash":"a51446ff4a3e13c2bed1cbd183985140e4df5eab","modified":1531042668600},{"_id":"source/tags/index.md","hash":"405e8c5cd813acb96e7b1c458aa1164c1b60e597","modified":1531042669016},{"_id":"source/images/000000.png","hash":"74c3b8ead88408a3af6fbc880703704112aafe78","modified":1531042668603},{"_id":"source/images/1.jpg","hash":"1f91210c70d46c33b46fd5ad7ce1aec743387e9f","modified":1531042668605},{"_id":"source/images/2.jpg","hash":"44da03ecb56c313ff2db17b1dabee6d4b8a0fcd1","modified":1531042668608},{"_id":"source/images/4.jpg","hash":"05bab84da801b648eb82c880ad3edec0c257409c","modified":1531042668612},{"_id":"source/images/avatar.png","hash":"ac4c8fb12ba74a39a686148fabc7f78ea780c4da","modified":1531042668614},{"_id":"source/images/biaoge2.jpg","hash":"314aa66ae788e8eca721808f49afc7f16869ac61","modified":1531042668618},{"_id":"source/images/biaoge3.jpg","hash":"0da0958701ed149dabc348a0932272ad4edbee87","modified":1531042668620},{"_id":"source/images/biaoge5.jpg","hash":"5c19c145c472134e756617e81995c105eb243cb1","modified":1531042668626},{"_id":"source/images/biaoge9.jpg","hash":"a8df57e34c492c2b44653a698552161181ee77e3","modified":1531042668630},{"_id":"source/images/bujv.jpg","hash":"c21d1ca64fa9f274ff272da1e0c06fbaa2c347b9","modified":1531042668634},{"_id":"source/images/cname.jpg","hash":"10e07bee84c3fac91d84104854033fc5e7f0dc60","modified":1531042668636},{"_id":"source/images/createSucc.jpg","hash":"6403c8b9b1ca1d5728e99d37140452f453724349","modified":1531042668639},{"_id":"source/images/deleteinvoke.png","hash":"249521038be9f97d14ba1eb794f57700c0598ae5","modified":1531042668641},{"_id":"source/images/deleteresult.png","hash":"eb853a0385bfc4f0a1cfd37ebfedc718a0cc1ce0","modified":1531042668643},{"_id":"source/images/dump.png","hash":"f8d6695e258e109d6308141fcb5019c69992b0d9","modified":1531042668645},{"_id":"source/images/dumpfenxi.png","hash":"c8e5a0bb5d3ac99b8c2d1106c6d4d077268282b9","modified":1531042668646},{"_id":"source/images/fagnwen.jpg","hash":"f1cdfc63772946938560314c7c1350809107bc60","modified":1531042668649},{"_id":"source/images/fanghuoqiang1.png","hash":"fdf2741edfed411591f146ea703439e997998895","modified":1531042668654},{"_id":"source/images/fanghuoqiang2.png","hash":"9403198073180be0e08bb928f70ddeaa847c70a3","modified":1531042668656},{"_id":"source/images/fanghuoqiang3.png","hash":"ef92968efe9eba4f3b1b33134cb8d1a4bd787c33","modified":1531042668658},{"_id":"source/images/getIp.jpg","hash":"32dd38f5780c75b907e93a0fea3efd4a3d03d39d","modified":1531042668668},{"_id":"source/images/git1.jpg","hash":"bf362114f3ba27a1359700f712527a0e3310a5b4","modified":1531042668670},{"_id":"source/images/git2.jpg","hash":"f80efb756723fa647c398db66972c1b0af4638a2","modified":1531042668671},{"_id":"source/images/git3.jpg","hash":"669605e32d472da2554adeb6ca207dd69ffc1348","modified":1531042668675},{"_id":"source/images/git4.jpg","hash":"68895efb00cae56fcd5e0e847b02604f893bdfce","modified":1531042668676},{"_id":"source/images/gitTestconnsucc.jpg","hash":"598132a5b7689614e8ab565ef2d34ce8a31a81ed","modified":1531042668678},{"_id":"source/images/gitaddFile.jpg","hash":"fa78982614c742575a7c9e50f96545e28ec534b8","modified":1531042668680},{"_id":"source/images/gitbuildbook.jpg","hash":"acdea181bfb2f89abb60c576ce95d15b40e5a105","modified":1531042668682},{"_id":"source/images/gitinitfile.jpg","hash":"3cf7edb4c0a44cc424d9fdeb604908577bdf541a","modified":1531042668687},{"_id":"source/images/gitpushinputpass.jpg","hash":"483d501611082fb8104bf10b6c5673f27fad843d","modified":1531042668691},{"_id":"source/images/gitpushinputpasssucc.jpg","hash":"6a2e37d82076bd1b8caebe170fc1b85354df8f20","modified":1531042668693},{"_id":"source/images/inputInfo.jpg","hash":"142b3f79e6f7da6615b40cde3c8a77e8c5d1c5ce","modified":1531042668697},{"_id":"source/images/jerseyhello.png","hash":"1ac13c022824c9a6e978b057253f8ce8aefd03d9","modified":1531042668711},{"_id":"source/images/jerseykuangjiatu.png","hash":"74c3b8ead88408a3af6fbc880703704112aafe78","modified":1531042668713},{"_id":"source/images/jqueryRadio1.png","hash":"46704bed7715e22f4891c1a1eaeee09252459608","modified":1531042668717},{"_id":"source/images/jqueryRadio2.png","hash":"5eda50da10c4d5d2cf2152ce50aa4f7b40d8bbca","modified":1531042668718},{"_id":"source/images/jqueryRadio3.png","hash":"a14ac03611cdd454b33d15011c9cb968dc22fed6","modified":1531042668720},{"_id":"source/images/jqueryRadio4.png","hash":"f094a2e100146f23f02c1c80279ed7ed5ea931fa","modified":1531042668722},{"_id":"source/images/linuxInter0.png","hash":"c67c79508e4b1abb8434af933a93f1b647fd17d9","modified":1531042668747},{"_id":"source/images/linuxInter1.png","hash":"0880a8120fa74fefb0beebfa14c5e740a98e2944","modified":1531042668749},{"_id":"source/images/linuxInter2.png","hash":"932f31fb182b54ab9d534a7d8fc88d7ca5c89dde","modified":1531042668750},{"_id":"source/images/linuxInter3.png","hash":"289533dbd3ce53e781ba4034aa9e366d0cece690","modified":1531042668752},{"_id":"source/images/linuxInter4.png","hash":"52b83adde711d865a1350269b14810523a872ce6","modified":1531042668754},{"_id":"source/images/linuxKenel1.png","hash":"e854f005b8b9175046fc4f3a901cb934af6b1796","modified":1531042668756},{"_id":"source/images/loadclass.png","hash":"8367236a406f7ddef520d2dbf1f51b40e622e597","modified":1531042668757},{"_id":"source/images/loadclasslock.png","hash":"86f20e5cf7284c29b08e09964b1a141969c34b7f","modified":1531042668759},{"_id":"source/images/log1.png","hash":"a6c22cc0d80b853887c7cd95cdc5130399c68724","modified":1531042668762},{"_id":"source/images/log3.png","hash":"92a4ece05ff9357073a9065c6c177418ea3bcef4","modified":1531042668766},{"_id":"source/images/markdown.jpg","hash":"f0c83b56b37d054083b3687465f4afaeeb33c2d2","modified":1531042668767},{"_id":"source/images/model.jpg","hash":"f130664bfc0fe6919acf5344289ee086ced04848","modified":1531042668769},{"_id":"source/images/mygitbook.jpg","hash":"217a2e4ab7791be3bf15cdaa6f327f0cbcd89c82","modified":1531042668781},{"_id":"source/images/mysql1.png","hash":"27477ffd5318981782aa85a51e767c715b32fd47","modified":1531042668782},{"_id":"source/images/mysql2.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1531042668796},{"_id":"source/images/mysql3.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1531042668798},{"_id":"source/images/mysql8.png","hash":"a2a62d7e36f20d8b7261b4dc4b083eda60d53696","modified":1531042668808},{"_id":"source/images/mysqlCode1.png","hash":"812d6c96b35ad48d91aaa7cee365b70480946bb9","modified":1531042668812},{"_id":"source/images/newRepository.jpg","hash":"db4e148318613b840781b25b5bb2cb512344d3d7","modified":1531042668815},{"_id":"source/images/newmaven1.png","hash":"79d872989bc6e2215c171810ae87db93a12d1bc3","modified":1531042668817},{"_id":"source/images/newmaven2.png","hash":"a43fc7c9309e8960f5a87257e28b1e3190dc4a9e","modified":1531042668819},{"_id":"source/images/newmaven3.png","hash":"d38e3ebe323acdf55039141ca9c73a61e629481b","modified":1531042668821},{"_id":"source/images/newmavenproject.png","hash":"59e100c2fcbf56d98a5f2b1538e0bf073c66771c","modified":1531042668822},{"_id":"source/images/nodejsdownload.jpg","hash":"8cc73c0300f74907ec8489975b4c09e977a40b13","modified":1531042668824},{"_id":"source/images/paramForClass.png","hash":"c72e8b9802ae768e71b08ff4a4684e3874ed2161","modified":1531042668826},{"_id":"source/images/paramForClass2.png","hash":"9090cdb5b0c6347d1172378e3024ca153dff24a5","modified":1531042668828},{"_id":"source/images/paramjsontype.png","hash":"e84d658f1b83e3ad884977063ba35caa5f592cb6","modified":1531042668847},{"_id":"source/images/paramjsontype4.png","hash":"d701fd787b17b6b219c4b6378199051e759b7958","modified":1531042668850},{"_id":"source/images/paramjsontype3.png","hash":"cffdeafd4124a63e5629060b414bde39a9a266b5","modified":1531042668849},{"_id":"source/images/paramjsontype5.png","hash":"7a426d87e5238efeb79791e12161b19b0f264b1f","modified":1531042668852},{"_id":"source/images/paramjsontype6.png","hash":"82d3c429e21548faaed47fc2b14367d299527b30","modified":1531042668854},{"_id":"source/images/paramjsontype7.png","hash":"978434dc264d81c8b25ea08e1b79e7be6d9663ae","modified":1531042668855},{"_id":"source/images/pingIP.jpg","hash":"e4102d7a30ff1d02e20c4606eee14fb5158ed407","modified":1531042668857},{"_id":"source/images/poi1.png","hash":"9017543b6d8860f5e69a54977eac17e07ad19b78","modified":1531042668859},{"_id":"source/images/publishSuccess.jpg","hash":"4e8e91a979c5b613f7618cdcaa2f635e0538e17a","modified":1531042668861},{"_id":"source/images/restinvokepost.png","hash":"a312eb84a44e01db5f3a14a4351e0f22866fd84b","modified":1531042668866},{"_id":"source/images/restinvokepostresponse.png","hash":"1a0ab66784c8ec7047a61cdf9369f02c6262169c","modified":1531042668868},{"_id":"source/images/restpostheader.png","hash":"841338744d6deb2c06cb10ac3c625048208373ed","modified":1531042668870},{"_id":"source/images/restpostheaderresult.png","hash":"e29c5a074cb4f3ee5f390b9a680c9e539c827595","modified":1531042668873},{"_id":"source/images/rocketMQ2.png","hash":"dfebc65e8f739fde0cb2af456257cc2032c3e3c6","modified":1531042668878},{"_id":"source/images/rocketMQ3.png","hash":"580cdcb92a54694b6744dcfc29f100b2638dcfbb","modified":1531042668880},{"_id":"source/images/selectLayout.jpg","hash":"fd99d2dec31e5ed5531fd5d49b5b34776beea0a1","modified":1531042668887},{"_id":"source/images/spring1.jpg","hash":"346d581fae54ac19b5e88bf139c4d254a1b32aa3","modified":1531042668889},{"_id":"source/images/spring2.png","hash":"5ebeec5d037bfd85fe36e79eb12ab51d277d4302","modified":1531042668891},{"_id":"source/images/spring3.jpg","hash":"2d384f95b6a4df0799db2db67870b8ae5ba23a25","modified":1531042668893},{"_id":"source/images/succblog.jpg","hash":"c924ba65f4bcdd71ea3886cd70514ee48b006c43","modified":1531042668895},{"_id":"source/images/threaddump.png","hash":"0071791f45f624fdca4ec34c1718899b6b818843","modified":1531042668899},{"_id":"source/images/thy1.png","hash":"55f2f5be2cae7360a52eb9a5a2fbe2d2298a4530","modified":1531042668900},{"_id":"source/images/thy2.png","hash":"2b3a1042d70001a64bfbc324b6e087c6bdccd4df","modified":1531042668902},{"_id":"source/images/thy3.png","hash":"085aa49561fad7693829badc440fd596d78a8dbb","modified":1531042668904},{"_id":"source/images/thy4.png","hash":"cd4da596d6179c816efba8d7aa1b882965600e88","modified":1531042668906},{"_id":"source/images/thy6.png","hash":"af8f9114e4eabe2013a9c5109bd3f9cc3b431f64","modified":1531042668908},{"_id":"source/images/thy7.png","hash":"5109c4385eb10a0660d5e8c9af6bfdd35add3617","modified":1531042668910},{"_id":"source/images/thyemleafshow.png","hash":"d0f49ce9408c3cce91437483208f941b412804fd","modified":1531042668911},{"_id":"source/images/useGitPages.jpg","hash":"7dfb31e260cc4802f3ce9791c442693fb07c1fe0","modified":1531042668917},{"_id":"source/images/tianjiagitfile.jpg","hash":"56d6151f6b1e8d6552d5708ed969628ca822060d","modified":1531042668915},{"_id":"source/images/vSphere0.jpg","hash":"9f973edbaace7047d6615c9f91ddbd69d4ec98a0","modified":1531042668919},{"_id":"source/images/vSphere00.jpg","hash":"0835e6ff2f6babb963c87bd0d1f992277bfa2ce7","modified":1531042668921},{"_id":"source/images/vSphere01.jpg","hash":"90a1afdf9ce7f15ac38cc3b92d3ce5c18f5b26ad","modified":1531042668943},{"_id":"source/images/vSphere02.jpg","hash":"137f172fa7c7c2dc16648e7405d015fc7dd33206","modified":1531042668945},{"_id":"source/images/vSphere03.jpg","hash":"9fa77f62ec89afaa8b8ef2bacb784c5a32315ada","modified":1531042668947},{"_id":"source/images/vSphere04.jpg","hash":"cb1109a9f0b4061a318d2e1f367a42a05413b33b","modified":1531042668949},{"_id":"source/images/vSphere05.jpg","hash":"d5fbeda9ec4cb9682af424289dc2c7f84e33d054","modified":1531042668951},{"_id":"source/images/vSphere06.jpg","hash":"708ac251c2afdad8759a83d4f155662271ee8f47","modified":1531042668953},{"_id":"source/images/vSphere1.jpg","hash":"96a4f6ef1a837211a7ad42eed3b4325ed9bb372b","modified":1531042668955},{"_id":"source/images/vSphere11.jpg","hash":"b0873d659259a7e228f078366b4e3222cdd15b93","modified":1531042668959},{"_id":"source/images/vSphere2.jpg","hash":"7bb8fdba14b1e03d21519cc764be06b2c447970f","modified":1531042668962},{"_id":"source/images/vSphere4.jpg","hash":"aeadaa97120f8dc4b36812c6f420c00d417abed6","modified":1531042668965},{"_id":"source/images/vSphere5.jpg","hash":"fb5b42b3f074e1bd8adc98afd10669f064aeb16d","modified":1531042668967},{"_id":"source/images/vSphere7.jpg","hash":"b438a5184735169c2a025464ff5e8cbff9a12cf6","modified":1531042668973},{"_id":"source/images/vSphere8.jpg","hash":"eeadea0b726df446e97676dbc68b819ddbce1005","modified":1531042668976},{"_id":"source/images/vSphere9.jpg","hash":"75e4e4e651cc537fc7e8d99a6ef983bda8e8b3f1","modified":1531042668978},{"_id":"source/images/wangka.jpg","hash":"39a2a3bd7e4bb60cab1b39f0630fddecff0113ba","modified":1531042668979},{"_id":"source/images/wankapeizhi.jpg","hash":"8216b06ae346667837a938e17f0c5f6d034b7dfa","modified":1531042668981},{"_id":"source/images/webgl2.png","hash":"c34bf45c3d4a6c4a855289c0ee01f38fe77f36ab","modified":1531042668986},{"_id":"source/images/webgl3.png","hash":"cadec863b811135fbc7025b5b39d87207afdb04c","modified":1531042668988},{"_id":"source/images/yumingmanage.jpg","hash":"72b945bb05264898a82c274ac0e2c1be7b9840c8","modified":1531042669013},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1531042669246},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1531042669247},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1531042669262},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1531042669264},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1531042669265},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1531042669267},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1531042669268},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1531042669269},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1531042669271},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1531042669273},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1531042669275},{"_id":"themes/next/languages/zh-CN.yml","hash":"d7dd607a00dc7f9a153b4204c6d34f80824686d0","modified":1531042669277},{"_id":"themes/next/languages/zh-Hans.yml","hash":"d7dd607a00dc7f9a153b4204c6d34f80824686d0","modified":1531042669278},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1531042669279},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1531042669281},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1531042669283},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1531042669356},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1531042669357},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1531042669359},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1531042669362},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1531042669364},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1531042669361},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1531042669367},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1531042669749},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1531042669751},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1531042669753},{"_id":"source/images/3.jpg","hash":"ceafae6c44b27e16a104252c47eed3f77a49862f","modified":1531042668610},{"_id":"source/images/biaoge1.jpg","hash":"2c8a80180cdb8e1ad1b6391766c9ffd5262d559d","modified":1531042668616},{"_id":"source/images/biaoge6.jpg","hash":"6585a9060e5e2e78d0a990005ef96b2f427212fc","modified":1531042668628},{"_id":"source/images/bk.png","hash":"8b00baeef518091b6258fa31e660abe04c98a9f7","modified":1531042668633},{"_id":"source/images/guanchazhe.jpg","hash":"fde8a22488e6f70dd57040acb674e1ab59307137","modified":1531042668695},{"_id":"source/images/ippeizhi.jpg","hash":"63c1cb0f1737b80b6c31b80067ec9f828c9f9549","modified":1531042668700},{"_id":"source/images/javaStream2.png","hash":"1e106ac4e9dba1a969a1224a0946e97c3de3a9d3","modified":1531042668703},{"_id":"source/images/jiance.png","hash":"134df09d00103b0785d530a268cb839aa67f0eda","modified":1531042668715},{"_id":"source/images/jqwidgets.png","hash":"fbe64a40edf567eef733447ea48d19b8ad2bc8d4","modified":1531042668724},{"_id":"source/images/kuayu.jpg","hash":"cb4e30c0c2b0885cc9e4db2b6c3e697be877c550","modified":1531042668726},{"_id":"source/images/log0.jpg","hash":"7ccfd98d9605dad40b5db4e5bbda3e5ed57b8e51","modified":1531042668761},{"_id":"source/images/log2.png","hash":"5c81e92c408f639950a9610649833522fd0e47c9","modified":1531042668764},{"_id":"source/images/mycsdnblog.jpg","hash":"ad4f73fe7fa0cace00f47e0af59b20a5e3d88e98","modified":1531042668779},{"_id":"source/images/mysql10.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1531042668795},{"_id":"source/images/mysql4.png","hash":"0da5dcf1a60d2a703f0fbe0141aa2d5b902a0c37","modified":1531042668801},{"_id":"source/images/mysql5.png","hash":"bcbdf5513c5715a69789dab6cf18890bb6d5125d","modified":1531042668801},{"_id":"source/images/mysql6.png","hash":"744ed2148b8f8c2371d1e88bd845cf23068cf216","modified":1531042668803},{"_id":"source/images/mysql7.png","hash":"df72c1597111b502074fee572e8c674a5ed0e0ef","modified":1531042668806},{"_id":"source/images/mysql9.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1531042668810},{"_id":"source/images/mysqlCode2.png","hash":"7840767464027409927b06a3ebb0e10ac039afed","modified":1531042668814},{"_id":"source/images/mysqlDownload.png","hash":"5ade523510bd3d8bd8b98710eadbca2b8d5eb62e","modified":1531044720958},{"_id":"source/images/restTemplate.png","hash":"8aadb0560c2d9b50fbd188b59f651f5a38e0cd43","modified":1531042668864},{"_id":"source/images/threadBlcked.png","hash":"e8109a529c69349cb343c5152860d50a1e0d87a7","modified":1531042668897},{"_id":"source/images/thymeleafFollow.png","hash":"40fd2d4a8830eb959741865128a4c6833cebbac7","modified":1531042668913},{"_id":"source/images/vSphere10.jpg","hash":"2deff4ad654a211f4f121a54ff36ec9af77d4642","modified":1531042668957},{"_id":"source/images/vSphere3.jpg","hash":"f0488e5a1dc4f0cae6172f3de0b209d57a70ef83","modified":1531042668964},{"_id":"source/images/vSphere6.jpg","hash":"fedd20137372dd88c82b5de096deb5b69db92084","modified":1531042668970},{"_id":"source/images/webgl1.png","hash":"a4b83bb6781323f905357a713fbf7f0fde86d233","modified":1531042668984},{"_id":"source/images/webgl4.png","hash":"18523b35ed0e6adf49011f51692fd260ee3f0c1c","modified":1531042668990},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669594},{"_id":"source/images/fanghuoqiang4.png","hash":"cee3e885715a6accecb179948602b8f2c84500fd","modified":1531042668662},{"_id":"source/images/gitinit.jpg","hash":"8c972e2bbef3c8e321ed1853e2667ae1df552f27","modified":1531042668685},{"_id":"source/images/gitmerge1.png","hash":"5a7289c15913fd8ec43e33f00078a2615c4f3afa","modified":1531042668690},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1531042669285},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1531042669287},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1531042669288},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1531042669291},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1531042669290},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1531042669319},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1531042669321},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1531042669322},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1531042669353},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1531042669293},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1531042669295},{"_id":"themes/next/layout/_partials/footer.swig","hash":"454776c6a5da04184e8d9faa1729811fa88cac97","modified":1531042669296},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1531042669298},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1531042669301},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1531042669303},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1531042669304},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1531042669369},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1531042669371},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1531042669373},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1531042669593},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531042669597},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1531042669603},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1531042669601},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1531042669604},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1531042669599},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1531042669606},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1531042669609},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1531042669610},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531042669612},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531042669613},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1531042669615},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1531042669617},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531042669618},{"_id":"source/images/biaoge4.jpg","hash":"c1f8d9343290d26a2a065abce3f1743d029f5151","modified":1531042668624},{"_id":"source/images/fanghuoqiang0.png","hash":"ea184d6f8dd1ea3c71baf0b12d49d539c46c494b","modified":1531042668653},{"_id":"source/images/fanghuoqiang7.jpg","hash":"907189432ad1775f34903b1ff9f3175c8c0c681a","modified":1531042668666},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669326},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669327},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669471},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669473},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669478},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669587},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531042669591},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1531042669324},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1531042669329},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1531042669330},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1531042669342},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1531042669347},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1531042669348},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1531042669350},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1531042669352},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1531042669299},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1531042669306},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1531042669309},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1531042669310},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1531042669313},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1531042669314},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1531042669316},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1531042669317},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1531042669469},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1531042669477},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1531042669475},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1531042669586},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1531042669589},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1531042669590},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1531042669623},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1531042669621},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1531042669625},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1531042669626},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1531042669628},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1531042669632},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1531042669633},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1531042669666},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1531042669668},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1531042669670},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1531042669672},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1531042669713},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1531042669681},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1531042669679},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1531042669683},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1531042669685},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1531042669686},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1531042669718},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1531042669722},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1531042669721},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1531042669723},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1531042669725},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1531042669726},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1531042669734},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1531042669736},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1531042669743},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1531042669745},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1531042669746},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1531042669716},{"_id":"source/images/rocketMQ1.png","hash":"529d5d0556f67b79a928a5e7ff5e0f44f7988698","modified":1531042668877},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1531042669333},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1531042669333},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1531042669336},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1531042669335},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1531042669339},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1531042669341},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1531042669344},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1531042669345},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1531042669382},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1531042669379},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1531042669380},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1531042669383},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1531042669405},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1531042669439},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1531042669458},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1531042669460},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1531042669462},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1531042669463},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1531042669465},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1531042669467},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1531042669481},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1531042669482},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1531042669484},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1531042669485},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1531042669487},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1531042669488},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1531042669510},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1531042669564},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1531042669565},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1531042669566},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1531042669568},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1531042669569},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1531042669575},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1531042669576},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1531042669578},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1531042669579},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1531042669581},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1531042669582},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1531042669584},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1531042669630},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531042669640},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531042669638},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531042669642},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531042669646},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531042669644},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531042669648},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1531042669660},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1531042669662},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1531042669664},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531042669677},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1531042669675},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1531042669689},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1531042669691},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1531042669693},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1531042669711},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1531042669730},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1531042669732},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1531042669697},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1531042669700},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1531042669709},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1531042669740},{"_id":"source/images/jerseyabort.png","hash":"47a3838e64208c20f0468809f8f429f8ef0312c9","modified":1531042668709},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1531042669385},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1531042669387},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1531042669389},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1531042669391},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1531042669393},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1531042669392},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1531042669395},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1531042669397},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1531042669399},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1531042669401},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1531042669402},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1531042669404},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1531042669408},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1531042669411},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1531042669410},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1531042669413},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1531042669414},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1531042669416},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1531042669417},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1531042669419},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1531042669420},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1531042669421},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1531042669423},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1531042669424},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1531042669426},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1531042669429},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1531042669428},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1531042669430},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1531042669432},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1531042669433},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1531042669435},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1531042669436},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1531042669437},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1531042669442},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1531042669445},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1531042669444},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1531042669447},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1531042669448},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1531042669450},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1531042669452},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1531042669453},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1531042669454},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1531042669456},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1531042669559},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1531042669562},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1531042669572},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531042669650},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1531042669652},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1531042669654},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1531042669657},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1531042669655},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1531042669659},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1531042669706},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1531042669703},{"_id":"source/images/model2.png","hash":"210727be8bcdf7dccb8b488ab67da8350ff70a24","modified":1531042668776},{"_id":"source/images/webgl5.gif","hash":"770868122a321b61f009d318ab8698cea3ec9164","modified":1531042668997},{"_id":"source/images/webgl6.gif","hash":"8f1aa6a430592cb37da6f4c83f3e5c1da9ef8f48","modified":1531042669011},{"_id":"public/sitemap.xml","hash":"957917ca90c855f142b6df3544f9bcd9e2e95c49","modified":1531049007257},{"_id":"public/atom.xml","hash":"476ec940622af5018a84875e3e745ce1fd9eb1be","modified":1531049007260},{"_id":"public/categories/index.html","hash":"2bb3cb8f21712b70498950e1e5b3c13779133982","modified":1531049011415},{"_id":"public/about/index.html","hash":"e3f4eb9efb370d35a36986b46977e018c97a2ad7","modified":1531049011446},{"_id":"public/tags/index.html","hash":"2b5a04d6d454331221ec6c6dce90b5ea9b339e5a","modified":1531049011446},{"_id":"public/前台向后台上传文件报net-ERR-CONNECTION-RESET问题入坑/index.html","hash":"603c6bc17856982ee110f873c5b1a4c1cf8ab513","modified":1531049011447},{"_id":"public/Mysql-8-0-安装笔记/index.html","hash":"082ec7275df9a3791b0afb72b2095f5cda3987fc","modified":1531049011447},{"_id":"public/运用webGL实现3D效果-机器组装/index.html","hash":"cec987253b3bdaae57a71f68f678820be680b1f9","modified":1531049011447},{"_id":"public/DataOutputStream-write方法入坑/index.html","hash":"9f02f58df92367829c05876ac75762650abcce2b","modified":1531049011447},{"_id":"public/使用spring的RestTemplate调用REST接口/index.html","hash":"4752110d1fccc70267e317c9d0a9beedd55bc808","modified":1531049011447},{"_id":"public/使用spring的RestTemplate调用REST接口时出现线程阻塞/index.html","hash":"3838cdc017a1193d3ee5203b8e8ec7e6fc3ea215","modified":1531049011447},{"_id":"public/Linux服务器中查看log日志技巧/index.html","hash":"cfdf475adc85dcc007aad976480eaae6545f36df","modified":1531049011447},{"_id":"public/最近开发app后台的一些小结/index.html","hash":"d1550fb6d61deda4bf84b40f74968350222a6914","modified":1531049011447},{"_id":"public/jersey-4-轻量级Rest接口服务开发之对象入参/index.html","hash":"0536021b5a202a66b6a0e876eadf3fdd700918e0","modified":1531049011447},{"_id":"public/jersey-3-轻量级Rest接口服务开发之入参/index.html","hash":"a6f4dee6b56f89cc8cdc3ec556c379e2d17de8c8","modified":1531049011447},{"_id":"public/Jquery中prop和attr使用时的问题/index.html","hash":"a5b0f710e8b1b3f8b938c650d3b2e7e9f4cd9ce2","modified":1531049011477},{"_id":"public/RocketMQ启动报错解决/index.html","hash":"29c10b828c4172c397134ab56f1b1f0d9991874d","modified":1531049011477},{"_id":"public/Redis-安装/index.html","hash":"7ffb98a7a52ab01374a6aa56cea68aea2b5a2ed2","modified":1531049011477},{"_id":"public/Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction/index.html","hash":"aa5b20a9f21f04f4421943c781ce7d1e8c984eca","modified":1531049011477},{"_id":"public/java使用jxl读取excel数据时特殊符号处理/index.html","hash":"2e6e00c4af4d7969fa2e9b991f853c444a888df9","modified":1531049011477},{"_id":"public/Tomcat实时查看日志信息/index.html","hash":"a672345c9d13419f960da1f45f843d165a85d696","modified":1531049011477},{"_id":"public/通过反向代理解决跨域问题/index.html","hash":"bbc475728c8e0442f723baf654d75dd70c66e01b","modified":1531049011477},{"_id":"public/java接收oracle中clob类型字段值/index.html","hash":"b15f21c4d7a3de35b1bc2aa9832c2e1e1997168e","modified":1531049011478},{"_id":"public/oracle11G导出数据时空表无法导出/index.html","hash":"9c634d98bf36dd6c24fad6bf98830800e271c036","modified":1531049011478},{"_id":"public/2016-06-30-页面中添加-ENTER-键点击事件/index.html","hash":"8c4d5f2bfefc27554eec5fe1688b35be0392ac6a","modified":1531049011478},{"_id":"public/2016-06-30-关闭父窗口刷新子窗口/index.html","hash":"1ceadbb99bb5cb77a990ac5c2f39c7a723f47582","modified":1531049011478},{"_id":"public/2016-06-30-Java-was-started-but-returned-exit-code异常/index.html","hash":"9b2d320ae5b3dbc20c17823ce6d35f27a5ecde50","modified":1531049011478},{"_id":"public/2016-06-28-添加KEY后，每次push时让输入密码/index.html","hash":"1c952e111e7ffc4999623a60e82076ac3b63b727","modified":1531049011478},{"_id":"public/categories/java/index.html","hash":"4364ca52d880b3b1c7988bba80c99207a50b6c65","modified":1531049011478},{"_id":"public/categories/java/page/2/index.html","hash":"6d773c2f936152d70b9e9cac72b8b1d9b8083d12","modified":1531049011478},{"_id":"public/categories/github/index.html","hash":"cbc9e8f3ddc75f3452322385c9a58004dd220059","modified":1531049011479},{"_id":"public/categories/IDE/index.html","hash":"f892b3e8a85d8ed44641b8dff0b38f5a7f27f0cc","modified":1531049011479},{"_id":"public/categories/UI/index.html","hash":"a56c356df036539f9ca6f4516d171b08622957a5","modified":1531049011479},{"_id":"public/categories/javascript/index.html","hash":"149357307882bad0144b001b7877385d029a5574","modified":1531049011479},{"_id":"public/categories/nodeJs/index.html","hash":"4babbcfd69e10be8a11e771ff8648a2930ec3ca1","modified":1531049011479},{"_id":"public/categories/Linux/index.html","hash":"76a1ecb5799468a4992f91f924ce828a4950a74e","modified":1531049011479},{"_id":"public/categories/Maven/index.html","hash":"9a19986225d7ace3175eeebd6e947c69880665e4","modified":1531049011479},{"_id":"public/categories/Mysql/index.html","hash":"101bd6561e0727fdaa8f387b64e31e719a286280","modified":1531049011479},{"_id":"public/categories/Redis/index.html","hash":"d5b81f2aa90c879bc91c869f70b2841f26f7220c","modified":1531049011479},{"_id":"public/categories/Mybatis/index.html","hash":"eb2b39b44df6c1743912c80f50a91fd42fc7f7f4","modified":1531049011479},{"_id":"public/categories/RocketMQ/index.html","hash":"6886a9853f7fd0a5a411c766528e8264aa2e964d","modified":1531049011479},{"_id":"public/categories/vSphere/index.html","hash":"706bd7ece8e73673f25205539375a59d26b03e51","modified":1531049011480},{"_id":"public/categories/Tomcat/index.html","hash":"2852773ebfcf02448def0d24fc01df80c622b27d","modified":1531049011480},{"_id":"public/categories/git/index.html","hash":"43fde22eb63a4fa5c3a1041af48b2ffcacc17f91","modified":1531049011480},{"_id":"public/categories/jersey/index.html","hash":"73a8e0b336b39b3a3893e6cca1e7b25268209148","modified":1531049011480},{"_id":"public/categories/spring/index.html","hash":"6aeae980de9b2921b7428288fefbaa08c3cfbfed","modified":1531049011480},{"_id":"public/categories/oracle/index.html","hash":"1409a583a88618e7f95f2fc21b87767c4424b04c","modified":1531049011480},{"_id":"public/categories/thymeleaf/index.html","hash":"229ba2bfce8fc791ac9b809627826f7a653ab0ce","modified":1531049011480},{"_id":"public/categories/设计模式/index.html","hash":"fca5f67a847af37184631a8f3ba75e9171e2acc6","modified":1531049011480},{"_id":"public/categories/Nginx/index.html","hash":"6a49e24b68c5f2eae62dffc43ea38bb139af64ca","modified":1531049011480},{"_id":"public/categories/3D/index.html","hash":"938b66f6f5ae28067c168579d9ca110333fec360","modified":1531049011480},{"_id":"public/archives/page/8/index.html","hash":"f7100e89f2479a6cb6dda7d52b701059cab98277","modified":1531049011480},{"_id":"public/archives/2016/page/5/index.html","hash":"683b680d78476de4bfab99c11811cb2a528bec19","modified":1531049011480},{"_id":"public/archives/2016/06/index.html","hash":"3d0006d341e242cafac80f2f8204a5f8845a6d21","modified":1531049011480},{"_id":"public/archives/2016/07/index.html","hash":"03227458726990e38ead26f045e1e1f15ac3c2a0","modified":1531049011480},{"_id":"public/archives/2016/08/page/2/index.html","hash":"4cd522b76fd038f6ca55a40dbc514d2e81b8090c","modified":1531049011480},{"_id":"public/archives/2016/09/page/2/index.html","hash":"11b65ecc38ca88459d9bc12333134fbbb5b02e0f","modified":1531049011480},{"_id":"public/archives/2017/page/4/index.html","hash":"14aa29246de946225af5e3a492d3aef6e4ac28f7","modified":1531049011480},{"_id":"public/archives/2017/01/index.html","hash":"e69e7023499dcbcb8e196e4479c8160036f42d7f","modified":1531049011481},{"_id":"public/archives/2017/02/index.html","hash":"2e459a5d283fb4eda9f5430b5443ebe3064db51d","modified":1531049011481},{"_id":"public/archives/2017/03/index.html","hash":"fb058a3f577a20a8978f3cddbba11e6132e97931","modified":1531049011481},{"_id":"public/archives/2017/04/index.html","hash":"7b6ed239619a917aadaec05e2312d47587810cea","modified":1531049011481},{"_id":"public/archives/2017/05/page/2/index.html","hash":"b18ce00b51c469debb0ba413ff3d86d983ab48b7","modified":1531049011481},{"_id":"public/archives/2017/07/index.html","hash":"c0ecb565c01601da76cdc68502a7d30eb2526c29","modified":1531049011481},{"_id":"public/archives/2017/08/index.html","hash":"419ac397966aab075748c11b26b06ea821d782b7","modified":1531049011481},{"_id":"public/archives/2017/09/index.html","hash":"4034ad221bba96280f7eebf38690977666219240","modified":1531049011481},{"_id":"public/archives/2017/12/index.html","hash":"b18a9b7bd17cb40e6833e12b455b63396770c33c","modified":1531049011481},{"_id":"public/archives/2018/index.html","hash":"f4386bedce9c32ee80b159bc23ef69df3135b4f1","modified":1531049011481},{"_id":"public/archives/2018/02/index.html","hash":"08c7fe332e89a838852a221580abfe2d6c274d4e","modified":1531049011481},{"_id":"public/archives/2018/07/index.html","hash":"98bb709f109bf0540b246ea306698d95b39cfd70","modified":1531049011481},{"_id":"public/tags/github/index.html","hash":"63d56d7ae7717069ff17b2ec3d8fe371a34411b0","modified":1531049011481},{"_id":"public/tags/进制运算/index.html","hash":"1f87db510f1419fb1d2ecb5034a73dd6c3b5d0d9","modified":1531049011481},{"_id":"public/tags/eclipse/index.html","hash":"034cbecc15ab3edc51279aab5f120ef0562dbdfc","modified":1531049011481},{"_id":"public/tags/界面框架/index.html","hash":"7f2485bb4b1e93edd724d66f03f0239258e1f393","modified":1531049011482},{"_id":"public/tags/添加enter事件/index.html","hash":"3f098a36bdc41ddda2db8c0113a9ab0b84336a88","modified":1531049011482},{"_id":"public/tags/javascript/index.html","hash":"31c31d66cae278262819fab4a97874595139a65b","modified":1531049011482},{"_id":"public/tags/nodeJs/index.html","hash":"88006c28f5aa4c99850aff589e937f6a9acf741a","modified":1531049011482},{"_id":"public/tags/Linux/index.html","hash":"9dcc9e21caa4be2e63a95898c79a8dde5a465aea","modified":1531049011482},{"_id":"public/tags/java/page/3/index.html","hash":"7f8f5ff361b0103af6132a1b3bea6c210a54d2c0","modified":1531049011482},{"_id":"public/tags/jquery/index.html","hash":"a60524016be64ef020d6af907568b75b6e462560","modified":1531049011482},{"_id":"public/tags/网卡/index.html","hash":"17655254821947a6c2b51c0e7465992bc6ff9903","modified":1531049011482},{"_id":"public/tags/服务开机启动/index.html","hash":"b06836cc7a134e143834b0f86c59877b8079ddb3","modified":1531049011482},{"_id":"public/tags/Mysql/index.html","hash":"4a1f3395105c3cae0c1d3ffe5ee76039ad56ac1e","modified":1531049011482},{"_id":"public/tags/Maven插件/index.html","hash":"07bfa0b1b622fa4935189cdccba592f41baf938b","modified":1531049011482},{"_id":"public/tags/动态传入tableName/index.html","hash":"6691bdb9d042364353dcfb1942776ec0e9e6ca9b","modified":1531049011482},{"_id":"public/tags/Redis/index.html","hash":"51eeea52a0d07d6a895889416c6ce6931dd05b76","modified":1531049011482},{"_id":"public/tags/Redis安装/index.html","hash":"85ac832041f282124d678374a8fdcaea1cae151e","modified":1531049011482},{"_id":"public/tags/RocketMQ启动错误/index.html","hash":"94d65f06b21c45ae5592b6515bd6ba06efc33b62","modified":1531049011482},{"_id":"public/tags/vSphere添加物理网卡/index.html","hash":"40956f64f7f75766f8b7d030029f815455c97731","modified":1531049011482},{"_id":"public/tags/Tomcat日志/index.html","hash":"8a237b841c7afc17af2bedd2db2c0f65c00c1723","modified":1531049011482},{"_id":"public/tags/git/index.html","hash":"12fdec9f54fff15e828be5ec4b9cb447ae611361","modified":1531049011482},{"_id":"public/tags/java8-Stream/index.html","hash":"9d62ba2836dd17f00a443d1ca28ed5bdf5272f74","modified":1531049011482},{"_id":"public/tags/jxl/index.html","hash":"a2b7692968150bb9ce1d3ef8a78454d6510af21f","modified":1531049011483},{"_id":"public/tags/java定时任务/index.html","hash":"ada173e704b5398c3241f88e2bfad391c7253fd8","modified":1531049011483},{"_id":"public/tags/java接收clob字段/index.html","hash":"74e9b9ed55f09b7110c2d067aea192aa336a32a8","modified":1531049011483},{"_id":"public/tags/oracle导出空表/index.html","hash":"5f23d6584bd951fbeadbb98247878894cde31e77","modified":1531049011483},{"_id":"public/tags/spring/index.html","hash":"60f8e1fe16f11ee22459869fe163e2d37c6f3940","modified":1531049011483},{"_id":"public/tags/thymeleaf/index.html","hash":"e0eebf0c16f4aaeec99d29b7e96977c0cb8da3ca","modified":1531049011483},{"_id":"public/tags/springBoot/index.html","hash":"e497517622428c743dc591c9de56352581440479","modified":1531049011483},{"_id":"public/tags/gitlab/index.html","hash":"de8e337f3b5b61e2e10c717a3d52e114b2810839","modified":1531049011483},{"_id":"public/tags/表单元素获取/index.html","hash":"1117fcd7965d0c09416fa6e8123e10795493e62e","modified":1531049011483},{"_id":"public/tags/poi/index.html","hash":"47e0eedfa2987ba9bea9d72be075e8e691b8a9a0","modified":1531049011483},{"_id":"public/tags/跨域/index.html","hash":"1335efbb8d696f9cec4d9608468f3b55756e12b2","modified":1531049011483},{"_id":"public/tags/webGL/index.html","hash":"6d74b3c3c32591d31bc27d0d381d75d1cb1bf123","modified":1531049011483},{"_id":"public/jersey-2-轻量级Rest接口后台服务常规接口开发/index.html","hash":"56cc1fce47cc8e82b59446becbea906b99ee4a07","modified":1531049011483},{"_id":"public/jersey-1-轻量级Rest接口后台服务框架搭建/index.html","hash":"7e5a2f78a2db48e925d8446a3bc6faad10714172","modified":1531049011483},{"_id":"public/设计模式-单例模式/index.html","hash":"c8b605cd9a5cf84d756b6345be5d88628c1e078c","modified":1531049011483},{"_id":"public/设计模式-抽象工厂模式/index.html","hash":"290a8308874cf9c31d452493e8044cefd9fc8998","modified":1531049011483},{"_id":"public/设计模式-工厂方法模式/index.html","hash":"cfca94e9aebbfeddce5abcdd2c3459dbb3666f72","modified":1531049011483},{"_id":"public/设计模式-装饰者模式/index.html","hash":"3c9c68d03d95692b3ff299760ec54ae5c35d94ec","modified":1531049011483},{"_id":"public/勒索病毒-永恒之蓝防范处理/index.html","hash":"f50a1dbbe11d89ba73f513e71dd4cf841c750be0","modified":1531049011484},{"_id":"public/设计模式-观察者模式-用java原生Observable、Observer简化观察者模式实现/index.html","hash":"c6346acf8614f53ca939dca38955c4285d289d4d","modified":1531049011484},{"_id":"public/设计模式-观察者模式/index.html","hash":"974e551351f2cef6fa8b22934f99793e5609e8de","modified":1531049011484},{"_id":"public/通过curl命令调用调试RestApi接口/index.html","hash":"991f02ff88487a85484269a4846a675f8639503f","modified":1531049011484},{"_id":"public/java通过反射操作类/index.html","hash":"517166c77ca1f9c0dc9881c670229e61e8e2ad64","modified":1531049011484},{"_id":"public/java新旧版本的排序/index.html","hash":"378e9e6f6dc2771d1b3b4082ae7cbdb2f2b97c58","modified":1531049011484},{"_id":"public/设计模式-引入模式雏形/index.html","hash":"db80b84cd8ad00bb2646444e1129a538a8b3fa90","modified":1531049011484},{"_id":"public/设计模式-无模式/index.html","hash":"9f5c6baa92ad36127598ad3b7aec9466c9333751","modified":1531049011484},{"_id":"public/java中集合使用中遇到的-坑/index.html","hash":"9c49d9ee8b69dd052005983858935a95465f4eb2","modified":1531049011484},{"_id":"public/java和javaScript代码进行交互初探一/index.html","hash":"31f7cca3fb949b404028100ec1d8d0e45a8dd2d0","modified":1531049011484},{"_id":"public/java8使用stream对简单数据集排序/index.html","hash":"65ed625fdb2ee3d4b7fe4c7d737ff6f9e1247a64","modified":1531049011484},{"_id":"public/java三目运算符之规则-坑/index.html","hash":"2b3c7a3107defbce6b4b1f9c58f2abc495fe8def","modified":1531049011484},{"_id":"public/Redis-定时操作篇/index.html","hash":"2346f06f7cbac665044994e5ddb95b3fc95b0566","modified":1531049011484},{"_id":"public/Redis-使用SortedSet分页处理/index.html","hash":"0a57f1cd9fa9fddb5a8136638730d1455e67665a","modified":1531049011484},{"_id":"public/我所理解的nodeJs的两个概念/index.html","hash":"2d59736a5bd7d8348e5fc87bb90fb5cdbfbf1ca4","modified":1531049011484},{"_id":"public/CentOS系统安装nodeJs/index.html","hash":"c19b6c47e67ced1bc5789a5ba132df0d5ac7ff90","modified":1531049011485},{"_id":"public/10进制与2进制转换/index.html","hash":"c6ae90413f5ca921e9035ff3fce24f328960f933","modified":1531049011485},{"_id":"public/thymeleaf教程3-with定义变量使用/index.html","hash":"45709cc44832e03bb8cdcce6c8fa5065e8a4956f","modified":1531049011485},{"_id":"public/Maven忽略其他依赖jar包插件/index.html","hash":"f7554d4d28604096dd40ea7b82570fa71f58ce74","modified":1531049011485},{"_id":"public/Mysql数据库编码更改/index.html","hash":"fd3bb87ca514d8cbf581e792cd981811aea1b1d3","modified":1531049011485},{"_id":"public/java定时任务Timer小试一下/index.html","hash":"11154f35c2aa09da6c160f597c8e5b58f2a6711e","modified":1531049011485},{"_id":"public/处理百万级以上的数据提高查询速度的方法-数据库优化篇/index.html","hash":"2347c72dc3ca31c27749df2b8dfae7ef0fb41149","modified":1531049011485},{"_id":"public/用POI3-9写一个基于office系列文档的转换系统-设计篇/index.html","hash":"cc44956df079969057340c1c0d132f82347f595b","modified":1531049011485},{"_id":"public/spring3-1-1入门讲解二-注解篇/index.html","hash":"b8dc4fc9067bc3cf506bd933209ba91e63831a99","modified":1531049011485},{"_id":"public/spring3-1-1入门讲解一-非注解篇/index.html","hash":"75e39500e9ec55f4fd0e6b28a2e58f3a4fe98afa","modified":1531049011485},{"_id":"public/带附件的enctype表单中普通属性的获取/index.html","hash":"8f33bcff01e0c0591ccfe190634798ffeb4eaf82","modified":1531049011485},{"_id":"public/基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具/index.html","hash":"c974c1cabcabd5142ae628598c283482e6e0dbe1","modified":1531049011485},{"_id":"public/springBoot编写不同风格的restAPI接口/index.html","hash":"c01559e753a402b41548ca11f87f2a87b31f6149","modified":1531049011485},{"_id":"public/java8中使用stream流和for循环分别对数据集合遍历的差异/index.html","hash":"0a535cbd75c3e638b7c43c51f49c0b57eda49a43","modified":1531049011485},{"_id":"public/thymeleaf教程2-后台数据封装与页面渲染/index.html","hash":"945645bffeab6e72c871a0323b43115d6c934a7b","modified":1531049011485},{"_id":"public/jquery获取单选按钮值的诡异之处/index.html","hash":"344749f4f90d7699e63d9a4dfac7554f63725744","modified":1531049011485},{"_id":"public/整型字面值与进制运算之间的关系/index.html","hash":"07a2c32a2ccb4e01fffac4671749e357a6c8302b","modified":1531049011485},{"_id":"public/MySql安装后添加的用户不能远程连接登陆/index.html","hash":"a366baa331e967b87c8a1a1a916f94cd4c117b93","modified":1531049011485},{"_id":"public/CentOS-6-4内核升级操作/index.html","hash":"ff1d34e8c879dde39c66cfc1a78d195f18ae328e","modified":1531049011486},{"_id":"public/git搞着玩-新建本地仓库/index.html","hash":"c635d5d6f955a9403b6a928975335c5f0e987af2","modified":1531049011486},{"_id":"public/Linux查看端口占用/index.html","hash":"5fa9e4e2af3f2c3567cc191914f643761fe7361e","modified":1531049011486},{"_id":"public/Linux双网卡配置-内外网同时访问/index.html","hash":"2c0add04fd8eb042eeb7a0b7a29209fadc8ca4a9","modified":1531049011486},{"_id":"public/VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置/index.html","hash":"000a2cb55db5e85b9b6cf90ddeba307f1cf42fe7","modified":1531049011486},{"_id":"public/如何查看当前的linux系统是哪个发行商/index.html","hash":"9b46e266b86936f563acc3ab40dcf871b278fe00","modified":1531049011486},{"_id":"public/thymeleaf教程1-环境搭建/index.html","hash":"8b4b4b64269afc45d381bf023fc90cb7a2bdda00","modified":1531049011486},{"_id":"public/Mybatis动态传入tableName-非预编译-STATEMENT/index.html","hash":"9981896199f199f637e2d13663711fabb3cc77db","modified":1531049011486},{"_id":"public/Linux系统添加配置随开机启动的服务/index.html","hash":"7711f041d3050806b3ca6a536953a06618065732","modified":1531049011486},{"_id":"public/Linux开机启动后经常需要配置网卡/index.html","hash":"162953730bd8e8e713f34cc664df54d3c12fd581","modified":1531049011486},{"_id":"public/java通过Stream对list集合分组/index.html","hash":"8c4007ce0c3656762412d06e8202c72a40d0f69e","modified":1531049011486},{"_id":"public/2016-06-30-界面框架/index.html","hash":"c890f7a29087aeb207888dea91d27fdf5b54c816","modified":1531049011486},{"_id":"public/2016-06-28-通过gitBook让网站更实用/index.html","hash":"bf56ddee35a63ab3b100dc2deda9b936ded786b3","modified":1531049011486},{"_id":"public/2016-06-28-为github-pages绑定独立域名/index.html","hash":"971ea0876c115714b394140aeb0e2390ebd3ea2a","modified":1531049011486},{"_id":"public/2016-06-28-通过github-pages生成网站/index.html","hash":"2ac214c72fb8c3dc7cf11e4225aac221ddfde8f2","modified":1531049011486},{"_id":"public/page/2/index.html","hash":"c625bcfdfef6de209d678bc6cf96f874f8ec032c","modified":1531049011486},{"_id":"public/page/3/index.html","hash":"2914292dfce8518b46e41a9a15640619b540ed9c","modified":1531049011486},{"_id":"public/page/4/index.html","hash":"0b888f7b08910ea9392fb3f54e791485d352271e","modified":1531049011486},{"_id":"public/index.html","hash":"d133367756f73815885bb9746701ef5308a7e30c","modified":1531049011487},{"_id":"public/page/5/index.html","hash":"2d3c512911d639a4df3a6d74d39eea38d94ac265","modified":1531049011487},{"_id":"public/page/6/index.html","hash":"cc83a71514f3ebbfdf487e76e3f3e55f12df8501","modified":1531049011487},{"_id":"public/page/7/index.html","hash":"e3c175ebdf944bc8f627ce401c88f63b7baf8a0a","modified":1531049011487},{"_id":"public/archives/index.html","hash":"f30fed285241285f90c76dfd4fd57de221fa331d","modified":1531049011487},{"_id":"public/page/8/index.html","hash":"1e5e9633cd543fa15d0e5b1b0ff7df8f673cf42a","modified":1531049011487},{"_id":"public/archives/page/2/index.html","hash":"5816a8a56a688dcbb7c5415e2bcc9ce8f651071d","modified":1531049011487},{"_id":"public/archives/page/3/index.html","hash":"7154f19d05da9cf98671fc0a6344284fc9787c61","modified":1531049011487},{"_id":"public/archives/page/5/index.html","hash":"01aefc9b91aa8eeab396f2009fb97048f0a80cac","modified":1531049011487},{"_id":"public/archives/page/4/index.html","hash":"80df6ce4b11822543a62e330d3f1d9d59b26ca33","modified":1531049011487},{"_id":"public/archives/page/6/index.html","hash":"b1edd71677418d5879a67fe7955ebf55341b70f1","modified":1531049011487},{"_id":"public/archives/page/7/index.html","hash":"e9841e0d71bc980c1854cf6a00e5fbc4cd1903c6","modified":1531049011487},{"_id":"public/archives/2016/index.html","hash":"6967268a5ad5ffdc3213658f173cd1e82bae099c","modified":1531049011488},{"_id":"public/archives/2016/page/2/index.html","hash":"ee0d9da6e63cf6c1945cdca96b2bf5b07aea10ff","modified":1531049011488},{"_id":"public/archives/2016/page/3/index.html","hash":"28028137ceed8f7b9be994785f3d5a630c13ea40","modified":1531049011488},{"_id":"public/archives/2016/page/4/index.html","hash":"5ba43a491d2187dba32bdaacd4be7a2205f09e52","modified":1531049011488},{"_id":"public/archives/2016/08/index.html","hash":"3079617416b15e2e8ea4967bce0357f033eccc82","modified":1531049011488},{"_id":"public/archives/2016/09/index.html","hash":"3c5680ba6139573326c4030c4ec84b7db60703b1","modified":1531049011488},{"_id":"public/archives/2017/page/2/index.html","hash":"469160b557da7cdf3fab102883d88b3c51624a9f","modified":1531049011488},{"_id":"public/archives/2017/index.html","hash":"996e455646cdab8bb6ebaf0017c0b76c82a20882","modified":1531049011488},{"_id":"public/archives/2017/page/3/index.html","hash":"1f68852ae8215fc007c91f3a4620b0adf11de1ff","modified":1531049011488},{"_id":"public/archives/2017/05/index.html","hash":"ff5da69a295d51fc6c70e62f8d1b5ea60b8e2345","modified":1531049011488},{"_id":"public/tags/java/index.html","hash":"0961ec36faa5e18f277ef22d0edb04d651cee6b4","modified":1531049011488},{"_id":"public/tags/java/page/2/index.html","hash":"79e0d1746f6df962c542b6719430577ce62de3f7","modified":1531049011488},{"_id":"public/images/000000.png","hash":"74c3b8ead88408a3af6fbc880703704112aafe78","modified":1531049011488},{"_id":"public/images/2.jpg","hash":"44da03ecb56c313ff2db17b1dabee6d4b8a0fcd1","modified":1531049011488},{"_id":"public/images/1.jpg","hash":"1f91210c70d46c33b46fd5ad7ce1aec743387e9f","modified":1531049011489},{"_id":"public/images/4.jpg","hash":"05bab84da801b648eb82c880ad3edec0c257409c","modified":1531049011489},{"_id":"public/CNAME","hash":"b742f0f7a172db4d51f00b28fcdaabbcb307eab1","modified":1531049011489},{"_id":"public/images/avatar.png","hash":"ac4c8fb12ba74a39a686148fabc7f78ea780c4da","modified":1531049011489},{"_id":"public/images/biaoge3.jpg","hash":"0da0958701ed149dabc348a0932272ad4edbee87","modified":1531049011489},{"_id":"public/images/biaoge2.jpg","hash":"314aa66ae788e8eca721808f49afc7f16869ac61","modified":1531049011489},{"_id":"public/images/biaoge5.jpg","hash":"5c19c145c472134e756617e81995c105eb243cb1","modified":1531049011489},{"_id":"public/images/biaoge9.jpg","hash":"a8df57e34c492c2b44653a698552161181ee77e3","modified":1531049011489},{"_id":"public/images/bujv.jpg","hash":"c21d1ca64fa9f274ff272da1e0c06fbaa2c347b9","modified":1531049011489},{"_id":"public/images/cname.jpg","hash":"10e07bee84c3fac91d84104854033fc5e7f0dc60","modified":1531049011489},{"_id":"public/images/createSucc.jpg","hash":"6403c8b9b1ca1d5728e99d37140452f453724349","modified":1531049011489},{"_id":"public/images/deleteinvoke.png","hash":"249521038be9f97d14ba1eb794f57700c0598ae5","modified":1531049011489},{"_id":"public/images/deleteresult.png","hash":"eb853a0385bfc4f0a1cfd37ebfedc718a0cc1ce0","modified":1531049011489},{"_id":"public/images/dumpfenxi.png","hash":"c8e5a0bb5d3ac99b8c2d1106c6d4d077268282b9","modified":1531049011489},{"_id":"public/images/dump.png","hash":"f8d6695e258e109d6308141fcb5019c69992b0d9","modified":1531049011489},{"_id":"public/images/fagnwen.jpg","hash":"f1cdfc63772946938560314c7c1350809107bc60","modified":1531049011490},{"_id":"public/images/fanghuoqiang2.png","hash":"9403198073180be0e08bb928f70ddeaa847c70a3","modified":1531049011490},{"_id":"public/images/fanghuoqiang1.png","hash":"fdf2741edfed411591f146ea703439e997998895","modified":1531049011490},{"_id":"public/images/fanghuoqiang3.png","hash":"ef92968efe9eba4f3b1b33134cb8d1a4bd787c33","modified":1531049011490},{"_id":"public/images/getIp.jpg","hash":"32dd38f5780c75b907e93a0fea3efd4a3d03d39d","modified":1531049011490},{"_id":"public/images/git1.jpg","hash":"bf362114f3ba27a1359700f712527a0e3310a5b4","modified":1531049011490},{"_id":"public/images/git2.jpg","hash":"f80efb756723fa647c398db66972c1b0af4638a2","modified":1531049011490},{"_id":"public/images/git3.jpg","hash":"669605e32d472da2554adeb6ca207dd69ffc1348","modified":1531049011490},{"_id":"public/images/git4.jpg","hash":"68895efb00cae56fcd5e0e847b02604f893bdfce","modified":1531049011490},{"_id":"public/images/gitTestconnsucc.jpg","hash":"598132a5b7689614e8ab565ef2d34ce8a31a81ed","modified":1531049011490},{"_id":"public/images/gitaddFile.jpg","hash":"fa78982614c742575a7c9e50f96545e28ec534b8","modified":1531049011490},{"_id":"public/images/gitinitfile.jpg","hash":"3cf7edb4c0a44cc424d9fdeb604908577bdf541a","modified":1531049011491},{"_id":"public/images/gitpushinputpass.jpg","hash":"483d501611082fb8104bf10b6c5673f27fad843d","modified":1531049011491},{"_id":"public/images/gitbuildbook.jpg","hash":"acdea181bfb2f89abb60c576ce95d15b40e5a105","modified":1531049011491},{"_id":"public/images/gitpushinputpasssucc.jpg","hash":"6a2e37d82076bd1b8caebe170fc1b85354df8f20","modified":1531049011491},{"_id":"public/images/jerseyhello.png","hash":"1ac13c022824c9a6e978b057253f8ce8aefd03d9","modified":1531049011491},{"_id":"public/images/jerseykuangjiatu.png","hash":"74c3b8ead88408a3af6fbc880703704112aafe78","modified":1531049011491},{"_id":"public/images/inputInfo.jpg","hash":"142b3f79e6f7da6615b40cde3c8a77e8c5d1c5ce","modified":1531049011491},{"_id":"public/images/jqueryRadio1.png","hash":"46704bed7715e22f4891c1a1eaeee09252459608","modified":1531049011491},{"_id":"public/images/jqueryRadio3.png","hash":"a14ac03611cdd454b33d15011c9cb968dc22fed6","modified":1531049011491},{"_id":"public/images/jqueryRadio2.png","hash":"5eda50da10c4d5d2cf2152ce50aa4f7b40d8bbca","modified":1531049011491},{"_id":"public/images/linuxInter0.png","hash":"c67c79508e4b1abb8434af933a93f1b647fd17d9","modified":1531049011491},{"_id":"public/images/jqueryRadio4.png","hash":"f094a2e100146f23f02c1c80279ed7ed5ea931fa","modified":1531049011491},{"_id":"public/images/linuxInter2.png","hash":"932f31fb182b54ab9d534a7d8fc88d7ca5c89dde","modified":1531049011491},{"_id":"public/images/linuxInter1.png","hash":"0880a8120fa74fefb0beebfa14c5e740a98e2944","modified":1531049011491},{"_id":"public/images/linuxInter3.png","hash":"289533dbd3ce53e781ba4034aa9e366d0cece690","modified":1531049011491},{"_id":"public/images/linuxInter4.png","hash":"52b83adde711d865a1350269b14810523a872ce6","modified":1531049011491},{"_id":"public/images/linuxKenel1.png","hash":"e854f005b8b9175046fc4f3a901cb934af6b1796","modified":1531049011492},{"_id":"public/images/loadclass.png","hash":"8367236a406f7ddef520d2dbf1f51b40e622e597","modified":1531049011492},{"_id":"public/images/log1.png","hash":"a6c22cc0d80b853887c7cd95cdc5130399c68724","modified":1531049011492},{"_id":"public/images/loadclasslock.png","hash":"86f20e5cf7284c29b08e09964b1a141969c34b7f","modified":1531049011492},{"_id":"public/images/markdown.jpg","hash":"f0c83b56b37d054083b3687465f4afaeeb33c2d2","modified":1531049011492},{"_id":"public/images/log3.png","hash":"92a4ece05ff9357073a9065c6c177418ea3bcef4","modified":1531049011492},{"_id":"public/images/model.jpg","hash":"f130664bfc0fe6919acf5344289ee086ced04848","modified":1531049011492},{"_id":"public/images/mygitbook.jpg","hash":"217a2e4ab7791be3bf15cdaa6f327f0cbcd89c82","modified":1531049011492},{"_id":"public/images/mysql1.png","hash":"27477ffd5318981782aa85a51e767c715b32fd47","modified":1531049011492},{"_id":"public/images/mysql2.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1531049011492},{"_id":"public/images/mysql8.png","hash":"a2a62d7e36f20d8b7261b4dc4b083eda60d53696","modified":1531049011492},{"_id":"public/images/mysql3.png","hash":"f468f72f0266a5668a1214bce1e5ddafe3cc448d","modified":1531049011493},{"_id":"public/images/newRepository.jpg","hash":"db4e148318613b840781b25b5bb2cb512344d3d7","modified":1531049011493},{"_id":"public/images/mysqlCode1.png","hash":"812d6c96b35ad48d91aaa7cee365b70480946bb9","modified":1531049011493},{"_id":"public/images/newmaven1.png","hash":"79d872989bc6e2215c171810ae87db93a12d1bc3","modified":1531049011493},{"_id":"public/images/newmaven2.png","hash":"a43fc7c9309e8960f5a87257e28b1e3190dc4a9e","modified":1531049011493},{"_id":"public/images/newmaven3.png","hash":"d38e3ebe323acdf55039141ca9c73a61e629481b","modified":1531049011493},{"_id":"public/images/paramForClass.png","hash":"c72e8b9802ae768e71b08ff4a4684e3874ed2161","modified":1531049011493},{"_id":"public/images/newmavenproject.png","hash":"59e100c2fcbf56d98a5f2b1538e0bf073c66771c","modified":1531049011493},{"_id":"public/images/nodejsdownload.jpg","hash":"8cc73c0300f74907ec8489975b4c09e977a40b13","modified":1531049011493},{"_id":"public/images/paramForClass2.png","hash":"9090cdb5b0c6347d1172378e3024ca153dff24a5","modified":1531049011493},{"_id":"public/images/paramjsontype.png","hash":"e84d658f1b83e3ad884977063ba35caa5f592cb6","modified":1531049011493},{"_id":"public/images/paramjsontype4.png","hash":"d701fd787b17b6b219c4b6378199051e759b7958","modified":1531049011493},{"_id":"public/images/paramjsontype5.png","hash":"7a426d87e5238efeb79791e12161b19b0f264b1f","modified":1531049011493},{"_id":"public/images/paramjsontype3.png","hash":"cffdeafd4124a63e5629060b414bde39a9a266b5","modified":1531049011493},{"_id":"public/images/paramjsontype6.png","hash":"82d3c429e21548faaed47fc2b14367d299527b30","modified":1531049011493},{"_id":"public/images/paramjsontype7.png","hash":"978434dc264d81c8b25ea08e1b79e7be6d9663ae","modified":1531049011493},{"_id":"public/images/pingIP.jpg","hash":"e4102d7a30ff1d02e20c4606eee14fb5158ed407","modified":1531049011494},{"_id":"public/images/poi1.png","hash":"9017543b6d8860f5e69a54977eac17e07ad19b78","modified":1531049011494},{"_id":"public/images/restinvokepost.png","hash":"a312eb84a44e01db5f3a14a4351e0f22866fd84b","modified":1531049011494},{"_id":"public/images/publishSuccess.jpg","hash":"4e8e91a979c5b613f7618cdcaa2f635e0538e17a","modified":1531049011494},{"_id":"public/images/restinvokepostresponse.png","hash":"1a0ab66784c8ec7047a61cdf9369f02c6262169c","modified":1531049011494},{"_id":"public/images/restpostheaderresult.png","hash":"e29c5a074cb4f3ee5f390b9a680c9e539c827595","modified":1531049011494},{"_id":"public/images/restpostheader.png","hash":"841338744d6deb2c06cb10ac3c625048208373ed","modified":1531049011494},{"_id":"public/images/rocketMQ2.png","hash":"dfebc65e8f739fde0cb2af456257cc2032c3e3c6","modified":1531049011494},{"_id":"public/images/rocketMQ3.png","hash":"580cdcb92a54694b6744dcfc29f100b2638dcfbb","modified":1531049011494},{"_id":"public/images/selectLayout.jpg","hash":"fd99d2dec31e5ed5531fd5d49b5b34776beea0a1","modified":1531049011494},{"_id":"public/images/spring1.jpg","hash":"346d581fae54ac19b5e88bf139c4d254a1b32aa3","modified":1531049011494},{"_id":"public/images/spring2.png","hash":"5ebeec5d037bfd85fe36e79eb12ab51d277d4302","modified":1531049011494},{"_id":"public/images/spring3.jpg","hash":"2d384f95b6a4df0799db2db67870b8ae5ba23a25","modified":1531049011495},{"_id":"public/images/succblog.jpg","hash":"c924ba65f4bcdd71ea3886cd70514ee48b006c43","modified":1531049011495},{"_id":"public/images/threaddump.png","hash":"0071791f45f624fdca4ec34c1718899b6b818843","modified":1531049011495},{"_id":"public/images/thy1.png","hash":"55f2f5be2cae7360a52eb9a5a2fbe2d2298a4530","modified":1531049011495},{"_id":"public/images/thy2.png","hash":"2b3a1042d70001a64bfbc324b6e087c6bdccd4df","modified":1531049011495},{"_id":"public/images/thy3.png","hash":"085aa49561fad7693829badc440fd596d78a8dbb","modified":1531049011495},{"_id":"public/images/thy4.png","hash":"cd4da596d6179c816efba8d7aa1b882965600e88","modified":1531049011495},{"_id":"public/images/thy6.png","hash":"af8f9114e4eabe2013a9c5109bd3f9cc3b431f64","modified":1531049011495},{"_id":"public/images/thy7.png","hash":"5109c4385eb10a0660d5e8c9af6bfdd35add3617","modified":1531049011495},{"_id":"public/images/thyemleafshow.png","hash":"d0f49ce9408c3cce91437483208f941b412804fd","modified":1531049011495},{"_id":"public/images/useGitPages.jpg","hash":"7dfb31e260cc4802f3ce9791c442693fb07c1fe0","modified":1531049011495},{"_id":"public/images/tianjiagitfile.jpg","hash":"56d6151f6b1e8d6552d5708ed969628ca822060d","modified":1531049011495},{"_id":"public/images/vSphere0.jpg","hash":"9f973edbaace7047d6615c9f91ddbd69d4ec98a0","modified":1531049011495},{"_id":"public/images/vSphere00.jpg","hash":"0835e6ff2f6babb963c87bd0d1f992277bfa2ce7","modified":1531049011495},{"_id":"public/images/vSphere01.jpg","hash":"90a1afdf9ce7f15ac38cc3b92d3ce5c18f5b26ad","modified":1531049011495},{"_id":"public/images/vSphere02.jpg","hash":"137f172fa7c7c2dc16648e7405d015fc7dd33206","modified":1531049011495},{"_id":"public/images/vSphere03.jpg","hash":"9fa77f62ec89afaa8b8ef2bacb784c5a32315ada","modified":1531049011496},{"_id":"public/images/vSphere04.jpg","hash":"cb1109a9f0b4061a318d2e1f367a42a05413b33b","modified":1531049011496},{"_id":"public/images/vSphere05.jpg","hash":"d5fbeda9ec4cb9682af424289dc2c7f84e33d054","modified":1531049011496},{"_id":"public/images/vSphere06.jpg","hash":"708ac251c2afdad8759a83d4f155662271ee8f47","modified":1531049011496},{"_id":"public/images/vSphere11.jpg","hash":"b0873d659259a7e228f078366b4e3222cdd15b93","modified":1531049011496},{"_id":"public/images/vSphere1.jpg","hash":"96a4f6ef1a837211a7ad42eed3b4325ed9bb372b","modified":1531049011496},{"_id":"public/images/vSphere2.jpg","hash":"7bb8fdba14b1e03d21519cc764be06b2c447970f","modified":1531049011496},{"_id":"public/images/vSphere4.jpg","hash":"aeadaa97120f8dc4b36812c6f420c00d417abed6","modified":1531049011496},{"_id":"public/images/vSphere5.jpg","hash":"fb5b42b3f074e1bd8adc98afd10669f064aeb16d","modified":1531049011496},{"_id":"public/images/vSphere7.jpg","hash":"b438a5184735169c2a025464ff5e8cbff9a12cf6","modified":1531049011496},{"_id":"public/images/vSphere9.jpg","hash":"75e4e4e651cc537fc7e8d99a6ef983bda8e8b3f1","modified":1531049011496},{"_id":"public/images/wangka.jpg","hash":"39a2a3bd7e4bb60cab1b39f0630fddecff0113ba","modified":1531049011496},{"_id":"public/images/vSphere8.jpg","hash":"eeadea0b726df446e97676dbc68b819ddbce1005","modified":1531049011497},{"_id":"public/images/wankapeizhi.jpg","hash":"8216b06ae346667837a938e17f0c5f6d034b7dfa","modified":1531049011497},{"_id":"public/images/webgl2.png","hash":"c34bf45c3d4a6c4a855289c0ee01f38fe77f36ab","modified":1531049011497},{"_id":"public/images/webgl3.png","hash":"cadec863b811135fbc7025b5b39d87207afdb04c","modified":1531049011497},{"_id":"public/images/yumingmanage.jpg","hash":"72b945bb05264898a82c274ac0e2c1be7b9840c8","modified":1531049011497},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531049011497},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1531049011497},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1531049011497},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1531049011497},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1531049011497},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1531049011497},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1531049011497},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1531049011497},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531049011497},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531049011497},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1531049011497},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531049011497},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1531049011497},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1531049011497},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1531049011498},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531049011498},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531049011498},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531049011498},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531049011498},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531049011498},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531049011498},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1531049011498},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1531049011498},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531049011498},{"_id":"public/images/3.jpg","hash":"ceafae6c44b27e16a104252c47eed3f77a49862f","modified":1531049012027},{"_id":"public/images/biaoge1.jpg","hash":"2c8a80180cdb8e1ad1b6391766c9ffd5262d559d","modified":1531049012027},{"_id":"public/images/biaoge6.jpg","hash":"6585a9060e5e2e78d0a990005ef96b2f427212fc","modified":1531049012031},{"_id":"public/images/bk.png","hash":"8b00baeef518091b6258fa31e660abe04c98a9f7","modified":1531049012031},{"_id":"public/images/ippeizhi.jpg","hash":"63c1cb0f1737b80b6c31b80067ec9f828c9f9549","modified":1531049012032},{"_id":"public/images/guanchazhe.jpg","hash":"fde8a22488e6f70dd57040acb674e1ab59307137","modified":1531049012032},{"_id":"public/images/javaStream2.png","hash":"1e106ac4e9dba1a969a1224a0946e97c3de3a9d3","modified":1531049012032},{"_id":"public/images/jiance.png","hash":"134df09d00103b0785d530a268cb839aa67f0eda","modified":1531049012032},{"_id":"public/images/jqwidgets.png","hash":"fbe64a40edf567eef733447ea48d19b8ad2bc8d4","modified":1531049012032},{"_id":"public/images/kuayu.jpg","hash":"cb4e30c0c2b0885cc9e4db2b6c3e697be877c550","modified":1531049012032},{"_id":"public/images/log0.jpg","hash":"7ccfd98d9605dad40b5db4e5bbda3e5ed57b8e51","modified":1531049012032},{"_id":"public/images/log2.png","hash":"5c81e92c408f639950a9610649833522fd0e47c9","modified":1531049012032},{"_id":"public/images/mycsdnblog.jpg","hash":"ad4f73fe7fa0cace00f47e0af59b20a5e3d88e98","modified":1531049012032},{"_id":"public/images/mysql10.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1531049012032},{"_id":"public/images/mysql4.png","hash":"0da5dcf1a60d2a703f0fbe0141aa2d5b902a0c37","modified":1531049012032},{"_id":"public/images/mysql6.png","hash":"744ed2148b8f8c2371d1e88bd845cf23068cf216","modified":1531049012032},{"_id":"public/images/mysql5.png","hash":"bcbdf5513c5715a69789dab6cf18890bb6d5125d","modified":1531049012032},{"_id":"public/images/mysql7.png","hash":"df72c1597111b502074fee572e8c674a5ed0e0ef","modified":1531049012033},{"_id":"public/images/mysql9.png","hash":"bc27f6c6aa32eb6f8a4c7e88465e18f6f3247810","modified":1531049012033},{"_id":"public/images/mysqlCode2.png","hash":"7840767464027409927b06a3ebb0e10ac039afed","modified":1531049012033},{"_id":"public/images/mysqlDownload.png","hash":"5ade523510bd3d8bd8b98710eadbca2b8d5eb62e","modified":1531049012033},{"_id":"public/images/restTemplate.png","hash":"8aadb0560c2d9b50fbd188b59f651f5a38e0cd43","modified":1531049012033},{"_id":"public/images/threadBlcked.png","hash":"e8109a529c69349cb343c5152860d50a1e0d87a7","modified":1531049012033},{"_id":"public/images/thymeleafFollow.png","hash":"40fd2d4a8830eb959741865128a4c6833cebbac7","modified":1531049012033},{"_id":"public/images/vSphere10.jpg","hash":"2deff4ad654a211f4f121a54ff36ec9af77d4642","modified":1531049012033},{"_id":"public/images/vSphere3.jpg","hash":"f0488e5a1dc4f0cae6172f3de0b209d57a70ef83","modified":1531049012033},{"_id":"public/images/vSphere6.jpg","hash":"fedd20137372dd88c82b5de096deb5b69db92084","modified":1531049012033},{"_id":"public/images/webgl1.png","hash":"a4b83bb6781323f905357a713fbf7f0fde86d233","modified":1531049012033},{"_id":"public/images/webgl4.png","hash":"18523b35ed0e6adf49011f51692fd260ee3f0c1c","modified":1531049012034},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1531049012034},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1531049012034},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1531049012034},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1531049012043},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1531049012043},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1531049012043},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1531049012043},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1531049012043},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1531049012043},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1531049012043},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1531049012044},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1531049012044},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1531049012044},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1531049012044},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1531049012044},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1531049012044},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1531049012044},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1531049012044},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1531049012044},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1531049012044},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1531049012044},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1531049012044},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531049012044},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1531049012044},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1531049012045},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1531049012045},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1531049012045},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1531049012045},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1531049012045},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1531049012045},{"_id":"public/css/main.css","hash":"fe4c4ea92f4b43396a205ab213280022a33f8fcb","modified":1531049012045},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1531049012045},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1531049012045},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1531049012045},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1531049012045},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1531049012045},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1531049012045},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1531049012046},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1531049012046},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1531049012046},{"_id":"public/images/fanghuoqiang4.png","hash":"cee3e885715a6accecb179948602b8f2c84500fd","modified":1531049012046},{"_id":"public/images/gitinit.jpg","hash":"8c972e2bbef3c8e321ed1853e2667ae1df552f27","modified":1531049012046},{"_id":"public/images/gitmerge1.png","hash":"5a7289c15913fd8ec43e33f00078a2615c4f3afa","modified":1531049012046},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1531049012047},{"_id":"public/images/biaoge4.jpg","hash":"c1f8d9343290d26a2a065abce3f1743d029f5151","modified":1531049012049},{"_id":"public/images/fanghuoqiang0.png","hash":"ea184d6f8dd1ea3c71baf0b12d49d539c46c494b","modified":1531049012049},{"_id":"public/images/fanghuoqiang7.jpg","hash":"907189432ad1775f34903b1ff9f3175c8c0c681a","modified":1531049012049},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1531049012293},{"_id":"public/images/rocketMQ1.png","hash":"529d5d0556f67b79a928a5e7ff5e0f44f7988698","modified":1531049012354},{"_id":"public/images/jerseyabort.png","hash":"47a3838e64208c20f0468809f8f429f8ef0312c9","modified":1531049012509},{"_id":"public/images/model2.png","hash":"210727be8bcdf7dccb8b488ab67da8350ff70a24","modified":1531049012545},{"_id":"public/images/webgl5.gif","hash":"770868122a321b61f009d318ab8698cea3ec9164","modified":1531049012546},{"_id":"public/images/webgl6.gif","hash":"8f1aa6a430592cb37da6f4c83f3e5c1da9ef8f48","modified":1531049012548}],"Category":[{"name":"java","_id":"cjjcr1phg000430tzpqapt2zr"},{"name":"github","_id":"cjjcr1phm000a30tzxce5obf6"},{"name":"IDE","_id":"cjjcr1phx000s30tzvbqpwlc7"},{"name":"UI","_id":"cjjcr1pi0000y30tz3jw49npz"},{"name":"javascript","_id":"cjjcr1pi4001530tzeiaq7k0f"},{"name":"nodeJs","_id":"cjjcr1pia001i30tztk6j6zv3"},{"name":"Linux","_id":"cjjcr1pid001o30tzk92yl19n"},{"name":"Mysql","_id":"cjjcr1pj1002w30tz1mtdcegj"},{"name":"Maven","_id":"cjjcr1pj4003530tz4w1z0n1x"},{"name":"Mybatis","_id":"cjjcr1pj8003e30tzdklub6ml"},{"name":"Redis","_id":"cjjcr1pjm004a30tzratfynyx"},{"name":"RocketMQ","_id":"cjjcr1pjv004y30tz9qkae4jv"},{"name":"vSphere","_id":"cjjcr1pjz005630tzdu3nrdnw"},{"name":"Tomcat","_id":"cjjcr1pk4005f30tz9sdy5dy1"},{"name":"git","_id":"cjjcr1pk8005n30tz469ldcf0"},{"name":"jersey","_id":"cjjcr1pke005v30tzlbe2z2p8"},{"name":"oracle","_id":"cjjcr1pkp006j30tzs5s8d9dv"},{"name":"spring","_id":"cjjcr1pkx007130tzpkrjb99s"},{"name":"thymeleaf","_id":"cjjcr1pl3007f30tzwlt92wvt"},{"name":"设计模式","_id":"cjjcr1plg008a30tzzxm2t3qt"},{"name":"Nginx","_id":"cjjcr1plp009130tz0qb7ungm"},{"name":"3D","_id":"cjjcr1plp009430tzx2n3rk2w"}],"Data":[],"Page":[{"title":"about","date":"2016-06-29T04:25:34.000Z","type":"about","_content":"# 个人信息\n\n - 马平升/男\n - Github：https://github.com/mapingsheng\n - 邮箱：mapingsheng1025@163.com\n - 微信 ：maps503981739\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-06-29 12:25:34\ntype: \"about\"\n---\n# 个人信息\n\n - 马平升/男\n - Github：https://github.com/mapingsheng\n - 邮箱：mapingsheng1025@163.com\n - 微信 ：maps503981739\n\n\n\n\n\n\n\n","updated":"2018-07-08T09:37:48.598Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjjcr1phc000130tzf4mxw2er","content":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>马平升/男</li>\n<li>Github：<a href=\"https://github.com/mapingsheng\" target=\"_blank\" rel=\"external\">https://github.com/mapingsheng</a></li>\n<li>邮箱：mapingsheng1025@163.com</li>\n<li>微信 ：maps503981739</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>马平升/男</li>\n<li>Github：<a href=\"https://github.com/mapingsheng\">https://github.com/mapingsheng</a></li>\n<li>邮箱：mapingsheng1025@163.com</li>\n<li>微信 ：maps503981739</li>\n</ul>\n"},{"title":"categories","date":"2016-06-29T04:19:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-29 12:19:52\ntype: \"categories\"\n---\n","updated":"2018-07-08T09:37:48.600Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjjcr1phe000330tzvdrxwp57","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-06-29T04:19:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-29 12:19:25\ntype: \"tags\"\n---\n","updated":"2018-07-08T09:37:49.016Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjcr1phi000730tzr7n5dhc5","content":"","excerpt":"","more":""}],"Post":[{"title":"X进制与Y进制转换","date":"2017-01-20T07:23:15.000Z","_content":"在上一篇文章中描述了二进制、八进制、十进制、十六进制的概念和表述方法，但是在计算机的世界中，只有0和1，所以除了二进制之外的其它X进制，计算机都是不能识别的；所以需要把他们转换为二进制之后才能在计算机上面运行\n\n<!--more-->\n\n**一、十进制转换二进制**\n\n*注:如果是10进制转换2进制的话，那么只需要拿着10进制除以2,直到商为1或者0，然后拿着商和余数组成的一串0和1数字串就是该十进制数的二进制值*\n\n1.  把5转换为2进制\n\n\t- 5/2 ------2-------1\n\t- 2/2 ------1-------0\n\t- 5除以2，除到最后商1，然后余数为0；所以5的二进制为:101;然后前面补0:00000101\n\n2.  把16转换为2进制\n\n\t- 16/2 ------8-------0\n\t- 8/2  ------4-------0\n\t- 4/2  ------2-------0\n\t- 2/2  ------1-------0\n\t- 16除以2，除到最后商为1，然后余数为0；所以16的二进制为:10000;然后前面补0:00010000\n   \n3.  把99转换为2进制\n \n\t- 99/2 ------49 -------1\n\t- 49/2 ------24 -------1\n\t- 24/2 ------12 -------0\n\t- 12/2 ------6  -------0\n\t- 6/2  ------3  -------0\n\t- 3/2  ------1  -------1\n\t- 99除以2，除到最后商为1，然后余数为1；所以99的二进制为:1100011;然后前面补0:01100011\n\n**二、二进制表示十进制**\n\n*注:如果是2制转换10进制的话，那么只需要把二进制串的每一位的值乘以2^索引值 [其所在串中的索引值(0开始从右向左)] 的和*\n\n1.  把**00000101**转换为10进制\n\t\n\t- 从右向左开始-----第0位-----1-----2^0 X 1-------1\n\t- 从右向左开始-----第1位-----0-----2^1 X 0-------0\n\t- 从右向左开始-----第2位-----1-----2^2 X 1-------4\n\t- 从右向左开始-----第3位-----0-----2^3 X 0-------0\n\t- 从右向左开始-----第4位-----0-----2^4 X 0-------0\n\t- 从右向左开始-----第5位-----0-----2^5 X 0-------0\n\t- 从右向左开始-----第6位-----0-----2^6 X 0-------0\n\t- 从右向左开始-----第7位-----0-----2^7 X 0-------0\n\t- 最终**00000101**二进制串对应的值为 1+0+4+0+0+0+0+0 = 5\n\t\n\n2.  把**00010000**转换为2进制\n\n\t- 从右向左开始-----第0位-----0-----2^0 X 0-------0\n\t- 从右向左开始-----第1位-----0-----2^1 X 0-------0\n\t- 从右向左开始-----第2位-----0-----2^2 X 0-------0\n\t- 从右向左开始-----第3位-----0-----2^3 X 0-------0\n\t- 从右向左开始-----第4位-----1-----2^4 X 1-------16\n\t- 从右向左开始-----第5位-----0-----2^5 X 0-------0\n\t- 从右向左开始-----第6位-----0-----2^6 X 0-------0\n\t- 从右向左开始-----第7位-----0-----2^7 X 0-------0\n\t- 最终**00010000**二进制串对应的值为 0+0+0+0+16+0+0+0 = 16\n\t\n\n3.  把**01100011**转换为2进制\n\t\n\t- 从右向左开始-----第0位-----1-----2^0 X 1-------1\n\t- 从右向左开始-----第1位-----1-----2^1 X 1-------2\n\t- 从右向左开始-----第2位-----0-----2^2 X 0-------0\n\t- 从右向左开始-----第3位-----0-----2^3 X 0-------0\n\t- 从右向左开始-----第4位-----0-----2^4 X 1-------0\n\t- 从右向左开始-----第5位-----1-----2^5 X 0-------32\n\t- 从右向左开始-----第6位-----1-----2^6 X 0-------64\n\t- 从右向左开始-----第7位-----0-----2^7 X 0-------0\n\t- 最终**00010000**二进制串对应的值为 1+2+0+0+0+32+64+0 = 99","source":"_posts/10进制与2进制转换.md","raw":"---\ntitle: X进制与Y进制转换\ndate: 2017-01-20 15:23:15\ncategories: java\ntags: 进制运算\n---\n在上一篇文章中描述了二进制、八进制、十进制、十六进制的概念和表述方法，但是在计算机的世界中，只有0和1，所以除了二进制之外的其它X进制，计算机都是不能识别的；所以需要把他们转换为二进制之后才能在计算机上面运行\n\n<!--more-->\n\n**一、十进制转换二进制**\n\n*注:如果是10进制转换2进制的话，那么只需要拿着10进制除以2,直到商为1或者0，然后拿着商和余数组成的一串0和1数字串就是该十进制数的二进制值*\n\n1.  把5转换为2进制\n\n\t- 5/2 ------2-------1\n\t- 2/2 ------1-------0\n\t- 5除以2，除到最后商1，然后余数为0；所以5的二进制为:101;然后前面补0:00000101\n\n2.  把16转换为2进制\n\n\t- 16/2 ------8-------0\n\t- 8/2  ------4-------0\n\t- 4/2  ------2-------0\n\t- 2/2  ------1-------0\n\t- 16除以2，除到最后商为1，然后余数为0；所以16的二进制为:10000;然后前面补0:00010000\n   \n3.  把99转换为2进制\n \n\t- 99/2 ------49 -------1\n\t- 49/2 ------24 -------1\n\t- 24/2 ------12 -------0\n\t- 12/2 ------6  -------0\n\t- 6/2  ------3  -------0\n\t- 3/2  ------1  -------1\n\t- 99除以2，除到最后商为1，然后余数为1；所以99的二进制为:1100011;然后前面补0:01100011\n\n**二、二进制表示十进制**\n\n*注:如果是2制转换10进制的话，那么只需要把二进制串的每一位的值乘以2^索引值 [其所在串中的索引值(0开始从右向左)] 的和*\n\n1.  把**00000101**转换为10进制\n\t\n\t- 从右向左开始-----第0位-----1-----2^0 X 1-------1\n\t- 从右向左开始-----第1位-----0-----2^1 X 0-------0\n\t- 从右向左开始-----第2位-----1-----2^2 X 1-------4\n\t- 从右向左开始-----第3位-----0-----2^3 X 0-------0\n\t- 从右向左开始-----第4位-----0-----2^4 X 0-------0\n\t- 从右向左开始-----第5位-----0-----2^5 X 0-------0\n\t- 从右向左开始-----第6位-----0-----2^6 X 0-------0\n\t- 从右向左开始-----第7位-----0-----2^7 X 0-------0\n\t- 最终**00000101**二进制串对应的值为 1+0+4+0+0+0+0+0 = 5\n\t\n\n2.  把**00010000**转换为2进制\n\n\t- 从右向左开始-----第0位-----0-----2^0 X 0-------0\n\t- 从右向左开始-----第1位-----0-----2^1 X 0-------0\n\t- 从右向左开始-----第2位-----0-----2^2 X 0-------0\n\t- 从右向左开始-----第3位-----0-----2^3 X 0-------0\n\t- 从右向左开始-----第4位-----1-----2^4 X 1-------16\n\t- 从右向左开始-----第5位-----0-----2^5 X 0-------0\n\t- 从右向左开始-----第6位-----0-----2^6 X 0-------0\n\t- 从右向左开始-----第7位-----0-----2^7 X 0-------0\n\t- 最终**00010000**二进制串对应的值为 0+0+0+0+16+0+0+0 = 16\n\t\n\n3.  把**01100011**转换为2进制\n\t\n\t- 从右向左开始-----第0位-----1-----2^0 X 1-------1\n\t- 从右向左开始-----第1位-----1-----2^1 X 1-------2\n\t- 从右向左开始-----第2位-----0-----2^2 X 0-------0\n\t- 从右向左开始-----第3位-----0-----2^3 X 0-------0\n\t- 从右向左开始-----第4位-----0-----2^4 X 1-------0\n\t- 从右向左开始-----第5位-----1-----2^5 X 0-------32\n\t- 从右向左开始-----第6位-----1-----2^6 X 0-------64\n\t- 从右向左开始-----第7位-----0-----2^7 X 0-------0\n\t- 最终**00010000**二进制串对应的值为 1+2+0+0+0+32+64+0 = 99","slug":"10进制与2进制转换","published":1,"updated":"2018-07-08T09:37:48.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1ph9000030tzatekpz7j","content":"<p>在上一篇文章中描述了二进制、八进制、十进制、十六进制的概念和表述方法，但是在计算机的世界中，只有0和1，所以除了二进制之外的其它X进制，计算机都是不能识别的；所以需要把他们转换为二进制之后才能在计算机上面运行</p>\n<a id=\"more\"></a>\n<p><strong>一、十进制转换二进制</strong></p>\n<p><em>注:如果是10进制转换2进制的话，那么只需要拿着10进制除以2,直到商为1或者0，然后拿着商和余数组成的一串0和1数字串就是该十进制数的二进制值</em></p>\n<ol>\n<li><p>把5转换为2进制</p>\n<ul>\n<li>5/2 ——2——-1</li>\n<li>2/2 ——1——-0</li>\n<li>5除以2，除到最后商1，然后余数为0；所以5的二进制为:101;然后前面补0:00000101</li>\n</ul>\n</li>\n<li><p>把16转换为2进制</p>\n<ul>\n<li>16/2 ——8——-0</li>\n<li>8/2  ——4——-0</li>\n<li>4/2  ——2——-0</li>\n<li>2/2  ——1——-0</li>\n<li>16除以2，除到最后商为1，然后余数为0；所以16的二进制为:10000;然后前面补0:00010000</li>\n</ul>\n</li>\n<li><p>把99转换为2进制</p>\n<ul>\n<li>99/2 ——49 ——-1</li>\n<li>49/2 ——24 ——-1</li>\n<li>24/2 ——12 ——-0</li>\n<li>12/2 ——6  ——-0</li>\n<li>6/2  ——3  ——-0</li>\n<li>3/2  ——1  ——-1</li>\n<li>99除以2，除到最后商为1，然后余数为1；所以99的二进制为:1100011;然后前面补0:01100011</li>\n</ul>\n</li>\n</ol>\n<p><strong>二、二进制表示十进制</strong></p>\n<p><em>注:如果是2制转换10进制的话，那么只需要把二进制串的每一位的值乘以2^索引值 [其所在串中的索引值(0开始从右向左)] 的和</em></p>\n<ol>\n<li><p>把<strong>00000101</strong>转换为10进制</p>\n<ul>\n<li>从右向左开始—–第0位—–1—–2^0 X 1——-1</li>\n<li>从右向左开始—–第1位—–0—–2^1 X 0——-0</li>\n<li>从右向左开始—–第2位—–1—–2^2 X 1——-4</li>\n<li>从右向左开始—–第3位—–0—–2^3 X 0——-0</li>\n<li>从右向左开始—–第4位—–0—–2^4 X 0——-0</li>\n<li>从右向左开始—–第5位—–0—–2^5 X 0——-0</li>\n<li>从右向左开始—–第6位—–0—–2^6 X 0——-0</li>\n<li>从右向左开始—–第7位—–0—–2^7 X 0——-0</li>\n<li>最终<strong>00000101</strong>二进制串对应的值为 1+0+4+0+0+0+0+0 = 5</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>把<strong>00010000</strong>转换为2进制</p>\n<ul>\n<li>从右向左开始—–第0位—–0—–2^0 X 0——-0</li>\n<li>从右向左开始—–第1位—–0—–2^1 X 0——-0</li>\n<li>从右向左开始—–第2位—–0—–2^2 X 0——-0</li>\n<li>从右向左开始—–第3位—–0—–2^3 X 0——-0</li>\n<li>从右向左开始—–第4位—–1—–2^4 X 1——-16</li>\n<li>从右向左开始—–第5位—–0—–2^5 X 0——-0</li>\n<li>从右向左开始—–第6位—–0—–2^6 X 0——-0</li>\n<li>从右向左开始—–第7位—–0—–2^7 X 0——-0</li>\n<li>最终<strong>00010000</strong>二进制串对应的值为 0+0+0+0+16+0+0+0 = 16</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>把<strong>01100011</strong>转换为2进制</p>\n<ul>\n<li>从右向左开始—–第0位—–1—–2^0 X 1——-1</li>\n<li>从右向左开始—–第1位—–1—–2^1 X 1——-2</li>\n<li>从右向左开始—–第2位—–0—–2^2 X 0——-0</li>\n<li>从右向左开始—–第3位—–0—–2^3 X 0——-0</li>\n<li>从右向左开始—–第4位—–0—–2^4 X 1——-0</li>\n<li>从右向左开始—–第5位—–1—–2^5 X 0——-32</li>\n<li>从右向左开始—–第6位—–1—–2^6 X 0——-64</li>\n<li>从右向左开始—–第7位—–0—–2^7 X 0——-0</li>\n<li>最终<strong>00010000</strong>二进制串对应的值为 1+2+0+0+0+32+64+0 = 99</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p>在上一篇文章中描述了二进制、八进制、十进制、十六进制的概念和表述方法，但是在计算机的世界中，只有0和1，所以除了二进制之外的其它X进制，计算机都是不能识别的；所以需要把他们转换为二进制之后才能在计算机上面运行</p>","more":"<p><strong>一、十进制转换二进制</strong></p>\n<p><em>注:如果是10进制转换2进制的话，那么只需要拿着10进制除以2,直到商为1或者0，然后拿着商和余数组成的一串0和1数字串就是该十进制数的二进制值</em></p>\n<ol>\n<li><p>把5转换为2进制</p>\n<ul>\n<li>5/2 ——2——-1</li>\n<li>2/2 ——1——-0</li>\n<li>5除以2，除到最后商1，然后余数为0；所以5的二进制为:101;然后前面补0:00000101</li>\n</ul>\n</li>\n<li><p>把16转换为2进制</p>\n<ul>\n<li>16/2 ——8——-0</li>\n<li>8/2  ——4——-0</li>\n<li>4/2  ——2——-0</li>\n<li>2/2  ——1——-0</li>\n<li>16除以2，除到最后商为1，然后余数为0；所以16的二进制为:10000;然后前面补0:00010000</li>\n</ul>\n</li>\n<li><p>把99转换为2进制</p>\n<ul>\n<li>99/2 ——49 ——-1</li>\n<li>49/2 ——24 ——-1</li>\n<li>24/2 ——12 ——-0</li>\n<li>12/2 ——6  ——-0</li>\n<li>6/2  ——3  ——-0</li>\n<li>3/2  ——1  ——-1</li>\n<li>99除以2，除到最后商为1，然后余数为1；所以99的二进制为:1100011;然后前面补0:01100011</li>\n</ul>\n</li>\n</ol>\n<p><strong>二、二进制表示十进制</strong></p>\n<p><em>注:如果是2制转换10进制的话，那么只需要把二进制串的每一位的值乘以2^索引值 [其所在串中的索引值(0开始从右向左)] 的和</em></p>\n<ol>\n<li><p>把<strong>00000101</strong>转换为10进制</p>\n<ul>\n<li>从右向左开始—–第0位—–1—–2^0 X 1——-1</li>\n<li>从右向左开始—–第1位—–0—–2^1 X 0——-0</li>\n<li>从右向左开始—–第2位—–1—–2^2 X 1——-4</li>\n<li>从右向左开始—–第3位—–0—–2^3 X 0——-0</li>\n<li>从右向左开始—–第4位—–0—–2^4 X 0——-0</li>\n<li>从右向左开始—–第5位—–0—–2^5 X 0——-0</li>\n<li>从右向左开始—–第6位—–0—–2^6 X 0——-0</li>\n<li>从右向左开始—–第7位—–0—–2^7 X 0——-0</li>\n<li>最终<strong>00000101</strong>二进制串对应的值为 1+0+4+0+0+0+0+0 = 5</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>把<strong>00010000</strong>转换为2进制</p>\n<ul>\n<li>从右向左开始—–第0位—–0—–2^0 X 0——-0</li>\n<li>从右向左开始—–第1位—–0—–2^1 X 0——-0</li>\n<li>从右向左开始—–第2位—–0—–2^2 X 0——-0</li>\n<li>从右向左开始—–第3位—–0—–2^3 X 0——-0</li>\n<li>从右向左开始—–第4位—–1—–2^4 X 1——-16</li>\n<li>从右向左开始—–第5位—–0—–2^5 X 0——-0</li>\n<li>从右向左开始—–第6位—–0—–2^6 X 0——-0</li>\n<li>从右向左开始—–第7位—–0—–2^7 X 0——-0</li>\n<li>最终<strong>00010000</strong>二进制串对应的值为 0+0+0+0+16+0+0+0 = 16</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>把<strong>01100011</strong>转换为2进制</p>\n<ul>\n<li>从右向左开始—–第0位—–1—–2^0 X 1——-1</li>\n<li>从右向左开始—–第1位—–1—–2^1 X 1——-2</li>\n<li>从右向左开始—–第2位—–0—–2^2 X 0——-0</li>\n<li>从右向左开始—–第3位—–0—–2^3 X 0——-0</li>\n<li>从右向左开始—–第4位—–0—–2^4 X 1——-0</li>\n<li>从右向左开始—–第5位—–1—–2^5 X 0——-32</li>\n<li>从右向左开始—–第6位—–1—–2^6 X 0——-64</li>\n<li>从右向左开始—–第7位—–0—–2^7 X 0——-0</li>\n<li>最终<strong>00010000</strong>二进制串对应的值为 1+2+0+0+0+32+64+0 = 99</li>\n</ul>\n</li>\n</ol>"},{"title":"为github pages绑定独立域名","date":"2016-06-28T09:47:28.000Z","_content":"> 如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！\n\n**<p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！**\n\n\n**<p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！**\n\t\n- 登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名\n>![Alt text](http://soujava.com/images/yumingmanage.jpg)\n<p>![Alt text](http://soujava.com/images/ippeizhi.jpg)\n<p><code>下面讲解此步骤配置的ip如何获取\n\n**<p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址**\n<p>![Alt text](http://soujava.com/images/getIp.jpg)\n\n**<p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！**\n<p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！\n","source":"_posts/2016-06-28-为github-pages绑定独立域名.md","raw":"---\ntitle: 为github pages绑定独立域名\ndate: 2016-06-28 17:47:28\ncategories: github\ntags: github\n---\n> 如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！\n\n**<p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！**\n\n\n**<p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！**\n\t\n- 登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名\n>![Alt text](http://soujava.com/images/yumingmanage.jpg)\n<p>![Alt text](http://soujava.com/images/ippeizhi.jpg)\n<p><code>下面讲解此步骤配置的ip如何获取\n\n**<p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址**\n<p>![Alt text](http://soujava.com/images/getIp.jpg)\n\n**<p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！**\n<p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！\n","slug":"2016-06-28-为github-pages绑定独立域名","published":1,"updated":"2018-07-08T09:37:48.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phd000230tzfhqflpfc","content":"<blockquote>\n<p>如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！</p>\n</blockquote>\n<p><strong><p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！</p></strong></p>\n<p><strong><p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！</p></strong></p>\n<ul>\n<li>登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名<blockquote>\n<p><img src=\"http://soujava.com/images/yumingmanage.jpg\" alt=\"Alt text\"><br></p><p><img src=\"http://soujava.com/images/ippeizhi.jpg\" alt=\"Alt text\"><br></p><p><code>下面讲解此步骤配置的ip如何获取</code></p>\n</blockquote>\n</li>\n</ul>\n<p><strong><p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址</p></strong></p>\n<p></p><p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\"></p>\n<p><strong><p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！</p></strong></p>\n<p></p><p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！</code></p>\n","excerpt":"","more":"<blockquote>\n<p>如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！</p>\n</blockquote>\n<p><strong><p>1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是<a href=\"http://www.soujava.com\">soujava</a>；个人感觉这个域名还算可以吧！个人是搞java开发的！</strong></p>\n<p><strong><p>2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！</strong></p>\n<ul>\n<li>登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名<blockquote>\n<p><img src=\"http://soujava.com/images/yumingmanage.jpg\" alt=\"Alt text\"><br><p><img src=\"http://soujava.com/images/ippeizhi.jpg\" alt=\"Alt text\"><br><p><code>下面讲解此步骤配置的ip如何获取</p>\n</blockquote>\n</li>\n</ul>\n<p><strong><p>3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址</strong></p>\n<p><p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\"></p>\n<p><strong><p>4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！</strong></p>\n<p><p><code>有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！</p>\n"},{"title":"通过github pages生成网站","date":"2016-06-28T09:43:00.000Z","_content":"**1 什么是github pages**\n>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\ngithub Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等\n\n**2 新建仓库**\n>![Alt text](http://soujava.com/images/newRepository.jpg)\n\n**3 输入仓库信息**\n>![Alt text](http://soujava.com/images/inputInfo.jpg \"输入仓库信息\")\n\n**4 添加成功后，点击“settings”按钮**\n>![Alt text](http://soujava.com/images/createSucc.jpg \"仓库添加成功\")\n\n**5 使用Github Pages生成页面**\n>![Alt text](http://soujava.com/images/useGitPages.jpg \"使用gitHub pages生服务\")\n\n**6 点击选择博客布局按钮进入选择布局界面**\n>![Alt text](http://soujava.com/images/selectLayout.jpg \"选择样式布局\") \n\n**7 切换布局选择操作,最后点击“publish page”按钮**\n>![Alt text](http://soujava.com/images/succblog.jpg \"切换布局选择操作\")\n\n**8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问**\n>![Alt text](http://soujava.com/images/publishSuccess.jpg \"发布成功\")\n\n**9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示**\n>![Alt text](http://soujava.com/images/fagnwen.jpg \"点击访问url地址访问博客\")\n<p>点击上图中红框中的访问url地址访问博客\n\n**10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址**\n>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行\n>![Alt text](http://soujava.com/images/tianjiagitfile.jpg)\n>\n>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME\n>![Alt text](http://soujava.com/images/gitaddFile.jpg)\n>\n>![Alt text](http://soujava.com/images/cname.jpg)","source":"_posts/2016-06-28-通过github-pages生成网站.md","raw":"---\ntitle: 通过github pages生成网站\ndate: 2016-06-28 17:43:00\ncategories:\ntags:\n---\n**1 什么是github pages**\n>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\ngithub Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等\n\n**2 新建仓库**\n>![Alt text](http://soujava.com/images/newRepository.jpg)\n\n**3 输入仓库信息**\n>![Alt text](http://soujava.com/images/inputInfo.jpg \"输入仓库信息\")\n\n**4 添加成功后，点击“settings”按钮**\n>![Alt text](http://soujava.com/images/createSucc.jpg \"仓库添加成功\")\n\n**5 使用Github Pages生成页面**\n>![Alt text](http://soujava.com/images/useGitPages.jpg \"使用gitHub pages生服务\")\n\n**6 点击选择博客布局按钮进入选择布局界面**\n>![Alt text](http://soujava.com/images/selectLayout.jpg \"选择样式布局\") \n\n**7 切换布局选择操作,最后点击“publish page”按钮**\n>![Alt text](http://soujava.com/images/succblog.jpg \"切换布局选择操作\")\n\n**8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问**\n>![Alt text](http://soujava.com/images/publishSuccess.jpg \"发布成功\")\n\n**9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示**\n>![Alt text](http://soujava.com/images/fagnwen.jpg \"点击访问url地址访问博客\")\n<p>点击上图中红框中的访问url地址访问博客\n\n**10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址**\n>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行\n>![Alt text](http://soujava.com/images/tianjiagitfile.jpg)\n>\n>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME\n>![Alt text](http://soujava.com/images/gitaddFile.jpg)\n>\n>![Alt text](http://soujava.com/images/cname.jpg)","slug":"2016-06-28-通过github-pages生成网站","published":1,"updated":"2018-07-08T09:37:48.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phi000630tzxaneeh1o","content":"<p><strong>1 什么是github pages</strong></p>\n<blockquote>\n<p>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>github Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等</p>\n</blockquote>\n<p><strong>2 新建仓库</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/newRepository.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n<p><strong>3 输入仓库信息</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/inputInfo.jpg\" alt=\"Alt text\" title=\"输入仓库信息\"></p>\n</blockquote>\n<p><strong>4 添加成功后，点击“settings”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/createSucc.jpg\" alt=\"Alt text\" title=\"仓库添加成功\"></p>\n</blockquote>\n<p><strong>5 使用Github Pages生成页面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/useGitPages.jpg\" alt=\"Alt text\" title=\"使用gitHub pages生服务\"></p>\n</blockquote>\n<p><strong>6 点击选择博客布局按钮进入选择布局界面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/selectLayout.jpg\" alt=\"Alt text\" title=\"选择样式布局\"> </p>\n</blockquote>\n<p><strong>7 切换布局选择操作,最后点击“publish page”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/succblog.jpg\" alt=\"Alt text\" title=\"切换布局选择操作\"></p>\n</blockquote>\n<p><strong>8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/publishSuccess.jpg\" alt=\"Alt text\" title=\"发布成功\"></p>\n</blockquote>\n<p><strong>9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/fagnwen.jpg\" alt=\"Alt text\" title=\"点击访问url地址访问博客\"></p>\n<p></p><p>点击上图中红框中的访问url地址访问博客</p>\n</blockquote>\n<p><strong>10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址</strong></p>\n<blockquote>\n<p>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行<br><img src=\"http://soujava.com/images/tianjiagitfile.jpg\" alt=\"Alt text\"></p>\n<p>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME<br><img src=\"http://soujava.com/images/gitaddFile.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/cname.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n","excerpt":"","more":"<p><strong>1 什么是github pages</strong></p>\n<blockquote>\n<p>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>github Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等</p>\n</blockquote>\n<p><strong>2 新建仓库</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/newRepository.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n<p><strong>3 输入仓库信息</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/inputInfo.jpg\" alt=\"Alt text\" title=\"输入仓库信息\"></p>\n</blockquote>\n<p><strong>4 添加成功后，点击“settings”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/createSucc.jpg\" alt=\"Alt text\" title=\"仓库添加成功\"></p>\n</blockquote>\n<p><strong>5 使用Github Pages生成页面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/useGitPages.jpg\" alt=\"Alt text\" title=\"使用gitHub pages生服务\"></p>\n</blockquote>\n<p><strong>6 点击选择博客布局按钮进入选择布局界面</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/selectLayout.jpg\" alt=\"Alt text\" title=\"选择样式布局\"> </p>\n</blockquote>\n<p><strong>7 切换布局选择操作,最后点击“publish page”按钮</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/succblog.jpg\" alt=\"Alt text\" title=\"切换布局选择操作\"></p>\n</blockquote>\n<p><strong>8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/publishSuccess.jpg\" alt=\"Alt text\" title=\"发布成功\"></p>\n</blockquote>\n<p><strong>9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示</strong></p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/fagnwen.jpg\" alt=\"Alt text\" title=\"点击访问url地址访问博客\"></p>\n<p><p>点击上图中红框中的访问url地址访问博客</p>\n</blockquote>\n<p><strong>10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址</strong></p>\n<blockquote>\n<p>1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行<br><img src=\"http://soujava.com/images/tianjiagitfile.jpg\" alt=\"Alt text\"></p>\n<p>2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME<br><img src=\"http://soujava.com/images/gitaddFile.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/cname.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n"},{"title":"通过gitBook让网站更实用","date":"2016-06-28T09:48:54.000Z","_content":"1. 前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);\n\t>csdn上面的博客查看方式\n\t>![Alt text](http://soujava.com/images/mycsdnblog.jpg)\n\t<p>采用gitBook构建的博客\n\t<p>![Alt text](http://soujava.com/images/mygitbook.jpg)\n\t<p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)\n\t<p>\n2. gitBook是什么\n\t<p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。\n\tGitBook支持输出多种文档格式：\n\t·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；\n\t·PDF：需要安装gitbook-pdf依赖；\n\t·eBook：需要安装ebook-convert；\n\t·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；\n\t·JSON：一般用于电子书的调试或元数据提取。\n\t使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md\n\t<p>官网:https://www.gitbook.com\n\t<p>\n3. 如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：\n\t>1)、下载、安装node.js;官网：http://nodejs.cn/\n\t>\n\t>![Alt text](http://soujava.com/images/nodejsdownload.jpg)\n\t>\n\t>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！\n\t>\n\t>2)、通过window命令安装gitbook服务；\n\t><code>npm install gitbook -g\n\t>\n\t>![Alt text](http://soujava.com/images/1.jpg)\n\t>\n\t>3)、通过window命令安装gitbook命令服务（gitbook-cli）；\n\t><code>npm install gitbook-cli -g\n\t>\n\t>4)、下载安装markdown；\n\t>下载地址：http://markdownpad.com/download.html；\n\t>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标\n\t>\n\t>![Alt text](http://soujava.com/images/markdown.jpg)\n\t>\n\t>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：\n\t>\n\t>![Alt text](http://soujava.com/images/3.jpg)\n\t>\n\t>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,\n\t>SUMMARY.md文件内容如图\n\t<p>![Alt text](http://soujava.com/images/gitinit.jpg)\n\n\t>运行gitbook init命令后生成的目录结构如图\n\t>\n\t<p>![Alt text](http://soujava.com/images/gitinitfile.jpg)\n\t>\n\t>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;\n\t>\n\t>![Alt text](http://soujava.com/images/gitbuildbook.jpg)\n\t>\n\t>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；\n\t>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！\n3. 总结\n\t>安装node.js、gitbook、markdown\n\t>\n\t>通过gitbook init命令初始化目录结构\n\t>\n\t>通过markdown工具编辑目录结构文章对应的.md文件\n\t>\n\t>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)\n\t>\n\t>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面","source":"_posts/2016-06-28-通过gitBook让网站更实用.md","raw":"---\ntitle: 通过gitBook让网站更实用\ndate: 2016-06-28 17:48:54\ncategories: github\ntags: github\n---\n1. 前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);\n\t>csdn上面的博客查看方式\n\t>![Alt text](http://soujava.com/images/mycsdnblog.jpg)\n\t<p>采用gitBook构建的博客\n\t<p>![Alt text](http://soujava.com/images/mygitbook.jpg)\n\t<p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)\n\t<p>\n2. gitBook是什么\n\t<p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。\n\tGitBook支持输出多种文档格式：\n\t·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；\n\t·PDF：需要安装gitbook-pdf依赖；\n\t·eBook：需要安装ebook-convert；\n\t·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；\n\t·JSON：一般用于电子书的调试或元数据提取。\n\t使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md\n\t<p>官网:https://www.gitbook.com\n\t<p>\n3. 如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：\n\t>1)、下载、安装node.js;官网：http://nodejs.cn/\n\t>\n\t>![Alt text](http://soujava.com/images/nodejsdownload.jpg)\n\t>\n\t>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！\n\t>\n\t>2)、通过window命令安装gitbook服务；\n\t><code>npm install gitbook -g\n\t>\n\t>![Alt text](http://soujava.com/images/1.jpg)\n\t>\n\t>3)、通过window命令安装gitbook命令服务（gitbook-cli）；\n\t><code>npm install gitbook-cli -g\n\t>\n\t>4)、下载安装markdown；\n\t>下载地址：http://markdownpad.com/download.html；\n\t>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标\n\t>\n\t>![Alt text](http://soujava.com/images/markdown.jpg)\n\t>\n\t>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：\n\t>\n\t>![Alt text](http://soujava.com/images/3.jpg)\n\t>\n\t>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,\n\t>SUMMARY.md文件内容如图\n\t<p>![Alt text](http://soujava.com/images/gitinit.jpg)\n\n\t>运行gitbook init命令后生成的目录结构如图\n\t>\n\t<p>![Alt text](http://soujava.com/images/gitinitfile.jpg)\n\t>\n\t>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;\n\t>\n\t>![Alt text](http://soujava.com/images/gitbuildbook.jpg)\n\t>\n\t>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；\n\t>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！\n3. 总结\n\t>安装node.js、gitbook、markdown\n\t>\n\t>通过gitbook init命令初始化目录结构\n\t>\n\t>通过markdown工具编辑目录结构文章对应的.md文件\n\t>\n\t>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)\n\t>\n\t>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面","slug":"2016-06-28-通过gitBook让网站更实用","published":1,"updated":"2018-07-08T09:37:48.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phj000830tz1din40xu","content":"<ol>\n<li>前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);<blockquote>\n<p>csdn上面的博客查看方式<br><img src=\"http://soujava.com/images/mycsdnblog.jpg\" alt=\"Alt text\"><br> </p><p>采用gitBook构建的博客<br> </p><p><img src=\"http://soujava.com/images/mygitbook.jpg\" alt=\"Alt text\"><br> </p><p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)</p>\n <p></p></blockquote>\n</li>\n<li>gitBook是什么<br> <p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br> GitBook支持输出多种文档格式：<br> ·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；<br> ·PDF：需要安装gitbook-pdf依赖；<br> ·eBook：需要安装ebook-convert；<br> ·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；<br> ·JSON：一般用于电子书的调试或元数据提取。<br> 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md<br> </p><p>官网:<a href=\"https://www.gitbook.com\" target=\"_blank\" rel=\"external\">https://www.gitbook.com</a> </p><p></p></li>\n<li><p>如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：</p>\n<blockquote>\n<p>1)、下载、安装node.js;官网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">http://nodejs.cn/</a></p>\n<p><img src=\"http://soujava.com/images/nodejsdownload.jpg\" alt=\"Alt text\"></p>\n<p>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！</p>\n<p>2)、通过window命令安装gitbook服务；<br><code>npm install gitbook -g</code></p>\n<p><img src=\"http://soujava.com/images/1.jpg\" alt=\"Alt text\"></p>\n<p>3)、通过window命令安装gitbook命令服务（gitbook-cli）；<br><code>npm install gitbook-cli -g</code></p>\n<p>4)、下载安装markdown；<br>下载地址：<a href=\"http://markdownpad.com/download.html；\" target=\"_blank\" rel=\"external\">http://markdownpad.com/download.html；</a><br>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标</p>\n<p><img src=\"http://soujava.com/images/markdown.jpg\" alt=\"Alt text\"></p>\n<p>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：</p>\n<p><img src=\"http://soujava.com/images/3.jpg\" alt=\"Alt text\"></p>\n<p>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,<br>SUMMARY.md文件内容如图<br> </p><p><img src=\"http://soujava.com/images/gitinit.jpg\" alt=\"Alt text\"></p>\n<p>运行gitbook init命令后生成的目录结构如图</p>\n<p> </p><p><img src=\"http://soujava.com/images/gitinitfile.jpg\" alt=\"Alt text\"></p>\n<p>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;</p>\n<p><img src=\"http://soujava.com/images/gitbuildbook.jpg\" alt=\"Alt text\"></p>\n<p>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；<br>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！</p>\n</blockquote>\n</li>\n<li>总结<blockquote>\n<p>安装node.js、gitbook、markdown</p>\n<p>通过gitbook init命令初始化目录结构</p>\n<p>通过markdown工具编辑目录结构文章对应的.md文件</p>\n<p>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)</p>\n<p>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面</p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);<blockquote>\n<p>csdn上面的博客查看方式<br><img src=\"http://soujava.com/images/mycsdnblog.jpg\" alt=\"Alt text\"><br> <p>采用gitBook构建的博客<br> <p><img src=\"http://soujava.com/images/mygitbook.jpg\" alt=\"Alt text\"><br> <p>比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)</p>\n <p></blockquote>\n</li>\n<li>gitBook是什么<br> <p>GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br> GitBook支持输出多种文档格式：<br> ·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；<br> ·PDF：需要安装gitbook-pdf依赖；<br> ·eBook：需要安装ebook-convert；<br> ·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；<br> ·JSON：一般用于电子书的调试或元数据提取。<br> 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md<br> <p>官网:<a href=\"https://www.gitbook.com\">https://www.gitbook.com</a> <p></li>\n<li><p>如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：</p>\n<blockquote>\n<p>1)、下载、安装node.js;官网：<a href=\"http://nodejs.cn/\">http://nodejs.cn/</a></p>\n<p><img src=\"http://soujava.com/images/nodejsdownload.jpg\" alt=\"Alt text\"></p>\n<p>下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！</p>\n<p>2)、通过window命令安装gitbook服务；<br><code>npm install gitbook -g</p>\n<p><img src=\"http://soujava.com/images/1.jpg\" alt=\"Alt text\"></p>\n<p>3)、通过window命令安装gitbook命令服务（gitbook-cli）；<br><code>npm install gitbook-cli -g</p>\n<p>4)、下载安装markdown；<br>下载地址：<a href=\"http://markdownpad.com/download.html；\">http://markdownpad.com/download.html；</a><br>下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标</p>\n<p><img src=\"http://soujava.com/images/markdown.jpg\" alt=\"Alt text\"></p>\n<p>5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：</p>\n<p><img src=\"http://soujava.com/images/3.jpg\" alt=\"Alt text\"></p>\n<p>6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,<br>SUMMARY.md文件内容如图<br> <p><img src=\"http://soujava.com/images/gitinit.jpg\" alt=\"Alt text\"></p>\n<p>运行gitbook init命令后生成的目录结构如图</p>\n<p> <p><img src=\"http://soujava.com/images/gitinitfile.jpg\" alt=\"Alt text\"></p>\n<p>7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;</p>\n<p><img src=\"http://soujava.com/images/gitbuildbook.jpg\" alt=\"Alt text\"></p>\n<p>8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；<br>9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！</p>\n</blockquote>\n</li>\n<li>总结<blockquote>\n<p>安装node.js、gitbook、markdown</p>\n<p>通过gitbook init命令初始化目录结构</p>\n<p>通过markdown工具编辑目录结构文章对应的.md文件</p>\n<p>通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)</p>\n<p>通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"添加KEY后，每次push时让输入密码","date":"2016-06-28T10:03:13.000Z","_content":"\n我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中\n\t\n1. 当从github上面clone项目时，还老是提示输入密码，如下图：\n\t><code>Enter passphrase for key '/c/Users/maps/.ssh/id_rsa':\n\t>\n\t>![Alt text](http://soujava.com/images/getIp.jpg \"git push\")\n2. 按照先后顺序执行以下两条命令：\n\t><code>$ ssh-agent bash\n\t>\n\t><code>$ ssh-add /c/Users/maps/.ssh/id_rsa\n\n\t>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径\n3. 通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功\n\t>![Alt text](http://soujava.com/images/gitTestconnsucc.jpg)\n4. 最后来一个完整的图片\n\t>![Alt text](http://soujava.com/images/gitpushinputpasssucc.jpg)","source":"_posts/2016-06-28-添加KEY后，每次push时让输入密码.md","raw":"---\ntitle: 添加KEY后，每次push时让输入密码\ndate: 2016-06-28 18:03:13\ncategories: github\ntags: github\n---\n\n我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中\n\t\n1. 当从github上面clone项目时，还老是提示输入密码，如下图：\n\t><code>Enter passphrase for key '/c/Users/maps/.ssh/id_rsa':\n\t>\n\t>![Alt text](http://soujava.com/images/getIp.jpg \"git push\")\n2. 按照先后顺序执行以下两条命令：\n\t><code>$ ssh-agent bash\n\t>\n\t><code>$ ssh-add /c/Users/maps/.ssh/id_rsa\n\n\t>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径\n3. 通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功\n\t>![Alt text](http://soujava.com/images/gitTestconnsucc.jpg)\n4. 最后来一个完整的图片\n\t>![Alt text](http://soujava.com/images/gitpushinputpasssucc.jpg)","slug":"2016-06-28-添加KEY后，每次push时让输入密码","published":1,"updated":"2018-07-08T09:37:48.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phk000930tzlor1tniu","content":"<p>我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中</p>\n<ol>\n<li>当从github上面clone项目时，还老是提示输入密码，如下图：<blockquote>\n<p><code>Enter passphrase for key ‘/c/Users/maps/.ssh/id_rsa’:</code></p>\n<p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n</blockquote>\n</li>\n<li><p>按照先后顺序执行以下两条命令：</p>\n<blockquote>\n<p><code>$ ssh-agent bash</code></p>\n<p><code>$ ssh-add /c/Users/maps/.ssh/id_rsa</code></p>\n<p>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径</p>\n</blockquote>\n</li>\n<li>通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功<blockquote>\n<p><img src=\"http://soujava.com/images/gitTestconnsucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n<li>最后来一个完整的图片<blockquote>\n<p><img src=\"http://soujava.com/images/gitpushinputpasssucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<p>我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中</p>\n<ol>\n<li>当从github上面clone项目时，还老是提示输入密码，如下图：<blockquote>\n<p><code>Enter passphrase for key ‘/c/Users/maps/.ssh/id_rsa’:</p>\n<p><img src=\"http://soujava.com/images/getIp.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n</blockquote>\n</li>\n<li><p>按照先后顺序执行以下两条命令：</p>\n<blockquote>\n<p><code>$ ssh-agent bash</p>\n<p><code>$ ssh-add /c/Users/maps/.ssh/id_rsa</p>\n<p>注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径</p>\n</blockquote>\n</li>\n<li>通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功<blockquote>\n<p><img src=\"http://soujava.com/images/gitTestconnsucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n<li>最后来一个完整的图片<blockquote>\n<p><img src=\"http://soujava.com/images/gitpushinputpasssucc.jpg\" alt=\"Alt text\"></p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Java was started but returned exit code异常","date":"2016-06-30T07:56:30.000Z","_content":"今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369.........等等\n将eclipse.ini内容改为：\n（注：最下面的几行是调整后的配置）\n\n-startup\nplugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503\n-product\norg.eclipse.epp.package.jee.product\n--launcher.defaultAction\nopenFile\n--launcher.XXMaxPermSize\n256M\n-showsplash\norg.eclipse.platform\n-vmargs\n-Dosgi.requiredJavaVersion=1.5\n\n> -Xms1024m\n-Xmx1024m\n-XX:MaxPermSize=128m\n-XX:+CMSClassUnloadingEnabled\n-XX:+CMSPermGenSweepingEnabled\n-XX:+UseParallelGC\n-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith\n","source":"_posts/2016-06-30-Java-was-started-but-returned-exit-code异常.md","raw":"---\ntitle: Java was started but returned exit code异常\ndate: 2016-06-30 15:56:30\ncategories: IDE\ntags: eclipse\n---\n今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369.........等等\n将eclipse.ini内容改为：\n（注：最下面的几行是调整后的配置）\n\n-startup\nplugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503\n-product\norg.eclipse.epp.package.jee.product\n--launcher.defaultAction\nopenFile\n--launcher.XXMaxPermSize\n256M\n-showsplash\norg.eclipse.platform\n-vmargs\n-Dosgi.requiredJavaVersion=1.5\n\n> -Xms1024m\n-Xmx1024m\n-XX:MaxPermSize=128m\n-XX:+CMSClassUnloadingEnabled\n-XX:+CMSPermGenSweepingEnabled\n-XX:+UseParallelGC\n-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith\n","slug":"2016-06-30-Java-was-started-but-returned-exit-code异常","published":1,"updated":"2018-07-08T09:37:48.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phn000d30tz8c3c95qx","content":"<p>今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369………等等<br>将eclipse.ini内容改为：<br>（注：最下面的几行是调整后的配置）</p>\n<p>-startup<br>plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar<br>–launcher.library<br>plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503<br>-product<br>org.eclipse.epp.package.jee.product<br>–launcher.defaultAction<br>openFile<br>–launcher.XXMaxPermSize<br>256M<br>-showsplash<br>org.eclipse.platform<br>-vmargs<br>-Dosgi.requiredJavaVersion=1.5</p>\n<blockquote>\n<p>-Xms1024m<br>-Xmx1024m<br>-XX:MaxPermSize=128m<br>-XX:+CMSClassUnloadingEnabled<br>-XX:+CMSPermGenSweepingEnabled<br>-XX:+UseParallelGC<br>-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith</p>\n</blockquote>\n","excerpt":"","more":"<p>今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369………等等<br>将eclipse.ini内容改为：<br>（注：最下面的几行是调整后的配置）</p>\n<p>-startup<br>plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar<br>–launcher.library<br>plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503<br>-product<br>org.eclipse.epp.package.jee.product<br>–launcher.defaultAction<br>openFile<br>–launcher.XXMaxPermSize<br>256M<br>-showsplash<br>org.eclipse.platform<br>-vmargs<br>-Dosgi.requiredJavaVersion=1.5</p>\n<blockquote>\n<p>-Xms1024m<br>-Xmx1024m<br>-XX:MaxPermSize=128m<br>-XX:+CMSClassUnloadingEnabled<br>-XX:+CMSPermGenSweepingEnabled<br>-XX:+UseParallelGC<br>-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith</p>\n</blockquote>\n"},{"title":"界面框架","date":"2016-06-30T08:39:11.000Z","_content":"**1、布局框架**\n\n 访问地址：http://layout.jquery-dev.com/index.cfm \n demo：http://layout.jquery-dev.com/demos.cfm\n 可以满足多种复杂或者简单的布局，支持拖拉操作：\n\n![Alt text](http://soujava.com/images/bujv.jpg \"git push\")\n\n**2、表格框架**\n2.1、SlickGrid（https://github.com/Celebio/SlickGrid）\n\n \t1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n\n \n![Alt text](http://soujava.com/images/biaoge1.jpg \"表格\")\n\n![Alt text](http://soujava.com/images/biaoge2.jpg \"表格\")\n\n   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴\n\n![Alt text](http://soujava.com/images/biaoge3.jpg \"表格\")\n\t\n   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间\n\t\t\n![Alt text](http://soujava.com/images/biaoge4.jpg \"表格\")\n\n2.2、 paramquery（http://paramquery.com/grid）\n\t\n  1)、表格拖拉控制宽度、排序、可编辑\n\n![Alt text](http://soujava.com/images/biaoge5.jpg \"表格\")\n\n  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条\n\t\n![Alt text](http://soujava.com/images/biaoge6.jpg \"表格\")\n\t\n\t3)、可以对表格头部进行复杂的嵌套汇总显示：\n\t\n![Alt text](http://soujava.com/images/biaoge9.jpg \"表格\")\n\n2.3、 jqwidgets（http://www.jqwidgets.com/）\n\n\t这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\t\n\tDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n\n![Alt text](http://soujava.com/images/jqwidgets.png \"表格\")\n\n**3、界面风格**\n\n3.1、 semantic-ui (http://semantic-ui.com/) \n\n3.2、 topcoat (http://topcoat.io/topcoat/) \n\n","source":"_posts/2016-06-30-界面框架.md","raw":"---\ntitle: 界面框架\ndate: 2016-06-30 16:39:11\ncategories: UI\ntags: 界面框架\n---\n**1、布局框架**\n\n 访问地址：http://layout.jquery-dev.com/index.cfm \n demo：http://layout.jquery-dev.com/demos.cfm\n 可以满足多种复杂或者简单的布局，支持拖拉操作：\n\n![Alt text](http://soujava.com/images/bujv.jpg \"git push\")\n\n**2、表格框架**\n2.1、SlickGrid（https://github.com/Celebio/SlickGrid）\n\n \t1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n\n \n![Alt text](http://soujava.com/images/biaoge1.jpg \"表格\")\n\n![Alt text](http://soujava.com/images/biaoge2.jpg \"表格\")\n\n   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴\n\n![Alt text](http://soujava.com/images/biaoge3.jpg \"表格\")\n\t\n   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间\n\t\t\n![Alt text](http://soujava.com/images/biaoge4.jpg \"表格\")\n\n2.2、 paramquery（http://paramquery.com/grid）\n\t\n  1)、表格拖拉控制宽度、排序、可编辑\n\n![Alt text](http://soujava.com/images/biaoge5.jpg \"表格\")\n\n  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条\n\t\n![Alt text](http://soujava.com/images/biaoge6.jpg \"表格\")\n\t\n\t3)、可以对表格头部进行复杂的嵌套汇总显示：\n\t\n![Alt text](http://soujava.com/images/biaoge9.jpg \"表格\")\n\n2.3、 jqwidgets（http://www.jqwidgets.com/）\n\n\t这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\t\n\tDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n\n![Alt text](http://soujava.com/images/jqwidgets.png \"表格\")\n\n**3、界面风格**\n\n3.1、 semantic-ui (http://semantic-ui.com/) \n\n3.2、 topcoat (http://topcoat.io/topcoat/) \n\n","slug":"2016-06-30-界面框架","published":1,"updated":"2018-07-08T09:37:48.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1php000f30tz7iir0eo9","content":"<p><strong>1、布局框架</strong></p>\n<p> 访问地址：<a href=\"http://layout.jquery-dev.com/index.cfm\" target=\"_blank\" rel=\"external\">http://layout.jquery-dev.com/index.cfm</a><br> demo：<a href=\"http://layout.jquery-dev.com/demos.cfm\" target=\"_blank\" rel=\"external\">http://layout.jquery-dev.com/demos.cfm</a><br> 可以满足多种复杂或者简单的布局，支持拖拉操作：</p>\n<p><img src=\"http://soujava.com/images/bujv.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n<p><strong>2、表格框架</strong><br>2.1、SlickGrid（<a href=\"https://github.com/Celebio/SlickGrid）\" target=\"_blank\" rel=\"external\">https://github.com/Celebio/SlickGrid）</a></p>\n<pre><code>1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n</code></pre><p><img src=\"http://soujava.com/images/biaoge1.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p><img src=\"http://soujava.com/images/biaoge2.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴</p>\n<p><img src=\"http://soujava.com/images/biaoge3.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间</p>\n<p><img src=\"http://soujava.com/images/biaoge4.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.2、 paramquery（<a href=\"http://paramquery.com/grid）\" target=\"_blank\" rel=\"external\">http://paramquery.com/grid）</a></p>\n<p>  1)、表格拖拉控制宽度、排序、可编辑</p>\n<p><img src=\"http://soujava.com/images/biaoge5.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条</p>\n<p><img src=\"http://soujava.com/images/biaoge6.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<pre><code>3)、可以对表格头部进行复杂的嵌套汇总显示：\n</code></pre><p><img src=\"http://soujava.com/images/biaoge9.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.3、 jqwidgets（<a href=\"http://www.jqwidgets.com/）\" target=\"_blank\" rel=\"external\">http://www.jqwidgets.com/）</a></p>\n<pre><code>这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\nDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n</code></pre><p><img src=\"http://soujava.com/images/jqwidgets.png\" alt=\"Alt text\" title=\"表格\"></p>\n<p><strong>3、界面风格</strong></p>\n<p>3.1、 semantic-ui (<a href=\"http://semantic-ui.com/\" target=\"_blank\" rel=\"external\">http://semantic-ui.com/</a>) </p>\n<p>3.2、 topcoat (<a href=\"http://topcoat.io/topcoat/\" target=\"_blank\" rel=\"external\">http://topcoat.io/topcoat/</a>) </p>\n","excerpt":"","more":"<p><strong>1、布局框架</strong></p>\n<p> 访问地址：<a href=\"http://layout.jquery-dev.com/index.cfm\">http://layout.jquery-dev.com/index.cfm</a><br> demo：<a href=\"http://layout.jquery-dev.com/demos.cfm\">http://layout.jquery-dev.com/demos.cfm</a><br> 可以满足多种复杂或者简单的布局，支持拖拉操作：</p>\n<p><img src=\"http://soujava.com/images/bujv.jpg\" alt=\"Alt text\" title=\"git push\"></p>\n<p><strong>2、表格框架</strong><br>2.1、SlickGrid（<a href=\"https://github.com/Celebio/SlickGrid）\">https://github.com/Celebio/SlickGrid）</a></p>\n<pre><code>1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；\n</code></pre><p><img src=\"http://soujava.com/images/biaoge1.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p><img src=\"http://soujava.com/images/biaoge2.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴</p>\n<p><img src=\"http://soujava.com/images/biaoge3.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间</p>\n<p><img src=\"http://soujava.com/images/biaoge4.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.2、 paramquery（<a href=\"http://paramquery.com/grid）\">http://paramquery.com/grid）</a></p>\n<p>  1)、表格拖拉控制宽度、排序、可编辑</p>\n<p><img src=\"http://soujava.com/images/biaoge5.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条</p>\n<p><img src=\"http://soujava.com/images/biaoge6.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<pre><code>3)、可以对表格头部进行复杂的嵌套汇总显示：\n</code></pre><p><img src=\"http://soujava.com/images/biaoge9.jpg\" alt=\"Alt text\" title=\"表格\"></p>\n<p>2.3、 jqwidgets（<a href=\"http://www.jqwidgets.com/）\">http://www.jqwidgets.com/）</a></p>\n<pre><code>这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。\n\nDEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/\n</code></pre><p><img src=\"http://soujava.com/images/jqwidgets.png\" alt=\"Alt text\" title=\"表格\"></p>\n<p><strong>3、界面风格</strong></p>\n<p>3.1、 semantic-ui (<a href=\"http://semantic-ui.com/\">http://semantic-ui.com/</a>) </p>\n<p>3.2、 topcoat (<a href=\"http://topcoat.io/topcoat/\">http://topcoat.io/topcoat/</a>) </p>\n"},{"title":"关闭父窗口刷新子窗口","date":"2016-06-30T08:21:45.000Z","_content":"比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。\n\n**父窗口-index.html**\n\n     <html>  \n     <head>  \n      <title>index.htmll</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    \t<SCRIPT LANGUAGE=\"JavaScript\">  \n    \t<!--   \n    \tfunction clicks(){   \n    \t window.open(\"other.html\");   \n    \t}   \n    \t//-->  \n    \t</SCRIPT>  \n     </head>  \n     <body>  \n     <a  onClick=\"clicks();\" target=\"_blank\">选择数据</a>  \n     </body>  \n    </html>  \n\n**子窗口-other.html**\n\n     <html>  \n     <head>  \n      <title>子窗口</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    <SCRIPT LANGUAGE=\"JavaScript\">  \n    <!--   \n    function Close()   \n    {\n      window.opener.location.href=\"index.html\";\n    }\n    //-->  \n    </script>  \n     </head>  \n     <body>  \n     <a href=\"javascript:Close();\">关闭当前子窗口，打开父窗口</a>  \n     </body>  \n    </html>  \n    ","source":"_posts/2016-06-30-关闭父窗口刷新子窗口.md","raw":"---\ntitle: 关闭父窗口刷新子窗口\ndate: 2016-06-30 16:21:45\ncategories: javascript\ntags: javascript\n---\n比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。\n\n**父窗口-index.html**\n\n     <html>  \n     <head>  \n      <title>index.htmll</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    \t<SCRIPT LANGUAGE=\"JavaScript\">  \n    \t<!--   \n    \tfunction clicks(){   \n    \t window.open(\"other.html\");   \n    \t}   \n    \t//-->  \n    \t</SCRIPT>  \n     </head>  \n     <body>  \n     <a  onClick=\"clicks();\" target=\"_blank\">选择数据</a>  \n     </body>  \n    </html>  \n\n**子窗口-other.html**\n\n     <html>  \n     <head>  \n      <title>子窗口</title>  \n      <meta name=\"Generator\" content=\"EditPlus\">  \n      <meta name=\"Author\" content=\"\">  \n      <meta name=\"Keywords\" content=\"\">  \n      <meta name=\"Description\" content=\"\">  \n    <SCRIPT LANGUAGE=\"JavaScript\">  \n    <!--   \n    function Close()   \n    {\n      window.opener.location.href=\"index.html\";\n    }\n    //-->  \n    </script>  \n     </head>  \n     <body>  \n     <a href=\"javascript:Close();\">关闭当前子窗口，打开父窗口</a>  \n     </body>  \n    </html>  \n    ","slug":"2016-06-30-关闭父窗口刷新子窗口","published":1,"updated":"2018-07-08T09:37:48.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phr000i30tz02zsogoc","content":"<p>比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。</p>\n<p><strong>父窗口-index.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;index.htmll&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n    &lt;!--   \n    function clicks(){   \n     window.open(&quot;other.html&quot;);   \n    }   \n    //--&gt;  \n    &lt;/SCRIPT&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a  onClick=&quot;clicks();&quot; target=&quot;_blank&quot;&gt;选择数据&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre><p><strong>子窗口-other.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;子窗口&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n&lt;!--   \nfunction Close()   \n{\n  window.opener.location.href=&quot;index.html&quot;;\n}\n//--&gt;  \n&lt;/script&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a href=&quot;javascript:Close();&quot;&gt;关闭当前子窗口，打开父窗口&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>","excerpt":"","more":"<p>比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。</p>\n<p><strong>父窗口-index.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;index.htmll&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n    &lt;!--   \n    function clicks(){   \n     window.open(&quot;other.html&quot;);   \n    }   \n    //--&gt;  \n    &lt;/SCRIPT&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a  onClick=&quot;clicks();&quot; target=&quot;_blank&quot;&gt;选择数据&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre><p><strong>子窗口-other.html</strong></p>\n<pre><code> &lt;html&gt;  \n &lt;head&gt;  \n  &lt;title&gt;子窗口&lt;/title&gt;  \n  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;  \n  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;  \n  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;  \n&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  \n&lt;!--   \nfunction Close()   \n{\n  window.opener.location.href=&quot;index.html&quot;;\n}\n//--&gt;  \n&lt;/script&gt;  \n &lt;/head&gt;  \n &lt;body&gt;  \n &lt;a href=&quot;javascript:Close();&quot;&gt;关闭当前子窗口，打开父窗口&lt;/a&gt;  \n &lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>"},{"title":"页面中添加'ENTER'键点击事件","date":"2016-06-30T08:31:17.000Z","_content":"通常有以下场景：\n当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。\n那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！\n\n**jquery**\n\n\t$(\"body\").keydown(function(e){\n        if(e.keyCode==\"13\"){\n            alert('点击了Enter键');\n        }\n    });\n\n**javascript**\n\n\tdocument.body.onclick=function(){\n        if(e.keyCode==\"13\"){\n           alert('点击了Enter键');\n        }\n    };","source":"_posts/2016-06-30-页面中添加-ENTER-键点击事件.md","raw":"---\ntitle: 页面中添加'ENTER'键点击事件\ndate: 2016-06-30 16:31:17\ncategories: javascript\ntags: 添加enter事件\n---\n通常有以下场景：\n当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。\n那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！\n\n**jquery**\n\n\t$(\"body\").keydown(function(e){\n        if(e.keyCode==\"13\"){\n            alert('点击了Enter键');\n        }\n    });\n\n**javascript**\n\n\tdocument.body.onclick=function(){\n        if(e.keyCode==\"13\"){\n           alert('点击了Enter键');\n        }\n    };","slug":"2016-06-30-页面中添加-ENTER-键点击事件","published":1,"updated":"2018-07-08T09:37:48.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phs000k30tz9gm1b2ho","content":"<p>通常有以下场景：<br>当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。<br>那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！</p>\n<p><strong>jquery</strong></p>\n<pre><code>$(&quot;body&quot;).keydown(function(e){\n    if(e.keyCode==&quot;13&quot;){\n        alert(&apos;点击了Enter键&apos;);\n    }\n});\n</code></pre><p><strong>javascript</strong></p>\n<pre><code>document.body.onclick=function(){\n    if(e.keyCode==&quot;13&quot;){\n       alert(&apos;点击了Enter键&apos;);\n    }\n};\n</code></pre>","excerpt":"","more":"<p>通常有以下场景：<br>当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。<br>那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！</p>\n<p><strong>jquery</strong></p>\n<pre><code>$(&quot;body&quot;).keydown(function(e){\n    if(e.keyCode==&quot;13&quot;){\n        alert(&apos;点击了Enter键&apos;);\n    }\n});\n</code></pre><p><strong>javascript</strong></p>\n<pre><code>document.body.onclick=function(){\n    if(e.keyCode==&quot;13&quot;){\n       alert(&apos;点击了Enter键&apos;);\n    }\n};\n</code></pre>"},{"title":"CentOS系统安装nodeJs","date":"2017-02-09T05:11:02.000Z","_content":"主要介绍在Linux(CentOS)系统中，nodeJs的安装与环境配置，首先我们需要到nodeJs官网下载对应的tar安装包，然后使用命令进行安装和配置操作(一共有源代码编译安装和二进制包安装，两种安装方式都是可以的)\n\n\n## 一、二进制包安装 ##\n\n1 下载二进制包\n\n`cd /usr/local/develop/soft  #切换到对应的安装目录中`\n\n`wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz  #下载官方的nodeJs二进制安装包`\n\n\n2 命令安装\n\n>tar -xvf  node-v6.9.4-linux-x64.tar.xz\t#解压下载的二进制安装包\n\t\n<!--more-->\n\n>cd node-v6.9.4-linux-x64/ && ll    #切换到已经解压的安装包目录中，并且详细列出所有的文件\n\n```java\n\tdrwxrwxr-x. 2 maps maps    27 1月   6 04:50 bin\n\t-rw-rw-r--. 1 maps maps 55480 1月   6 04:50 CHANGELOG.md\n\tdrwxrwxr-x. 3 maps maps    17 1月   6 04:50 include\n\tdrwxrwxr-x. 3 maps maps    25 1月   6 04:50 lib\n\t-rw-rw-r--. 1 maps maps 60477 1月   6 04:50 LICENSE\n\t-rw-rw-r--. 1 maps maps 17440 1月   6 04:50 README.md\n\tdrwxrwxr-x. 5 maps maps    42 1月   6 04:50 share\n```\n\n\t*可以看到二进制安装包中包含bin/ 目录*\n\n3 配置环境变量\n\n>vim /etc/profile\n\n\n```PHP\n\texport NODE_HOME=/usr/local/develop/soft/node-v6.9.4-linux-x64\n\texport PATH=$NODE_HOME/bin:$PATH\n\texport NODE_PATH=$NODE_HOME/lib/node_modules:$PATH\n```\n\n>source /etc/profile\t\n\n4 验证是否安装成功\n\n>node -v\n\n\n```PHP\nv6.9.4\n```\n\n## 二、源代码编译安装 ##\n\n1 下载二进制包\n\n```PHP\n\tcd /usr/local/develop/soft  #切换到对应的安装目录中\n\twget https://nodejs.org/dist/v6.9.5/node-v6.9.5.tar.gz  #下载官方的nodeJs二进制安装包\t\n```\n\n2 命令安装\n\n>tar -zxvf  node-v6.9.4-linux-x64.tar.gz\t#解压下载的二进制安装包\n\t\n>cd node-v6.9.4-linux-x64/    #切换到已经解压的安装包目录中\n\n>./configure  #配置\n\n>make\n\n>make install\n\n3 配置环境变量\n\n\t*参照二进制安装方式中的环境配置*\n\n4 验证是否安装成功\n\n\t*参照二进制安装方式中的验证*\n\n","source":"_posts/CentOS系统安装nodeJs.md","raw":"---\ntitle: CentOS系统安装nodeJs\ndate: 2017-02-09 13:11:02\ncategories: nodeJs\ntags: nodeJs\n---\n主要介绍在Linux(CentOS)系统中，nodeJs的安装与环境配置，首先我们需要到nodeJs官网下载对应的tar安装包，然后使用命令进行安装和配置操作(一共有源代码编译安装和二进制包安装，两种安装方式都是可以的)\n\n\n## 一、二进制包安装 ##\n\n1 下载二进制包\n\n`cd /usr/local/develop/soft  #切换到对应的安装目录中`\n\n`wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz  #下载官方的nodeJs二进制安装包`\n\n\n2 命令安装\n\n>tar -xvf  node-v6.9.4-linux-x64.tar.xz\t#解压下载的二进制安装包\n\t\n<!--more-->\n\n>cd node-v6.9.4-linux-x64/ && ll    #切换到已经解压的安装包目录中，并且详细列出所有的文件\n\n```java\n\tdrwxrwxr-x. 2 maps maps    27 1月   6 04:50 bin\n\t-rw-rw-r--. 1 maps maps 55480 1月   6 04:50 CHANGELOG.md\n\tdrwxrwxr-x. 3 maps maps    17 1月   6 04:50 include\n\tdrwxrwxr-x. 3 maps maps    25 1月   6 04:50 lib\n\t-rw-rw-r--. 1 maps maps 60477 1月   6 04:50 LICENSE\n\t-rw-rw-r--. 1 maps maps 17440 1月   6 04:50 README.md\n\tdrwxrwxr-x. 5 maps maps    42 1月   6 04:50 share\n```\n\n\t*可以看到二进制安装包中包含bin/ 目录*\n\n3 配置环境变量\n\n>vim /etc/profile\n\n\n```PHP\n\texport NODE_HOME=/usr/local/develop/soft/node-v6.9.4-linux-x64\n\texport PATH=$NODE_HOME/bin:$PATH\n\texport NODE_PATH=$NODE_HOME/lib/node_modules:$PATH\n```\n\n>source /etc/profile\t\n\n4 验证是否安装成功\n\n>node -v\n\n\n```PHP\nv6.9.4\n```\n\n## 二、源代码编译安装 ##\n\n1 下载二进制包\n\n```PHP\n\tcd /usr/local/develop/soft  #切换到对应的安装目录中\n\twget https://nodejs.org/dist/v6.9.5/node-v6.9.5.tar.gz  #下载官方的nodeJs二进制安装包\t\n```\n\n2 命令安装\n\n>tar -zxvf  node-v6.9.4-linux-x64.tar.gz\t#解压下载的二进制安装包\n\t\n>cd node-v6.9.4-linux-x64/    #切换到已经解压的安装包目录中\n\n>./configure  #配置\n\n>make\n\n>make install\n\n3 配置环境变量\n\n\t*参照二进制安装方式中的环境配置*\n\n4 验证是否安装成功\n\n\t*参照二进制安装方式中的验证*\n\n","slug":"CentOS系统安装nodeJs","published":1,"updated":"2018-07-08T09:37:48.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phu000o30tzw5tz3eem","content":"<p>主要介绍在Linux(CentOS)系统中，nodeJs的安装与环境配置，首先我们需要到nodeJs官网下载对应的tar安装包，然后使用命令进行安装和配置操作(一共有源代码编译安装和二进制包安装，两种安装方式都是可以的)</p>\n<h2 id=\"一、二进制包安装\"><a href=\"#一、二进制包安装\" class=\"headerlink\" title=\"一、二进制包安装\"></a>一、二进制包安装</h2><p>1 下载二进制包</p>\n<p><code>cd /usr/local/develop/soft  #切换到对应的安装目录中</code></p>\n<p><code>wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz  #下载官方的nodeJs二进制安装包</code></p>\n<p>2 命令安装</p>\n<blockquote>\n<p>tar -xvf  node-v6.9.4-linux-x64.tar.xz    #解压下载的二进制安装包</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>cd node-v6.9.4-linux-x64/ &amp;&amp; ll    #切换到已经解压的安装包目录中，并且详细列出所有的文件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">drwxrwxr-x. <span class=\"number\">2</span> maps maps    <span class=\"number\">27</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> bin</div><div class=\"line\">-rw-rw-r--. <span class=\"number\">1</span> maps maps <span class=\"number\">55480</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> CHANGELOG.md</div><div class=\"line\">drwxrwxr-x. <span class=\"number\">3</span> maps maps    <span class=\"number\">17</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> include</div><div class=\"line\">drwxrwxr-x. <span class=\"number\">3</span> maps maps    <span class=\"number\">25</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> lib</div><div class=\"line\">-rw-rw-r--. <span class=\"number\">1</span> maps maps <span class=\"number\">60477</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> LICENSE</div><div class=\"line\">-rw-rw-r--. <span class=\"number\">1</span> maps maps <span class=\"number\">17440</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> README.md</div><div class=\"line\">drwxrwxr-x. <span class=\"number\">5</span> maps maps    <span class=\"number\">42</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> share</div></pre></td></tr></table></figure>\n<pre><code>*可以看到二进制安装包中包含bin/ 目录*\n</code></pre><p>3 配置环境变量</p>\n<blockquote>\n<p>vim /etc/profile</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NODE_HOME=/usr/local/develop/soft/node-v6<span class=\"number\">.9</span><span class=\"number\">.4</span>-linux-x64</div><div class=\"line\">export PATH=$NODE_HOME/bin:$PATH</div><div class=\"line\">export NODE_PATH=$NODE_HOME/lib/node_modules:$PATH</div></pre></td></tr></table></figure>\n<blockquote>\n<p>source /etc/profile    </p>\n</blockquote>\n<p>4 验证是否安装成功</p>\n<blockquote>\n<p>node -v</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">v6<span class=\"number\">.9</span><span class=\"number\">.4</span></div></pre></td></tr></table></figure>\n<h2 id=\"二、源代码编译安装\"><a href=\"#二、源代码编译安装\" class=\"headerlink\" title=\"二、源代码编译安装\"></a>二、源代码编译安装</h2><p>1 下载二进制包</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/develop/soft  <span class=\"comment\">#切换到对应的安装目录中</span></div><div class=\"line\">wget https:<span class=\"comment\">//nodejs.org/dist/v6.9.5/node-v6.9.5.tar.gz  #下载官方的nodeJs二进制安装包</span></div></pre></td></tr></table></figure>\n<p>2 命令安装</p>\n<blockquote>\n<p>tar -zxvf  node-v6.9.4-linux-x64.tar.gz    #解压下载的二进制安装包</p>\n<p>cd node-v6.9.4-linux-x64/    #切换到已经解压的安装包目录中</p>\n<p>./configure  #配置</p>\n<p>make</p>\n<p>make install</p>\n</blockquote>\n<p>3 配置环境变量</p>\n<pre><code>*参照二进制安装方式中的环境配置*\n</code></pre><p>4 验证是否安装成功</p>\n<pre><code>*参照二进制安装方式中的验证*\n</code></pre>","excerpt":"<p>主要介绍在Linux(CentOS)系统中，nodeJs的安装与环境配置，首先我们需要到nodeJs官网下载对应的tar安装包，然后使用命令进行安装和配置操作(一共有源代码编译安装和二进制包安装，两种安装方式都是可以的)</p>\n<h2 id=\"一、二进制包安装\"><a href=\"#一、二进制包安装\" class=\"headerlink\" title=\"一、二进制包安装\"></a>一、二进制包安装</h2><p>1 下载二进制包</p>\n<p><code>cd /usr/local/develop/soft  #切换到对应的安装目录中</code></p>\n<p><code>wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz  #下载官方的nodeJs二进制安装包</code></p>\n<p>2 命令安装</p>\n<blockquote>\n<p>tar -xvf  node-v6.9.4-linux-x64.tar.xz    #解压下载的二进制安装包</p>\n</blockquote>","more":"<blockquote>\n<p>cd node-v6.9.4-linux-x64/ &amp;&amp; ll    #切换到已经解压的安装包目录中，并且详细列出所有的文件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">drwxrwxr-x. <span class=\"number\">2</span> maps maps    <span class=\"number\">27</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> bin</div><div class=\"line\">-rw-rw-r--. <span class=\"number\">1</span> maps maps <span class=\"number\">55480</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> CHANGELOG.md</div><div class=\"line\">drwxrwxr-x. <span class=\"number\">3</span> maps maps    <span class=\"number\">17</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> include</div><div class=\"line\">drwxrwxr-x. <span class=\"number\">3</span> maps maps    <span class=\"number\">25</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> lib</div><div class=\"line\">-rw-rw-r--. <span class=\"number\">1</span> maps maps <span class=\"number\">60477</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> LICENSE</div><div class=\"line\">-rw-rw-r--. <span class=\"number\">1</span> maps maps <span class=\"number\">17440</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> README.md</div><div class=\"line\">drwxrwxr-x. <span class=\"number\">5</span> maps maps    <span class=\"number\">42</span> <span class=\"number\">1</span>月   <span class=\"number\">6</span> <span class=\"number\">04</span>:<span class=\"number\">50</span> share</div></pre></td></tr></table></figure>\n<pre><code>*可以看到二进制安装包中包含bin/ 目录*\n</code></pre><p>3 配置环境变量</p>\n<blockquote>\n<p>vim /etc/profile</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NODE_HOME=/usr/local/develop/soft/node-v6<span class=\"number\">.9</span><span class=\"number\">.4</span>-linux-x64</div><div class=\"line\">export PATH=$NODE_HOME/bin:$PATH</div><div class=\"line\">export NODE_PATH=$NODE_HOME/lib/node_modules:$PATH</div></pre></td></tr></table></figure>\n<blockquote>\n<p>source /etc/profile    </p>\n</blockquote>\n<p>4 验证是否安装成功</p>\n<blockquote>\n<p>node -v</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">v6<span class=\"number\">.9</span><span class=\"number\">.4</span></div></pre></td></tr></table></figure>\n<h2 id=\"二、源代码编译安装\"><a href=\"#二、源代码编译安装\" class=\"headerlink\" title=\"二、源代码编译安装\"></a>二、源代码编译安装</h2><p>1 下载二进制包</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/develop/soft  <span class=\"comment\">#切换到对应的安装目录中</span></div><div class=\"line\">wget https:<span class=\"comment\">//nodejs.org/dist/v6.9.5/node-v6.9.5.tar.gz  #下载官方的nodeJs二进制安装包</span></div></pre></td></tr></table></figure>\n<p>2 命令安装</p>\n<blockquote>\n<p>tar -zxvf  node-v6.9.4-linux-x64.tar.gz    #解压下载的二进制安装包</p>\n<p>cd node-v6.9.4-linux-x64/    #切换到已经解压的安装包目录中</p>\n<p>./configure  #配置</p>\n<p>make</p>\n<p>make install</p>\n</blockquote>\n<p>3 配置环境变量</p>\n<pre><code>*参照二进制安装方式中的环境配置*\n</code></pre><p>4 验证是否安装成功</p>\n<pre><code>*参照二进制安装方式中的验证*\n</code></pre>"},{"title":"CentOS-6.4内核升级操作","date":"2016-08-19T08:00:13.000Z","_content":"Linux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。\n```java\n\t注意：\n     如果在make menuconfig步骤报错，可尝试以下方法：\n     1、修改scripts/kconfig/Makefile 文件\n     2、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo\n```\n**一、先查看当前centos的系统内核**\n\n![Alt text](http://soujava.com/images/linuxKenel1.png)\n\n**二、下载内核包，如：linux-3.4.56.tar.xz**\n\t\n```java\n\thttps://www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz\n```\n\n**三、安装内核**\n```java\n\t# tar -Jxvf linux-3.4.56.tar.xz\n\t# mv linux-3.4.56 /usr/src/linux-3.4.56\n\t# cd linux-3.4.56\n\t# make mrproper #清除环境变量\n\t# make menuconfig \n\t# make clean\n\t# make bzImage\n\t# make modules\n\t# make modules_install\n\t# make install\n```\n\n**四、编辑/etc/grub.conf文件，将default=1改成default=0**\n\t\n\n**五、重启系统并检查内核**\n","source":"_posts/CentOS-6-4内核升级操作.md","raw":"---\ntitle: CentOS-6.4内核升级操作\ndate: 2016-08-19 16:00:13\ncategories: Linux\ntags: Linux\n---\nLinux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。\n```java\n\t注意：\n     如果在make menuconfig步骤报错，可尝试以下方法：\n     1、修改scripts/kconfig/Makefile 文件\n     2、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo\n```\n**一、先查看当前centos的系统内核**\n\n![Alt text](http://soujava.com/images/linuxKenel1.png)\n\n**二、下载内核包，如：linux-3.4.56.tar.xz**\n\t\n```java\n\thttps://www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz\n```\n\n**三、安装内核**\n```java\n\t# tar -Jxvf linux-3.4.56.tar.xz\n\t# mv linux-3.4.56 /usr/src/linux-3.4.56\n\t# cd linux-3.4.56\n\t# make mrproper #清除环境变量\n\t# make menuconfig \n\t# make clean\n\t# make bzImage\n\t# make modules\n\t# make modules_install\n\t# make install\n```\n\n**四、编辑/etc/grub.conf文件，将default=1改成default=0**\n\t\n\n**五、重启系统并检查内核**\n","slug":"CentOS-6-4内核升级操作","published":1,"updated":"2018-07-08T09:37:48.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phw000q30tz8vf35kea","content":"<p>Linux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">    如果在make menuconfig步骤报错，可尝试以下方法：</div><div class=\"line\">    <span class=\"number\">1</span>、修改scripts/kconfig/Makefile 文件</div><div class=\"line\">    <span class=\"number\">2</span>、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo</div></pre></td></tr></table></figure></p>\n<p><strong>一、先查看当前centos的系统内核</strong></p>\n<p><img src=\"http://soujava.com/images/linuxKenel1.png\" alt=\"Alt text\"></p>\n<p><strong>二、下载内核包，如：linux-3.4.56.tar.xz</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"comment\">//www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz</span></div></pre></td></tr></table></figure>\n<p><strong>三、安装内核</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tar -Jxvf linux-3.4.56.tar.xz</div><div class=\"line\"># mv linux-3.4.56 /usr/src/linux-3.4.56</div><div class=\"line\"># cd linux-3.4.56</div><div class=\"line\"># make mrproper #清除环境变量</div><div class=\"line\"># make menuconfig </div><div class=\"line\"># make clean</div><div class=\"line\"># make bzImage</div><div class=\"line\"># make modules</div><div class=\"line\"># make modules_install</div><div class=\"line\"># make install</div></pre></td></tr></table></figure></p>\n<p><strong>四、编辑/etc/grub.conf文件，将default=1改成default=0</strong></p>\n<p><strong>五、重启系统并检查内核</strong></p>\n","excerpt":"","more":"<p>Linux下涉及到系统内核的一些软件，需要对内核升级才能使用，例如Docker的最低要求是2.6.32-431等等。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">    如果在make menuconfig步骤报错，可尝试以下方法：</div><div class=\"line\">    <span class=\"number\">1</span>、修改scripts/kconfig/Makefile 文件</div><div class=\"line\">    <span class=\"number\">2</span>、找到HOSTLOADLIBES_mconf 在行末加入  -ltinfo</div></pre></td></tr></table></figure></p>\n<p><strong>一、先查看当前centos的系统内核</strong></p>\n<p><img src=\"http://soujava.com/images/linuxKenel1.png\" alt=\"Alt text\"></p>\n<p><strong>二、下载内核包，如：linux-3.4.56.tar.xz</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"comment\">//www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.56.tar.xz</span></div></pre></td></tr></table></figure>\n<p><strong>三、安装内核</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tar -Jxvf linux-3.4.56.tar.xz</div><div class=\"line\"># mv linux-3.4.56 /usr/src/linux-3.4.56</div><div class=\"line\"># cd linux-3.4.56</div><div class=\"line\"># make mrproper #清除环境变量</div><div class=\"line\"># make menuconfig </div><div class=\"line\"># make clean</div><div class=\"line\"># make bzImage</div><div class=\"line\"># make modules</div><div class=\"line\"># make modules_install</div><div class=\"line\"># make install</div></pre></td></tr></table></figure></p>\n<p><strong>四、编辑/etc/grub.conf文件，将default=1改成default=0</strong></p>\n<p><strong>五、重启系统并检查内核</strong></p>\n"},{"title":"DataOutputStream.write方法入坑","date":"2017-12-22T12:47:09.000Z","_content":"\n最近需要开发一个web端创建管理具有IM功能的群组，具备跟微信一样的聊天功能，是调用第三方服务的接口实现的；所以调用其他同事的公共方法调用第三方的rest接口时，由于需要带着用户的中文名称注册昵称，所以在调用接口过程中，发现了莫名其妙的中文参数乱码问题，让我很是费解，因为在该设置编码的地方都已经全部设置为utf-8；仍然出现中文乱码。下面是我的排查及解决问题过程：\n\n\n>整个rest接口调用的公共方法代码大致思路如下\n\n```java\n\n\t  String paramter = \"name=张三\";\n      \n      String register_account_url = \"https://*.wefs.comg/user/register\";\n\t  URL url = new URL(register_account_url);\n\t  URLConnection connection = url.openConnection();\n\t  HttpsURLConnection httpsURLConnection = (HttpsURLConnection)connection;\n\t  httpsURLConnection.setRequestMethod(\"POST\");//设置请求类型\n\t  httpsURLConnection.setUseCaches(false);\n\t  httpsURLConnection.setDoInput(true);\n\t  httpsURLConnection.setDoOutput(true);\n\t  httpsURLConnection.setConnectTimeout(30000);//设置连接超时时间\n\t  httpsURLConnection.setReadTimeout(600000);//设置读取超时时间\n\t  httpsURLConnection.setRequestProperty(\"Charsert\", \"UTF-8\");//设置编码\n\t  httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n      \n\t  DataOutputStream submitDos = new DataOutputStream(httpsURLConnection.getOutputStream());\n\n\t  submitDos.writeBytes(paramter);//关键的一行代码，这样会出现乱码 \n\t \n```\n\n\n----------\n\n- 整个排查过程很是费解，先排查接受web端的参数中是否乱码，然后排查请求第三方接口时是否设置了编码；然后排查向第三方接口传递参数时是否编码统一等等关键点，排查后依然中文乱码\n\n- 就定位到了DataOutputStream.writeBytes(paramter);这一行，因为说实在的，关于这个类这个方法还是第一次见到在这样的场景中使用；\n\n- 然后就进入到writeBytes方法源码中看了一下，果然发现了问题所在，该方法源码如下：\n\n```java\n\n\tpublic final void writeBytes(String s) throws IOException {\n        int len = s.length();\n        for (int i = 0 ; i < len ; i++) {\n            out.write((byte)s.charAt(i));//关键问题就出现在这一行\n        }\n        incCount(len);\n    }\n\n```\n\n我们在源码中发现了一个在for循环中使用了*(byte)s.charAt(i)*这一行代码，下面逐行分解如下：\n\n```java\n\t\n\t/**\n\t * 我们把上面的for循环中的out.write((byte)s.charAt(i));这一句代码拆开成如下   的for循环语句\n\t */\n\tString s = \"张三\"；\n\tint len = s.length();//长度为2\n\tfor (int i = 0 ; i < len ; i++) {\n\t\tchar cs = s.charAt(i); //张 [一个char占2个字节(16位)，所以可以存储大部分的中文]\n    \tbyte by = (byte)cs; //问题根源所在 [一个byte占1个字节(8位)，把char强转为byte就会发生丢失]\n        out.write(by); //其实调用的api方法为 write(int b);只不过把byte自动向上转型为int型而已\n     }\n\t\n```\n\n- 解决问题的办法就是不要使用out.writeBytes(String s)这个方法，更改为out.write(byte b[])这个重载的方法\n\n```java\n\n\t//有问题的代码 \n\tsubmitDos.writeBytes(paramter);\n\n\t//更改后的代码\n\tsubmitDos.write(paramter.getBytes());\n\n```\n\n>下面针对DataOutputStream的write方法写一个小demo进行验证\n\n```java\n\t\n \t  /**\n\t   * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)\n\t   * \n\t   * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容\n\t   */\n\t  DataOutputStream out = new DataOutputStream(new FileOutputStream(\"D:\\\\test.txt\"));\n\t  String count = \"马\";\n\t  out.writeBytes(count);\n\n```\n\n>上面代码写入到文件中的内容为 l；即英文的消息l字符；因为我们把\"马\"这个中文调用out.writeBytes(String s)方法时，由于内部发送了如下转换：\n\n```java\n\n \t  char c= count.charAt(0);\n\t  byte b = (byte)c;//把值为马的char型转换为byte型后，值变为108\n\t  out.write(c); //由于108对应的就是小写英文字符l\n\n```\n\n所以问题根源就是 JAVA中的char是16位的，一个char存储一个中文字符，直接用转换byte强转换后会变为8位，直接导致高8位丢失，从而导致中文乱码。\n\n\n```java\n\t\n \t  /**\n\t   * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)\n\t   * \n\t   * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容\n\t   */\n\t  DataOutputStream out = new DataOutputStream(new FileOutputStream(\"D:\\\\test.txt\"));\n\t  String count = \"马\";\n\t  out.write(count.getBytes()); //可以正常的把中文字符 马 输出到test.txt文件中\n\n```\n\n","source":"_posts/DataOutputStream-write方法入坑.md","raw":"---\ntitle: DataOutputStream.write方法入坑\ndate: 2017-12-22 20:47:09\ncategories: java\ntags: java\n---\n\n最近需要开发一个web端创建管理具有IM功能的群组，具备跟微信一样的聊天功能，是调用第三方服务的接口实现的；所以调用其他同事的公共方法调用第三方的rest接口时，由于需要带着用户的中文名称注册昵称，所以在调用接口过程中，发现了莫名其妙的中文参数乱码问题，让我很是费解，因为在该设置编码的地方都已经全部设置为utf-8；仍然出现中文乱码。下面是我的排查及解决问题过程：\n\n\n>整个rest接口调用的公共方法代码大致思路如下\n\n```java\n\n\t  String paramter = \"name=张三\";\n      \n      String register_account_url = \"https://*.wefs.comg/user/register\";\n\t  URL url = new URL(register_account_url);\n\t  URLConnection connection = url.openConnection();\n\t  HttpsURLConnection httpsURLConnection = (HttpsURLConnection)connection;\n\t  httpsURLConnection.setRequestMethod(\"POST\");//设置请求类型\n\t  httpsURLConnection.setUseCaches(false);\n\t  httpsURLConnection.setDoInput(true);\n\t  httpsURLConnection.setDoOutput(true);\n\t  httpsURLConnection.setConnectTimeout(30000);//设置连接超时时间\n\t  httpsURLConnection.setReadTimeout(600000);//设置读取超时时间\n\t  httpsURLConnection.setRequestProperty(\"Charsert\", \"UTF-8\");//设置编码\n\t  httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n      \n\t  DataOutputStream submitDos = new DataOutputStream(httpsURLConnection.getOutputStream());\n\n\t  submitDos.writeBytes(paramter);//关键的一行代码，这样会出现乱码 \n\t \n```\n\n\n----------\n\n- 整个排查过程很是费解，先排查接受web端的参数中是否乱码，然后排查请求第三方接口时是否设置了编码；然后排查向第三方接口传递参数时是否编码统一等等关键点，排查后依然中文乱码\n\n- 就定位到了DataOutputStream.writeBytes(paramter);这一行，因为说实在的，关于这个类这个方法还是第一次见到在这样的场景中使用；\n\n- 然后就进入到writeBytes方法源码中看了一下，果然发现了问题所在，该方法源码如下：\n\n```java\n\n\tpublic final void writeBytes(String s) throws IOException {\n        int len = s.length();\n        for (int i = 0 ; i < len ; i++) {\n            out.write((byte)s.charAt(i));//关键问题就出现在这一行\n        }\n        incCount(len);\n    }\n\n```\n\n我们在源码中发现了一个在for循环中使用了*(byte)s.charAt(i)*这一行代码，下面逐行分解如下：\n\n```java\n\t\n\t/**\n\t * 我们把上面的for循环中的out.write((byte)s.charAt(i));这一句代码拆开成如下   的for循环语句\n\t */\n\tString s = \"张三\"；\n\tint len = s.length();//长度为2\n\tfor (int i = 0 ; i < len ; i++) {\n\t\tchar cs = s.charAt(i); //张 [一个char占2个字节(16位)，所以可以存储大部分的中文]\n    \tbyte by = (byte)cs; //问题根源所在 [一个byte占1个字节(8位)，把char强转为byte就会发生丢失]\n        out.write(by); //其实调用的api方法为 write(int b);只不过把byte自动向上转型为int型而已\n     }\n\t\n```\n\n- 解决问题的办法就是不要使用out.writeBytes(String s)这个方法，更改为out.write(byte b[])这个重载的方法\n\n```java\n\n\t//有问题的代码 \n\tsubmitDos.writeBytes(paramter);\n\n\t//更改后的代码\n\tsubmitDos.write(paramter.getBytes());\n\n```\n\n>下面针对DataOutputStream的write方法写一个小demo进行验证\n\n```java\n\t\n \t  /**\n\t   * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)\n\t   * \n\t   * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容\n\t   */\n\t  DataOutputStream out = new DataOutputStream(new FileOutputStream(\"D:\\\\test.txt\"));\n\t  String count = \"马\";\n\t  out.writeBytes(count);\n\n```\n\n>上面代码写入到文件中的内容为 l；即英文的消息l字符；因为我们把\"马\"这个中文调用out.writeBytes(String s)方法时，由于内部发送了如下转换：\n\n```java\n\n \t  char c= count.charAt(0);\n\t  byte b = (byte)c;//把值为马的char型转换为byte型后，值变为108\n\t  out.write(c); //由于108对应的就是小写英文字符l\n\n```\n\n所以问题根源就是 JAVA中的char是16位的，一个char存储一个中文字符，直接用转换byte强转换后会变为8位，直接导致高8位丢失，从而导致中文乱码。\n\n\n```java\n\t\n \t  /**\n\t   * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)\n\t   * \n\t   * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容\n\t   */\n\t  DataOutputStream out = new DataOutputStream(new FileOutputStream(\"D:\\\\test.txt\"));\n\t  String count = \"马\";\n\t  out.write(count.getBytes()); //可以正常的把中文字符 马 输出到test.txt文件中\n\n```\n\n","slug":"DataOutputStream-write方法入坑","published":1,"updated":"2018-07-08T09:37:48.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phy000u30tzpt3u7isq","content":"<p>最近需要开发一个web端创建管理具有IM功能的群组，具备跟微信一样的聊天功能，是调用第三方服务的接口实现的；所以调用其他同事的公共方法调用第三方的rest接口时，由于需要带着用户的中文名称注册昵称，所以在调用接口过程中，发现了莫名其妙的中文参数乱码问题，让我很是费解，因为在该设置编码的地方都已经全部设置为utf-8；仍然出现中文乱码。下面是我的排查及解决问题过程：</p>\n<blockquote>\n<p>整个rest接口调用的公共方法代码大致思路如下</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">String paramter = <span class=\"string\">\"name=张三\"</span>;</div><div class=\"line\">   </div><div class=\"line\">   String register_account_url = <span class=\"string\">\"https://*.wefs.comg/user/register\"</span>;</div><div class=\"line\">URL url = <span class=\"keyword\">new</span> URL(register_account_url);</div><div class=\"line\">URLConnection connection = url.openConnection();</div><div class=\"line\">HttpsURLConnection httpsURLConnection = (HttpsURLConnection)connection;</div><div class=\"line\">httpsURLConnection.setRequestMethod(<span class=\"string\">\"POST\"</span>);<span class=\"comment\">//设置请求类型</span></div><div class=\"line\">httpsURLConnection.setUseCaches(<span class=\"keyword\">false</span>);</div><div class=\"line\">httpsURLConnection.setDoInput(<span class=\"keyword\">true</span>);</div><div class=\"line\">httpsURLConnection.setDoOutput(<span class=\"keyword\">true</span>);</div><div class=\"line\">httpsURLConnection.setConnectTimeout(<span class=\"number\">30000</span>);<span class=\"comment\">//设置连接超时时间</span></div><div class=\"line\">httpsURLConnection.setReadTimeout(<span class=\"number\">600000</span>);<span class=\"comment\">//设置读取超时时间</span></div><div class=\"line\">httpsURLConnection.setRequestProperty(<span class=\"string\">\"Charsert\"</span>, <span class=\"string\">\"UTF-8\"</span>);<span class=\"comment\">//设置编码</span></div><div class=\"line\">httpsURLConnection.setRequestProperty(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span>);</div><div class=\"line\">   </div><div class=\"line\">DataOutputStream submitDos = <span class=\"keyword\">new</span> DataOutputStream(httpsURLConnection.getOutputStream());</div><div class=\"line\"></div><div class=\"line\">submitDos.writeBytes(paramter);<span class=\"comment\">//关键的一行代码，这样会出现乱码</span></div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><p>整个排查过程很是费解，先排查接受web端的参数中是否乱码，然后排查请求第三方接口时是否设置了编码；然后排查向第三方接口传递参数时是否编码统一等等关键点，排查后依然中文乱码</p>\n</li>\n<li><p>就定位到了DataOutputStream.writeBytes(paramter);这一行，因为说实在的，关于这个类这个方法还是第一次见到在这样的场景中使用；</p>\n</li>\n<li><p>然后就进入到writeBytes方法源码中看了一下，果然发现了问题所在，该方法源码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">writeBytes</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> len = s.length();</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; len ; i++) &#123;</div><div class=\"line\">           out.write((<span class=\"keyword\">byte</span>)s.charAt(i));<span class=\"comment\">//关键问题就出现在这一行</span></div><div class=\"line\">       &#125;</div><div class=\"line\">       incCount(len);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>我们在源码中发现了一个在for循环中使用了<em>(byte)s.charAt(i)</em>这一行代码，下面逐行分解如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 我们把上面的for循环中的out.write((byte)s.charAt(i));这一句代码拆开成如下   的for循环语句</div><div class=\"line\"> */</div><div class=\"line\">String s = <span class=\"string\">\"张三\"</span>；</div><div class=\"line\"><span class=\"keyword\">int</span> len = s.length();<span class=\"comment\">//长度为2</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; len ; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> cs = s.charAt(i); <span class=\"comment\">//张 [一个char占2个字节(16位)，所以可以存储大部分的中文]</span></div><div class=\"line\">   \t<span class=\"keyword\">byte</span> by = (<span class=\"keyword\">byte</span>)cs; <span class=\"comment\">//问题根源所在 [一个byte占1个字节(8位)，把char强转为byte就会发生丢失]</span></div><div class=\"line\">       out.write(by); <span class=\"comment\">//其实调用的api方法为 write(int b);只不过把byte自动向上转型为int型而已</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>解决问题的办法就是不要使用out.writeBytes(String s)这个方法，更改为out.write(byte b[])这个重载的方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//有问题的代码 </span></div><div class=\"line\">submitDos.writeBytes(paramter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//更改后的代码</span></div><div class=\"line\">submitDos.write(paramter.getBytes());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>下面针对DataOutputStream的write方法写一个小demo进行验证</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)</div><div class=\"line\"> * </div><div class=\"line\"> * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容</div><div class=\"line\"> */</div><div class=\"line\">DataOutputStream out = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\test.txt\"</span>));</div><div class=\"line\">String count = <span class=\"string\">\"马\"</span>;</div><div class=\"line\">out.writeBytes(count);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码写入到文件中的内容为 l；即英文的消息l字符；因为我们把”马”这个中文调用out.writeBytes(String s)方法时，由于内部发送了如下转换：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">char</span> c= count.charAt(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">byte</span> b = (<span class=\"keyword\">byte</span>)c;<span class=\"comment\">//把值为马的char型转换为byte型后，值变为108</span></div><div class=\"line\">out.write(c); <span class=\"comment\">//由于108对应的就是小写英文字符l</span></div></pre></td></tr></table></figure>\n<p>所以问题根源就是 JAVA中的char是16位的，一个char存储一个中文字符，直接用转换byte强转换后会变为8位，直接导致高8位丢失，从而导致中文乱码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)</div><div class=\"line\"> * </div><div class=\"line\"> * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容</div><div class=\"line\"> */</div><div class=\"line\">DataOutputStream out = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\test.txt\"</span>));</div><div class=\"line\">String count = <span class=\"string\">\"马\"</span>;</div><div class=\"line\">out.write(count.getBytes()); <span class=\"comment\">//可以正常的把中文字符 马 输出到test.txt文件中</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>最近需要开发一个web端创建管理具有IM功能的群组，具备跟微信一样的聊天功能，是调用第三方服务的接口实现的；所以调用其他同事的公共方法调用第三方的rest接口时，由于需要带着用户的中文名称注册昵称，所以在调用接口过程中，发现了莫名其妙的中文参数乱码问题，让我很是费解，因为在该设置编码的地方都已经全部设置为utf-8；仍然出现中文乱码。下面是我的排查及解决问题过程：</p>\n<blockquote>\n<p>整个rest接口调用的公共方法代码大致思路如下</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">String paramter = <span class=\"string\">\"name=张三\"</span>;</div><div class=\"line\">   </div><div class=\"line\">   String register_account_url = <span class=\"string\">\"https://*.wefs.comg/user/register\"</span>;</div><div class=\"line\">URL url = <span class=\"keyword\">new</span> URL(register_account_url);</div><div class=\"line\">URLConnection connection = url.openConnection();</div><div class=\"line\">HttpsURLConnection httpsURLConnection = (HttpsURLConnection)connection;</div><div class=\"line\">httpsURLConnection.setRequestMethod(<span class=\"string\">\"POST\"</span>);<span class=\"comment\">//设置请求类型</span></div><div class=\"line\">httpsURLConnection.setUseCaches(<span class=\"keyword\">false</span>);</div><div class=\"line\">httpsURLConnection.setDoInput(<span class=\"keyword\">true</span>);</div><div class=\"line\">httpsURLConnection.setDoOutput(<span class=\"keyword\">true</span>);</div><div class=\"line\">httpsURLConnection.setConnectTimeout(<span class=\"number\">30000</span>);<span class=\"comment\">//设置连接超时时间</span></div><div class=\"line\">httpsURLConnection.setReadTimeout(<span class=\"number\">600000</span>);<span class=\"comment\">//设置读取超时时间</span></div><div class=\"line\">httpsURLConnection.setRequestProperty(<span class=\"string\">\"Charsert\"</span>, <span class=\"string\">\"UTF-8\"</span>);<span class=\"comment\">//设置编码</span></div><div class=\"line\">httpsURLConnection.setRequestProperty(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span>);</div><div class=\"line\">   </div><div class=\"line\">DataOutputStream submitDos = <span class=\"keyword\">new</span> DataOutputStream(httpsURLConnection.getOutputStream());</div><div class=\"line\"></div><div class=\"line\">submitDos.writeBytes(paramter);<span class=\"comment\">//关键的一行代码，这样会出现乱码</span></div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><p>整个排查过程很是费解，先排查接受web端的参数中是否乱码，然后排查请求第三方接口时是否设置了编码；然后排查向第三方接口传递参数时是否编码统一等等关键点，排查后依然中文乱码</p>\n</li>\n<li><p>就定位到了DataOutputStream.writeBytes(paramter);这一行，因为说实在的，关于这个类这个方法还是第一次见到在这样的场景中使用；</p>\n</li>\n<li><p>然后就进入到writeBytes方法源码中看了一下，果然发现了问题所在，该方法源码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">writeBytes</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> len = s.length();</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; len ; i++) &#123;</div><div class=\"line\">           out.write((<span class=\"keyword\">byte</span>)s.charAt(i));<span class=\"comment\">//关键问题就出现在这一行</span></div><div class=\"line\">       &#125;</div><div class=\"line\">       incCount(len);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>我们在源码中发现了一个在for循环中使用了<em>(byte)s.charAt(i)</em>这一行代码，下面逐行分解如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 我们把上面的for循环中的out.write((byte)s.charAt(i));这一句代码拆开成如下   的for循环语句</div><div class=\"line\"> */</span></div><div class=\"line\">String s = <span class=\"string\">\"张三\"</span>；</div><div class=\"line\"><span class=\"keyword\">int</span> len = s.length();<span class=\"comment\">//长度为2</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; len ; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> cs = s.charAt(i); <span class=\"comment\">//张 [一个char占2个字节(16位)，所以可以存储大部分的中文]</span></div><div class=\"line\">   \t<span class=\"keyword\">byte</span> by = (<span class=\"keyword\">byte</span>)cs; <span class=\"comment\">//问题根源所在 [一个byte占1个字节(8位)，把char强转为byte就会发生丢失]</span></div><div class=\"line\">       out.write(by); <span class=\"comment\">//其实调用的api方法为 write(int b);只不过把byte自动向上转型为int型而已</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>解决问题的办法就是不要使用out.writeBytes(String s)这个方法，更改为out.write(byte b[])这个重载的方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//有问题的代码 </span></div><div class=\"line\">submitDos.writeBytes(paramter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//更改后的代码</span></div><div class=\"line\">submitDos.write(paramter.getBytes());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>下面针对DataOutputStream的write方法写一个小demo进行验证</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\"> * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)</div><div class=\"line\"> * </div><div class=\"line\"> * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容</div><div class=\"line\"> */</span></div><div class=\"line\">DataOutputStream out = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\test.txt\"</span>));</div><div class=\"line\">String count = <span class=\"string\">\"马\"</span>;</div><div class=\"line\">out.writeBytes(count);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码写入到文件中的内容为 l；即英文的消息l字符；因为我们把”马”这个中文调用out.writeBytes(String s)方法时，由于内部发送了如下转换：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">char</span> c= count.charAt(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">byte</span> b = (<span class=\"keyword\">byte</span>)c;<span class=\"comment\">//把值为马的char型转换为byte型后，值变为108</span></div><div class=\"line\">out.write(c); <span class=\"comment\">//由于108对应的就是小写英文字符l</span></div></pre></td></tr></table></figure>\n<p>所以问题根源就是 JAVA中的char是16位的，一个char存储一个中文字符，直接用转换byte强转换后会变为8位，直接导致高8位丢失，从而导致中文乱码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\"> * 声明一个指向D盘下test.txt的输出流(d盘确保已经存在test.txt文件)</div><div class=\"line\"> * </div><div class=\"line\"> * 然后我们把一个中文字符分别通过out.writeBytes(String s)方法和write(byte b[])写入到这个文件中然后我们查看写入到文件中的内容</div><div class=\"line\"> */</span></div><div class=\"line\">DataOutputStream out = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\test.txt\"</span>));</div><div class=\"line\">String count = <span class=\"string\">\"马\"</span>;</div><div class=\"line\">out.write(count.getBytes()); <span class=\"comment\">//可以正常的把中文字符 马 输出到test.txt文件中</span></div></pre></td></tr></table></figure>\n"},{"title":"Jquery中prop和attr使用时的问题","date":"2017-02-08T05:25:25.000Z","_content":"在使用jquery的attr属性处理单选按钮选中时，出现偶尔不能选中的问题，后来才知道jquery官方推荐使用prop，而再推荐使用attr。\n\n<!--more-->\n\n```java\n $(\"input[type='radio'][name='workerType'][value='IT']\").attr('checked',true);\n```\n使用attr方法操作单选按钮为选中状态时，会出现不能选中的情况（偶现）\n\n\n```java\n $(\"input[type='radio'][name='workerType'][value='IT']\").prop('checked',true);\n```\n使用prop方法操作单选按钮为选中状态时，可以正常选中\n\n\n当在页面中用jquery来控制DOM元素中的属性时要用 .prop()；不要再用 .attr()，不然会出问题，官方文档也推荐这样","source":"_posts/Jquery中prop和attr使用时的问题.md","raw":"---\ntitle: Jquery中prop和attr使用时的问题\ndate: 2017-02-08 13:25:25\ncategories: javascript\ntags: jquery\n---\n在使用jquery的attr属性处理单选按钮选中时，出现偶尔不能选中的问题，后来才知道jquery官方推荐使用prop，而再推荐使用attr。\n\n<!--more-->\n\n```java\n $(\"input[type='radio'][name='workerType'][value='IT']\").attr('checked',true);\n```\n使用attr方法操作单选按钮为选中状态时，会出现不能选中的情况（偶现）\n\n\n```java\n $(\"input[type='radio'][name='workerType'][value='IT']\").prop('checked',true);\n```\n使用prop方法操作单选按钮为选中状态时，可以正常选中\n\n\n当在页面中用jquery来控制DOM元素中的属性时要用 .prop()；不要再用 .attr()，不然会出问题，官方文档也推荐这样","slug":"Jquery中prop和attr使用时的问题","published":1,"updated":"2018-07-08T09:37:48.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1phz000w30tzg9ovkx34","content":"<p>在使用jquery的attr属性处理单选按钮选中时，出现偶尔不能选中的问题，后来才知道jquery官方推荐使用prop，而再推荐使用attr。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input[type='radio'][name='workerType'][value='IT']\"</span>).attr(<span class=\"string\">'checked'</span>,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>使用attr方法操作单选按钮为选中状态时，会出现不能选中的情况（偶现）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input[type='radio'][name='workerType'][value='IT']\"</span>).prop(<span class=\"string\">'checked'</span>,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>使用prop方法操作单选按钮为选中状态时，可以正常选中</p>\n<p>当在页面中用jquery来控制DOM元素中的属性时要用 .prop()；不要再用 .attr()，不然会出问题，官方文档也推荐这样</p>\n","excerpt":"<p>在使用jquery的attr属性处理单选按钮选中时，出现偶尔不能选中的问题，后来才知道jquery官方推荐使用prop，而再推荐使用attr。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input[type='radio'][name='workerType'][value='IT']\"</span>).attr(<span class=\"string\">'checked'</span>,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>使用attr方法操作单选按钮为选中状态时，会出现不能选中的情况（偶现）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"input[type='radio'][name='workerType'][value='IT']\"</span>).prop(<span class=\"string\">'checked'</span>,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>使用prop方法操作单选按钮为选中状态时，可以正常选中</p>\n<p>当在页面中用jquery来控制DOM元素中的属性时要用 .prop()；不要再用 .attr()，不然会出问题，官方文档也推荐这样</p>"},{"title":"Linux服务器中查看log日志技巧","date":"2017-09-27T03:17:07.000Z","_content":"平时开发过程中，一般应用程序都会部署在linux操作系统上面，不管在什么阶段(开发、测试、线上)，难免会出现各种各样的问题，有些时候应该是bug，有些时候可能是偶然事件；不管出现什么问题，我们都需要找出问题所在，并且快速解决它；通常的做法无非是以下两种策略：\n\n![Alt text](http://soujava.com/images/log0.jpg)\n\n<!--more-->\n\n- 再次复现问题，并实时监控日志，排查出问题\n- 分析已有的日志数据，一步一步的分析排查问题\n\n一般服务上面的日志文件都比较大，少则数GB；多则数TB；如果我们把一个数GB的日志文件放到window系统的电脑中进行分析，仅仅去打开这个日志文件，估计电脑就会卡爆，更别说全局搜索关键字啦。然而在Linux服务器上面直接通过一些命令去操作分析这个数GB的日志文件，那是轻而易举的事情，下面我们可以看到一个服务器中日志文件的大小是\n\n\n![Alt text](http://soujava.com/images/log1.png)\n\n\n\n一、**查看日志信息的相关命令**\n\n1. tail -f catalina.out\n\n\t该命令可以实时查看新输出的增量log日志信息，所以适合查看访问量不大的应用服务，比如访问量很高，后台日志输出速度非常快，每秒千行的速度，用肉眼是根本无法看出什么日志的。\n\n2. tail -n 1000 catalina.out\n\n\t查看日志文件中最后(最新)的1000行日志信息，这种方式适合查询‘复现问题操作时，查看该复现操作所产生的所有相关的日志信息’比较有用，比上面的tail -f 命令的好处就是可以快速查看最后操作的日志信息，有点快照的概念\n\n3. tail -n +100 catalina.out\n\t\n\t从日志文件的第100行开始向后展示；这种方式适用于针对日志文件很大时的问题排查，跟上面的命令大同小异吧\n\t\n4. sed -n '10,15p' catalina.out\n\t\n\t查看日志文件的第10~15行的日志信息，这种方式适合针对历史产生的日志信息进行分析排查，比如我们可以先大概定位到问题发生的日期区间，然后用sed命令把这个日期区间的所有相关日志信息进行输出排查。\t\n\t\n5. cat catalina.out\n\t\n\t该命令输出整个日志文件的所有日志信息，所以该命令适合查看日志文件比较小的情况下使用，所以该命令一般都会结合其他命令去使用。比如：\n\n\t>cat catalina.out | head -n 1000 | tail -n +500\n\t\n\t查看日志文件从1000行开始显示，查看500行的日志信息，即查看1000~1500行的日志数据。\n\n6. grep\n\n\t如果想更加快速的排查分析日志文件中的日志数据，不会少了grep命令的使用，这么强大的搜索命令绝对可以让你排查问题的时候洋洋得意如沐春风。\n\n\n二、**模拟现实场景进行问题排查**\n\n\n>9月25日，收到反馈平台的系统通知，有用户反馈大概上午10点30分左右，IM功能模块无法正常使用，发送的消息都是失败状态。\n\n\n- 问题分析步骤\n\t- \n>1.先大概找出9月25日 10点30分左右的日志数据\n\n>>cat catalina.out | grep '2017-09-26 10:30'\n\n![Alt text](http://soujava.com/images/log2.png)\n\n\n>2.再次根据实际的情况，缩小数据查找分析范围，比如在查看10点30分产生的数据时，从第176行开始查看\n\n>>cat catalina.out | grep '2017-09-26 10:30' | tail -n +176\n\n![Alt text](http://soujava.com/images/log3.png)\n\n\n通过以上两步不停的缩小范围，相信很快就可以定位到问题所在了。\n \n\n\n\n\n\n","source":"_posts/Linux服务器中查看log日志技巧.md","raw":"---\ntitle: Linux服务器中查看log日志技巧\ndate: 2017-09-27 11:17:07\ncategories: Linux\ntags: Linux\n---\n平时开发过程中，一般应用程序都会部署在linux操作系统上面，不管在什么阶段(开发、测试、线上)，难免会出现各种各样的问题，有些时候应该是bug，有些时候可能是偶然事件；不管出现什么问题，我们都需要找出问题所在，并且快速解决它；通常的做法无非是以下两种策略：\n\n![Alt text](http://soujava.com/images/log0.jpg)\n\n<!--more-->\n\n- 再次复现问题，并实时监控日志，排查出问题\n- 分析已有的日志数据，一步一步的分析排查问题\n\n一般服务上面的日志文件都比较大，少则数GB；多则数TB；如果我们把一个数GB的日志文件放到window系统的电脑中进行分析，仅仅去打开这个日志文件，估计电脑就会卡爆，更别说全局搜索关键字啦。然而在Linux服务器上面直接通过一些命令去操作分析这个数GB的日志文件，那是轻而易举的事情，下面我们可以看到一个服务器中日志文件的大小是\n\n\n![Alt text](http://soujava.com/images/log1.png)\n\n\n\n一、**查看日志信息的相关命令**\n\n1. tail -f catalina.out\n\n\t该命令可以实时查看新输出的增量log日志信息，所以适合查看访问量不大的应用服务，比如访问量很高，后台日志输出速度非常快，每秒千行的速度，用肉眼是根本无法看出什么日志的。\n\n2. tail -n 1000 catalina.out\n\n\t查看日志文件中最后(最新)的1000行日志信息，这种方式适合查询‘复现问题操作时，查看该复现操作所产生的所有相关的日志信息’比较有用，比上面的tail -f 命令的好处就是可以快速查看最后操作的日志信息，有点快照的概念\n\n3. tail -n +100 catalina.out\n\t\n\t从日志文件的第100行开始向后展示；这种方式适用于针对日志文件很大时的问题排查，跟上面的命令大同小异吧\n\t\n4. sed -n '10,15p' catalina.out\n\t\n\t查看日志文件的第10~15行的日志信息，这种方式适合针对历史产生的日志信息进行分析排查，比如我们可以先大概定位到问题发生的日期区间，然后用sed命令把这个日期区间的所有相关日志信息进行输出排查。\t\n\t\n5. cat catalina.out\n\t\n\t该命令输出整个日志文件的所有日志信息，所以该命令适合查看日志文件比较小的情况下使用，所以该命令一般都会结合其他命令去使用。比如：\n\n\t>cat catalina.out | head -n 1000 | tail -n +500\n\t\n\t查看日志文件从1000行开始显示，查看500行的日志信息，即查看1000~1500行的日志数据。\n\n6. grep\n\n\t如果想更加快速的排查分析日志文件中的日志数据，不会少了grep命令的使用，这么强大的搜索命令绝对可以让你排查问题的时候洋洋得意如沐春风。\n\n\n二、**模拟现实场景进行问题排查**\n\n\n>9月25日，收到反馈平台的系统通知，有用户反馈大概上午10点30分左右，IM功能模块无法正常使用，发送的消息都是失败状态。\n\n\n- 问题分析步骤\n\t- \n>1.先大概找出9月25日 10点30分左右的日志数据\n\n>>cat catalina.out | grep '2017-09-26 10:30'\n\n![Alt text](http://soujava.com/images/log2.png)\n\n\n>2.再次根据实际的情况，缩小数据查找分析范围，比如在查看10点30分产生的数据时，从第176行开始查看\n\n>>cat catalina.out | grep '2017-09-26 10:30' | tail -n +176\n\n![Alt text](http://soujava.com/images/log3.png)\n\n\n通过以上两步不停的缩小范围，相信很快就可以定位到问题所在了。\n \n\n\n\n\n\n","slug":"Linux服务器中查看log日志技巧","published":1,"updated":"2018-07-08T09:37:48.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pi1001030tzf9g0l5ag","content":"<p>平时开发过程中，一般应用程序都会部署在linux操作系统上面，不管在什么阶段(开发、测试、线上)，难免会出现各种各样的问题，有些时候应该是bug，有些时候可能是偶然事件；不管出现什么问题，我们都需要找出问题所在，并且快速解决它；通常的做法无非是以下两种策略：</p>\n<p><img src=\"http://soujava.com/images/log0.jpg\" alt=\"Alt text\"></p>\n<a id=\"more\"></a>\n<ul>\n<li>再次复现问题，并实时监控日志，排查出问题</li>\n<li>分析已有的日志数据，一步一步的分析排查问题</li>\n</ul>\n<p>一般服务上面的日志文件都比较大，少则数GB；多则数TB；如果我们把一个数GB的日志文件放到window系统的电脑中进行分析，仅仅去打开这个日志文件，估计电脑就会卡爆，更别说全局搜索关键字啦。然而在Linux服务器上面直接通过一些命令去操作分析这个数GB的日志文件，那是轻而易举的事情，下面我们可以看到一个服务器中日志文件的大小是</p>\n<p><img src=\"http://soujava.com/images/log1.png\" alt=\"Alt text\"></p>\n<p>一、<strong>查看日志信息的相关命令</strong></p>\n<ol>\n<li><p>tail -f catalina.out</p>\n<p> 该命令可以实时查看新输出的增量log日志信息，所以适合查看访问量不大的应用服务，比如访问量很高，后台日志输出速度非常快，每秒千行的速度，用肉眼是根本无法看出什么日志的。</p>\n</li>\n<li><p>tail -n 1000 catalina.out</p>\n<p> 查看日志文件中最后(最新)的1000行日志信息，这种方式适合查询‘复现问题操作时，查看该复现操作所产生的所有相关的日志信息’比较有用，比上面的tail -f 命令的好处就是可以快速查看最后操作的日志信息，有点快照的概念</p>\n</li>\n<li><p>tail -n +100 catalina.out</p>\n<p> 从日志文件的第100行开始向后展示；这种方式适用于针对日志文件很大时的问题排查，跟上面的命令大同小异吧</p>\n</li>\n<li><p>sed -n ‘10,15p’ catalina.out</p>\n<p> 查看日志文件的第10~15行的日志信息，这种方式适合针对历史产生的日志信息进行分析排查，比如我们可以先大概定位到问题发生的日期区间，然后用sed命令把这个日期区间的所有相关日志信息进行输出排查。    </p>\n</li>\n<li><p>cat catalina.out</p>\n<p> 该命令输出整个日志文件的所有日志信息，所以该命令适合查看日志文件比较小的情况下使用，所以该命令一般都会结合其他命令去使用。比如：</p>\n<blockquote>\n<p>cat catalina.out | head -n 1000 | tail -n +500</p>\n</blockquote>\n<p> 查看日志文件从1000行开始显示，查看500行的日志信息，即查看1000~1500行的日志数据。</p>\n</li>\n<li><p>grep</p>\n<p> 如果想更加快速的排查分析日志文件中的日志数据，不会少了grep命令的使用，这么强大的搜索命令绝对可以让你排查问题的时候洋洋得意如沐春风。</p>\n</li>\n</ol>\n<p>二、<strong>模拟现实场景进行问题排查</strong></p>\n<blockquote>\n<p>9月25日，收到反馈平台的系统通知，有用户反馈大概上午10点30分左右，IM功能模块无法正常使用，发送的消息都是失败状态。</p>\n</blockquote>\n<ul>\n<li>问题分析步骤<ul>\n<li><blockquote>\n<p>1.先大概找出9月25日 10点30分左右的日志数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>cat catalina.out | grep ‘2017-09-26 10:30’</p>\n</blockquote>\n</blockquote>\n<p><img src=\"http://soujava.com/images/log2.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>2.再次根据实际的情况，缩小数据查找分析范围，比如在查看10点30分产生的数据时，从第176行开始查看</p>\n<blockquote>\n<p>cat catalina.out | grep ‘2017-09-26 10:30’ | tail -n +176</p>\n</blockquote>\n</blockquote>\n<p><img src=\"http://soujava.com/images/log3.png\" alt=\"Alt text\"></p>\n<p>通过以上两步不停的缩小范围，相信很快就可以定位到问题所在了。</p>\n","excerpt":"<p>平时开发过程中，一般应用程序都会部署在linux操作系统上面，不管在什么阶段(开发、测试、线上)，难免会出现各种各样的问题，有些时候应该是bug，有些时候可能是偶然事件；不管出现什么问题，我们都需要找出问题所在，并且快速解决它；通常的做法无非是以下两种策略：</p>\n<p><img src=\"http://soujava.com/images/log0.jpg\" alt=\"Alt text\"></p>","more":"<ul>\n<li>再次复现问题，并实时监控日志，排查出问题</li>\n<li>分析已有的日志数据，一步一步的分析排查问题</li>\n</ul>\n<p>一般服务上面的日志文件都比较大，少则数GB；多则数TB；如果我们把一个数GB的日志文件放到window系统的电脑中进行分析，仅仅去打开这个日志文件，估计电脑就会卡爆，更别说全局搜索关键字啦。然而在Linux服务器上面直接通过一些命令去操作分析这个数GB的日志文件，那是轻而易举的事情，下面我们可以看到一个服务器中日志文件的大小是</p>\n<p><img src=\"http://soujava.com/images/log1.png\" alt=\"Alt text\"></p>\n<p>一、<strong>查看日志信息的相关命令</strong></p>\n<ol>\n<li><p>tail -f catalina.out</p>\n<p> 该命令可以实时查看新输出的增量log日志信息，所以适合查看访问量不大的应用服务，比如访问量很高，后台日志输出速度非常快，每秒千行的速度，用肉眼是根本无法看出什么日志的。</p>\n</li>\n<li><p>tail -n 1000 catalina.out</p>\n<p> 查看日志文件中最后(最新)的1000行日志信息，这种方式适合查询‘复现问题操作时，查看该复现操作所产生的所有相关的日志信息’比较有用，比上面的tail -f 命令的好处就是可以快速查看最后操作的日志信息，有点快照的概念</p>\n</li>\n<li><p>tail -n +100 catalina.out</p>\n<p> 从日志文件的第100行开始向后展示；这种方式适用于针对日志文件很大时的问题排查，跟上面的命令大同小异吧</p>\n</li>\n<li><p>sed -n ‘10,15p’ catalina.out</p>\n<p> 查看日志文件的第10~15行的日志信息，这种方式适合针对历史产生的日志信息进行分析排查，比如我们可以先大概定位到问题发生的日期区间，然后用sed命令把这个日期区间的所有相关日志信息进行输出排查。    </p>\n</li>\n<li><p>cat catalina.out</p>\n<p> 该命令输出整个日志文件的所有日志信息，所以该命令适合查看日志文件比较小的情况下使用，所以该命令一般都会结合其他命令去使用。比如：</p>\n<blockquote>\n<p>cat catalina.out | head -n 1000 | tail -n +500</p>\n</blockquote>\n<p> 查看日志文件从1000行开始显示，查看500行的日志信息，即查看1000~1500行的日志数据。</p>\n</li>\n<li><p>grep</p>\n<p> 如果想更加快速的排查分析日志文件中的日志数据，不会少了grep命令的使用，这么强大的搜索命令绝对可以让你排查问题的时候洋洋得意如沐春风。</p>\n</li>\n</ol>\n<p>二、<strong>模拟现实场景进行问题排查</strong></p>\n<blockquote>\n<p>9月25日，收到反馈平台的系统通知，有用户反馈大概上午10点30分左右，IM功能模块无法正常使用，发送的消息都是失败状态。</p>\n</blockquote>\n<ul>\n<li>问题分析步骤<ul>\n<li><blockquote>\n<p>1.先大概找出9月25日 10点30分左右的日志数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>cat catalina.out | grep ‘2017-09-26 10:30’</p>\n</blockquote>\n</blockquote>\n<p><img src=\"http://soujava.com/images/log2.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>2.再次根据实际的情况，缩小数据查找分析范围，比如在查看10点30分产生的数据时，从第176行开始查看</p>\n<blockquote>\n<p>cat catalina.out | grep ‘2017-09-26 10:30’ | tail -n +176</p>\n</blockquote>\n</blockquote>\n<p><img src=\"http://soujava.com/images/log3.png\" alt=\"Alt text\"></p>\n<p>通过以上两步不停的缩小范围，相信很快就可以定位到问题所在了。</p>"},{"title":"Linux双网卡配置(内外网同时访问)","date":"2016-08-17T02:28:50.000Z","_content":"\n事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n**一、Ubuntu篇**\n\n1、进入/etc/network目录中，编辑interfaces文件\n\n\n![](http://soujava.com/images/linuxInter0.png)\n\n\n2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息\n\t\n![](http://soujava.com/images/linuxInter1.png)\n\n3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)\n\n\t>vim /etc/resolvconf/resolv.conf.d/base\n\n![](http://soujava.com/images/linuxInter2.png)\n\n4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。\n\n![](http://soujava.com/images/linuxInter4.png)\n\n5、把外网网关地址添加为默认路由，同时删除内网网关的路由\n\n\t>route add default  gw 192.168.1.1\n\t\n\t>route del default  gw 192.168.0.253\n\n6、路由配置完成后，运行route命令我们可以看到default变成了eth1\n\n![](http://soujava.com/images/linuxInter3.png)\n\n7、重启网络服务\n\n\t>/etc/init.d/networking restart\n\n8、总结：\n\n- 查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备\n- 配置eth1网卡配置文件\n- 添加外网dns地址\n- 设置外网网关为默认路由\n- 重启网络服务\n\n\n注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。\n\n\n**一、Cent0S篇**\n\n1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。\n\n3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。\n\n\t>cp ifcfg-eth0 ifcfg-eth1\n\n4、修改ifcfg-eth1配置文件,具体信息如下\n```java\n\tDEVICE=eth1\n\tTYPE=Ethernet\n\tNOBOOT=yes\n\tNM_CONTROLLED=yes\n\tBOOTPROTO=none\n\tIPADDR=192.168.*.*\n\tPREFIX=24\n\tGATEWAY=192.168.*.*\n\tDEFROUTE=yes\t\n\tIPV4_FAILURE_FATAL=yes\n\tIPV6INIT=no\n\tNAME=\"System eth1\"\n\tDNS1=*.*.*.*\n\tHWADDR=你的虚拟机的网卡设备的mac地址\n\tLAST_CONNECT=1465192940\n\tUSERCTL=no\t\n```\n\n5、重启网络服务(下面两条命令都可以)\n\t> service network restart\n\t> /etc/init.d/network restart","source":"_posts/Linux双网卡配置-内外网同时访问.md","raw":"---\ntitle: Linux双网卡配置(内外网同时访问)\ndate: 2016-08-17 10:28:50\ncategories: Linux\ntags: 网卡\n---\n\n事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n**一、Ubuntu篇**\n\n1、进入/etc/network目录中，编辑interfaces文件\n\n\n![](http://soujava.com/images/linuxInter0.png)\n\n\n2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息\n\t\n![](http://soujava.com/images/linuxInter1.png)\n\n3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)\n\n\t>vim /etc/resolvconf/resolv.conf.d/base\n\n![](http://soujava.com/images/linuxInter2.png)\n\n4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。\n\n![](http://soujava.com/images/linuxInter4.png)\n\n5、把外网网关地址添加为默认路由，同时删除内网网关的路由\n\n\t>route add default  gw 192.168.1.1\n\t\n\t>route del default  gw 192.168.0.253\n\n6、路由配置完成后，运行route命令我们可以看到default变成了eth1\n\n![](http://soujava.com/images/linuxInter3.png)\n\n7、重启网络服务\n\n\t>/etc/init.d/networking restart\n\n8、总结：\n\n- 查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备\n- 配置eth1网卡配置文件\n- 添加外网dns地址\n- 设置外网网关为默认路由\n- 重启网络服务\n\n\n注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。\n\n\n**一、Cent0S篇**\n\n1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。\n\n3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。\n\n\t>cp ifcfg-eth0 ifcfg-eth1\n\n4、修改ifcfg-eth1配置文件,具体信息如下\n```java\n\tDEVICE=eth1\n\tTYPE=Ethernet\n\tNOBOOT=yes\n\tNM_CONTROLLED=yes\n\tBOOTPROTO=none\n\tIPADDR=192.168.*.*\n\tPREFIX=24\n\tGATEWAY=192.168.*.*\n\tDEFROUTE=yes\t\n\tIPV4_FAILURE_FATAL=yes\n\tIPV6INIT=no\n\tNAME=\"System eth1\"\n\tDNS1=*.*.*.*\n\tHWADDR=你的虚拟机的网卡设备的mac地址\n\tLAST_CONNECT=1465192940\n\tUSERCTL=no\t\n```\n\n5、重启网络服务(下面两条命令都可以)\n\t> service network restart\n\t> /etc/init.d/network restart","slug":"Linux双网卡配置-内外网同时访问","published":1,"updated":"2018-07-08T09:37:48.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pi3001330tznlz28q96","content":"<p>事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p><strong>一、Ubuntu篇</strong></p>\n<p>1、进入/etc/network目录中，编辑interfaces文件</p>\n<p><img src=\"http://soujava.com/images/linuxInter0.png\" alt=\"\"></p>\n<p>2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息</p>\n<p><img src=\"http://soujava.com/images/linuxInter1.png\" alt=\"\"></p>\n<p>3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)</p>\n<pre><code>&gt;vim /etc/resolvconf/resolv.conf.d/base\n</code></pre><p><img src=\"http://soujava.com/images/linuxInter2.png\" alt=\"\"></p>\n<p>4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。</p>\n<p><img src=\"http://soujava.com/images/linuxInter4.png\" alt=\"\"></p>\n<p>5、把外网网关地址添加为默认路由，同时删除内网网关的路由</p>\n<pre><code>&gt;route add default  gw 192.168.1.1\n\n&gt;route del default  gw 192.168.0.253\n</code></pre><p>6、路由配置完成后，运行route命令我们可以看到default变成了eth1</p>\n<p><img src=\"http://soujava.com/images/linuxInter3.png\" alt=\"\"></p>\n<p>7、重启网络服务</p>\n<pre><code>&gt;/etc/init.d/networking restart\n</code></pre><p>8、总结：</p>\n<ul>\n<li>查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备</li>\n<li>配置eth1网卡配置文件</li>\n<li>添加外网dns地址</li>\n<li>设置外网网关为默认路由</li>\n<li>重启网络服务</li>\n</ul>\n<p>注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。</p>\n<p><strong>一、Cent0S篇</strong></p>\n<p>1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。</p>\n<p>3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。</p>\n<pre><code>&gt;cp ifcfg-eth0 ifcfg-eth1\n</code></pre><p>4、修改ifcfg-eth1配置文件,具体信息如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=eth1</div><div class=\"line\">TYPE=Ethernet</div><div class=\"line\">NOBOOT=yes</div><div class=\"line\">NM_CONTROLLED=yes</div><div class=\"line\">BOOTPROTO=none</div><div class=\"line\">IPADDR=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">PREFIX=<span class=\"number\">24</span></div><div class=\"line\">GATEWAY=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">DEFROUTE=yes\t</div><div class=\"line\">IPV4_FAILURE_FATAL=yes</div><div class=\"line\">IPV6INIT=no</div><div class=\"line\">NAME=<span class=\"string\">\"System eth1\"</span></div><div class=\"line\">DNS1=*.*.*.*</div><div class=\"line\">HWADDR=你的虚拟机的网卡设备的mac地址</div><div class=\"line\">LAST_CONNECT=<span class=\"number\">1465192940</span></div><div class=\"line\">USERCTL=no</div></pre></td></tr></table></figure></p>\n<p>5、重启网络服务(下面两条命令都可以)</p>\n<pre><code>&gt; service network restart\n&gt; /etc/init.d/network restart\n</code></pre>","excerpt":"","more":"<p>事情的经过是这样的。。。。。；我有一台linux服务器操作系统，只能内网访问，现在需要提供给公司其他地域的同事通过VPN可以访问操作，那么就需要为这个linux操作系统配置一个新配置一个网卡，你修改网卡配置文件之前需要确保你的linux操作系统已经有两块物理网卡了，也就是说当你进入linux操作系统后，运行ifconfig命令可以看到eth0和eth1两个网卡信息，这才代表你的物理环境没有问题。</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p><strong>一、Ubuntu篇</strong></p>\n<p>1、进入/etc/network目录中，编辑interfaces文件</p>\n<p><img src=\"http://soujava.com/images/linuxInter0.png\" alt=\"\"></p>\n<p>2、配置eth1网卡的信息(ip地址，网关、子网掩码、DNS)信息</p>\n<p><img src=\"http://soujava.com/images/linuxInter1.png\" alt=\"\"></p>\n<p>3、配置完相关信息后，需要编辑路由配置文件，配置域名服务器(这里配置完成后，永久生效)</p>\n<pre><code>&gt;vim /etc/resolvconf/resolv.conf.d/base\n</code></pre><p><img src=\"http://soujava.com/images/linuxInter2.png\" alt=\"\"></p>\n<p>4、配置完网卡信息后，我们还不能连通外网，因为我们系统的路由默认采用内网网关进行通信的，我们需要把外网的网关设置成默认路由。先运行route命令查看路由信息，可以看到default 为eth0；即默认为内网网关。</p>\n<p><img src=\"http://soujava.com/images/linuxInter4.png\" alt=\"\"></p>\n<p>5、把外网网关地址添加为默认路由，同时删除内网网关的路由</p>\n<pre><code>&gt;route add default  gw 192.168.1.1\n\n&gt;route del default  gw 192.168.0.253\n</code></pre><p>6、路由配置完成后，运行route命令我们可以看到default变成了eth1</p>\n<p><img src=\"http://soujava.com/images/linuxInter3.png\" alt=\"\"></p>\n<p>7、重启网络服务</p>\n<pre><code>&gt;/etc/init.d/networking restart\n</code></pre><p>8、总结：</p>\n<ul>\n<li>查看物理环境十分正常，也就是通过ifconfig命令是否显示两块网卡设备</li>\n<li>配置eth1网卡配置文件</li>\n<li>添加外网dns地址</li>\n<li>设置外网网关为默认路由</li>\n<li>重启网络服务</li>\n</ul>\n<p>注：我之前一直在/etc/resolv.conf中添加dns信息，后来才明白这个是临时文件，当在/etc/resolvconf/resolv.conf.d/base文件中配置完成后，/etc/resolv.conf中信息会自动生成的。</p>\n<p><strong>一、Cent0S篇</strong></p>\n<p>1、同样检查一下系统物理环境是否正常，通过ifconfig命令查看是否存在除eth0网卡设备外，还有其他网卡eth*;</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>2、进入/etc/sysconfig/network-scripts/目录下面，我们可以看到有两个网卡设备的配置文件：ifcfg-eth0、ifcfg-eth1。</p>\n<p>3、将ifcfg-eth0配置文件复制一份并改名为ifcfg-eth1。</p>\n<pre><code>&gt;cp ifcfg-eth0 ifcfg-eth1\n</code></pre><p>4、修改ifcfg-eth1配置文件,具体信息如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=eth1</div><div class=\"line\">TYPE=Ethernet</div><div class=\"line\">NOBOOT=yes</div><div class=\"line\">NM_CONTROLLED=yes</div><div class=\"line\">BOOTPROTO=none</div><div class=\"line\">IPADDR=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">PREFIX=<span class=\"number\">24</span></div><div class=\"line\">GATEWAY=<span class=\"number\">192.168</span>.*.*</div><div class=\"line\">DEFROUTE=yes\t</div><div class=\"line\">IPV4_FAILURE_FATAL=yes</div><div class=\"line\">IPV6INIT=no</div><div class=\"line\">NAME=<span class=\"string\">\"System eth1\"</span></div><div class=\"line\">DNS1=*.*.*.*</div><div class=\"line\">HWADDR=你的虚拟机的网卡设备的mac地址</div><div class=\"line\">LAST_CONNECT=<span class=\"number\">1465192940</span></div><div class=\"line\">USERCTL=no</div></pre></td></tr></table></figure></p>\n<p>5、重启网络服务(下面两条命令都可以)</p>\n<pre><code>&gt; service network restart\n&gt; /etc/init.d/network restart\n</code></pre>"},{"title":"Linux查看端口占用","date":"2016-08-17T03:30:49.000Z","_content":"在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。\n\n一、**分步操作**\n\n1. 先使用下面命令，查看当前环境的所有进程\n\n\tnetstat  -apn\n\n2. 然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止\n\n\tkill -9 pid号\n\t\n二、**快捷操作**\n\n- 查看对应的端口是否被占用\n\n\tnetstat  -apn | grep  protNO（端口号）\n\n例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。\n```java\n\t[maps@localhost bin]$ netstat -apn|grep 8983\n    (Not all processes could be identified, non-owned process info\n    will not be shown, you would have to be root to see it all.)\n   \ttcp6       0      0 :::8983                 :::*                    LISTEN      3272/java \n```\n    \n  我们可以看到占用8983端口的进程id号为:3272\n \n- 查看端口对应的进程ID信息\n  \n\tps -aux|grep 3272\n\n------\n```java\n\t[maps@localhost bin]$ ps -aux|grep 3272\n    maps      3272  0.4 11.3 2596728 173412 pts/0  Sl   22:04   0:03 java -server -Xms512m -Xmx512m -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-6.3.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M -Dsolr.log.dir=/usr/local/develop/soft/solr-6.3.0/server/logs -Djetty.port=8983 -DSTOP.PORT=7983 -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-6.3.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-6.3.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-6.3.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-6.3.0/bin/oom_solr.sh 8983 /usr/local/develop/soft/solr-6.3.0/server/logs -jar start.jar --module=http\n    maps     30521  0.0  0.0 112660   964 pts/0    R+   22:15   0:00 grep --color=auto 3272\n```","source":"_posts/Linux查看端口占用.md","raw":"---\ntitle: Linux查看端口占用\ndate: 2016-08-17 11:30:49\ncategories: Linux\ntags: 网卡\n---\n在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。\n\n一、**分步操作**\n\n1. 先使用下面命令，查看当前环境的所有进程\n\n\tnetstat  -apn\n\n2. 然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止\n\n\tkill -9 pid号\n\t\n二、**快捷操作**\n\n- 查看对应的端口是否被占用\n\n\tnetstat  -apn | grep  protNO（端口号）\n\n例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。\n```java\n\t[maps@localhost bin]$ netstat -apn|grep 8983\n    (Not all processes could be identified, non-owned process info\n    will not be shown, you would have to be root to see it all.)\n   \ttcp6       0      0 :::8983                 :::*                    LISTEN      3272/java \n```\n    \n  我们可以看到占用8983端口的进程id号为:3272\n \n- 查看端口对应的进程ID信息\n  \n\tps -aux|grep 3272\n\n------\n```java\n\t[maps@localhost bin]$ ps -aux|grep 3272\n    maps      3272  0.4 11.3 2596728 173412 pts/0  Sl   22:04   0:03 java -server -Xms512m -Xmx512m -XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-6.3.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M -Dsolr.log.dir=/usr/local/develop/soft/solr-6.3.0/server/logs -Djetty.port=8983 -DSTOP.PORT=7983 -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-6.3.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-6.3.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-6.3.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-6.3.0/bin/oom_solr.sh 8983 /usr/local/develop/soft/solr-6.3.0/server/logs -jar start.jar --module=http\n    maps     30521  0.0  0.0 112660   964 pts/0    R+   22:15   0:00 grep --color=auto 3272\n```","slug":"Linux查看端口占用","published":1,"updated":"2018-07-08T09:37:48.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pi4001730tzusz48es2","content":"<p>在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。</p>\n<p>一、<strong>分步操作</strong></p>\n<ol>\n<li><p>先使用下面命令，查看当前环境的所有进程</p>\n<p> netstat  -apn</p>\n</li>\n<li><p>然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止</p>\n<p> kill -9 pid号</p>\n</li>\n</ol>\n<p>二、<strong>快捷操作</strong></p>\n<ul>\n<li><p>查看对应的端口是否被占用</p>\n<p>  netstat  -apn | grep  protNO（端口号）</p>\n</li>\n</ul>\n<p>例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@localhost</span> bin]$ netstat -apn|grep <span class=\"number\">8983</span></div><div class=\"line\">   (Not all processes could be identified, non-owned process info</div><div class=\"line\">   will not be shown, you would have to be root to see it all.)</div><div class=\"line\">  \ttcp6       <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">8983</span>                 :::*                    LISTEN      <span class=\"number\">3272</span>/java</div></pre></td></tr></table></figure></p>\n<p>  我们可以看到占用8983端口的进程id号为:3272</p>\n<ul>\n<li><p>查看端口对应的进程ID信息</p>\n<p>  ps -aux|grep 3272</p>\n</li>\n</ul>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@localhost</span> bin]$ ps -aux|grep <span class=\"number\">3272</span></div><div class=\"line\">   maps      <span class=\"number\">3272</span>  <span class=\"number\">0.4</span> <span class=\"number\">11.3</span> <span class=\"number\">2596728</span> <span class=\"number\">173412</span> pts/<span class=\"number\">0</span>  Sl   <span class=\"number\">22</span>:<span class=\"number\">04</span>   <span class=\"number\">0</span>:<span class=\"number\">03</span> java -server -Xms512m -Xmx512m -XX:NewRatio=<span class=\"number\">3</span> -XX:SurvivorRatio=<span class=\"number\">4</span> -XX:TargetSurvivorRatio=<span class=\"number\">90</span> -XX:MaxTenuringThreshold=<span class=\"number\">8</span> -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=<span class=\"number\">4</span> -XX:ParallelGCThreads=<span class=\"number\">4</span> -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=<span class=\"number\">64</span>m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=<span class=\"number\">50</span> -XX:CMSMaxAbortablePrecleanTime=<span class=\"number\">6000</span> -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=<span class=\"number\">9</span> -XX:GCLogFileSize=<span class=\"number\">20</span>M -Dsolr.log.dir=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/logs -Djetty.port=<span class=\"number\">8983</span> -DSTOP.PORT=<span class=\"number\">7983</span> -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/bin/oom_solr.sh <span class=\"number\">8983</span> /usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/logs -jar start.jar --<span class=\"keyword\">module</span>=http</div><div class=\"line\">   maps     <span class=\"number\">30521</span>  <span class=\"number\">0.0</span>  <span class=\"number\">0.0</span> <span class=\"number\">112660</span>   <span class=\"number\">964</span> pts/<span class=\"number\">0</span>    R+   <span class=\"number\">22</span>:<span class=\"number\">15</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> grep --color=auto <span class=\"number\">3272</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>在操作linux服务器的时候经常会碰到端口被占用的情况，那么如果更好的找到某个端口被什么占用呢。</p>\n<p>一、<strong>分步操作</strong></p>\n<ol>\n<li><p>先使用下面命令，查看当前环境的所有进程</p>\n<p> netstat  -apn</p>\n</li>\n<li><p>然后看某一个端口，后面对应的PID，然后通过kill  PID,把该端口停止</p>\n<p> kill -9 pid号</p>\n</li>\n</ol>\n<p>二、<strong>快捷操作</strong></p>\n<ul>\n<li><p>查看对应的端口是否被占用</p>\n<p>  netstat  -apn | grep  protNO（端口号）</p>\n</li>\n</ul>\n<p>例如：netstat -apn | grep 8983  查看8983端口是否被占用，如果没占用，则显示被占用的进程；如果未被占用，则什么也不会输出。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@localhost</span> bin]$ netstat -apn|grep <span class=\"number\">8983</span></div><div class=\"line\">   (Not all processes could be identified, non-owned process info</div><div class=\"line\">   will not be shown, you would have to be root to see it all.)</div><div class=\"line\">  \ttcp6       <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">8983</span>                 :::*                    LISTEN      <span class=\"number\">3272</span>/java</div></pre></td></tr></table></figure></p>\n<p>  我们可以看到占用8983端口的进程id号为:3272</p>\n<ul>\n<li><p>查看端口对应的进程ID信息</p>\n<p>  ps -aux|grep 3272</p>\n</li>\n</ul>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@localhost</span> bin]$ ps -aux|grep <span class=\"number\">3272</span></div><div class=\"line\">   maps      <span class=\"number\">3272</span>  <span class=\"number\">0.4</span> <span class=\"number\">11.3</span> <span class=\"number\">2596728</span> <span class=\"number\">173412</span> pts/<span class=\"number\">0</span>  Sl   <span class=\"number\">22</span>:<span class=\"number\">04</span>   <span class=\"number\">0</span>:<span class=\"number\">03</span> java -server -Xms512m -Xmx512m -XX:NewRatio=<span class=\"number\">3</span> -XX:SurvivorRatio=<span class=\"number\">4</span> -XX:TargetSurvivorRatio=<span class=\"number\">90</span> -XX:MaxTenuringThreshold=<span class=\"number\">8</span> -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ConcGCThreads=<span class=\"number\">4</span> -XX:ParallelGCThreads=<span class=\"number\">4</span> -XX:+CMSScavengeBeforeRemark -XX:PretenureSizeThreshold=<span class=\"number\">64</span>m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=<span class=\"number\">50</span> -XX:CMSMaxAbortablePrecleanTime=<span class=\"number\">6000</span> -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:-OmitStackTraceInFastThrow -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/logs/solr_gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=<span class=\"number\">9</span> -XX:GCLogFileSize=<span class=\"number\">20</span>M -Dsolr.log.dir=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/logs -Djetty.port=<span class=\"number\">8983</span> -DSTOP.PORT=<span class=\"number\">7983</span> -DSTOP.KEY=solrrocks -Duser.timezone=UTC -Djetty.home=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server -Dsolr.solr.home=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/solr -Dsolr.install.dir=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0 -Xss256k -Dsolr.log.muteconsole -XX:OnOutOfMemoryError=/usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/bin/oom_solr.sh <span class=\"number\">8983</span> /usr/local/develop/soft/solr-<span class=\"number\">6.3</span>.0/server/logs -jar start.jar --<span class=\"keyword\">module</span>=http</div><div class=\"line\">   maps     <span class=\"number\">30521</span>  <span class=\"number\">0.0</span>  <span class=\"number\">0.0</span> <span class=\"number\">112660</span>   <span class=\"number\">964</span> pts/<span class=\"number\">0</span>    R+   <span class=\"number\">22</span>:<span class=\"number\">15</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> grep --color=auto <span class=\"number\">3272</span></div></pre></td></tr></table></figure>"},{"title":"Linux开机启动后经常需要配置网卡","date":"2016-07-25T09:27:42.000Z","_content":"在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。\n\n![Alt text](http://soujava.com/images/wangka.jpg)\n\n然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！\n\n![Alt text](http://soujava.com/images/wankapeizhi.jpg)\n\n解决方法：\n使用如下命令编辑网卡信息：\n``` java\n   vim /etc/sysconfig/network-scripts/ifcfg-eth0\n```\n网卡信息的内容大致如下：\n```\n\tDEVICE=\"eth0\"\n\tTYPE=ethernet\n\tUUID=1221231K-4DFSD-8SDFA\n\tONBOOT=\"yes\"\n\tIPADDR=192.168.1.152\n\tNETMASK=255.255.255.0\n\tGATEWAY=192.168.1.1\n\tBOOTPROTO=static\n```\n然后在网卡信息中找到\"NOBOOT=no\"配置选项，改成\"NOBOOT=yes\"\n\n再重启电脑后就不需要再次手动配置激活网卡了！","source":"_posts/Linux开机启动后经常需要配置网卡.md","raw":"---\ntitle: Linux开机启动后经常需要配置网卡\ndate: 2016-07-25 17:27:42\ncategories: Linux\ntags: 网卡\n---\n在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。\n\n![Alt text](http://soujava.com/images/wangka.jpg)\n\n然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！\n\n![Alt text](http://soujava.com/images/wankapeizhi.jpg)\n\n解决方法：\n使用如下命令编辑网卡信息：\n``` java\n   vim /etc/sysconfig/network-scripts/ifcfg-eth0\n```\n网卡信息的内容大致如下：\n```\n\tDEVICE=\"eth0\"\n\tTYPE=ethernet\n\tUUID=1221231K-4DFSD-8SDFA\n\tONBOOT=\"yes\"\n\tIPADDR=192.168.1.152\n\tNETMASK=255.255.255.0\n\tGATEWAY=192.168.1.1\n\tBOOTPROTO=static\n```\n然后在网卡信息中找到\"NOBOOT=no\"配置选项，改成\"NOBOOT=yes\"\n\n再重启电脑后就不需要再次手动配置激活网卡了！","slug":"Linux开机启动后经常需要配置网卡","published":1,"updated":"2018-07-08T09:37:48.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pi6001930tzsoyrjzz8","content":"<p>在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。</p>\n<p><img src=\"http://soujava.com/images/wangka.jpg\" alt=\"Alt text\"></p>\n<p>然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！</p>\n<p><img src=\"http://soujava.com/images/wankapeizhi.jpg\" alt=\"Alt text\"></p>\n<p>解决方法：<br>使用如下命令编辑网卡信息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure></p>\n<p>网卡信息的内容大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=&quot;eth0&quot;</div><div class=\"line\">TYPE=ethernet</div><div class=\"line\">UUID=1221231K-4DFSD-8SDFA</div><div class=\"line\">ONBOOT=&quot;yes&quot;</div><div class=\"line\">IPADDR=192.168.1.152</div><div class=\"line\">NETMASK=255.255.255.0</div><div class=\"line\">GATEWAY=192.168.1.1</div><div class=\"line\">BOOTPROTO=static</div></pre></td></tr></table></figure></p>\n<p>然后在网卡信息中找到”NOBOOT=no”配置选项，改成”NOBOOT=yes”</p>\n<p>再重启电脑后就不需要再次手动配置激活网卡了！</p>\n","excerpt":"","more":"<p>在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。</p>\n<p><img src=\"http://soujava.com/images/wangka.jpg\" alt=\"Alt text\"></p>\n<p>然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！</p>\n<p><img src=\"http://soujava.com/images/wankapeizhi.jpg\" alt=\"Alt text\"></p>\n<p>解决方法：<br>使用如下命令编辑网卡信息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure></p>\n<p>网卡信息的内容大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEVICE=&quot;eth0&quot;</div><div class=\"line\">TYPE=ethernet</div><div class=\"line\">UUID=1221231K-4DFSD-8SDFA</div><div class=\"line\">ONBOOT=&quot;yes&quot;</div><div class=\"line\">IPADDR=192.168.1.152</div><div class=\"line\">NETMASK=255.255.255.0</div><div class=\"line\">GATEWAY=192.168.1.1</div><div class=\"line\">BOOTPROTO=static</div></pre></td></tr></table></figure></p>\n<p>然后在网卡信息中找到”NOBOOT=no”配置选项，改成”NOBOOT=yes”</p>\n<p>再重启电脑后就不需要再次手动配置激活网卡了！</p>\n"},{"title":"Linux系统添加配置随开机启动的服务-rc.local配置","date":"2016-07-25T09:46:24.000Z","_content":"在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：\n\n1. 以root身份才能启动的服务\n2. 以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)\n\n**一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下**\n```java\n\ttomcat的安装路径：/usr/local/server/apache-tomcat-8\n```\n那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了\n```java\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：\n   \n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n**二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）**\n```java\n\tredis的安装路径：/usr/local/cache/redis-2.8.19\n```\n如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)\n```java\n\t/usr/local/cache/redis-2.8.19/src/redis-server\n```\n如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：\n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\tsu redis -c \"/usr/local/cache/redis-2.8.19/src/redis-server\"\n```\n**三、总结**\n我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？\n\nrc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。","source":"_posts/Linux系统添加配置随开机启动的服务.md","raw":"---\ntitle: Linux系统添加配置随开机启动的服务-rc.local配置\ndate: 2016-07-25 17:46:24\ncategories: Linux\ntags: 服务开机启动\n---\n在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：\n\n1. 以root身份才能启动的服务\n2. 以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)\n\n**一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下**\n```java\n\ttomcat的安装路径：/usr/local/server/apache-tomcat-8\n```\n那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了\n```java\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：\n   \n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\t/usr/local/server/apache-tomcat-8/bin/start.sh\n```\n**二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）**\n```java\n\tredis的安装路径：/usr/local/cache/redis-2.8.19\n```\n如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)\n```java\n\t/usr/local/cache/redis-2.8.19/src/redis-server\n```\n如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：\n1. 打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令\n```java\n\ttouch /var/lock/subsys/local\n\tsu redis -c \"/usr/local/cache/redis-2.8.19/src/redis-server\"\n```\n**三、总结**\n我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？\n\nrc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。","slug":"Linux系统添加配置随开机启动的服务","published":1,"updated":"2018-07-08T09:37:48.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pi7001b30tz5kstafwo","content":"<p>在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：</p>\n<ol>\n<li>以root身份才能启动的服务</li>\n<li>以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)</li>\n</ol>\n<p><strong>一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tomcat的安装路径：/usr/local/server/apache-tomcat-<span class=\"number\">8</span></div></pre></td></tr></table></figure></p>\n<p>那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis的安装路径：/usr/local/cache/redis-<span class=\"number\">2.8</span>.19</div></pre></td></tr></table></figure></p>\n<p>如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/cache/redis-<span class=\"number\">2.8</span>.19/src/redis-server</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">su redis -c <span class=\"string\">\"/usr/local/cache/redis-2.8.19/src/redis-server\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>三、总结</strong><br>我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？</p>\n<p>rc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。</p>\n","excerpt":"","more":"<p>在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：</p>\n<ol>\n<li>以root身份才能启动的服务</li>\n<li>以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)</li>\n</ol>\n<p><strong>一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tomcat的安装路径：/usr/local/server/apache-tomcat-<span class=\"number\">8</span></div></pre></td></tr></table></figure></p>\n<p>那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">/usr/local/server/apache-tomcat-<span class=\"number\">8</span>/bin/start.sh</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis的安装路径：/usr/local/cache/redis-<span class=\"number\">2.8</span>.19</div></pre></td></tr></table></figure></p>\n<p>如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/cache/redis-<span class=\"number\">2.8</span>.19/src/redis-server</div></pre></td></tr></table></figure></p>\n<p>如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：</p>\n<ol>\n<li>打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">su redis -c <span class=\"string\">\"/usr/local/cache/redis-2.8.19/src/redis-server\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>三、总结</strong><br>我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？</p>\n<p>rc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。</p>\n"},{"title":"MySql安装后添加的用户不能远程连接登陆","date":"2016-08-19T08:23:54.000Z","_content":"\n**一、添加一个用户fileserver并授权操作**\n![Alt text](http://soujava.com/images/mysql1.png)\n\n*注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 *\n\n**二、查询刚才添加的用户是否存在**\n![Alt text](http://soujava.com/images/mysql2.png)\n\n*注：可以看到刚才的fileserver用户已经创建完毕 *\n\n**三、用刚才添加成功的用户登陆操作报异常**\n![Alt text](http://soujava.com/images/mysql3.png)\n\n*注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户*\n\n**四、在添加一个fileserver用户并分配可以本地localhost登录**\n![Alt text](http://soujava.com/images/mysql4.png)\n\n**五、再查下刚才创建的用户是否已经存在**\n![Alt text](http://soujava.com/images/mysql5.png)\n\n\n**六、再次用刚刚创建的fileserver登录操作，可以正常登录**\n![Alt text](http://soujava.com/images/mysql6.png)\n*注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 *\n\n**七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务**\n![Alt text](http://soujava.com/images/mysql7.png)\n*注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限*\n\n**八、在mysql配置文件中配置该IP的访问操作**\n![Alt text](http://soujava.com/images/mysql8.png)\n\n**九、配置完成后重启mysql服务**\n![Alt text](http://soujava.com/images/mysql9.png)\n\n**十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功**\n![Alt text](http://soujava.com/images/mysql10.png)","source":"_posts/MySql安装后添加的用户不能远程连接登陆.md","raw":"---\ntitle: MySql安装后添加的用户不能远程连接登陆\ndate: 2016-08-19 16:23:54\ncategories: Mysql\ntags: Mysql\n---\n\n**一、添加一个用户fileserver并授权操作**\n![Alt text](http://soujava.com/images/mysql1.png)\n\n*注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 *\n\n**二、查询刚才添加的用户是否存在**\n![Alt text](http://soujava.com/images/mysql2.png)\n\n*注：可以看到刚才的fileserver用户已经创建完毕 *\n\n**三、用刚才添加成功的用户登陆操作报异常**\n![Alt text](http://soujava.com/images/mysql3.png)\n\n*注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户*\n\n**四、在添加一个fileserver用户并分配可以本地localhost登录**\n![Alt text](http://soujava.com/images/mysql4.png)\n\n**五、再查下刚才创建的用户是否已经存在**\n![Alt text](http://soujava.com/images/mysql5.png)\n\n\n**六、再次用刚刚创建的fileserver登录操作，可以正常登录**\n![Alt text](http://soujava.com/images/mysql6.png)\n*注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 *\n\n**七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务**\n![Alt text](http://soujava.com/images/mysql7.png)\n*注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限*\n\n**八、在mysql配置文件中配置该IP的访问操作**\n![Alt text](http://soujava.com/images/mysql8.png)\n\n**九、配置完成后重启mysql服务**\n![Alt text](http://soujava.com/images/mysql9.png)\n\n**十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功**\n![Alt text](http://soujava.com/images/mysql10.png)","slug":"MySql安装后添加的用户不能远程连接登陆","published":1,"updated":"2018-07-08T09:37:48.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pi8001f30tz8ljsgyyw","content":"<p><strong>一、添加一个用户fileserver并授权操作</strong><br><img src=\"http://soujava.com/images/mysql1.png\" alt=\"Alt text\"></p>\n<p><em>注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 </em></p>\n<p><strong>二、查询刚才添加的用户是否存在</strong><br><img src=\"http://soujava.com/images/mysql2.png\" alt=\"Alt text\"></p>\n<p><em>注：可以看到刚才的fileserver用户已经创建完毕 </em></p>\n<p><strong>三、用刚才添加成功的用户登陆操作报异常</strong><br><img src=\"http://soujava.com/images/mysql3.png\" alt=\"Alt text\"></p>\n<p><em>注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户</em></p>\n<p><strong>四、在添加一个fileserver用户并分配可以本地localhost登录</strong><br><img src=\"http://soujava.com/images/mysql4.png\" alt=\"Alt text\"></p>\n<p><strong>五、再查下刚才创建的用户是否已经存在</strong><br><img src=\"http://soujava.com/images/mysql5.png\" alt=\"Alt text\"></p>\n<p><strong>六、再次用刚刚创建的fileserver登录操作，可以正常登录</strong><br><img src=\"http://soujava.com/images/mysql6.png\" alt=\"Alt text\"><br><em>注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 </em></p>\n<p><strong>七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务</strong><br><img src=\"http://soujava.com/images/mysql7.png\" alt=\"Alt text\"><br><em>注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限</em></p>\n<p><strong>八、在mysql配置文件中配置该IP的访问操作</strong><br><img src=\"http://soujava.com/images/mysql8.png\" alt=\"Alt text\"></p>\n<p><strong>九、配置完成后重启mysql服务</strong><br><img src=\"http://soujava.com/images/mysql9.png\" alt=\"Alt text\"></p>\n<p><strong>十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功</strong><br><img src=\"http://soujava.com/images/mysql10.png\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<p><strong>一、添加一个用户fileserver并授权操作</strong><br><img src=\"http://soujava.com/images/mysql1.png\" alt=\"Alt text\"></p>\n<p><em>注：添加一个可以访问所有数据库、用户名为fileserver、可以在本地和远程进行访问的、密码是fileserver的用户 </em></p>\n<p><strong>二、查询刚才添加的用户是否存在</strong><br><img src=\"http://soujava.com/images/mysql2.png\" alt=\"Alt text\"></p>\n<p><em>注：可以看到刚才的fileserver用户已经创建完毕 </em></p>\n<p><strong>三、用刚才添加成功的用户登陆操作报异常</strong><br><img src=\"http://soujava.com/images/mysql3.png\" alt=\"Alt text\"></p>\n<p><em>注：当用户刚才创建的用户登录并输入密码后时提示如下信息，这是因为当前的登录操作是在mysql本地客户端进行的，而上面的user表中没有对应localhost的fileserve的用户</em></p>\n<p><strong>四、在添加一个fileserver用户并分配可以本地localhost登录</strong><br><img src=\"http://soujava.com/images/mysql4.png\" alt=\"Alt text\"></p>\n<p><strong>五、再查下刚才创建的用户是否已经存在</strong><br><img src=\"http://soujava.com/images/mysql5.png\" alt=\"Alt text\"></p>\n<p><strong>六、再次用刚刚创建的fileserver登录操作，可以正常登录</strong><br><img src=\"http://soujava.com/images/mysql6.png\" alt=\"Alt text\"><br><em>注：使用mysql -u 命令登录操作时默认使用localhost的域用户登录操作 </em></p>\n<p><strong>七、在另外一台IP地址的电脑上面安装Navicate工具，并且连接之前安装的mysql服务</strong><br><img src=\"http://soujava.com/images/mysql7.png\" alt=\"Alt text\"><br><em>注：连接时提示连接错误，因为mysql服务没有对当前IP的电脑开放远程访问的权限</em></p>\n<p><strong>八、在mysql配置文件中配置该IP的访问操作</strong><br><img src=\"http://soujava.com/images/mysql8.png\" alt=\"Alt text\"></p>\n<p><strong>九、配置完成后重启mysql服务</strong><br><img src=\"http://soujava.com/images/mysql9.png\" alt=\"Alt text\"></p>\n<p><strong>十、再次在不同IP(192.168.0.203)地址电脑上面通过Navicate连接mysql服务操作，连接成功</strong><br><img src=\"http://soujava.com/images/mysql10.png\" alt=\"Alt text\"></p>\n"},{"title":"Maven忽略其他依赖jar包插件-maven-enforcer-plugin","date":"2016-09-20T02:54:31.000Z","_content":"我们在开发产品时，可能不同人开发不同的功能模块，比如：\n\n•现在A开发a模块，B开发b模块\n\n•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本\n\n<!--more-->\n\n•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中\n\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\n•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示\n\n\n其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了\n\n```java\n\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-enforcer-plugin</artifactId>\n\t\t\t<version>1.2</version>\n\t\t\t<executions>\n\t\t\t\t<execution>\n\t\t\t\t\t<id>enforce-banned-dependencies</id>\n\t\t\t\t\t<goals>\n\t\t\t\t\t\t<goal>enforce</goal>\n\t\t\t\t\t</goals>\n\t\t\t\t\t<configuration>\n\t\t\t\t\t\t<rules>\n\t\t\t\t\t\t\t<bannedDependencies>\n\t\t\t\t\t\t\t\t<searchTransitive>true</searchTransitive>\n\t\t\t\t\t\t\t\t<excludes>\n\t\t\t\t\t\t\t\t\t<!--在下面添加忽略的相关jar包 -->\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:dictionary:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:flow</exclude>\n\t\t\t\t\t\t\t\t</excludes>\n\t\t\t\t\t\t\t</bannedDependencies>\n\t\t\t\t\t\t</rules>\n\t\t\t\t\t\t<fail>true</fail>\n\t\t\t\t\t</configuration>\n\t\t\t\t</execution>\n\t\t\t</executions>\n\t</plugin>\n```\n","source":"_posts/Maven忽略其他依赖jar包插件.md","raw":"---\ntitle: Maven忽略其他依赖jar包插件-maven-enforcer-plugin\ndate: 2016-09-20 10:54:31\ncategories: Maven\ntags: Maven插件\n---\n我们在开发产品时，可能不同人开发不同的功能模块，比如：\n\n•现在A开发a模块，B开发b模块\n\n•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本\n\n<!--more-->\n\n•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中\n\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\n•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示\n\n\n其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了\n\n```java\n\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-enforcer-plugin</artifactId>\n\t\t\t<version>1.2</version>\n\t\t\t<executions>\n\t\t\t\t<execution>\n\t\t\t\t\t<id>enforce-banned-dependencies</id>\n\t\t\t\t\t<goals>\n\t\t\t\t\t\t<goal>enforce</goal>\n\t\t\t\t\t</goals>\n\t\t\t\t\t<configuration>\n\t\t\t\t\t\t<rules>\n\t\t\t\t\t\t\t<bannedDependencies>\n\t\t\t\t\t\t\t\t<searchTransitive>true</searchTransitive>\n\t\t\t\t\t\t\t\t<excludes>\n\t\t\t\t\t\t\t\t\t<!--在下面添加忽略的相关jar包 -->\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:dictionary:1.0.0-SNAPSHOT</exclude>\n\t\t\t\t\t\t\t\t\t<exclude>com.maps:flow</exclude>\n\t\t\t\t\t\t\t\t</excludes>\n\t\t\t\t\t\t\t</bannedDependencies>\n\t\t\t\t\t\t</rules>\n\t\t\t\t\t\t<fail>true</fail>\n\t\t\t\t\t</configuration>\n\t\t\t\t</execution>\n\t\t\t</executions>\n\t</plugin>\n```\n","slug":"Maven忽略其他依赖jar包插件","published":1,"updated":"2018-07-08T09:37:48.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pia001h30tzaudgmclg","content":"<p>我们在开发产品时，可能不同人开发不同的功能模块，比如：</p>\n<p>•现在A开发a模块，B开发b模块</p>\n<p>•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本</p>\n<a id=\"more\"></a>\n<p>•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中<br>    <exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude></p>\n<p>•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示</p>\n<p>其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;plugin&gt;</div><div class=\"line\">\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">\t\t&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;</div><div class=\"line\">\t\t&lt;version&gt;1.2&lt;/version&gt;</div><div class=\"line\">\t\t&lt;executions&gt;</div><div class=\"line\">\t\t\t&lt;execution&gt;</div><div class=\"line\">\t\t\t\t&lt;id&gt;enforce-banned-dependencies&lt;/id&gt;</div><div class=\"line\">\t\t\t\t&lt;goals&gt;</div><div class=\"line\">\t\t\t\t\t&lt;goal&gt;enforce&lt;/goal&gt;</div><div class=\"line\">\t\t\t\t&lt;/goals&gt;</div><div class=\"line\">\t\t\t\t&lt;configuration&gt;</div><div class=\"line\">\t\t\t\t\t&lt;rules&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;searchTransitive&gt;true&lt;/searchTransitive&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;!--在下面添加忽略的相关jar包 --&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:modelman:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:dictionary:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:flow&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;/excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;/bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/rules&gt;</div><div class=\"line\">\t\t\t\t\t&lt;fail&gt;true&lt;/fail&gt;</div><div class=\"line\">\t\t\t\t&lt;/configuration&gt;</div><div class=\"line\">\t\t\t&lt;/execution&gt;</div><div class=\"line\">\t\t&lt;/executions&gt;</div><div class=\"line\">&lt;/plugin&gt;</div></pre></td></tr></table></figure>\n","excerpt":"<p>我们在开发产品时，可能不同人开发不同的功能模块，比如：</p>\n<p>•现在A开发a模块，B开发b模块</p>\n<p>•a模块依赖modelman-1.0.0-SNAPSHOT.jar包；b模块依赖modelman-1.0.2-RELEASE.jar包；很显然目前最新的jar包版本应该都用modelman-1.0.2-RELEASE.jar这个版本</p>","more":"<p>•那么我们就可以把modelman-1.0.0-SNAPSHOT.jar这个jar包添加配置到下面中<br>    <exclude>com.maps:modelman:1.0.0-SNAPSHOT</exclude></p>\n<p>•添加完成后当编译产品时则会自动检测是否还有用到modelman:1.0.0-SNAPSHOT的模块，如检测出有，那么则中断编译并提示</p>\n<p>其实我们只需在xml配置文件中添加插件maven-enforcer-plugin配置就行了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;plugin&gt;</div><div class=\"line\">\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">\t\t&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;</div><div class=\"line\">\t\t&lt;version&gt;1.2&lt;/version&gt;</div><div class=\"line\">\t\t&lt;executions&gt;</div><div class=\"line\">\t\t\t&lt;execution&gt;</div><div class=\"line\">\t\t\t\t&lt;id&gt;enforce-banned-dependencies&lt;/id&gt;</div><div class=\"line\">\t\t\t\t&lt;goals&gt;</div><div class=\"line\">\t\t\t\t\t&lt;goal&gt;enforce&lt;/goal&gt;</div><div class=\"line\">\t\t\t\t&lt;/goals&gt;</div><div class=\"line\">\t\t\t\t&lt;configuration&gt;</div><div class=\"line\">\t\t\t\t\t&lt;rules&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;searchTransitive&gt;true&lt;/searchTransitive&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;!--在下面添加忽略的相关jar包 --&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:modelman:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:dictionary:1.0.0-SNAPSHOT&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t\t&lt;exclude&gt;com.maps:flow&lt;/exclude&gt;</div><div class=\"line\">\t\t\t\t\t\t\t&lt;/excludes&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;/bannedDependencies&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/rules&gt;</div><div class=\"line\">\t\t\t\t\t&lt;fail&gt;true&lt;/fail&gt;</div><div class=\"line\">\t\t\t\t&lt;/configuration&gt;</div><div class=\"line\">\t\t\t&lt;/execution&gt;</div><div class=\"line\">\t\t&lt;/executions&gt;</div><div class=\"line\">&lt;/plugin&gt;</div></pre></td></tr></table></figure>"},{"title":"Mybatis动态传入tableName--非预编译(STATEMENT)","date":"2016-07-28T11:12:02.000Z","_content":"在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：\n**1、正常的查询**\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM user WHERE userid = #{userid}\n   </select>\n```\n上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM user WHERE userid = ?\"); \n\tpreState.setString(1,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；\n这个参数是什么作用呢：\n1. 设定mybatis执行sql的模式\n2. STATEMENT设定为非预编译语句模式\n3. PREPARED设定为预编译语句模式--mybatis默认\n4. CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。\n\n\n综上所述,mybatis默认按照预编译语句方式执行sql语句\n\n**2、动态传入表名**\n\n其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的\"user\"是动态传入的，动态传入表名是mybatis中的一种特殊情况，\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM #{user} WHERE userid = #{userid} //错误的写法\n   </select>\n```\n针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM ? WHERE userid = ?\"); \n\tpreState.setString(1,\"USER\");\n\tpreState.setString(2,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n我们把该段JDBC代码通过java代码执行后，发现会报异常：\n```java\n   java.sql.SQLException: ORA-00903: 表名无效\n```\n所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：\n1. select标签语句中添加statementType=\"STATEMENT\"的属性配置\n2. 标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;\n```java\n   <select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM ${user} WHERE userid = ${userid} //正确的写法\n   </select>\n```\n上面的语句标签中通过添加statementType=\"STATEMENT\"配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=\"STATEMENT\"非预编译配置后，为什么还需要把#换成$呢？其实是这样：\n1. \"#\" 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。\n2. \"$\" 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！","source":"_posts/Mybatis动态传入tableName-非预编译-STATEMENT.md","raw":"---\ntitle: Mybatis动态传入tableName--非预编译(STATEMENT)\ndate: 2016-07-28 19:12:02\ncategories: Mybatis\ntags: 动态传入tableName\n---\n在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：\n**1、正常的查询**\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM user WHERE userid = #{userid}\n   </select>\n```\n上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM user WHERE userid = ?\"); \n\tpreState.setString(1,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；\n这个参数是什么作用呢：\n1. 设定mybatis执行sql的模式\n2. STATEMENT设定为非预编译语句模式\n3. PREPARED设定为预编译语句模式--mybatis默认\n4. CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。\n\n\n综上所述,mybatis默认按照预编译语句方式执行sql语句\n\n**2、动态传入表名**\n\n其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的\"user\"是动态传入的，动态传入表名是mybatis中的一种特殊情况，\n```java\n   <select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM #{user} WHERE userid = #{userid} //错误的写法\n   </select>\n```\n针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：\n```java\n\tClass.forName(\"com.mysql.jdbc.Driver\");\n\tConnection conn = DriverManage.getConnection(\"jdbc:mysql://localhost:3306/dbname\",\"root\",\"112233\");\n\tPreparedStatement preState = conn.prepareStatement(\"SELECT * FROM ? WHERE userid = ?\"); \n\tpreState.setString(1,\"USER\");\n\tpreState.setString(2,\"96\");\n\tResultSet result = preState.executeQuery();\n\twhile(result.next()){\n\t\tresult.getString(columnname);\n\t\t..........\n\t}\t\n```\n我们把该段JDBC代码通过java代码执行后，发现会报异常：\n```java\n   java.sql.SQLException: ORA-00903: 表名无效\n```\n所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：\n1. select标签语句中添加statementType=\"STATEMENT\"的属性配置\n2. 标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;\n```java\n   <select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\">\n       SELECT * FROM ${user} WHERE userid = ${userid} //正确的写法\n   </select>\n```\n上面的语句标签中通过添加statementType=\"STATEMENT\"配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=\"STATEMENT\"非预编译配置后，为什么还需要把#换成$呢？其实是这样：\n1. \"#\" 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。\n2. \"$\" 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！","slug":"Mybatis动态传入tableName-非预编译-STATEMENT","published":1,"updated":"2018-07-08T09:37:48.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pib001k30tzbf08f18w","content":"<p>在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：<br><strong>1、正常的查询</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM user WHERE userid = #&#123;userid&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM user WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；<br>这个参数是什么作用呢：</p>\n<ol>\n<li>设定mybatis执行sql的模式</li>\n<li>STATEMENT设定为非预编译语句模式</li>\n<li>PREPARED设定为预编译语句模式–mybatis默认</li>\n<li>CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。</li>\n</ol>\n<p>综上所述,mybatis默认按照预编译语句方式执行sql语句</p>\n<p><strong>2、动态传入表名</strong></p>\n<p>其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的”user”是动态传入的，动态传入表名是mybatis中的一种特殊情况，<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM #&#123;user&#125; WHERE userid = #&#123;userid&#125; //错误的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM ? WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"USER\"</span>);</div><div class=\"line\">preState.setString(<span class=\"number\">2</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们把该段JDBC代码通过java代码执行后，发现会报异常：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.sql.SQLException: ORA-<span class=\"number\">00903</span>: 表名无效</div></pre></td></tr></table></figure></p>\n<p>所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：</p>\n<ol>\n<li>select标签语句中添加statementType=”STATEMENT”的属性配置</li>\n<li>标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM $&#123;user&#125; WHERE userid = $&#123;userid&#125; //正确的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的语句标签中通过添加statementType=”STATEMENT”配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=”STATEMENT”非预编译配置后，为什么还需要把#换成$呢？其实是这样：</p>\n<ol>\n<li>“#” 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。</li>\n<li>“$” 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！</li>\n</ol>\n","excerpt":"","more":"<p>在使用Mybatis过程中，你可以体会到它的强大与灵活之处，由衷的为Mybatis之父点上999个赞！在使用过程中经常会遇到这样一种情况，我查询数据的时候，表名称是动态的从程序中传入的，比如我们通过mybatis的xml文件写sql查询时都是下面的样子：<br><strong>1、正常的查询</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM user WHERE userid = #&#123;userid&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的查询语句用mybatis执行时,其实是自动的按照JDBC的预编译语句方式执行的，等同于下面一段JDBC代码的执行过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM user WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里我们不禁疑惑，难道mybatis默认都是按照预编译语句的方式执行sql的吗？其实就是这样。通过查看mybatis官网文档可以看到有这么一个参数，statementType=[STATEMENT | PREPARED | CALLABLE ]；有三个可选值，mybatis默认值是PREPARED；<br>这个参数是什么作用呢：</p>\n<ol>\n<li>设定mybatis执行sql的模式</li>\n<li>STATEMENT设定为非预编译语句模式</li>\n<li>PREPARED设定为预编译语句模式–mybatis默认</li>\n<li>CALLABLE设定为兼容模式，或者自适应模式，比如设置该值后，mybatis处理sql时会自动的处理根据#、$去判断处理，后面说一下#和$的区别。</li>\n</ol>\n<p>综上所述,mybatis默认按照预编译语句方式执行sql语句</p>\n<p><strong>2、动态传入表名</strong></p>\n<p>其实也经常会遇到动态的传入tableName的情况，也就是说上面的sql语句中的”user”是动态传入的，动态传入表名是mybatis中的一种特殊情况，<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM #&#123;user&#125; WHERE userid = #&#123;userid&#125; //错误的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>针对上面的语句，如果让mybatis仍然按照预编译语句方式执行时，等同于如下面的JDBC代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</div><div class=\"line\">Connection conn = DriverManage.getConnection(<span class=\"string\">\"jdbc:mysql://localhost:3306/dbname\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"112233\"</span>);</div><div class=\"line\">PreparedStatement preState = conn.prepareStatement(<span class=\"string\">\"SELECT * FROM ? WHERE userid = ?\"</span>); </div><div class=\"line\">preState.setString(<span class=\"number\">1</span>,<span class=\"string\">\"USER\"</span>);</div><div class=\"line\">preState.setString(<span class=\"number\">2</span>,<span class=\"string\">\"96\"</span>);</div><div class=\"line\">ResultSet result = preState.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span>(result.next())&#123;</div><div class=\"line\">\tresult.getString(columnname);</div><div class=\"line\">\t..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们把该段JDBC代码通过java代码执行后，发现会报异常：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.sql.SQLException: ORA-<span class=\"number\">00903</span>: 表名无效</div></pre></td></tr></table></figure></p>\n<p>所以可以说明预编译语句不能用于列名(查询的列名也不能用预编译语句)、表名；只能作用与where条件参数属性！既然JDBC就不能将预编译语句方式作用与表名上面，那么mybatis就同样也行不通(因为mybatis默认是预编译语句模式)。不过mybatis也早已考虑到了这种情况，所以为我们做了处理：</p>\n<ol>\n<li>select标签语句中添加statementType=”STATEMENT”的属性配置</li>\n<li>标签内的sql语句中将所有的${}更换成为#{}，即将$还成#;<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"activityEnrollModelTableName\" statementType=\"STATEMENT\" parameterType=\"java.util.HashMap\" resultType=\"java.util.HashMap\"&gt;</div><div class=\"line\">    SELECT * FROM $&#123;user&#125; WHERE userid = $&#123;userid&#125; //正确的写法</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的语句标签中通过添加statementType=”STATEMENT”配置后，mybatis就不再使用预编译语句方式执行sql语句了，也就是通过直接执行sql语句操作；那么既然添加了statementType=”STATEMENT”非预编译配置后，为什么还需要把#换成$呢？其实是这样：</p>\n<ol>\n<li>“#” 是预编译语句模式下面的默认匹配符，也就是说mybatis遇到#{}时，将#{userid}替换成占位符?;被解析为一个JDBC预编译语句，然后再将#{userid}本身的值set进来。</li>\n<li>“$” 是非预编译语句下面的匹配符，非预编译语句说白了就是你传入什么sql语句，就执行什么sql语句，mybatis不做任何处理操作，但是这里mybatis会将${}对应的值，当做一个字符串处理，也就是说你程序接口方法中传递过来参数值是什么，对应的sql填充就是什么！</li>\n</ol>\n"},{"title":"Mysql 8.0 安装笔记","date":"2018-07-08T09:41:46.000Z","_content":"\n一、下载安装包\n\n访问地址：https://dev.mysql.com/downloads/mysql/\n\n\n![Alt text](http://soujava.com/images/mysqlDownload.png)\n\n二、安装\n\n 1、在D盘中新建mysql文件夹，然后把下载下来的安装包解压到里面。\n \n```java\n\n\tD:\\develop\\soft>cd mysql\n```\n \n```java\n\n    D:\\develop\\soft\\mysql>dir\n\t\n\t\tD:\\develop\\soft\\mysql 的目录\n\t\t\n\t\t2018/06/30  12:42    <DIR>          .\n\t\t2018/06/30  12:42    <DIR>          ..\n\t\t2018/06/30  14:19    <DIR>          mysql-8.0.11-winx64\n\t\t               0 个文件              0 字节\n\t\t               3 个目录 522,972,643,328 可用字节*\n\t\n```\n\n2、切换到mysql-8.0.11-winx64目录中\n\n```java\n\n\tD:\\develop\\soft\\mysql>cd mysql-8.0.11-winx64\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64>dir\n\t\t 驱动器 D 中的卷是 新加卷\n\t\t 卷的序列号是 F6E6-5223\n\t\t\n\t\t D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64 的目录\n\t\t\n\t\t2018/06/30  14:19    <DIR>          .\n\t\t2018/06/30  14:19    <DIR>          ..\n\t\t2018/06/30  12:42    <DIR>          bin\n\t\t2018/06/30  14:59    <DIR>          data\n\t\t2018/06/30  12:42    <DIR>          docs\n\t\t2018/06/30  12:42    <DIR>          include\n\t\t2018/06/30  12:42    <DIR>          lib\n\t\t2018/04/08  14:44           301,518 LICENSE\n\t\t2018/06/30  14:01               855 my-default.ini\n\t\t2018/04/08  14:44               687 README\n\t\t2018/06/30  14:20                56 resetPWD.txt\n\t\t2018/06/30  12:42    <DIR>          share\n\t\t               4 个文件        303,116 字节\n\t\t               8 个目录 522,972,643,328 可用字节\n```\n\n3、列出mysql-8.0.11-winx64文件夹中的目录\n\n```java\n\t\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64>dir\n\t\t 驱动器 D 中的卷是 新加卷\n\t\t 卷的序列号是 F6E6-5223\n\t\t\n\t\t D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64 的目录\n\t\t\n\t\t2018/06/30  15:06    <DIR>          .\n\t\t2018/06/30  15:06    <DIR>          ..\n\t\t2018/04/08  16:53    <DIR>          bin\n\t\t2018/04/08  16:53    <DIR>          docs\n\t\t2018/04/08  16:53    <DIR>          include\n\t\t2018/04/08  16:53    <DIR>          lib\n\t\t2018/04/08  14:44           301,518 LICENSE\n\t\t2018/06/30  15:09               856 my.ini\n\t\t2018/04/08  14:44               687 README\n\t\t2018/04/08  16:53    <DIR>          share\n\t\t               3 个文件        303,061 字节\n\t\t               7 个目录 521,901,731,840 可用字节\n\n```\n\n4、在根目录中编辑my.ini配置文件(如果没有该文件则新建一个)\n\n *注：其中的basedir、datadir需要更改为你本地硬盘中的真实目录地址*\n\n```java\n\n\t[mysqld]\n\t# 设置3306端口\n\tport = 3306\n\t# 设置mysql的安装目录\n\tbasedir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64\n\t# 设置mysql数据库的数据的存放目录\n\tdatadir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64\\\\data\n\t# 允许最大连接数\n\tmax_connections=200\n\t# 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统\n\tmax_connect_errors=10\n\t# 服务端使用的字符集默认为UTF8\n\tcharacter-set-server=utf8\n\t# 创建新表时将使用的默认存储引擎\n\tdefault-storage-engine=INNODB\n\t# 默认使用“mysql_native_password”插件认证\n\tdefault_authentication_plugin=mysql_native_password\n\t\n\t[mysql]\n\t# 设置mysql客户端默认字符集\n\tdefault-character-set=utf8\n\t\n\t[client]\n\t# 设置mysql客户端连接服务端时默认使用的端口\n\tport=3306\n\tdefault-character-set=utf8\n\n```\n \n5、切换到bin目录中\n\n```java\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64>cd bin\n\n```\n\n5、初始化mysql配置信息\n\n*注：在输出的命令行中，有mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库*\n\n```java\n\t\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>mysqld --initialize --console\n\n\t2018-06-30T07:10:18.607836Z 0 [System] [MY-013169] [Server] D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin\\mysqld.exe (mysqld 8.0.11) initializing of server in progress as process 13940\n\t2018-06-30T07:10:18.613208Z 0 [ERROR] [MY-010340] [Server] Error message file 'D:\\develop\\soft\\mysql\\mysql-5.6.39-winx64\\share\\english\\errmsg.sys' had only 886 error messages, but it should contain at least 4512 error messages. Check that the above file is the right version for this program!\n\t2018-06-30T07:10:25.877420Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: P6aiG/xZ,)7g 注意：这里就是mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库\n\t2018-06-30T07:10:29.016482Z 0 [System] [MY-013170] [Server] D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin\\mysqld.exe (mysqld 8.0.11) initializing of server has completed\n\n```\n\n\n6、安装mysql服务\n\n```java\n\t\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>mysqld --install\n\tService successfully installed.\n\n```\n\n7、启动mysql服务\n\t\n```java\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>net start mysql\n\tMySQL 服务正在启动 ..\n\tMySQL 服务已经启动成功。\n\t\n```\n\n8、登陆mysql\n\n*登陆mysql时，提示输入的密码就是我们在第5步初始化mysql时，系统自动为我们生成的root密码*\n\n```java\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>mysql -u root -p\n\t\tEnter password: ************\n\t\tWelcome to the MySQL monitor.  Commands end with ; or \\g.\n\t\tYour MySQL connection id is 8\n\t\tServer version: 8.0.11\n\t\t\n\t\tCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\n\t\t\n\t\tOracle is a registered trademark of Oracle Corporation and/or its\n\t\taffiliates. Other names may be trademarks of their respective\n\t\towners.\n\t\t\n\t\tType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\t\n\t\t\n\n```\n\n9、修改root密码\n\n*因为mysql为我们随机分配的root登陆密码不好记忆，所以我们需要修改为我们方便记忆的密码*\n\n```java\n\t\n\tmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'xteamsoft';\n\t\tQuery OK, 0 rows affected (0.01 sec)\n\n```\n\n10、登陆成功后，可以显示目前的数据库列表\n\n```java\n\t\n\tmysql> show databases;\n\n\t+--------------------+\n\t| Database           |\n\t+--------------------+\n\t| information_schema |\n\t| mysql              |\n\t| performance_schema |\n\t| sys                |\n\t+--------------------+\n\t4 rows in set (0.30 sec)\n\n```\n\n11、应用mysql数据库，然后显示mysql数据库中的所有表结构\n\n```java\n\n\tmysql> use mysql;\n\n\tDatabase changed\n\n\tmysql> show tables;\n\n\t+---------------------------+\n\t| Tables_in_mysql           |\n\t+---------------------------+\n\t| columns_priv              |\n\t| component                 |\n\t| db                        |\n\t| default_roles             |\n\t| engine_cost               |\n\t| func                      |\n\t| general_log               |\n\t| global_grants             |\n\t| gtid_executed             |\n\t| help_category             |\n\t| help_keyword              |\n\t| help_relation             |\n\t| help_topic                |\n\t| innodb_index_stats        |\n\t| innodb_table_stats        |\n\t| password_history          |\n\t| plugin                    |\n\t| procs_priv                |\n\t| proxies_priv              |\n\t| role_edges                |\n\t| server_cost               |\n\t| servers                   |\n\t| slave_master_info         |\n\t| slave_relay_log_info      |\n\t| slave_worker_info         |\n\t| slow_log                  |\n\t| tables_priv               |\n\t| time_zone                 |\n\t| time_zone_leap_second     |\n\t| time_zone_name            |\n\t| time_zone_transition      |\n\t| time_zone_transition_type |\n\t| user                      |\n\t+---------------------------+\n\t33 rows in set (0.02 sec)\n\n```\n\n12、查询user表中的用户\n\n```java\n\t\n\tmysql> select user,host,authentication_string from mysql.user;\n\t+------------------+-----------+-------------------------------------------+\n\t| user             | host      | authentication_string                     |\n\t+------------------+-----------+-------------------------------------------+\n\t| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| root             | localhost | *069686983B4218189367E02EAFDFC126EDAA7A2F |\n\t+------------------+-----------+-------------------------------------------+\n\t4 rows in set (0.00 sec)\n\n```\n\n13、创建我们自己的用户\n\n```java\n\n\tmysql> CREATE USER 'maps'@'%' IDENTIFIED BY 'maps';\n\tQuery OK, 0 rows affected (0.05 sec)\n\t\n\tmysql> select user,host,authentication_string from mysql.user;\n\t+------------------+-----------+-------------------------------------------+\n\t| user             | host      | authentication_string                     |\n\t+------------------+-----------+-------------------------------------------+\n\t| maps             | %         | *6D563D2A92CA78E4D2E08B5836BDDF5C4DC6ED04 |\n\t| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| root             | localhost | *069686983B4218189367E02EAFDFC126EDAA7A2F |\n\t+------------------+-----------+-------------------------------------------+\n\t5 rows in set (0.00 sec)\n\n```\n\n14、查看新建的maps用户的权限信息\n\n```java\n\n\tmysql> show grants for maps;\n\t+----------------------------------+\n\t| Grants for maps@%                |\n\t+----------------------------------+\n\t| GRANT USAGE ON *.* TO `maps`@`%` |\n\t+----------------------------------+\n\t1 row in set (0.00 sec)\n\t\n```\n\n15、为maps用户授权(增、删、改、查)\n\n```java\n\n\tmysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* to 'maps'@'%';\n\tQuery OK, 0 rows affected (0.12 sec)\n\t\n\tmysql> show grants for maps;\n\t+--------------------------------------------------------------------------------+\n\t| Grants for maps@%                                                              |\n\t+--------------------------------------------------------------------------------+\n\t| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER ON *.* TO `maps`@`%` |\n\t+--------------------------------------------------------------------------------+\n\t1 row in set (0.00 sec)\n\n```\n\n*参考：https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html*","source":"_posts/Mysql-8-0-安装笔记.md","raw":"---\ntitle: Mysql 8.0 安装笔记\ndate: 2018-07-08 17:41:46\ncategories: Mysql\ntags: Mysql\n---\n\n一、下载安装包\n\n访问地址：https://dev.mysql.com/downloads/mysql/\n\n\n![Alt text](http://soujava.com/images/mysqlDownload.png)\n\n二、安装\n\n 1、在D盘中新建mysql文件夹，然后把下载下来的安装包解压到里面。\n \n```java\n\n\tD:\\develop\\soft>cd mysql\n```\n \n```java\n\n    D:\\develop\\soft\\mysql>dir\n\t\n\t\tD:\\develop\\soft\\mysql 的目录\n\t\t\n\t\t2018/06/30  12:42    <DIR>          .\n\t\t2018/06/30  12:42    <DIR>          ..\n\t\t2018/06/30  14:19    <DIR>          mysql-8.0.11-winx64\n\t\t               0 个文件              0 字节\n\t\t               3 个目录 522,972,643,328 可用字节*\n\t\n```\n\n2、切换到mysql-8.0.11-winx64目录中\n\n```java\n\n\tD:\\develop\\soft\\mysql>cd mysql-8.0.11-winx64\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64>dir\n\t\t 驱动器 D 中的卷是 新加卷\n\t\t 卷的序列号是 F6E6-5223\n\t\t\n\t\t D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64 的目录\n\t\t\n\t\t2018/06/30  14:19    <DIR>          .\n\t\t2018/06/30  14:19    <DIR>          ..\n\t\t2018/06/30  12:42    <DIR>          bin\n\t\t2018/06/30  14:59    <DIR>          data\n\t\t2018/06/30  12:42    <DIR>          docs\n\t\t2018/06/30  12:42    <DIR>          include\n\t\t2018/06/30  12:42    <DIR>          lib\n\t\t2018/04/08  14:44           301,518 LICENSE\n\t\t2018/06/30  14:01               855 my-default.ini\n\t\t2018/04/08  14:44               687 README\n\t\t2018/06/30  14:20                56 resetPWD.txt\n\t\t2018/06/30  12:42    <DIR>          share\n\t\t               4 个文件        303,116 字节\n\t\t               8 个目录 522,972,643,328 可用字节\n```\n\n3、列出mysql-8.0.11-winx64文件夹中的目录\n\n```java\n\t\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64>dir\n\t\t 驱动器 D 中的卷是 新加卷\n\t\t 卷的序列号是 F6E6-5223\n\t\t\n\t\t D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64 的目录\n\t\t\n\t\t2018/06/30  15:06    <DIR>          .\n\t\t2018/06/30  15:06    <DIR>          ..\n\t\t2018/04/08  16:53    <DIR>          bin\n\t\t2018/04/08  16:53    <DIR>          docs\n\t\t2018/04/08  16:53    <DIR>          include\n\t\t2018/04/08  16:53    <DIR>          lib\n\t\t2018/04/08  14:44           301,518 LICENSE\n\t\t2018/06/30  15:09               856 my.ini\n\t\t2018/04/08  14:44               687 README\n\t\t2018/04/08  16:53    <DIR>          share\n\t\t               3 个文件        303,061 字节\n\t\t               7 个目录 521,901,731,840 可用字节\n\n```\n\n4、在根目录中编辑my.ini配置文件(如果没有该文件则新建一个)\n\n *注：其中的basedir、datadir需要更改为你本地硬盘中的真实目录地址*\n\n```java\n\n\t[mysqld]\n\t# 设置3306端口\n\tport = 3306\n\t# 设置mysql的安装目录\n\tbasedir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64\n\t# 设置mysql数据库的数据的存放目录\n\tdatadir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64\\\\data\n\t# 允许最大连接数\n\tmax_connections=200\n\t# 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统\n\tmax_connect_errors=10\n\t# 服务端使用的字符集默认为UTF8\n\tcharacter-set-server=utf8\n\t# 创建新表时将使用的默认存储引擎\n\tdefault-storage-engine=INNODB\n\t# 默认使用“mysql_native_password”插件认证\n\tdefault_authentication_plugin=mysql_native_password\n\t\n\t[mysql]\n\t# 设置mysql客户端默认字符集\n\tdefault-character-set=utf8\n\t\n\t[client]\n\t# 设置mysql客户端连接服务端时默认使用的端口\n\tport=3306\n\tdefault-character-set=utf8\n\n```\n \n5、切换到bin目录中\n\n```java\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64>cd bin\n\n```\n\n5、初始化mysql配置信息\n\n*注：在输出的命令行中，有mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库*\n\n```java\n\t\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>mysqld --initialize --console\n\n\t2018-06-30T07:10:18.607836Z 0 [System] [MY-013169] [Server] D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin\\mysqld.exe (mysqld 8.0.11) initializing of server in progress as process 13940\n\t2018-06-30T07:10:18.613208Z 0 [ERROR] [MY-010340] [Server] Error message file 'D:\\develop\\soft\\mysql\\mysql-5.6.39-winx64\\share\\english\\errmsg.sys' had only 886 error messages, but it should contain at least 4512 error messages. Check that the above file is the right version for this program!\n\t2018-06-30T07:10:25.877420Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: P6aiG/xZ,)7g 注意：这里就是mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库\n\t2018-06-30T07:10:29.016482Z 0 [System] [MY-013170] [Server] D:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin\\mysqld.exe (mysqld 8.0.11) initializing of server has completed\n\n```\n\n\n6、安装mysql服务\n\n```java\n\t\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>mysqld --install\n\tService successfully installed.\n\n```\n\n7、启动mysql服务\n\t\n```java\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>net start mysql\n\tMySQL 服务正在启动 ..\n\tMySQL 服务已经启动成功。\n\t\n```\n\n8、登陆mysql\n\n*登陆mysql时，提示输入的密码就是我们在第5步初始化mysql时，系统自动为我们生成的root密码*\n\n```java\n\n\tD:\\develop\\soft\\mysql\\mysql-8.0.11-winx64\\bin>mysql -u root -p\n\t\tEnter password: ************\n\t\tWelcome to the MySQL monitor.  Commands end with ; or \\g.\n\t\tYour MySQL connection id is 8\n\t\tServer version: 8.0.11\n\t\t\n\t\tCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\n\t\t\n\t\tOracle is a registered trademark of Oracle Corporation and/or its\n\t\taffiliates. Other names may be trademarks of their respective\n\t\towners.\n\t\t\n\t\tType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\t\n\t\t\n\n```\n\n9、修改root密码\n\n*因为mysql为我们随机分配的root登陆密码不好记忆，所以我们需要修改为我们方便记忆的密码*\n\n```java\n\t\n\tmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'xteamsoft';\n\t\tQuery OK, 0 rows affected (0.01 sec)\n\n```\n\n10、登陆成功后，可以显示目前的数据库列表\n\n```java\n\t\n\tmysql> show databases;\n\n\t+--------------------+\n\t| Database           |\n\t+--------------------+\n\t| information_schema |\n\t| mysql              |\n\t| performance_schema |\n\t| sys                |\n\t+--------------------+\n\t4 rows in set (0.30 sec)\n\n```\n\n11、应用mysql数据库，然后显示mysql数据库中的所有表结构\n\n```java\n\n\tmysql> use mysql;\n\n\tDatabase changed\n\n\tmysql> show tables;\n\n\t+---------------------------+\n\t| Tables_in_mysql           |\n\t+---------------------------+\n\t| columns_priv              |\n\t| component                 |\n\t| db                        |\n\t| default_roles             |\n\t| engine_cost               |\n\t| func                      |\n\t| general_log               |\n\t| global_grants             |\n\t| gtid_executed             |\n\t| help_category             |\n\t| help_keyword              |\n\t| help_relation             |\n\t| help_topic                |\n\t| innodb_index_stats        |\n\t| innodb_table_stats        |\n\t| password_history          |\n\t| plugin                    |\n\t| procs_priv                |\n\t| proxies_priv              |\n\t| role_edges                |\n\t| server_cost               |\n\t| servers                   |\n\t| slave_master_info         |\n\t| slave_relay_log_info      |\n\t| slave_worker_info         |\n\t| slow_log                  |\n\t| tables_priv               |\n\t| time_zone                 |\n\t| time_zone_leap_second     |\n\t| time_zone_name            |\n\t| time_zone_transition      |\n\t| time_zone_transition_type |\n\t| user                      |\n\t+---------------------------+\n\t33 rows in set (0.02 sec)\n\n```\n\n12、查询user表中的用户\n\n```java\n\t\n\tmysql> select user,host,authentication_string from mysql.user;\n\t+------------------+-----------+-------------------------------------------+\n\t| user             | host      | authentication_string                     |\n\t+------------------+-----------+-------------------------------------------+\n\t| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| root             | localhost | *069686983B4218189367E02EAFDFC126EDAA7A2F |\n\t+------------------+-----------+-------------------------------------------+\n\t4 rows in set (0.00 sec)\n\n```\n\n13、创建我们自己的用户\n\n```java\n\n\tmysql> CREATE USER 'maps'@'%' IDENTIFIED BY 'maps';\n\tQuery OK, 0 rows affected (0.05 sec)\n\t\n\tmysql> select user,host,authentication_string from mysql.user;\n\t+------------------+-----------+-------------------------------------------+\n\t| user             | host      | authentication_string                     |\n\t+------------------+-----------+-------------------------------------------+\n\t| maps             | %         | *6D563D2A92CA78E4D2E08B5836BDDF5C4DC6ED04 |\n\t| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n\t| root             | localhost | *069686983B4218189367E02EAFDFC126EDAA7A2F |\n\t+------------------+-----------+-------------------------------------------+\n\t5 rows in set (0.00 sec)\n\n```\n\n14、查看新建的maps用户的权限信息\n\n```java\n\n\tmysql> show grants for maps;\n\t+----------------------------------+\n\t| Grants for maps@%                |\n\t+----------------------------------+\n\t| GRANT USAGE ON *.* TO `maps`@`%` |\n\t+----------------------------------+\n\t1 row in set (0.00 sec)\n\t\n```\n\n15、为maps用户授权(增、删、改、查)\n\n```java\n\n\tmysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* to 'maps'@'%';\n\tQuery OK, 0 rows affected (0.12 sec)\n\t\n\tmysql> show grants for maps;\n\t+--------------------------------------------------------------------------------+\n\t| Grants for maps@%                                                              |\n\t+--------------------------------------------------------------------------------+\n\t| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER ON *.* TO `maps`@`%` |\n\t+--------------------------------------------------------------------------------+\n\t1 row in set (0.00 sec)\n\n```\n\n*参考：https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html*","slug":"Mysql-8-0-安装笔记","published":1,"updated":"2018-07-08T10:44:58.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pic001n30tzp7dckze1","content":"<p>一、下载安装包</p>\n<p>访问地址：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/mysql/</a></p>\n<p><img src=\"http://soujava.com/images/mysqlDownload.png\" alt=\"Alt text\"></p>\n<p>二、安装</p>\n<p> 1、在D盘中新建mysql文件夹，然后把下载下来的安装包解压到里面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft&gt;cd mysql</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  D:\\develop\\soft\\mysql&gt;dir</div><div class=\"line\">\t</div><div class=\"line\">D:\\develop\\soft\\mysql 的目录</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          .</div><div class=\"line\"><span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          ..</div><div class=\"line\"><span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">19</span>    &lt;DIR&gt;          mysql-<span class=\"number\">8.0</span>.11-winx64</div><div class=\"line\">               <span class=\"number\">0</span> 个文件              <span class=\"number\">0</span> 字节</div><div class=\"line\">               <span class=\"number\">3</span> 个目录 <span class=\"number\">522</span>,<span class=\"number\">972</span>,<span class=\"number\">643</span>,<span class=\"number\">328</span> 可用字节*</div></pre></td></tr></table></figure>\n<p>2、切换到mysql-8.0.11-winx64目录中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql&gt;cd mysql-<span class=\"number\">8.0</span>.11-winx64</div><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64&gt;dir</div><div class=\"line\">\t 驱动器 D 中的卷是 新加卷</div><div class=\"line\">\t 卷的序列号是 F6E6-<span class=\"number\">5223</span></div><div class=\"line\">\t</div><div class=\"line\">\t D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64 的目录</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">19</span>    &lt;DIR&gt;          .</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">19</span>    &lt;DIR&gt;          ..</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          bin</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">59</span>    &lt;DIR&gt;          data</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          docs</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          include</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          lib</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>           <span class=\"number\">301</span>,<span class=\"number\">518</span> LICENSE</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">01</span>               <span class=\"number\">855</span> my-<span class=\"keyword\">default</span>.ini</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>               <span class=\"number\">687</span> README</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">20</span>                <span class=\"number\">56</span> resetPWD.txt</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          share</div><div class=\"line\">\t               <span class=\"number\">4</span> 个文件        <span class=\"number\">303</span>,<span class=\"number\">116</span> 字节</div><div class=\"line\">\t               <span class=\"number\">8</span> 个目录 <span class=\"number\">522</span>,<span class=\"number\">972</span>,<span class=\"number\">643</span>,<span class=\"number\">328</span> 可用字节</div></pre></td></tr></table></figure>\n<p>3、列出mysql-8.0.11-winx64文件夹中的目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64&gt;dir</div><div class=\"line\">\t 驱动器 D 中的卷是 新加卷</div><div class=\"line\">\t 卷的序列号是 F6E6-<span class=\"number\">5223</span></div><div class=\"line\">\t</div><div class=\"line\">\t D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64 的目录</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">15</span>:<span class=\"number\">06</span>    &lt;DIR&gt;          .</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">15</span>:<span class=\"number\">06</span>    &lt;DIR&gt;          ..</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          bin</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          docs</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          include</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          lib</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>           <span class=\"number\">301</span>,<span class=\"number\">518</span> LICENSE</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">15</span>:<span class=\"number\">09</span>               <span class=\"number\">856</span> my.ini</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>               <span class=\"number\">687</span> README</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          share</div><div class=\"line\">\t               <span class=\"number\">3</span> 个文件        <span class=\"number\">303</span>,<span class=\"number\">061</span> 字节</div><div class=\"line\">\t               <span class=\"number\">7</span> 个目录 <span class=\"number\">521</span>,<span class=\"number\">901</span>,<span class=\"number\">731</span>,<span class=\"number\">840</span> 可用字节</div></pre></td></tr></table></figure>\n<p>4、在根目录中编辑my.ini配置文件(如果没有该文件则新建一个)</p>\n<p> <em>注：其中的basedir、datadir需要更改为你本地硬盘中的真实目录地址</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\"># 设置3306端口</div><div class=\"line\">port = 3306</div><div class=\"line\"># 设置mysql的安装目录</div><div class=\"line\">basedir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64</div><div class=\"line\"># 设置mysql数据库的数据的存放目录</div><div class=\"line\">datadir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64\\\\data</div><div class=\"line\"># 允许最大连接数</div><div class=\"line\">max_connections=200</div><div class=\"line\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</div><div class=\"line\">max_connect_errors=10</div><div class=\"line\"># 服务端使用的字符集默认为UTF8</div><div class=\"line\">character-set-server=utf8</div><div class=\"line\"># 创建新表时将使用的默认存储引擎</div><div class=\"line\">default-storage-engine=INNODB</div><div class=\"line\"># 默认使用“mysql_native_password”插件认证</div><div class=\"line\">default_authentication_plugin=mysql_native_password</div><div class=\"line\"></div><div class=\"line\">[mysql]</div><div class=\"line\"># 设置mysql客户端默认字符集</div><div class=\"line\">default-character-set=utf8</div><div class=\"line\"></div><div class=\"line\">[client]</div><div class=\"line\"># 设置mysql客户端连接服务端时默认使用的端口</div><div class=\"line\">port=3306</div><div class=\"line\">default-character-set=utf8</div></pre></td></tr></table></figure>\n<p>5、切换到bin目录中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64&gt;cd bin</div></pre></td></tr></table></figure>\n<p>5、初始化mysql配置信息</p>\n<p><em>注：在输出的命令行中，有mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;mysqld --initialize --console</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">18.607836</span>Z <span class=\"number\">0</span> [System] [MY-<span class=\"number\">013169</span>] [Server] D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin\\mysqld.exe (mysqld <span class=\"number\">8.0</span>.11) initializing of server in progress as process <span class=\"number\">13940</span></div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">18.613208</span>Z <span class=\"number\">0</span> [ERROR] [MY-<span class=\"number\">010340</span>] [Server] Error message file <span class=\"string\">'D:\\develop\\soft\\mysql\\mysql-5.6.39-winx64\\share\\english\\errmsg.sys'</span> had only <span class=\"number\">886</span> error messages, but it should contain at least <span class=\"number\">4512</span> error messages. Check that the above file is the right version <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> program!</div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">25.877420</span>Z <span class=\"number\">5</span> [Note] [MY-<span class=\"number\">010454</span>] [Server] A temporary password is generated <span class=\"keyword\">for</span> root<span class=\"meta\">@localhost</span>: P6aiG/xZ,)<span class=\"number\">7</span>g 注意：这里就是mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库</div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">29.016482</span>Z <span class=\"number\">0</span> [System] [MY-<span class=\"number\">013170</span>] [Server] D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin\\mysqld.exe (mysqld <span class=\"number\">8.0</span>.11) initializing of server has completed</div></pre></td></tr></table></figure>\n<p>6、安装mysql服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;mysqld --install</div><div class=\"line\">Service successfully installed.</div></pre></td></tr></table></figure>\n<p>7、启动mysql服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;net start mysql</div><div class=\"line\">MySQL 服务正在启动 ..</div><div class=\"line\">MySQL 服务已经启动成功。</div></pre></td></tr></table></figure>\n<p>8、登陆mysql</p>\n<p><em>登陆mysql时，提示输入的密码就是我们在第5步初始化mysql时，系统自动为我们生成的root密码</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;mysql -u root -p</div><div class=\"line\">\tEnter password: ************</div><div class=\"line\">\tWelcome to the MySQL monitor.  Commands end with ; or \\g.</div><div class=\"line\">\tYour MySQL connection id is <span class=\"number\">8</span></div><div class=\"line\">\tServer version: <span class=\"number\">8.0</span>.11</div><div class=\"line\">\t</div><div class=\"line\">\tCopyright (c) <span class=\"number\">2000</span>, <span class=\"number\">2018</span>, Oracle and/or its affiliates. All rights reserved.</div><div class=\"line\">\t</div><div class=\"line\">\tOracle is a registered trademark of Oracle Corporation and/or its</div><div class=\"line\">\taffiliates. Other names may be trademarks of their respective</div><div class=\"line\">\towners.</div><div class=\"line\">\t</div><div class=\"line\">\tType <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> help. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</div></pre></td></tr></table></figure>\n<p>9、修改root密码</p>\n<p><em>因为mysql为我们随机分配的root登陆密码不好记忆，所以我们需要修改为我们方便记忆的密码</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'xteamsoft'</span>;</div><div class=\"line\">\tQuery OK, <span class=\"number\">0</span> <span class=\"function\">rows <span class=\"title\">affected</span> <span class=\"params\">(<span class=\"number\">0.01</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>10、登陆成功后，可以显示目前的数据库列表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; show databases;</div><div class=\"line\"></div><div class=\"line\">+--------------------+</div><div class=\"line\">| Database           |</div><div class=\"line\">+--------------------+</div><div class=\"line\">| information_schema |</div><div class=\"line\">| mysql              |</div><div class=\"line\">| performance_schema |</div><div class=\"line\">| sys                |</div><div class=\"line\">+--------------------+</div><div class=\"line\"><span class=\"number\">4</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.30</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>11、应用mysql数据库，然后显示mysql数据库中的所有表结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; use mysql;</div><div class=\"line\"></div><div class=\"line\">Database changed</div><div class=\"line\"></div><div class=\"line\">mysql&gt; show tables;</div><div class=\"line\"></div><div class=\"line\">+---------------------------+</div><div class=\"line\">| Tables_in_mysql           |</div><div class=\"line\">+---------------------------+</div><div class=\"line\">| columns_priv              |</div><div class=\"line\">| component                 |</div><div class=\"line\">| db                        |</div><div class=\"line\">| default_roles             |</div><div class=\"line\">| engine_cost               |</div><div class=\"line\">| func                      |</div><div class=\"line\">| general_log               |</div><div class=\"line\">| global_grants             |</div><div class=\"line\">| gtid_executed             |</div><div class=\"line\">| help_category             |</div><div class=\"line\">| help_keyword              |</div><div class=\"line\">| help_relation             |</div><div class=\"line\">| help_topic                |</div><div class=\"line\">| innodb_index_stats        |</div><div class=\"line\">| innodb_table_stats        |</div><div class=\"line\">| password_history          |</div><div class=\"line\">| plugin                    |</div><div class=\"line\">| procs_priv                |</div><div class=\"line\">| proxies_priv              |</div><div class=\"line\">| role_edges                |</div><div class=\"line\">| server_cost               |</div><div class=\"line\">| servers                   |</div><div class=\"line\">| slave_master_info         |</div><div class=\"line\">| slave_relay_log_info      |</div><div class=\"line\">| slave_worker_info         |</div><div class=\"line\">| slow_log                  |</div><div class=\"line\">| tables_priv               |</div><div class=\"line\">| time_zone                 |</div><div class=\"line\">| time_zone_leap_second     |</div><div class=\"line\">| time_zone_name            |</div><div class=\"line\">| time_zone_transition      |</div><div class=\"line\">| time_zone_transition_type |</div><div class=\"line\">| user                      |</div><div class=\"line\">+---------------------------+</div><div class=\"line\"><span class=\"number\">33</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.02</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>12、查询user表中的用户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; select user,host,authentication_string from mysql.user;</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| user             | host      | authentication_string                     |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| root             | localhost | *<span class=\"number\">069686983</span>B4218189367E02EAFDFC126EDAA7A2F |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\"><span class=\"number\">4</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>13、创建我们自己的用户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; CREATE USER <span class=\"string\">'maps'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'maps'</span>;</div><div class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"function\">rows <span class=\"title\">affected</span> <span class=\"params\">(<span class=\"number\">0.05</span> sec)</span></span></div><div class=\"line\"></div><div class=\"line\">mysql&gt; select user,host,authentication_string from mysql.user;</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| user             | host      | authentication_string                     |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| maps             | %         | *<span class=\"number\">6</span>D563D2A92CA78E4D2E08B5836BDDF5C4DC6ED04 |</div><div class=\"line\">| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| root             | localhost | *<span class=\"number\">069686983</span>B4218189367E02EAFDFC126EDAA7A2F |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\"><span class=\"number\">5</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>14、查看新建的maps用户的权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; show grants <span class=\"keyword\">for</span> maps;</div><div class=\"line\">+----------------------------------+</div><div class=\"line\">| Grants <span class=\"keyword\">for</span> maps@%                |</div><div class=\"line\">+----------------------------------+</div><div class=\"line\">| GRANT USAGE ON *.* TO `maps`@`%` |</div><div class=\"line\">+----------------------------------+</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"function\">row in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>15、为maps用户授权(增、删、改、查)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* to <span class=\"string\">'maps'</span>@<span class=\"string\">'%'</span>;</div><div class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"function\">rows <span class=\"title\">affected</span> <span class=\"params\">(<span class=\"number\">0.12</span> sec)</span></span></div><div class=\"line\"></div><div class=\"line\">mysql&gt; show grants <span class=\"keyword\">for</span> maps;</div><div class=\"line\">+--------------------------------------------------------------------------------+</div><div class=\"line\">| Grants <span class=\"keyword\">for</span> maps@%                                                              |</div><div class=\"line\">+--------------------------------------------------------------------------------+</div><div class=\"line\">| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER ON *.* TO `maps`@`%` |</div><div class=\"line\">+--------------------------------------------------------------------------------+</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"function\">row in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p><em>参考：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html</a></em></p>\n","excerpt":"","more":"<p>一、下载安装包</p>\n<p>访问地址：<a href=\"https://dev.mysql.com/downloads/mysql/\">https://dev.mysql.com/downloads/mysql/</a></p>\n<p><img src=\"http://soujava.com/images/mysqlDownload.png\" alt=\"Alt text\"></p>\n<p>二、安装</p>\n<p> 1、在D盘中新建mysql文件夹，然后把下载下来的安装包解压到里面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft&gt;cd mysql</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  D:\\develop\\soft\\mysql&gt;dir</div><div class=\"line\">\t</div><div class=\"line\">D:\\develop\\soft\\mysql 的目录</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          .</div><div class=\"line\"><span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          ..</div><div class=\"line\"><span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">19</span>    &lt;DIR&gt;          mysql-<span class=\"number\">8.0</span>.11-winx64</div><div class=\"line\">               <span class=\"number\">0</span> 个文件              <span class=\"number\">0</span> 字节</div><div class=\"line\">               <span class=\"number\">3</span> 个目录 <span class=\"number\">522</span>,<span class=\"number\">972</span>,<span class=\"number\">643</span>,<span class=\"number\">328</span> 可用字节*</div></pre></td></tr></table></figure>\n<p>2、切换到mysql-8.0.11-winx64目录中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql&gt;cd mysql-<span class=\"number\">8.0</span>.11-winx64</div><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64&gt;dir</div><div class=\"line\">\t 驱动器 D 中的卷是 新加卷</div><div class=\"line\">\t 卷的序列号是 F6E6-<span class=\"number\">5223</span></div><div class=\"line\">\t</div><div class=\"line\">\t D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64 的目录</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">19</span>    &lt;DIR&gt;          .</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">19</span>    &lt;DIR&gt;          ..</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          bin</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">59</span>    &lt;DIR&gt;          data</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          docs</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          include</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          lib</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>           <span class=\"number\">301</span>,<span class=\"number\">518</span> LICENSE</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">01</span>               <span class=\"number\">855</span> my-<span class=\"keyword\">default</span>.ini</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>               <span class=\"number\">687</span> README</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">14</span>:<span class=\"number\">20</span>                <span class=\"number\">56</span> resetPWD.txt</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">12</span>:<span class=\"number\">42</span>    &lt;DIR&gt;          share</div><div class=\"line\">\t               <span class=\"number\">4</span> 个文件        <span class=\"number\">303</span>,<span class=\"number\">116</span> 字节</div><div class=\"line\">\t               <span class=\"number\">8</span> 个目录 <span class=\"number\">522</span>,<span class=\"number\">972</span>,<span class=\"number\">643</span>,<span class=\"number\">328</span> 可用字节</div></pre></td></tr></table></figure>\n<p>3、列出mysql-8.0.11-winx64文件夹中的目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64&gt;dir</div><div class=\"line\">\t 驱动器 D 中的卷是 新加卷</div><div class=\"line\">\t 卷的序列号是 F6E6-<span class=\"number\">5223</span></div><div class=\"line\">\t</div><div class=\"line\">\t D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64 的目录</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">15</span>:<span class=\"number\">06</span>    &lt;DIR&gt;          .</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">15</span>:<span class=\"number\">06</span>    &lt;DIR&gt;          ..</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          bin</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          docs</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          include</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          lib</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>           <span class=\"number\">301</span>,<span class=\"number\">518</span> LICENSE</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">06</span>/<span class=\"number\">30</span>  <span class=\"number\">15</span>:<span class=\"number\">09</span>               <span class=\"number\">856</span> my.ini</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">14</span>:<span class=\"number\">44</span>               <span class=\"number\">687</span> README</div><div class=\"line\">\t<span class=\"number\">2018</span>/<span class=\"number\">04</span>/<span class=\"number\">08</span>  <span class=\"number\">16</span>:<span class=\"number\">53</span>    &lt;DIR&gt;          share</div><div class=\"line\">\t               <span class=\"number\">3</span> 个文件        <span class=\"number\">303</span>,<span class=\"number\">061</span> 字节</div><div class=\"line\">\t               <span class=\"number\">7</span> 个目录 <span class=\"number\">521</span>,<span class=\"number\">901</span>,<span class=\"number\">731</span>,<span class=\"number\">840</span> 可用字节</div></pre></td></tr></table></figure>\n<p>4、在根目录中编辑my.ini配置文件(如果没有该文件则新建一个)</p>\n<p> <em>注：其中的basedir、datadir需要更改为你本地硬盘中的真实目录地址</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\"># 设置3306端口</div><div class=\"line\">port = 3306</div><div class=\"line\"># 设置mysql的安装目录</div><div class=\"line\">basedir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64</div><div class=\"line\"># 设置mysql数据库的数据的存放目录</div><div class=\"line\">datadir = D:\\\\develop\\\\soft\\\\mysql\\\\mysql-5.6.39-winx64\\\\data</div><div class=\"line\"># 允许最大连接数</div><div class=\"line\">max_connections=200</div><div class=\"line\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</div><div class=\"line\">max_connect_errors=10</div><div class=\"line\"># 服务端使用的字符集默认为UTF8</div><div class=\"line\">character-set-server=utf8</div><div class=\"line\"># 创建新表时将使用的默认存储引擎</div><div class=\"line\">default-storage-engine=INNODB</div><div class=\"line\"># 默认使用“mysql_native_password”插件认证</div><div class=\"line\">default_authentication_plugin=mysql_native_password</div><div class=\"line\"></div><div class=\"line\">[mysql]</div><div class=\"line\"># 设置mysql客户端默认字符集</div><div class=\"line\">default-character-set=utf8</div><div class=\"line\"></div><div class=\"line\">[client]</div><div class=\"line\"># 设置mysql客户端连接服务端时默认使用的端口</div><div class=\"line\">port=3306</div><div class=\"line\">default-character-set=utf8</div></pre></td></tr></table></figure>\n<p>5、切换到bin目录中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64&gt;cd bin</div></pre></td></tr></table></figure>\n<p>5、初始化mysql配置信息</p>\n<p><em>注：在输出的命令行中，有mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;mysqld --initialize --console</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">18.607836</span>Z <span class=\"number\">0</span> [System] [MY-<span class=\"number\">013169</span>] [Server] D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin\\mysqld.exe (mysqld <span class=\"number\">8.0</span>.11) initializing of server in progress as process <span class=\"number\">13940</span></div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">18.613208</span>Z <span class=\"number\">0</span> [ERROR] [MY-<span class=\"number\">010340</span>] [Server] Error message file <span class=\"string\">'D:\\develop\\soft\\mysql\\mysql-5.6.39-winx64\\share\\english\\errmsg.sys'</span> had only <span class=\"number\">886</span> error messages, but it should contain at least <span class=\"number\">4512</span> error messages. Check that the above file is the right version <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> program!</div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">25.877420</span>Z <span class=\"number\">5</span> [Note] [MY-<span class=\"number\">010454</span>] [Server] A temporary password is generated <span class=\"keyword\">for</span> root<span class=\"meta\">@localhost</span>: P6aiG/xZ,)<span class=\"number\">7</span>g 注意：这里就是mysql自动新建root账号时分配的随机密码，一定要记住这个密码，安装成功后需要登陆新建用户、数据库</div><div class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">06</span>-<span class=\"number\">30</span>T07:<span class=\"number\">10</span>:<span class=\"number\">29.016482</span>Z <span class=\"number\">0</span> [System] [MY-<span class=\"number\">013170</span>] [Server] D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin\\mysqld.exe (mysqld <span class=\"number\">8.0</span>.11) initializing of server has completed</div></pre></td></tr></table></figure>\n<p>6、安装mysql服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;mysqld --install</div><div class=\"line\">Service successfully installed.</div></pre></td></tr></table></figure>\n<p>7、启动mysql服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;net start mysql</div><div class=\"line\">MySQL 服务正在启动 ..</div><div class=\"line\">MySQL 服务已经启动成功。</div></pre></td></tr></table></figure>\n<p>8、登陆mysql</p>\n<p><em>登陆mysql时，提示输入的密码就是我们在第5步初始化mysql时，系统自动为我们生成的root密码</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">D:\\develop\\soft\\mysql\\mysql-<span class=\"number\">8.0</span>.11-winx64\\bin&gt;mysql -u root -p</div><div class=\"line\">\tEnter password: ************</div><div class=\"line\">\tWelcome to the MySQL monitor.  Commands end with ; or \\g.</div><div class=\"line\">\tYour MySQL connection id is <span class=\"number\">8</span></div><div class=\"line\">\tServer version: <span class=\"number\">8.0</span>.11</div><div class=\"line\">\t</div><div class=\"line\">\tCopyright (c) <span class=\"number\">2000</span>, <span class=\"number\">2018</span>, Oracle and/or its affiliates. All rights reserved.</div><div class=\"line\">\t</div><div class=\"line\">\tOracle is a registered trademark of Oracle Corporation and/or its</div><div class=\"line\">\taffiliates. Other names may be trademarks of their respective</div><div class=\"line\">\towners.</div><div class=\"line\">\t</div><div class=\"line\">\tType <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> help. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</div></pre></td></tr></table></figure>\n<p>9、修改root密码</p>\n<p><em>因为mysql为我们随机分配的root登陆密码不好记忆，所以我们需要修改为我们方便记忆的密码</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'xteamsoft'</span>;</div><div class=\"line\">\tQuery OK, <span class=\"number\">0</span> <span class=\"function\">rows <span class=\"title\">affected</span> <span class=\"params\">(<span class=\"number\">0.01</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>10、登陆成功后，可以显示目前的数据库列表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; show databases;</div><div class=\"line\"></div><div class=\"line\">+--------------------+</div><div class=\"line\">| Database           |</div><div class=\"line\">+--------------------+</div><div class=\"line\">| information_schema |</div><div class=\"line\">| mysql              |</div><div class=\"line\">| performance_schema |</div><div class=\"line\">| sys                |</div><div class=\"line\">+--------------------+</div><div class=\"line\"><span class=\"number\">4</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.30</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>11、应用mysql数据库，然后显示mysql数据库中的所有表结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; use mysql;</div><div class=\"line\"></div><div class=\"line\">Database changed</div><div class=\"line\"></div><div class=\"line\">mysql&gt; show tables;</div><div class=\"line\"></div><div class=\"line\">+---------------------------+</div><div class=\"line\">| Tables_in_mysql           |</div><div class=\"line\">+---------------------------+</div><div class=\"line\">| columns_priv              |</div><div class=\"line\">| component                 |</div><div class=\"line\">| db                        |</div><div class=\"line\">| default_roles             |</div><div class=\"line\">| engine_cost               |</div><div class=\"line\">| func                      |</div><div class=\"line\">| general_log               |</div><div class=\"line\">| global_grants             |</div><div class=\"line\">| gtid_executed             |</div><div class=\"line\">| help_category             |</div><div class=\"line\">| help_keyword              |</div><div class=\"line\">| help_relation             |</div><div class=\"line\">| help_topic                |</div><div class=\"line\">| innodb_index_stats        |</div><div class=\"line\">| innodb_table_stats        |</div><div class=\"line\">| password_history          |</div><div class=\"line\">| plugin                    |</div><div class=\"line\">| procs_priv                |</div><div class=\"line\">| proxies_priv              |</div><div class=\"line\">| role_edges                |</div><div class=\"line\">| server_cost               |</div><div class=\"line\">| servers                   |</div><div class=\"line\">| slave_master_info         |</div><div class=\"line\">| slave_relay_log_info      |</div><div class=\"line\">| slave_worker_info         |</div><div class=\"line\">| slow_log                  |</div><div class=\"line\">| tables_priv               |</div><div class=\"line\">| time_zone                 |</div><div class=\"line\">| time_zone_leap_second     |</div><div class=\"line\">| time_zone_name            |</div><div class=\"line\">| time_zone_transition      |</div><div class=\"line\">| time_zone_transition_type |</div><div class=\"line\">| user                      |</div><div class=\"line\">+---------------------------+</div><div class=\"line\"><span class=\"number\">33</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.02</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>12、查询user表中的用户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; select user,host,authentication_string from mysql.user;</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| user             | host      | authentication_string                     |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| root             | localhost | *<span class=\"number\">069686983</span>B4218189367E02EAFDFC126EDAA7A2F |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\"><span class=\"number\">4</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>13、创建我们自己的用户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; CREATE USER <span class=\"string\">'maps'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'maps'</span>;</div><div class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"function\">rows <span class=\"title\">affected</span> <span class=\"params\">(<span class=\"number\">0.05</span> sec)</span></div><div class=\"line\"></div><div class=\"line\">mysql&gt; select user,host,authentication_string from mysql.user</span>;</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| user             | host      | authentication_string                     |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\">| maps             | %         | *<span class=\"number\">6</span>D563D2A92CA78E4D2E08B5836BDDF5C4DC6ED04 |</div><div class=\"line\">| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</div><div class=\"line\">| root             | localhost | *<span class=\"number\">069686983</span>B4218189367E02EAFDFC126EDAA7A2F |</div><div class=\"line\">+------------------+-----------+-------------------------------------------+</div><div class=\"line\"><span class=\"number\">5</span> <span class=\"function\">rows in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>14、查看新建的maps用户的权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; show grants <span class=\"keyword\">for</span> maps;</div><div class=\"line\">+----------------------------------+</div><div class=\"line\">| Grants <span class=\"keyword\">for</span> maps@%                |</div><div class=\"line\">+----------------------------------+</div><div class=\"line\">| GRANT USAGE ON *.* TO `maps`@`%` |</div><div class=\"line\">+----------------------------------+</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"function\">row in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p>15、为maps用户授权(增、删、改、查)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* to <span class=\"string\">'maps'</span>@<span class=\"string\">'%'</span>;</div><div class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"function\">rows <span class=\"title\">affected</span> <span class=\"params\">(<span class=\"number\">0.12</span> sec)</span></div><div class=\"line\"></div><div class=\"line\">mysql&gt; show grants <span class=\"keyword\">for</span> maps</span>;</div><div class=\"line\">+--------------------------------------------------------------------------------+</div><div class=\"line\">| Grants <span class=\"keyword\">for</span> maps@%                                                              |</div><div class=\"line\">+--------------------------------------------------------------------------------+</div><div class=\"line\">| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER ON *.* TO `maps`@`%` |</div><div class=\"line\">+--------------------------------------------------------------------------------+</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"function\">row in <span class=\"title\">set</span> <span class=\"params\">(<span class=\"number\">0.00</span> sec)</span></span></div></pre></td></tr></table></figure>\n<p><em>参考：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html\">https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html</a></em></p>\n"},{"title":"Mysql--Lock wait timeout exceeded try restarting transaction","date":"2016-08-19T08:46:36.000Z","_content":"一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。\n查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。\n\n**一、临时解决办法**\n\n1.  执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword\n2.\t执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。\n3.\t执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。\n\n**二、Mysql数据库设置**\n\n1.\t设置innodb_lock_wait_timeout参数。通过show variables like 'innodb_lock_wait_timeout';查看当前设置的值。\n2.\t执行set global innodb_lock_wait_timeout=120;设置超时时间。\n3.\t设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。\n\n*注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！*\n\n","source":"_posts/Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction.md","raw":"---\ntitle: Mysql--Lock wait timeout exceeded try restarting transaction\ndate: 2016-08-19 16:46:36\ncategories: Mysql\ntags: Mysql\n---\n一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。\n查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。\n\n**一、临时解决办法**\n\n1.  执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword\n2.\t执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。\n3.\t执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。\n\n**二、Mysql数据库设置**\n\n1.\t设置innodb_lock_wait_timeout参数。通过show variables like 'innodb_lock_wait_timeout';查看当前设置的值。\n2.\t执行set global innodb_lock_wait_timeout=120;设置超时时间。\n3.\t设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。\n\n*注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！*\n\n","slug":"Mysql-Lock-wait-timeout-exceeded-try-restarting-transaction","published":1,"updated":"2018-07-08T09:37:48.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pie001q30tzh4btsar0","content":"<p>一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。<br>查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。</p>\n<p><strong>一、临时解决办法</strong></p>\n<ol>\n<li>执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword</li>\n<li>执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。</li>\n<li>执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。</li>\n</ol>\n<p><strong>二、Mysql数据库设置</strong></p>\n<ol>\n<li>设置innodb_lock_wait_timeout参数。通过show variables like ‘innodb_lock_wait_timeout’;查看当前设置的值。</li>\n<li>执行set global innodb_lock_wait_timeout=120;设置超时时间。</li>\n<li>设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。</li>\n</ol>\n<p><em>注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！</em></p>\n","excerpt":"","more":"<p>一个业务正在操作mysql过程中，突然报提示错误信息：Lock wait timeout exceeded; try restarting transaction。<br>查询发现问题原因是，在执行操作的表被另外一个操作锁定，当前操作等待另外一个操作完成时提示超时。</p>\n<p><strong>一、临时解决办法</strong></p>\n<ol>\n<li>执行以下脚本登录mysql：mysql -h 192.168.0.166 -u user -ppassword</li>\n<li>执行select * from information_schema.innodb_trx\\G;查询当前处于锁等待的进程。查询结果只需要关注trx_mysql_thread_id所对应的值。</li>\n<li>执行show processlist;查询当前的所有进程，找到对应的ID，执行kill命令，kill id。</li>\n</ol>\n<p><strong>二、Mysql数据库设置</strong></p>\n<ol>\n<li>设置innodb_lock_wait_timeout参数。通过show variables like ‘innodb_lock_wait_timeout’;查看当前设置的值。</li>\n<li>执行set global innodb_lock_wait_timeout=120;设置超时时间。</li>\n<li>设置是否自动提交事务。通过select @@autocommit;查询是否自动提交事务（1代表自动提交，0代表不自动提交）。执行set global autocommit=1;设置自动提交。</li>\n</ol>\n<p><em>注：这里设置自动提交事务操作针对高并发业务是会出问题的，所以视情况而定！</em></p>\n"},{"title":"Mysql数据库编码更改","date":"2016-09-20T02:46:29.000Z","_content":"在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：\n\n### 1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\n\n<!--more-->\n\n![Alt text](http://soujava.com/images/mysqlCode1.png)\n\n### 2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\n```java\n\tselect concat('alter table ', table_name,' character set utf8 collate utf8_bin;') from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c \n\twhere c.collation_name = t.table_collation and t.table_schema='confluence' and (c.character_set_name!='utf8' or c.collation_name!='utf8_bin');\t\n```\n\n### 3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\n\n![Alt text](http://soujava.com/images/mysqlCode2.png)","source":"_posts/Mysql数据库编码更改.md","raw":"---\ntitle: Mysql数据库编码更改\ndate: 2016-09-20 10:46:29\ncategories: Mysql\ntags: Mysql\n---\n在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：\n\n### 1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\n\n<!--more-->\n\n![Alt text](http://soujava.com/images/mysqlCode1.png)\n\n### 2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\n```java\n\tselect concat('alter table ', table_name,' character set utf8 collate utf8_bin;') from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c \n\twhere c.collation_name = t.table_collation and t.table_schema='confluence' and (c.character_set_name!='utf8' or c.collation_name!='utf8_bin');\t\n```\n\n### 3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\n\n![Alt text](http://soujava.com/images/mysqlCode2.png)","slug":"Mysql数据库编码更改","published":1,"updated":"2018-07-08T09:37:48.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pie001s30tzqhm1wen7","content":"<p>在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：</p>\n<h3 id=\"1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"><a href=\"#1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\" class=\"headerlink\" title=\"1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"></a>1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息</h3><a id=\"more\"></a>\n<p><img src=\"http://soujava.com/images/mysqlCode1.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"><a href=\"#2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\" class=\"headerlink\" title=\"2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"></a>2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">select <span class=\"title\">concat</span><span class=\"params\">(<span class=\"string\">'alter table '</span>, table_name,<span class=\"string\">' character set utf8 collate utf8_bin;'</span>)</span> from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c </span></div><div class=\"line\">where c.collation_name = t.table_collation and t.table_schema=<span class=\"string\">'confluence'</span> and (c.character_set_name!=<span class=\"string\">'utf8'</span> or c.collation_name!=<span class=\"string\">'utf8_bin'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"><a href=\"#3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\" class=\"headerlink\" title=\"3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"></a>3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作</h3><p><img src=\"http://soujava.com/images/mysqlCode2.png\" alt=\"Alt text\"></p>\n","excerpt":"<p>在平时的开发过程中，mysql的编码是拉丁字符，所以当向里面存储数据时，显示出来就是乱码，那么我们需要执行如下操作：</p>\n<h3 id=\"1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"><a href=\"#1-通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\" class=\"headerlink\" title=\"1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息\"></a>1.通过命令或者其他终端登录到mysql服务中，并执行查询目前对应的数据库的编码信息sql脚本查询，执行命令会查询出该数据库下面每一张表对应的字符编码信息</h3>","more":"<p><img src=\"http://soujava.com/images/mysqlCode1.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"><a href=\"#2-然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\" class=\"headerlink\" title=\"2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表\"></a>2.然后执行下面的sql脚本，基于查询语句生成修改表结构编码的sql语句列表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">select <span class=\"title\">concat</span><span class=\"params\">(<span class=\"string\">'alter table '</span>, table_name,<span class=\"string\">' character set utf8 collate utf8_bin;'</span>)</span> from information_schema.tables as t, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY as c </div><div class=\"line\">where c.collation_name </span>= t.table_collation and t.table_schema=<span class=\"string\">'confluence'</span> and (c.character_set_name!=<span class=\"string\">'utf8'</span> or c.collation_name!=<span class=\"string\">'utf8_bin'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"><a href=\"#3-然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\" class=\"headerlink\" title=\"3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作\"></a>3.然后把第2步查询出的alter语句复制到对应的命令窗口中执行修改具体的表结构编码操作</h3><p><img src=\"http://soujava.com/images/mysqlCode2.png\" alt=\"Alt text\"></p>"},{"title":"Redis-使用SortedSet分页处理","date":"2017-03-23T04:53:35.000Z","_content":"**一、需求描述**\n\n由于app首页的数据展示需要调用6个第三方的不同数据源的rest接口，所以app首页在使用过程中会出现请求超时的问题（app端设置超时时间为5s）；所以需要对首页进行优化；\n\n<!--more-->\n\n>1、由于app首页的数据展示非常像微信朋友圈的数据展示，即下拉时获取最新的数据，上推时获取历史数据，而在实际的使用场景中，上推动作大于5次的情况比较少(每天在微信朋友圈把5天前的动态翻出来[上推]的情况比较少吧)；所以打算把首页的前5页数据全部放入缓存中，不管是下拉获取新数据还是上推获取分页的老数据都统一从缓存中获取，可以有效减轻服务器压力。\n>\n>2、设定第三方rest接口调用超时时间，比如5分钟之内的首页刷新操作，只会读取缓存数据，不会触发调用第三方的rest接口。\n>\n>3、首页的刷新操作触发采用异步多线程调用，而不是采用串行方式处理；比如首页刷新时，调用6个第三方的rest接口时，启动6个线程并行异步去拉取数据，并且把新数据增量更新到缓存中。\n\n\n**二、业务调整**\n\n由于app端的分页比较特殊，比如后台数据会近实时的发生变化，所以采用常规的分页算法[(totalRecord + pageSize - 1) / pageSize;]肯定是不行的。如果仍采用这种算法，当上推刷新时，就有可能加载到上一页已经看过的数据，比如用户当前正在看第2页的历史数据，如果此时后台数据源新增了一条数据，那么当用户继续上推操作查看第3页的历史数据时，就会把第2页的最后一条数据获取，并且会把该条数据作为第3页的第一条数据进行展示，这样是有问题的。\n\n所以在数据表设计时，需要在表中增加一个自增的orderId字段参与分页，然后分页时，需要将第一页的最后一条数据的orderId回传到后台，后台拿着这个orderId进行条件判断查询并且集合上面的分页算法就可以避免上面的问题。\n\n\n**二、代码开发**\n\n>1、熟悉redis的zAdd方法\n\n```java\n\tZADD key score member [[score member] [score member] ...]\n\n\t将一个或多个 member 元素及其 score 值加入到有序集 key 当中。\n\n\t如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。\n\n\tscore 值可以是整数值或双精度浮点数。\n```\n\n>2、调用zAdd方法向缓存中添加数据(用的是jedis客户端)\n\n*这里为了看着更加清晰，没有使用for循环*\n>>jedis.zadd(\"home_123456\", 1, a);\n>\n>>jedis.zadd(\"home_123456\", 2, b);\n>\n>>jedis.zadd(\"home_123456\", 3, c);\n>\n>>jedis.zadd(\"home_123456\", 4, d);\n>\n>>jedis.zadd(\"home_123456\", 5, e);\n>\n>>jedis.zadd(\"home_123456\", 6, f);\n>\n>>jedis.zadd(\"home_123456\", 7, g);\n>\n>>jedis.zadd(\"home_123456\", 8, h);\n>\n>>jedis.zadd(\"home_123456\", 9, i);\n>\n>>jedis.zadd(\"home_123456\", 10, j);\n\n>3、熟悉zRevrangeByScore方法\n\n```java\n\n\tZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n\n\t返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。\n\n\t具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。\n\n\tmin 和 max 可以是 -inf 和 +inf ，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下获取数据\n\n\t默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。\n\n\t举个例子：\n\n\tZRANGEBYSCORE zset (1 5\n\t返回所有符合条件 1 < score <= 5 的成员，而\n\n\tZRANGEBYSCORE zset (5 (10\n\t则返回所有符合条件 5 < score < 10 的成员。\n```\n\n\n>2、调用zRevrangeByScore方法向缓存中获取分页数据\n>\n>比如每页按取3条数据进行分页的话,当我们在查看第1页的前提下，上推操作，获取第2页的历史数据，需要拿到上一页数据的最后一条记录的score值【key:home_123456 score:3 value c】,所以score值为3\n\n```java\n\n\tjedis.zrevrangeByScore(\"home_123456\", \"+inf\", \"(\"+3, 0, 3);\n\n\t这条代码的意思就是取出缓存中key为\"home_123456\",并且score值大于3的数据，并且从第0条开始一共取出3条(有点像 limit 0,3的作用)\n\t\n\t注：【+inf】 代表最大值不知道，所以不对区间进行最大值限制,\n\t    【\"(\"+3】 等同与 【(3】，代表sore的值要小于3\n```\n\n通过上面的方法可以很好的实现在缓存中进行分页获取数据，以此可以有效提示app端的性能\n\n","source":"_posts/Redis-使用SortedSet分页处理.md","raw":"---\ntitle: Redis-使用SortedSet分页处理\ndate: 2017-03-23 12:53:35\ncategories: Redis\ntags: Redis\n---\n**一、需求描述**\n\n由于app首页的数据展示需要调用6个第三方的不同数据源的rest接口，所以app首页在使用过程中会出现请求超时的问题（app端设置超时时间为5s）；所以需要对首页进行优化；\n\n<!--more-->\n\n>1、由于app首页的数据展示非常像微信朋友圈的数据展示，即下拉时获取最新的数据，上推时获取历史数据，而在实际的使用场景中，上推动作大于5次的情况比较少(每天在微信朋友圈把5天前的动态翻出来[上推]的情况比较少吧)；所以打算把首页的前5页数据全部放入缓存中，不管是下拉获取新数据还是上推获取分页的老数据都统一从缓存中获取，可以有效减轻服务器压力。\n>\n>2、设定第三方rest接口调用超时时间，比如5分钟之内的首页刷新操作，只会读取缓存数据，不会触发调用第三方的rest接口。\n>\n>3、首页的刷新操作触发采用异步多线程调用，而不是采用串行方式处理；比如首页刷新时，调用6个第三方的rest接口时，启动6个线程并行异步去拉取数据，并且把新数据增量更新到缓存中。\n\n\n**二、业务调整**\n\n由于app端的分页比较特殊，比如后台数据会近实时的发生变化，所以采用常规的分页算法[(totalRecord + pageSize - 1) / pageSize;]肯定是不行的。如果仍采用这种算法，当上推刷新时，就有可能加载到上一页已经看过的数据，比如用户当前正在看第2页的历史数据，如果此时后台数据源新增了一条数据，那么当用户继续上推操作查看第3页的历史数据时，就会把第2页的最后一条数据获取，并且会把该条数据作为第3页的第一条数据进行展示，这样是有问题的。\n\n所以在数据表设计时，需要在表中增加一个自增的orderId字段参与分页，然后分页时，需要将第一页的最后一条数据的orderId回传到后台，后台拿着这个orderId进行条件判断查询并且集合上面的分页算法就可以避免上面的问题。\n\n\n**二、代码开发**\n\n>1、熟悉redis的zAdd方法\n\n```java\n\tZADD key score member [[score member] [score member] ...]\n\n\t将一个或多个 member 元素及其 score 值加入到有序集 key 当中。\n\n\t如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。\n\n\tscore 值可以是整数值或双精度浮点数。\n```\n\n>2、调用zAdd方法向缓存中添加数据(用的是jedis客户端)\n\n*这里为了看着更加清晰，没有使用for循环*\n>>jedis.zadd(\"home_123456\", 1, a);\n>\n>>jedis.zadd(\"home_123456\", 2, b);\n>\n>>jedis.zadd(\"home_123456\", 3, c);\n>\n>>jedis.zadd(\"home_123456\", 4, d);\n>\n>>jedis.zadd(\"home_123456\", 5, e);\n>\n>>jedis.zadd(\"home_123456\", 6, f);\n>\n>>jedis.zadd(\"home_123456\", 7, g);\n>\n>>jedis.zadd(\"home_123456\", 8, h);\n>\n>>jedis.zadd(\"home_123456\", 9, i);\n>\n>>jedis.zadd(\"home_123456\", 10, j);\n\n>3、熟悉zRevrangeByScore方法\n\n```java\n\n\tZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n\n\t返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。\n\n\t具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。\n\n\tmin 和 max 可以是 -inf 和 +inf ，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下获取数据\n\n\t默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。\n\n\t举个例子：\n\n\tZRANGEBYSCORE zset (1 5\n\t返回所有符合条件 1 < score <= 5 的成员，而\n\n\tZRANGEBYSCORE zset (5 (10\n\t则返回所有符合条件 5 < score < 10 的成员。\n```\n\n\n>2、调用zRevrangeByScore方法向缓存中获取分页数据\n>\n>比如每页按取3条数据进行分页的话,当我们在查看第1页的前提下，上推操作，获取第2页的历史数据，需要拿到上一页数据的最后一条记录的score值【key:home_123456 score:3 value c】,所以score值为3\n\n```java\n\n\tjedis.zrevrangeByScore(\"home_123456\", \"+inf\", \"(\"+3, 0, 3);\n\n\t这条代码的意思就是取出缓存中key为\"home_123456\",并且score值大于3的数据，并且从第0条开始一共取出3条(有点像 limit 0,3的作用)\n\t\n\t注：【+inf】 代表最大值不知道，所以不对区间进行最大值限制,\n\t    【\"(\"+3】 等同与 【(3】，代表sore的值要小于3\n```\n\n通过上面的方法可以很好的实现在缓存中进行分页获取数据，以此可以有效提示app端的性能\n\n","slug":"Redis-使用SortedSet分页处理","published":1,"updated":"2018-07-08T09:37:48.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pig001w30tzpqtghkmg","content":"<p><strong>一、需求描述</strong></p>\n<p>由于app首页的数据展示需要调用6个第三方的不同数据源的rest接口，所以app首页在使用过程中会出现请求超时的问题（app端设置超时时间为5s）；所以需要对首页进行优化；</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>1、由于app首页的数据展示非常像微信朋友圈的数据展示，即下拉时获取最新的数据，上推时获取历史数据，而在实际的使用场景中，上推动作大于5次的情况比较少(每天在微信朋友圈把5天前的动态翻出来[上推]的情况比较少吧)；所以打算把首页的前5页数据全部放入缓存中，不管是下拉获取新数据还是上推获取分页的老数据都统一从缓存中获取，可以有效减轻服务器压力。</p>\n<p>2、设定第三方rest接口调用超时时间，比如5分钟之内的首页刷新操作，只会读取缓存数据，不会触发调用第三方的rest接口。</p>\n<p>3、首页的刷新操作触发采用异步多线程调用，而不是采用串行方式处理；比如首页刷新时，调用6个第三方的rest接口时，启动6个线程并行异步去拉取数据，并且把新数据增量更新到缓存中。</p>\n</blockquote>\n<p><strong>二、业务调整</strong></p>\n<p>由于app端的分页比较特殊，比如后台数据会近实时的发生变化，所以采用常规的分页算法[(totalRecord + pageSize - 1) / pageSize;]肯定是不行的。如果仍采用这种算法，当上推刷新时，就有可能加载到上一页已经看过的数据，比如用户当前正在看第2页的历史数据，如果此时后台数据源新增了一条数据，那么当用户继续上推操作查看第3页的历史数据时，就会把第2页的最后一条数据获取，并且会把该条数据作为第3页的第一条数据进行展示，这样是有问题的。</p>\n<p>所以在数据表设计时，需要在表中增加一个自增的orderId字段参与分页，然后分页时，需要将第一页的最后一条数据的orderId回传到后台，后台拿着这个orderId进行条件判断查询并且集合上面的分页算法就可以避免上面的问题。</p>\n<p><strong>二、代码开发</strong></p>\n<blockquote>\n<p>1、熟悉redis的zAdd方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZADD key score member [[score member] [score member] ...]</div><div class=\"line\"></div><div class=\"line\">将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</div><div class=\"line\"></div><div class=\"line\">如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。</div><div class=\"line\"></div><div class=\"line\">score 值可以是整数值或双精度浮点数。</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2、调用zAdd方法向缓存中添加数据(用的是jedis客户端)</p>\n</blockquote>\n<p><em>这里为了看着更加清晰，没有使用for循环</em></p>\n<blockquote>\n<blockquote>\n<p>jedis.zadd(“home_123456”, 1, a);</p>\n<p>jedis.zadd(“home_123456”, 2, b);</p>\n<p>jedis.zadd(“home_123456”, 3, c);</p>\n<p>jedis.zadd(“home_123456”, 4, d);</p>\n<p>jedis.zadd(“home_123456”, 5, e);</p>\n<p>jedis.zadd(“home_123456”, 6, f);</p>\n<p>jedis.zadd(“home_123456”, 7, g);</p>\n<p>jedis.zadd(“home_123456”, 8, h);</p>\n<p>jedis.zadd(“home_123456”, 9, i);</p>\n<p>jedis.zadd(“home_123456”, 10, j);</p>\n</blockquote>\n<p>3、熟悉zRevrangeByScore方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</div><div class=\"line\"></div><div class=\"line\">返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。</div><div class=\"line\"></div><div class=\"line\">具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。</div><div class=\"line\"></div><div class=\"line\">min 和 max 可以是 -inf 和 +inf ，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下获取数据</div><div class=\"line\"></div><div class=\"line\">默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。</div><div class=\"line\"></div><div class=\"line\">举个例子：</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ZRANGEBYSCORE <span class=\"title\">zset</span> <span class=\"params\">(<span class=\"number\">1</span> <span class=\"number\">5</span></span></span></div><div class=\"line\">返回所有符合条件 <span class=\"number\">1</span> &lt; score &lt;= <span class=\"number\">5</span> 的成员，而</div><div class=\"line\"></div><div class=\"line\">ZRANGEBYSCORE zset (<span class=\"number\">5</span> (<span class=\"number\">10</span></div><div class=\"line\">则返回所有符合条件 <span class=\"number\">5</span> &lt; score &lt; <span class=\"number\">10</span> 的成员。</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2、调用zRevrangeByScore方法向缓存中获取分页数据</p>\n<p>比如每页按取3条数据进行分页的话,当我们在查看第1页的前提下，上推操作，获取第2页的历史数据，需要拿到上一页数据的最后一条记录的score值【key:home_123456 score:3 value c】,所以score值为3</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">jedis.zrevrangeByScore(<span class=\"string\">\"home_123456\"</span>, <span class=\"string\">\"+inf\"</span>, <span class=\"string\">\"(\"</span>+<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">这条代码的意思就是取出缓存中key为<span class=\"string\">\"home_123456\"</span>,并且score值大于<span class=\"number\">3</span>的数据，并且从第<span class=\"number\">0</span>条开始一共取出<span class=\"number\">3</span>条(有点像 limit <span class=\"number\">0</span>,<span class=\"number\">3</span>的作用)</div><div class=\"line\"></div><div class=\"line\">注：【+inf】 代表最大值不知道，所以不对区间进行最大值限制,</div><div class=\"line\">    【<span class=\"string\">\"(\"</span>+<span class=\"number\">3</span>】 等同与 【(<span class=\"number\">3</span>】，代表sore的值要小于<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>通过上面的方法可以很好的实现在缓存中进行分页获取数据，以此可以有效提示app端的性能</p>\n","excerpt":"<p><strong>一、需求描述</strong></p>\n<p>由于app首页的数据展示需要调用6个第三方的不同数据源的rest接口，所以app首页在使用过程中会出现请求超时的问题（app端设置超时时间为5s）；所以需要对首页进行优化；</p>","more":"<blockquote>\n<p>1、由于app首页的数据展示非常像微信朋友圈的数据展示，即下拉时获取最新的数据，上推时获取历史数据，而在实际的使用场景中，上推动作大于5次的情况比较少(每天在微信朋友圈把5天前的动态翻出来[上推]的情况比较少吧)；所以打算把首页的前5页数据全部放入缓存中，不管是下拉获取新数据还是上推获取分页的老数据都统一从缓存中获取，可以有效减轻服务器压力。</p>\n<p>2、设定第三方rest接口调用超时时间，比如5分钟之内的首页刷新操作，只会读取缓存数据，不会触发调用第三方的rest接口。</p>\n<p>3、首页的刷新操作触发采用异步多线程调用，而不是采用串行方式处理；比如首页刷新时，调用6个第三方的rest接口时，启动6个线程并行异步去拉取数据，并且把新数据增量更新到缓存中。</p>\n</blockquote>\n<p><strong>二、业务调整</strong></p>\n<p>由于app端的分页比较特殊，比如后台数据会近实时的发生变化，所以采用常规的分页算法[(totalRecord + pageSize - 1) / pageSize;]肯定是不行的。如果仍采用这种算法，当上推刷新时，就有可能加载到上一页已经看过的数据，比如用户当前正在看第2页的历史数据，如果此时后台数据源新增了一条数据，那么当用户继续上推操作查看第3页的历史数据时，就会把第2页的最后一条数据获取，并且会把该条数据作为第3页的第一条数据进行展示，这样是有问题的。</p>\n<p>所以在数据表设计时，需要在表中增加一个自增的orderId字段参与分页，然后分页时，需要将第一页的最后一条数据的orderId回传到后台，后台拿着这个orderId进行条件判断查询并且集合上面的分页算法就可以避免上面的问题。</p>\n<p><strong>二、代码开发</strong></p>\n<blockquote>\n<p>1、熟悉redis的zAdd方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZADD key score member [[score member] [score member] ...]</div><div class=\"line\"></div><div class=\"line\">将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</div><div class=\"line\"></div><div class=\"line\">如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。</div><div class=\"line\"></div><div class=\"line\">score 值可以是整数值或双精度浮点数。</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2、调用zAdd方法向缓存中添加数据(用的是jedis客户端)</p>\n</blockquote>\n<p><em>这里为了看着更加清晰，没有使用for循环</em></p>\n<blockquote>\n<blockquote>\n<p>jedis.zadd(“home_123456”, 1, a);</p>\n<p>jedis.zadd(“home_123456”, 2, b);</p>\n<p>jedis.zadd(“home_123456”, 3, c);</p>\n<p>jedis.zadd(“home_123456”, 4, d);</p>\n<p>jedis.zadd(“home_123456”, 5, e);</p>\n<p>jedis.zadd(“home_123456”, 6, f);</p>\n<p>jedis.zadd(“home_123456”, 7, g);</p>\n<p>jedis.zadd(“home_123456”, 8, h);</p>\n<p>jedis.zadd(“home_123456”, 9, i);</p>\n<p>jedis.zadd(“home_123456”, 10, j);</p>\n</blockquote>\n<p>3、熟悉zRevrangeByScore方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</div><div class=\"line\"></div><div class=\"line\">返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。</div><div class=\"line\"></div><div class=\"line\">具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。</div><div class=\"line\"></div><div class=\"line\">min 和 max 可以是 -inf 和 +inf ，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下获取数据</div><div class=\"line\"></div><div class=\"line\">默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。</div><div class=\"line\"></div><div class=\"line\">举个例子：</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ZRANGEBYSCORE <span class=\"title\">zset</span> <span class=\"params\">(<span class=\"number\">1</span> <span class=\"number\">5</span></div><div class=\"line\">返回所有符合条件 <span class=\"number\">1</span> &lt; score &lt;= <span class=\"number\">5</span> 的成员，而</div><div class=\"line\"></div><div class=\"line\">ZRANGEBYSCORE zset (<span class=\"number\">5</span> (<span class=\"number\">10</span></div><div class=\"line\">则返回所有符合条件 <span class=\"number\">5</span> &lt; score &lt; <span class=\"number\">10</span> 的成员。</span></span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>2、调用zRevrangeByScore方法向缓存中获取分页数据</p>\n<p>比如每页按取3条数据进行分页的话,当我们在查看第1页的前提下，上推操作，获取第2页的历史数据，需要拿到上一页数据的最后一条记录的score值【key:home_123456 score:3 value c】,所以score值为3</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">jedis.zrevrangeByScore(<span class=\"string\">\"home_123456\"</span>, <span class=\"string\">\"+inf\"</span>, <span class=\"string\">\"(\"</span>+<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">这条代码的意思就是取出缓存中key为<span class=\"string\">\"home_123456\"</span>,并且score值大于<span class=\"number\">3</span>的数据，并且从第<span class=\"number\">0</span>条开始一共取出<span class=\"number\">3</span>条(有点像 limit <span class=\"number\">0</span>,<span class=\"number\">3</span>的作用)</div><div class=\"line\"></div><div class=\"line\">注：【+inf】 代表最大值不知道，所以不对区间进行最大值限制,</div><div class=\"line\">    【<span class=\"string\">\"(\"</span>+<span class=\"number\">3</span>】 等同与 【(<span class=\"number\">3</span>】，代表sore的值要小于<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>通过上面的方法可以很好的实现在缓存中进行分页获取数据，以此可以有效提示app端的性能</p>"},{"title":"Redis--安装","date":"2016-08-19T09:21:43.000Z","_content":"**一、下载安装包**\n  下载redis安装包，下载方式很多比如如下方式都可以：\n    1)、到官网下载http://redis.io需要的版本\n    2)、在linux系统中用命令下载 $ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n    下载成功后得到redis-2.8.17.tar.gz安装包   \n**二、安装**\n    1)、用命令解压缩安装包\n       $ tar xzf redis-2.8.17.tar.gz\n\n    2)、进入解压后的文件中\n         $ cd redis-2.8.17\n\n    3)、编译安装\n          $ make\n\n  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli \n**三、启动服务**\n     1)、进入到redis安装目录src下面\n          $ cd /usr/local/redis-2.8.17/src\n     2)、启动服务操作，启动服务主要有两种方式：\n           A：采用默认配置方式启动(不推荐)\n                $ ./redis-server\n           B：采用制定配置文件启动(推荐)\n                 $ ./redis-server ../redis.conf\n     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行\n \n**四、测试** \n   1)、进入安装目录，运行redis-cli\n         $ ./redis-cli\n         redis> set username maps\n         redis>get username\n         \"maps\" \n      ","source":"_posts/Redis-安装.md","raw":"---\ntitle: Redis--安装\ndate: 2016-08-19 17:21:43\ncategories: Redis\ntags: Redis安装\n---\n**一、下载安装包**\n  下载redis安装包，下载方式很多比如如下方式都可以：\n    1)、到官网下载http://redis.io需要的版本\n    2)、在linux系统中用命令下载 $ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n    下载成功后得到redis-2.8.17.tar.gz安装包   \n**二、安装**\n    1)、用命令解压缩安装包\n       $ tar xzf redis-2.8.17.tar.gz\n\n    2)、进入解压后的文件中\n         $ cd redis-2.8.17\n\n    3)、编译安装\n          $ make\n\n  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli \n**三、启动服务**\n     1)、进入到redis安装目录src下面\n          $ cd /usr/local/redis-2.8.17/src\n     2)、启动服务操作，启动服务主要有两种方式：\n           A：采用默认配置方式启动(不推荐)\n                $ ./redis-server\n           B：采用制定配置文件启动(推荐)\n                 $ ./redis-server ../redis.conf\n     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行\n \n**四、测试** \n   1)、进入安装目录，运行redis-cli\n         $ ./redis-cli\n         redis> set username maps\n         redis>get username\n         \"maps\" \n      ","slug":"Redis-安装","published":1,"updated":"2018-07-08T09:37:48.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pih001y30tzt7vvjtdd","content":"<p><strong>一、下载安装包</strong><br>  下载redis安装包，下载方式很多比如如下方式都可以：<br>    1)、到官网下载<a href=\"http://redis.io需要的版本\" target=\"_blank\" rel=\"external\">http://redis.io需要的版本</a><br>    2)、在linux系统中用命令下载 $ wget <a href=\"http://download.redis.io/releases/redis-2.8.17.tar.gz\" target=\"_blank\" rel=\"external\">http://download.redis.io/releases/redis-2.8.17.tar.gz</a><br>    下载成功后得到redis-2.8.17.tar.gz安装包<br><strong>二、安装</strong><br>    1)、用命令解压缩安装包<br>       $ tar xzf redis-2.8.17.tar.gz</p>\n<pre><code>2)、进入解压后的文件中\n     $ cd redis-2.8.17\n\n3)、编译安装\n      $ make\n</code></pre><p>  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli<br><strong>三、启动服务</strong><br>     1)、进入到redis安装目录src下面<br>          $ cd /usr/local/redis-2.8.17/src<br>     2)、启动服务操作，启动服务主要有两种方式：<br>           A：采用默认配置方式启动(不推荐)<br>                $ ./redis-server<br>           B：采用制定配置文件启动(推荐)<br>                 $ ./redis-server ../redis.conf<br>     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行</p>\n<p><strong>四、测试</strong><br>   1)、进入安装目录，运行redis-cli<br>         $ ./redis-cli<br>         redis&gt; set username maps<br>         redis&gt;get username<br>         “maps” </p>\n","excerpt":"","more":"<p><strong>一、下载安装包</strong><br>  下载redis安装包，下载方式很多比如如下方式都可以：<br>    1)、到官网下载<a href=\"http://redis.io需要的版本\">http://redis.io需要的版本</a><br>    2)、在linux系统中用命令下载 $ wget <a href=\"http://download.redis.io/releases/redis-2.8.17.tar.gz\">http://download.redis.io/releases/redis-2.8.17.tar.gz</a><br>    下载成功后得到redis-2.8.17.tar.gz安装包<br><strong>二、安装</strong><br>    1)、用命令解压缩安装包<br>       $ tar xzf redis-2.8.17.tar.gz</p>\n<pre><code>2)、进入解压后的文件中\n     $ cd redis-2.8.17\n\n3)、编译安装\n      $ make\n</code></pre><p>  注：make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli<br><strong>三、启动服务</strong><br>     1)、进入到redis安装目录src下面<br>          $ cd /usr/local/redis-2.8.17/src<br>     2)、启动服务操作，启动服务主要有两种方式：<br>           A：采用默认配置方式启动(不推荐)<br>                $ ./redis-server<br>           B：采用制定配置文件启动(推荐)<br>                 $ ./redis-server ../redis.conf<br>     注：redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件,修改redis.conf  配置文件修改 daemonize yes ；该配置为使redis启动后可以后台运行</p>\n<p><strong>四、测试</strong><br>   1)、进入安装目录，运行redis-cli<br>         $ ./redis-cli<br>         redis&gt; set username maps<br>         redis&gt;get username<br>         “maps” </p>\n"},{"title":"Redis-定时操作篇","date":"2017-04-18T09:09:35.000Z","_content":"**一、定时描述**\n\n平时开发中，经常会把一些热数据存入缓存中，并且设置失效时间，比如把用户和rest接口地址存入缓存，并设置失效时间，一方面可以提高响应速度，还可以把一部分无效的请求挡在缓存层处理；还比如把验证码存入缓存，并设置失效时间，也可以达到上述目的。redis缓存有两种定时模式：\n\n<!--more-->\n\n>1、设置某键值在多少秒之后失效\n>\n>2、设置某键值在以后某一个时间点之后失效，比如2017年10月1日23点59分59秒失效\n\n**二、设置某键值在多少秒之后失效**\n\n>**EXPIRE key seconds**\n>\n>为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除;当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0。\n>\n>可以对一个已经带有生存时间的 key 执行 EXPIRE 命令，新指定的生存时间会取代旧的生存时间。\n>\n>注：Redis 2.4 版本中，就算 key 已经过期，但还是可能在过期之后一秒钟之内被访问到；而在新的 Redis 2.6 版本中，延迟已经精确到1毫秒。\n\n```java\n\n\t127.0.0.1:6379> set username maps #先设置键-值\n\n\tOK\n\n\t127.0.0.1:6379> ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1\n\t\n\t(integer) -1\n\n\n\t127.0.0.1:6379> expire username 30 #设置过期时间为30秒\n\n\t(integer) 1\n\n\t127.0.0.1:6379> ttl username #查看剩余失效时间\n\n\t(integer) 25\n\n\t127.0.0.1:6379> ttl username  #查看剩余失效时间\n\n\t(integer) 23\n\n\t127.0.0.1:6379> ttl username  #查看剩余失效时间\n\n\t(integer) 22\n\n\t127.0.0.1:6379> expire username 50  #重新设置(更新）失效时间为50秒，如果key已经失效，则返回0\n\n\t(integer) 1\n\n\t127.0.0.1:6379> ttl username #查看剩余失效时间\n\n\t(integer) 47\n\n\t127.0.0.1:6379> ttl username #查看剩余失效时间\n\n\t(integer) 46\n\n\t127.0.0.1:6379> ttl username #当该键已经达到失效时间时，则自动失效，ttl查看时返回-2\n\n\t(integer) -2\n\n\t127.0.0.1:6379> keys username  #可以通过keys命令查看已经失效的键是否存在\n\n\t(empty list or set)\n\n```\n\n**三、设置某键值在以后某一个时间点之后失效**\n\n>**EXPIREAT key timestamp**\n>\n>将key键在将来UNIX时间戳timestamp点失效\n>\n>如果生存时间设置成功，返回 1，当 key 不存在或没办法设置生存时间，返回 0\n>\n>注：EXPIREAT的设置规则跟EXPIRE命令一样\n\n```java\n\n\t127.0.0.1:6379> set username maps #先设置键-值\n\n\tOK\n\n\t127.0.0.1:6379> ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1\n\t\n\t(integer) -1\n\t\n\t127.0.0.1:6379> expireat username 1491494400000 # 这个 key 将在 2017-04-07 00:00:00 过期\n\n\t(integer) 1\n\n\t127.0.0.1:6379> ttl username  #查看剩余失效时间 \n\n\t(integer) 1490001890019\n\t\n```","source":"_posts/Redis-定时操作篇.md","raw":"---\ntitle: Redis-定时操作篇\ndate: 2017-04-18 17:09:35\ncategories: Redis\ntags: Redis\n---\n**一、定时描述**\n\n平时开发中，经常会把一些热数据存入缓存中，并且设置失效时间，比如把用户和rest接口地址存入缓存，并设置失效时间，一方面可以提高响应速度，还可以把一部分无效的请求挡在缓存层处理；还比如把验证码存入缓存，并设置失效时间，也可以达到上述目的。redis缓存有两种定时模式：\n\n<!--more-->\n\n>1、设置某键值在多少秒之后失效\n>\n>2、设置某键值在以后某一个时间点之后失效，比如2017年10月1日23点59分59秒失效\n\n**二、设置某键值在多少秒之后失效**\n\n>**EXPIRE key seconds**\n>\n>为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除;当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0。\n>\n>可以对一个已经带有生存时间的 key 执行 EXPIRE 命令，新指定的生存时间会取代旧的生存时间。\n>\n>注：Redis 2.4 版本中，就算 key 已经过期，但还是可能在过期之后一秒钟之内被访问到；而在新的 Redis 2.6 版本中，延迟已经精确到1毫秒。\n\n```java\n\n\t127.0.0.1:6379> set username maps #先设置键-值\n\n\tOK\n\n\t127.0.0.1:6379> ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1\n\t\n\t(integer) -1\n\n\n\t127.0.0.1:6379> expire username 30 #设置过期时间为30秒\n\n\t(integer) 1\n\n\t127.0.0.1:6379> ttl username #查看剩余失效时间\n\n\t(integer) 25\n\n\t127.0.0.1:6379> ttl username  #查看剩余失效时间\n\n\t(integer) 23\n\n\t127.0.0.1:6379> ttl username  #查看剩余失效时间\n\n\t(integer) 22\n\n\t127.0.0.1:6379> expire username 50  #重新设置(更新）失效时间为50秒，如果key已经失效，则返回0\n\n\t(integer) 1\n\n\t127.0.0.1:6379> ttl username #查看剩余失效时间\n\n\t(integer) 47\n\n\t127.0.0.1:6379> ttl username #查看剩余失效时间\n\n\t(integer) 46\n\n\t127.0.0.1:6379> ttl username #当该键已经达到失效时间时，则自动失效，ttl查看时返回-2\n\n\t(integer) -2\n\n\t127.0.0.1:6379> keys username  #可以通过keys命令查看已经失效的键是否存在\n\n\t(empty list or set)\n\n```\n\n**三、设置某键值在以后某一个时间点之后失效**\n\n>**EXPIREAT key timestamp**\n>\n>将key键在将来UNIX时间戳timestamp点失效\n>\n>如果生存时间设置成功，返回 1，当 key 不存在或没办法设置生存时间，返回 0\n>\n>注：EXPIREAT的设置规则跟EXPIRE命令一样\n\n```java\n\n\t127.0.0.1:6379> set username maps #先设置键-值\n\n\tOK\n\n\t127.0.0.1:6379> ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1\n\t\n\t(integer) -1\n\t\n\t127.0.0.1:6379> expireat username 1491494400000 # 这个 key 将在 2017-04-07 00:00:00 过期\n\n\t(integer) 1\n\n\t127.0.0.1:6379> ttl username  #查看剩余失效时间 \n\n\t(integer) 1490001890019\n\t\n```","slug":"Redis-定时操作篇","published":1,"updated":"2018-07-08T09:37:48.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pii002130tz6tco76gv","content":"<p><strong>一、定时描述</strong></p>\n<p>平时开发中，经常会把一些热数据存入缓存中，并且设置失效时间，比如把用户和rest接口地址存入缓存，并设置失效时间，一方面可以提高响应速度，还可以把一部分无效的请求挡在缓存层处理；还比如把验证码存入缓存，并设置失效时间，也可以达到上述目的。redis缓存有两种定时模式：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>1、设置某键值在多少秒之后失效</p>\n<p>2、设置某键值在以后某一个时间点之后失效，比如2017年10月1日23点59分59秒失效</p>\n</blockquote>\n<p><strong>二、设置某键值在多少秒之后失效</strong></p>\n<blockquote>\n<p><strong>EXPIRE key seconds</strong></p>\n<p>为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除;当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0。</p>\n<p>可以对一个已经带有生存时间的 key 执行 EXPIRE 命令，新指定的生存时间会取代旧的生存时间。</p>\n<p>注：Redis 2.4 版本中，就算 key 已经过期，但还是可能在过期之后一秒钟之内被访问到；而在新的 Redis 2.6 版本中，延迟已经精确到1毫秒。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; set username maps #先设置键-值</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1</div><div class=\"line\"></div><div class=\"line\">(integer) -1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; expire username 30 #设置过期时间为30秒</div><div class=\"line\"></div><div class=\"line\">(integer) 1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 25</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 23</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 22</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; expire username 50  #重新设置(更新）失效时间为50秒，如果key已经失效，则返回0</div><div class=\"line\"></div><div class=\"line\">(integer) 1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 47</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 46</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #当该键已经达到失效时间时，则自动失效，ttl查看时返回-2</div><div class=\"line\"></div><div class=\"line\">(integer) -2</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; keys username  #可以通过keys命令查看已经失效的键是否存在</div><div class=\"line\"></div><div class=\"line\">(empty list or set)</div></pre></td></tr></table></figure>\n<p><strong>三、设置某键值在以后某一个时间点之后失效</strong></p>\n<blockquote>\n<p><strong>EXPIREAT key timestamp</strong></p>\n<p>将key键在将来UNIX时间戳timestamp点失效</p>\n<p>如果生存时间设置成功，返回 1，当 key 不存在或没办法设置生存时间，返回 0</p>\n<p>注：EXPIREAT的设置规则跟EXPIRE命令一样</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; set username maps #先设置键-值</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1</div><div class=\"line\"></div><div class=\"line\">(integer) -1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; expireat username 1491494400000 # 这个 key 将在 2017-04-07 00:00:00 过期</div><div class=\"line\"></div><div class=\"line\">(integer) 1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #查看剩余失效时间 </div><div class=\"line\"></div><div class=\"line\">(integer) 1490001890019</div></pre></td></tr></table></figure>","excerpt":"<p><strong>一、定时描述</strong></p>\n<p>平时开发中，经常会把一些热数据存入缓存中，并且设置失效时间，比如把用户和rest接口地址存入缓存，并设置失效时间，一方面可以提高响应速度，还可以把一部分无效的请求挡在缓存层处理；还比如把验证码存入缓存，并设置失效时间，也可以达到上述目的。redis缓存有两种定时模式：</p>","more":"<blockquote>\n<p>1、设置某键值在多少秒之后失效</p>\n<p>2、设置某键值在以后某一个时间点之后失效，比如2017年10月1日23点59分59秒失效</p>\n</blockquote>\n<p><strong>二、设置某键值在多少秒之后失效</strong></p>\n<blockquote>\n<p><strong>EXPIRE key seconds</strong></p>\n<p>为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除;当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0。</p>\n<p>可以对一个已经带有生存时间的 key 执行 EXPIRE 命令，新指定的生存时间会取代旧的生存时间。</p>\n<p>注：Redis 2.4 版本中，就算 key 已经过期，但还是可能在过期之后一秒钟之内被访问到；而在新的 Redis 2.6 版本中，延迟已经精确到1毫秒。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; set username maps #先设置键-值</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1</div><div class=\"line\"></div><div class=\"line\">(integer) -1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; expire username 30 #设置过期时间为30秒</div><div class=\"line\"></div><div class=\"line\">(integer) 1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 25</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 23</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 22</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; expire username 50  #重新设置(更新）失效时间为50秒，如果key已经失效，则返回0</div><div class=\"line\"></div><div class=\"line\">(integer) 1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 47</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #查看剩余失效时间</div><div class=\"line\"></div><div class=\"line\">(integer) 46</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username #当该键已经达到失效时间时，则自动失效，ttl查看时返回-2</div><div class=\"line\"></div><div class=\"line\">(integer) -2</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; keys username  #可以通过keys命令查看已经失效的键是否存在</div><div class=\"line\"></div><div class=\"line\">(empty list or set)</div></pre></td></tr></table></figure>\n<p><strong>三、设置某键值在以后某一个时间点之后失效</strong></p>\n<blockquote>\n<p><strong>EXPIREAT key timestamp</strong></p>\n<p>将key键在将来UNIX时间戳timestamp点失效</p>\n<p>如果生存时间设置成功，返回 1，当 key 不存在或没办法设置生存时间，返回 0</p>\n<p>注：EXPIREAT的设置规则跟EXPIRE命令一样</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; set username maps #先设置键-值</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #此时还没有为key设置失效时间，所以用ttl时返回-1</div><div class=\"line\"></div><div class=\"line\">(integer) -1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; expireat username 1491494400000 # 这个 key 将在 2017-04-07 00:00:00 过期</div><div class=\"line\"></div><div class=\"line\">(integer) 1</div><div class=\"line\"></div><div class=\"line\">127.0.0.1:6379&gt; ttl username  #查看剩余失效时间 </div><div class=\"line\"></div><div class=\"line\">(integer) 1490001890019</div></pre></td></tr></table></figure>"},{"title":"RocketMQ启动报错解决","date":"2016-09-20T02:21:53.000Z","_content":"最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！\n\n<!--more-->\n\n>![Alt text](http://soujava.com/images/rocketMQ1.png)\n\n注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机\n\n### 解决方法\n\n1、vim /etc/hosts   \n\t\n添加如下主机名配置信息\n\n>![Alt text](http://soujava.com/images/rocketMQ2.png)\n\n2、service network stop  \n\n关闭网卡\n\n3、service network start  \n\n启动网卡\n\n4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功\n\n>![Alt text](http://soujava.com/images/rocketMQ3.png)\n\n","source":"_posts/RocketMQ启动报错解决.md","raw":"---\ntitle: RocketMQ启动报错解决\ndate: 2016-09-20 10:21:53\ncategories: RocketMQ\ntags: RocketMQ启动错误\n---\n最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！\n\n<!--more-->\n\n>![Alt text](http://soujava.com/images/rocketMQ1.png)\n\n注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机\n\n### 解决方法\n\n1、vim /etc/hosts   \n\t\n添加如下主机名配置信息\n\n>![Alt text](http://soujava.com/images/rocketMQ2.png)\n\n2、service network stop  \n\n关闭网卡\n\n3、service network start  \n\n启动网卡\n\n4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功\n\n>![Alt text](http://soujava.com/images/rocketMQ3.png)\n\n","slug":"RocketMQ启动报错解决","published":1,"updated":"2018-07-08T09:37:48.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pik002430tz0qwvt83u","content":"<p>最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ1.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>1、vim /etc/hosts   </p>\n<p>添加如下主机名配置信息</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ2.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>2、service network stop  </p>\n<p>关闭网卡</p>\n<p>3、service network start  </p>\n<p>启动网卡</p>\n<p>4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ3.png\" alt=\"Alt text\"></p>\n</blockquote>\n","excerpt":"<p>最近需要用到消息服务器，就用到淘宝开源的RocketMQ消息服务器了，重新安装的一台新的linux服务器（CentOS6.4），然后安装的RocketMQ二进制包。安装成功后，在最后启动的时候，报了一个错误！</p>","more":"<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ1.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>注：根据上面的错误提示信息可以看到是因为刚刚安装的Centos操作系统的主机名称没有配置导致启动MQ服务时住不到主机</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>1、vim /etc/hosts   </p>\n<p>添加如下主机名配置信息</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ2.png\" alt=\"Alt text\"></p>\n</blockquote>\n<p>2、service network stop  </p>\n<p>关闭网卡</p>\n<p>3、service network start  </p>\n<p>启动网卡</p>\n<p>4、再重新执行MQ的启动服务命令后，可以看到下面的提示信息代表服务已经启动成功</p>\n<blockquote>\n<p><img src=\"http://soujava.com/images/rocketMQ3.png\" alt=\"Alt text\"></p>\n</blockquote>"},{"title":"VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置","date":"2016-08-17T01:27:45.000Z","_content":"\n一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：\n1. 买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)\n2. VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n3. 进入到VMwarevSphere中的某一台虚拟机进行网卡配置\n\n二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n\t\n1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡\n\n![](http://soujava.com/images/vSphere0.jpg)\n\n2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”--“网络”，在右侧界面中右上角点击“添加网络”\n\t\n![](http://soujava.com/images/vSphere1.jpg)\n\n3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了\n\n![](http://soujava.com/images/vSphere2.jpg)\n\n4、 选择网卡的网络类型\n\n注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。\n\n![](http://soujava.com/images/vSphere3.jpg)\n\n5、设置网卡的链接方式\n\n![](http://soujava.com/images/vSphere4.jpg)\n\n6、完成配置\n\n![](http://soujava.com/images/vSphere5.jpg)\n\n7、然后再次进入“配置”--“网络”界面中，我们可以看到我们新添加的网卡\n\n![](http://soujava.com/images/vSphere00.jpg)\n\n8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)\n\n![](http://soujava.com/images/vSphere01.jpg)\n\n![](http://soujava.com/images/vSphere02.jpg)\n\n9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”\n\n![](http://soujava.com/images/vSphere03.jpg)\n\n![](http://soujava.com/images/vSphere04.jpg)\n\n10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。\n\n![](http://soujava.com/images/vSphere05.jpg)\n\n![](http://soujava.com/images/vSphere06.jpg)\n\n11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络\n\n![](http://soujava.com/images/vSphere6.jpg)\n\n12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)\n\n![](http://soujava.com/images/vSphere7.jpg)\n\n13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)\n\n![](http://soujava.com/images/vSphere8.jpg)\n\n![](http://soujava.com/images/vSphere9.jpg)\n\n14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到\n\n![](http://soujava.com/images/vSphere10.jpg)\n\n15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n\n\n16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“[Linux双网卡配置(内外网同时访问)](http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/)”","source":"_posts/VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置.md","raw":"---\ntitle: VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置\ndate: 2016-08-17 09:27:45\ncategories: vSphere\ntags: vSphere添加物理网卡\n---\n\n一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：\n1. 买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)\n2. VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n3. 进入到VMwarevSphere中的某一台虚拟机进行网卡配置\n\n二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡\n\t\n1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡\n\n![](http://soujava.com/images/vSphere0.jpg)\n\n2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”--“网络”，在右侧界面中右上角点击“添加网络”\n\t\n![](http://soujava.com/images/vSphere1.jpg)\n\n3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了\n\n![](http://soujava.com/images/vSphere2.jpg)\n\n4、 选择网卡的网络类型\n\n注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。\n\n![](http://soujava.com/images/vSphere3.jpg)\n\n5、设置网卡的链接方式\n\n![](http://soujava.com/images/vSphere4.jpg)\n\n6、完成配置\n\n![](http://soujava.com/images/vSphere5.jpg)\n\n7、然后再次进入“配置”--“网络”界面中，我们可以看到我们新添加的网卡\n\n![](http://soujava.com/images/vSphere00.jpg)\n\n8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)\n\n![](http://soujava.com/images/vSphere01.jpg)\n\n![](http://soujava.com/images/vSphere02.jpg)\n\n9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”\n\n![](http://soujava.com/images/vSphere03.jpg)\n\n![](http://soujava.com/images/vSphere04.jpg)\n\n10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。\n\n![](http://soujava.com/images/vSphere05.jpg)\n\n![](http://soujava.com/images/vSphere06.jpg)\n\n11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络\n\n![](http://soujava.com/images/vSphere6.jpg)\n\n12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)\n\n![](http://soujava.com/images/vSphere7.jpg)\n\n13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)\n\n![](http://soujava.com/images/vSphere8.jpg)\n\n![](http://soujava.com/images/vSphere9.jpg)\n\n14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到\n\n![](http://soujava.com/images/vSphere10.jpg)\n\n15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了\n\n![](http://soujava.com/images/vSphere11.jpg)\n\n\n\n16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“[Linux双网卡配置(内外网同时访问)](http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/)”","slug":"VMwarevSphere添加物理网卡后其中的虚拟机使用该网卡配置","published":1,"updated":"2018-07-08T09:37:48.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pil002730tzysvyc0n0","content":"<p>一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：</p>\n<ol>\n<li>买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)</li>\n<li>VMwarevSphereClientk连VMwarevSphere服务器配置网卡</li>\n<li>进入到VMwarevSphere中的某一台虚拟机进行网卡配置</li>\n</ol>\n<p>二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡</p>\n<p>1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere0.jpg\" alt=\"\"></p>\n<p>2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”–“网络”，在右侧界面中右上角点击“添加网络”</p>\n<p><img src=\"http://soujava.com/images/vSphere1.jpg\" alt=\"\"></p>\n<p>3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了</p>\n<p><img src=\"http://soujava.com/images/vSphere2.jpg\" alt=\"\"></p>\n<p>4、 选择网卡的网络类型</p>\n<p>注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。</p>\n<p><img src=\"http://soujava.com/images/vSphere3.jpg\" alt=\"\"></p>\n<p>5、设置网卡的链接方式</p>\n<p><img src=\"http://soujava.com/images/vSphere4.jpg\" alt=\"\"></p>\n<p>6、完成配置</p>\n<p><img src=\"http://soujava.com/images/vSphere5.jpg\" alt=\"\"></p>\n<p>7、然后再次进入“配置”–“网络”界面中，我们可以看到我们新添加的网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere00.jpg\" alt=\"\"></p>\n<p>8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)</p>\n<p><img src=\"http://soujava.com/images/vSphere01.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere02.jpg\" alt=\"\"></p>\n<p>9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”</p>\n<p><img src=\"http://soujava.com/images/vSphere03.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere04.jpg\" alt=\"\"></p>\n<p>10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。</p>\n<p><img src=\"http://soujava.com/images/vSphere05.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere06.jpg\" alt=\"\"></p>\n<p>11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络</p>\n<p><img src=\"http://soujava.com/images/vSphere6.jpg\" alt=\"\"></p>\n<p>12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)</p>\n<p><img src=\"http://soujava.com/images/vSphere7.jpg\" alt=\"\"></p>\n<p>13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)</p>\n<p><img src=\"http://soujava.com/images/vSphere8.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere9.jpg\" alt=\"\"></p>\n<p>14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到</p>\n<p><img src=\"http://soujava.com/images/vSphere10.jpg\" alt=\"\"></p>\n<p>15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“<a href=\"http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/\" target=\"_blank\" rel=\"external\">Linux双网卡配置(内外网同时访问)</a>”</p>\n","excerpt":"","more":"<p>一、有一台机架服务器，使用VMwarevSphere进行虚拟化，然后在其上安装N台虚拟机以供不同业务需要，之前该VMwarevSphere只有一个内网的物理网卡，也就是只能内网访问和使用；现在有个需求需要把该VMwarevSphere开放外网功能，并满足其他地域的用户通过公司VPN可以正常使用上面的虚拟机(其中的某一台)。所以现在需要三步操作：</p>\n<ol>\n<li>买一个物理网卡插到机架服务器的卡槽上面(哈哈，这一步不用说了，我去趟WC)</li>\n<li>VMwarevSphereClientk连VMwarevSphere服务器配置网卡</li>\n<li>进入到VMwarevSphere中的某一台虚拟机进行网卡配置</li>\n</ol>\n<p>二、VMwarevSphereClientk连VMwarevSphere服务器配置网卡</p>\n<p>1、 插入外网物理网卡之后，我们通过VMwarevSphereClientk连VMwarevSphere服务器后，在“配置”-“网络适配器”中就可以看到刚才新接入的网卡了(如果看不到，则说明你的网卡有问题啊，具体什么问题需要物理解决)，下面的图片中我们可以看到有两个可用的网卡(最下面两个vmnic0、vmnic1，其实vmnic1是我新接入的网卡)，其他的都不可用，仅仅代表支持多少个网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere0.jpg\" alt=\"\"></p>\n<p>2、 虽然我们已经接入了物理网卡，但是我们现在系统的网络环境还没有装载进来，我们需要把该网卡添加到网络环境中来；进入“配置”–“网络”，在右侧界面中右上角点击“添加网络”</p>\n<p><img src=\"http://soujava.com/images/vSphere1.jpg\" alt=\"\"></p>\n<p>3、开始进入到添加网络的界面，其实只需要下一步下一步的进行就可以了</p>\n<p><img src=\"http://soujava.com/images/vSphere2.jpg\" alt=\"\"></p>\n<p>4、 选择网卡的网络类型</p>\n<p>注：创建交换机那一项，选择网卡时不要被图片中我的选择内容干扰了，选择哪个网卡根据你的实际情况，参照第一幅图片中(你找到你新插入的物理网卡的代号vmnic0~vmnicN)；比如你新接入的网卡是那个你就选择哪个。</p>\n<p><img src=\"http://soujava.com/images/vSphere3.jpg\" alt=\"\"></p>\n<p>5、设置网卡的链接方式</p>\n<p><img src=\"http://soujava.com/images/vSphere4.jpg\" alt=\"\"></p>\n<p>6、完成配置</p>\n<p><img src=\"http://soujava.com/images/vSphere5.jpg\" alt=\"\"></p>\n<p>7、然后再次进入“配置”–“网络”界面中，我们可以看到我们新添加的网卡</p>\n<p><img src=\"http://soujava.com/images/vSphere00.jpg\" alt=\"\"></p>\n<p>8、 然后我们对这个网卡进行编辑操作(添加虚拟机端口)</p>\n<p><img src=\"http://soujava.com/images/vSphere01.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere02.jpg\" alt=\"\"></p>\n<p>9、 这里跟上一个步骤差不多，只不过这里的连接类型需要选择“vmKernel”</p>\n<p><img src=\"http://soujava.com/images/vSphere03.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere04.jpg\" alt=\"\"></p>\n<p>10、 配置我们的ip地址(一般是配置你的外网ip地址，因为你既然让他开放到外网，所以你肯定有可能需要在外网通过vmSphereClient进行远程管理吧，这里就是配置你的外网访问ip地址)，到这里我们的物理机和网卡的配置就算完成了，下面需要配置的就是我们需要提供给外网用户访问的虚拟机了。</p>\n<p><img src=\"http://soujava.com/images/vSphere05.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere06.jpg\" alt=\"\"></p>\n<p>11、 选择我们需要提供给外网用户访问的虚“虚拟机”，开始配置网络</p>\n<p><img src=\"http://soujava.com/images/vSphere6.jpg\" alt=\"\"></p>\n<p>12、 为虚拟机添加网卡(我们虚拟机要想链接外网，肯定要使用物理服务器的外网网卡，所以我们需要把物理服务器新接入的网卡添加到虚拟机上面)</p>\n<p><img src=\"http://soujava.com/images/vSphere7.jpg\" alt=\"\"></p>\n<p>13、 选择网络类型(其实这里又是跟前面的网络配置差不多，多么熟悉的界面)</p>\n<p><img src=\"http://soujava.com/images/vSphere8.jpg\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/vSphere9.jpg\" alt=\"\"></p>\n<p>14、 然后添加完成后，我们可以看到我们新加入的网络适配器2，这里需要记住右侧的MAC地址，后面的配置网卡配置文件时要用到</p>\n<p><img src=\"http://soujava.com/images/vSphere10.jpg\" alt=\"\"></p>\n<p>15、重启一下系统，然后我们进入到需要供外网访问的那台虚拟机中，输入ifconfig命令就可以看到我们为虚拟机添加的网卡了</p>\n<p><img src=\"http://soujava.com/images/vSphere11.jpg\" alt=\"\"></p>\n<p>16、当然上一步中看到eth1这个新的网卡还不行，需要为这个网卡配置具体的ip，因为我们既然需要把这台虚拟机提供给外面用户访问，那么ip地址肯定不能老变化，所以我们需要为这个网卡eth1配置相关信息，具体怎么配置可以参考另一篇文章“<a href=\"http://soujava.com/Linux%E5%8F%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE-%E5%86%85%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE/\">Linux双网卡配置(内外网同时访问)</a>”</p>\n"},{"title":"Tomcat实时查看日志信息","date":"2016-08-17T03:27:50.000Z","_content":"\n1. 先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）\n\n\t>cd  tomcat/logs/\n\t\n2. 运行如下命令就可以实时查看tomcat的运行日志信息了\n\n\t>tail -f catalina.out\n\n\n","source":"_posts/Tomcat实时查看日志信息.md","raw":"---\ntitle: Tomcat实时查看日志信息\ndate: 2016-08-17 11:27:50\ncategories: Tomcat\ntags: Tomcat日志\n---\n\n1. 先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）\n\n\t>cd  tomcat/logs/\n\t\n2. 运行如下命令就可以实时查看tomcat的运行日志信息了\n\n\t>tail -f catalina.out\n\n\n","slug":"Tomcat实时查看日志信息","published":1,"updated":"2018-07-08T09:37:48.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pio002930tzgdqiynh1","content":"<ol>\n<li><p>先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）</p>\n<blockquote>\n<p>cd  tomcat/logs/</p>\n</blockquote>\n</li>\n<li><p>运行如下命令就可以实时查看tomcat的运行日志信息了</p>\n<blockquote>\n<p>tail -f catalina.out</p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>先切换到tomcat的安装目录logs/文件夹下面（tomcat/logs/）</p>\n<blockquote>\n<p>cd  tomcat/logs/</p>\n</blockquote>\n</li>\n<li><p>运行如下命令就可以实时查看tomcat的运行日志信息了</p>\n<blockquote>\n<p>tail -f catalina.out</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"git搞着玩-新建本地仓库与分支合并","date":"2016-08-19T03:01:47.000Z","_content":"用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；\n\n再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！\n\n扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。\n\n**一、新建本地仓库（git init）**\n```java\n\t$ git init\n\tInitialized empty Git repository in D:/workspace/gitDemo/.git/\n```\n提示初始化一个空的git仓库在XXXX目录中\n\n**二、新建develop分支（git branch develop）**\n*- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！*\n```java\n\t$ git branch\n\t\n```\n输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。\n\n*- 新建develop分支操作（git branch develop）*\n```java\n\t$ git branch develop\n\tfatal: Not a valid object name: 'master'.\n\t\n```\n我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗....\n\n*- 提交一下（git commit）*\n```java\n\t$ git commit -m \"按照git要求，执行一次空的提交操作\"\n\tOn branch master\n\n\tInitial commit\n\n\tnothing to commit\n\n```\n哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。\n\n出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。\n\n*- 看看刚才git自动为我新建的master分支真的创建完了吗*\n```java\n\t$ git branch\n\t\n```\n哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。\n```java\n\t$ echo \"hello maps\" >index.txt\n\n\t$ git commit -m \"commit index.txt file\"\n\t[master (root-commit) be4ae99] commit index.txt file\n \t1 file changed, 1 insertion(+)\n \tcreate mode 100644 index.txt\n\n\t$ git branch\n\t* master\n```\n通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！\n*注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！*\n\n通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。\n\n\n**三、再次新建develop分支（git branch develop）**\n```java\n\t$ git branch develop\n\t\n```\n执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）\n```java\n\t$ git branch\n  \tdevelop\n\t* master\n\t\n```\n看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个\"*\"呢，其实这个\"*\"代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。*那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。*\n\n**四、把master分支中的文件合并到develop中**\n\n- 如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：\n\n1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)\n\n   先切换到develop分支中\n\t```java\n\t\t$ git checkout develop\n\t\tSwitched to branch 'develop'\n\t\n\t```\n   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）\n\t```java\n\t\t$ git branch\n\t  * develop\n\t  \tmaster\n\t\n\t```\n\n2、执行合并分支的命令(*所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中*)\n\n   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)\n\t```java\n\t\t$ git merge master\n\t\tAlready up-to-date.\n\t\n\t```\n\n**五、修改合并到develop分支中的文件内容为hello develop，并提交**\n\n我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop\n```java\n\t原内容：hello maps\n\t新内容：hello develop\n\t\n```\n然后执行添加(add)和提交(commit)操作.\n```java\n\t$ git add index.txt\n\t\n```\n```java\n\t$ git commit -m \"修改index文件为hello develop\"\t\n\t[develop bf5d39d] 修改index文件为hello develop\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n```\n\n**六、切换到master分支,并修改文件内容为hello master**\n\n   切换到master分支\n```java\n\t$ git checkout master\n\tSwitched to branch 'master'\t\n\n```\n\n   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)\n```java\n\t原内容：hello maps\n\t新内容：hello master\n\t\n```\n   \n**七、小述一下**\n\t\n到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。\n\n**八、合并develop分支的内容到master分支中**\n \n- 先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）\n\n```java\n\t$ git branch\n  \tdevelop\n  * master\n\n```\n\n- 合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）\n```java\n\t$ git merge develop\n\tAuto-merging index.txt\n\tCONFLICT (content): Merge conflict in index.txt\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n```\n上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。\n\n- 使用git diff命令查看两个文件冲突的内容\n```java\n\t$ git diff\n\tdiff --cc index.txt\n\tindex 2e6baf7,246b739..0000000\n\t--- a/index.txt\n\t+++ b/index.txt\n\t@@@ -1,1 -1,1 +1,5 @@@\n\t- hello master\n\t -hello develop\n\t++<<<<<<< HEAD\n\t++hello master\n\t++=======\n\t++hello develop\n\t++>>>>>>> develop\n\t\t\n```\n\n- 我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n**九、冲突解决--手工**\n\t\n我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容\n\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n针对上面的文件，我们先看<<<<<<<（7个<） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master\n分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 >>>>>>>（7个>）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。\n\n所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：\n\n 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)\n\n \t文件最终内容为：hello develop\n\n 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)\n\n   文件最终内容为：hello master\n\n 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)\n\n   文件最终内容为：hello master hello develop\n\n不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(\"+\"、\"<\"、\"=\"、\">\")；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！\n\n\n**十、冲突解决--工具**\n\n第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。\n\n```java\n\t$ git mergetool\n\n\tThis message is displayed because 'merge.tool' is not configured.\n\tSee 'git mergetool --tool-help' or 'git help config' for more details.\n\t'git mergetool' will now attempt to use one of the following tools:\n\topendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff\n\tMerging:\n\tindex.txt\n\t\n\tNormal merge conflict for 'index.txt':\n\t  {local}: modified file\n\t  {remote}: modified file\n\tHit return to start merge resolution tool (tortoisemerge):\n\n```\n输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：\n![Alt text](http://soujava.com/images/gitmerge1.png \"git 合并工具\")\n\n你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。\n\n通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。","source":"_posts/git搞着玩-新建本地仓库.md","raw":"---\ntitle: git搞着玩-新建本地仓库与分支合并\ndate: 2016-08-19 11:01:47\ncategories: git\ntags: git\n---\n用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；\n\n再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！\n\n扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。\n\n**一、新建本地仓库（git init）**\n```java\n\t$ git init\n\tInitialized empty Git repository in D:/workspace/gitDemo/.git/\n```\n提示初始化一个空的git仓库在XXXX目录中\n\n**二、新建develop分支（git branch develop）**\n*- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！*\n```java\n\t$ git branch\n\t\n```\n输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。\n\n*- 新建develop分支操作（git branch develop）*\n```java\n\t$ git branch develop\n\tfatal: Not a valid object name: 'master'.\n\t\n```\n我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗....\n\n*- 提交一下（git commit）*\n```java\n\t$ git commit -m \"按照git要求，执行一次空的提交操作\"\n\tOn branch master\n\n\tInitial commit\n\n\tnothing to commit\n\n```\n哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。\n\n出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。\n\n*- 看看刚才git自动为我新建的master分支真的创建完了吗*\n```java\n\t$ git branch\n\t\n```\n哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。\n```java\n\t$ echo \"hello maps\" >index.txt\n\n\t$ git commit -m \"commit index.txt file\"\n\t[master (root-commit) be4ae99] commit index.txt file\n \t1 file changed, 1 insertion(+)\n \tcreate mode 100644 index.txt\n\n\t$ git branch\n\t* master\n```\n通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！\n*注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！*\n\n通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。\n\n\n**三、再次新建develop分支（git branch develop）**\n```java\n\t$ git branch develop\n\t\n```\n执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）\n```java\n\t$ git branch\n  \tdevelop\n\t* master\n\t\n```\n看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个\"*\"呢，其实这个\"*\"代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。*那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。*\n\n**四、把master分支中的文件合并到develop中**\n\n- 如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：\n\n1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)\n\n   先切换到develop分支中\n\t```java\n\t\t$ git checkout develop\n\t\tSwitched to branch 'develop'\n\t\n\t```\n   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）\n\t```java\n\t\t$ git branch\n\t  * develop\n\t  \tmaster\n\t\n\t```\n\n2、执行合并分支的命令(*所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中*)\n\n   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)\n\t```java\n\t\t$ git merge master\n\t\tAlready up-to-date.\n\t\n\t```\n\n**五、修改合并到develop分支中的文件内容为hello develop，并提交**\n\n我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop\n```java\n\t原内容：hello maps\n\t新内容：hello develop\n\t\n```\n然后执行添加(add)和提交(commit)操作.\n```java\n\t$ git add index.txt\n\t\n```\n```java\n\t$ git commit -m \"修改index文件为hello develop\"\t\n\t[develop bf5d39d] 修改index文件为hello develop\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n```\n\n**六、切换到master分支,并修改文件内容为hello master**\n\n   切换到master分支\n```java\n\t$ git checkout master\n\tSwitched to branch 'master'\t\n\n```\n\n   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)\n```java\n\t原内容：hello maps\n\t新内容：hello master\n\t\n```\n   \n**七、小述一下**\n\t\n到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。\n\n**八、合并develop分支的内容到master分支中**\n \n- 先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）\n\n```java\n\t$ git branch\n  \tdevelop\n  * master\n\n```\n\n- 合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）\n```java\n\t$ git merge develop\n\tAuto-merging index.txt\n\tCONFLICT (content): Merge conflict in index.txt\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n```\n上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。\n\n- 使用git diff命令查看两个文件冲突的内容\n```java\n\t$ git diff\n\tdiff --cc index.txt\n\tindex 2e6baf7,246b739..0000000\n\t--- a/index.txt\n\t+++ b/index.txt\n\t@@@ -1,1 -1,1 +1,5 @@@\n\t- hello master\n\t -hello develop\n\t++<<<<<<< HEAD\n\t++hello master\n\t++=======\n\t++hello develop\n\t++>>>>>>> develop\n\t\t\n```\n\n- 我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n**九、冲突解决--手工**\n\t\n我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容\n\n```java\n\t$ cat index.txt\n\t<<<<<<< HEAD\n\thello master\n\t=======\n\thello develop\n\t>>>>>>> develop\n\n```\n针对上面的文件，我们先看<<<<<<<（7个<） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master\n分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 >>>>>>>（7个>）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。\n\n所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：\n\n 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)\n\n \t文件最终内容为：hello develop\n\n 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)\n\n   文件最终内容为：hello master\n\n 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)\n\n   文件最终内容为：hello master hello develop\n\n不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(\"+\"、\"<\"、\"=\"、\">\")；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！\n\n\n**十、冲突解决--工具**\n\n第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。\n\n```java\n\t$ git mergetool\n\n\tThis message is displayed because 'merge.tool' is not configured.\n\tSee 'git mergetool --tool-help' or 'git help config' for more details.\n\t'git mergetool' will now attempt to use one of the following tools:\n\topendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff\n\tMerging:\n\tindex.txt\n\t\n\tNormal merge conflict for 'index.txt':\n\t  {local}: modified file\n\t  {remote}: modified file\n\tHit return to start merge resolution tool (tortoisemerge):\n\n```\n输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：\n![Alt text](http://soujava.com/images/gitmerge1.png \"git 合并工具\")\n\n你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。\n\n通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。","slug":"git搞着玩-新建本地仓库","published":1,"updated":"2018-07-08T09:37:48.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1piq002d30tzmuu7us3j","content":"<p>用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；</p>\n<p>再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！</p>\n<p>扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。</p>\n<p><strong>一、新建本地仓库（git init）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository in D:/workspace/gitDemo/.git/</div></pre></td></tr></table></figure></p>\n<p>提示初始化一个空的git仓库在XXXX目录中</p>\n<p><strong>二、新建develop分支（git branch develop）</strong><br><em>- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。</p>\n<p><em>- 新建develop分支操作（git branch develop）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div><div class=\"line\">fatal: Not a valid object name: <span class=\"string\">'master'</span>.</div></pre></td></tr></table></figure></p>\n<p>我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗….</p>\n<p><em>- 提交一下（git commit）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"按照git要求，执行一次空的提交操作\"</span></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">nothing to commit</div></pre></td></tr></table></figure></p>\n<p>哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。</p>\n<p>出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。</p>\n<p><em>- 看看刚才git自动为我新建的master分支真的创建完了吗</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo <span class=\"string\">\"hello maps\"</span> &gt;index.txt</div><div class=\"line\"></div><div class=\"line\">$ git commit -m <span class=\"string\">\"commit index.txt file\"</span></div><div class=\"line\">[master (root-commit) be4ae99] commit index.txt file</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+)</div><div class=\"line\">\tcreate mode <span class=\"number\">100644</span> index.txt</div><div class=\"line\"></div><div class=\"line\">$ git branch</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！<br><em>注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！</em></p>\n<p>通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。</p>\n<p><strong>三、再次新建develop分支（git branch develop）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div></pre></td></tr></table></figure></p>\n<p>执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个”<em>“呢，其实这个”</em>“代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。<em>那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。</em></p>\n<p><strong>四、把master分支中的文件合并到develop中</strong></p>\n<ul>\n<li>如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：</li>\n</ul>\n<p>1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)</p>\n<p>   先切换到develop分支中<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout develop</div><div class=\"line\">Switched to branch <span class=\"string\">'develop'</span></div></pre></td></tr></table></figure></p>\n<p>   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> * develop</div><div class=\"line\"> \tmaster</div></pre></td></tr></table></figure></p>\n<p>2、执行合并分支的命令(<em>所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中</em>)</p>\n<p>   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge master</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure></p>\n<p><strong>五、修改合并到develop分支中的文件内容为hello develop，并提交</strong></p>\n<p>我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello develop</div></pre></td></tr></table></figure></p>\n<p>然后执行添加(add)和提交(commit)操作.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add index.txt</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"修改index文件为hello develop\"</span>\t</div><div class=\"line\">[develop bf5d39d] 修改index文件为hello develop</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</div></pre></td></tr></table></figure>\n<p><strong>六、切换到master分支,并修改文件内容为hello master</strong></p>\n<p>   切换到master分支<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">Switched to branch <span class=\"string\">'master'</span></div></pre></td></tr></table></figure></p>\n<p>   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello master</div></pre></td></tr></table></figure></p>\n<p><strong>七、小述一下</strong></p>\n<p>到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。</p>\n<p><strong>八、合并develop分支的内容到master分支中</strong></p>\n<ul>\n<li>先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\"> * master</div></pre></td></tr></table></figure>\n<ul>\n<li>合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge develop</div><div class=\"line\">Auto-merging index.<span class=\"function\">txt</span></div><div class=\"line\"><span class=\"title\">CONFLICT</span> <span class=\"params\">(content)</span>: Merge conflict in index.txt</div><div class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。</p>\n<ul>\n<li><p>使用git diff命令查看两个文件冲突的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --cc index.txt</div><div class=\"line\">index <span class=\"number\">2e6</span>baf7,<span class=\"number\">246</span>b739..<span class=\"number\">0000000</span></div><div class=\"line\">--- a/index.txt</div><div class=\"line\">+++ b/index.txt</div><div class=\"line\">@@@ -<span class=\"number\">1</span>,<span class=\"number\">1</span> -<span class=\"number\">1</span>,<span class=\"number\">1</span> +<span class=\"number\">1</span>,<span class=\"number\">5</span> @@@</div><div class=\"line\">- hello master</div><div class=\"line\"> -hello develop</div><div class=\"line\">++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">++hello master</div><div class=\"line\">++=======</div><div class=\"line\">++hello develop</div><div class=\"line\">++&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>九、冲突解决–手工</strong></p>\n<p>我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n<p>针对上面的文件，我们先看&lt;&lt;&lt;&lt;&lt;&lt;&lt;（7个&lt;） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master<br>分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 &gt;&gt;&gt;&gt;&gt;&gt;&gt;（7个&gt;）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。</p>\n<p>所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：</p>\n<p> 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)</p>\n<pre><code>文件最终内容为：hello develop\n</code></pre><p> 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)</p>\n<p>   文件最终内容为：hello master</p>\n<p> 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)</p>\n<p>   文件最终内容为：hello master hello develop</p>\n<p>不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(“+”、”&lt;”、”=”、”&gt;”)；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！</p>\n<p><strong>十、冲突解决–工具</strong></p>\n<p>第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div><div class=\"line\"></div><div class=\"line\">This message is displayed because <span class=\"string\">'merge.tool'</span> is not configured.</div><div class=\"line\">See <span class=\"string\">'git mergetool --tool-help'</span> or <span class=\"string\">'git help config'</span> <span class=\"keyword\">for</span> more details.</div><div class=\"line\"><span class=\"string\">'git mergetool'</span> will now attempt to use one of the following tools:</div><div class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff</div><div class=\"line\">Merging:</div><div class=\"line\">index.txt</div><div class=\"line\"></div><div class=\"line\">Normal merge conflict <span class=\"keyword\">for</span> <span class=\"string\">'index.txt'</span>:</div><div class=\"line\">  &#123;local&#125;: modified file</div><div class=\"line\">  &#123;remote&#125;: <span class=\"function\">modified file</span></div><div class=\"line\">Hit return to start merge resolution <span class=\"title\">tool</span> <span class=\"params\">(tortoisemerge)</span>:</div></pre></td></tr></table></figure>\n<p>输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：<br><img src=\"http://soujava.com/images/gitmerge1.png\" alt=\"Alt text\" title=\"git 合并工具\"></p>\n<p>你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。</p>\n<p>通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。</p>\n","excerpt":"","more":"<p>用了git有一段时间了，在项目团队刚切入git时还是遇到了不少的阻力，各种质疑，为什么svn用的好好的突然转到git上面？为什么git操作这么复杂？等等等等；当然我作为逗比的我还是很愿意为他们一一诉说我对git的真爱的。当然并不是说svn不好，我可以说svn非常好，尤其某些场景更是强大至极，至少对于小团队或者单产品线研发模式来讲用svn是非常好的选择。我们之所以从svn平台切换到git上面主要是因为我们的研发路线是一个主产品线+N个项目定制线；并且主产品线会和其中的项目定制线进行彼此合并操作；</p>\n<p>再举个切实的例子，张三丰正在开发太极拳产品，并且已经发布了1.0版本，投入市场后非常受欢迎，当然也收集了一些用户的反馈，经过研发部讨论可以把一些建议并入主产品开发，另外基于主产品线再开出一个branch做另一个小众市场的试错项目，这项目由张无忌开发；那么问题来了，以后类似这样的项目会越来越多，程序员一人多用的现象已经中国这片土地上面成为常态，所以程序员们也必然会通过自身努力练就三头六臂的本领；所以张无忌现在会同时(犹如电脑CPU进程切换一样)负责3个项目；那么比如张无忌正在开发A项目，然后B项目突然反馈一个致命bug，必须立刻马上解决；后来这个bug发现C项目也有；那么张无忌是不是先把正在开发的A项目的代码提交(不能提交到远程代码仓库，因为开发的A项目代码还是半成品)，然后去修改B项目的致命bug；这时如果用的svn的话，具体咋搞？这里我就不具体说了，反正我觉得张无忌会哭！那么用git就非常爽啦，针对项目A分支进行add、commit就行了；然后checkout B，切换到B项目分支上改bug就行了，改完后合并到C项目上就行啦！你说爽不爽，这就是中央仓库和“分布式”仓库的巨大差别！看到其它同事茫然的点点头，我心中窃喜！</p>\n<p>扯的有点远了，回到正题上来！git不就是个版本管理工具嘛，有什么了不起的，先自己随便搞搞；用一段话描述项目的需求如下：在本地新建一个git代码仓库，然后添加一个分支develop，在分支develop中添加一个文件，然后再添加一个分支master，将develop分支中的文件合并到master分支中，然后同时修改develop分支中的文件和master分支中的文件并合并，遇到冲突后解决冲突，就这么多。</p>\n<p><strong>一、新建本地仓库（git init）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository in D:/workspace/gitDemo/.git/</div></pre></td></tr></table></figure></p>\n<p>提示初始化一个空的git仓库在XXXX目录中</p>\n<p><strong>二、新建develop分支（git branch develop）</strong><br><em>- 先检查刚才新建的本地空仓库中是否有分支（git branch）;明显没有嘛，这还用想？不试试怎么知道，好吧就试试吧！</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>输入命令后什么都没有输出，表名该仓库还没有任何分支；当然git branch命令会列出本地仓库的所有分支，并会标示出当前所在的分支。</p>\n<p><em>- 新建develop分支操作（git branch develop）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div><div class=\"line\">fatal: Not a valid object name: <span class=\"string\">'master'</span>.</div></pre></td></tr></table></figure></p>\n<p>我去，直接给我亮出了红牌的致命警告，真是道路曲折啊，没法儿玩儿了；出现上面的提示是因为根据git约定要求，在空仓库中新建分支之前，需要commit一一下，好吧！那照做呗….</p>\n<p><em>- 提交一下（git commit）</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"按照git要求，执行一次空的提交操作\"</span></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">nothing to commit</div></pre></td></tr></table></figure></p>\n<p>哎呀我去，我只是提交了一下啊，它怎么做了这么多事情(三行英文的意思就是 当前分支在master上面、初始化提交、提交的内容为空)；后两句我可以理解，那么当前分支为master这句话我有点理解不了。</p>\n<p>出现上面的提示(On branch master)是因为git仓库默认初始分支是master；而你直接在空的仓库中提交时，会坚持当前仓库是否有master分支，如果没有，则新建master分支，好吧，我只能说它太“人性化了”。那么其实到这里我们已经通过commit操作创建了git默认的master分支了。</p>\n<p><em>- 看看刚才git自动为我新建的master分支真的创建完了吗</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>哎呀，我去，怎么还显示空啊，难道创建失败了？好吧，在告诉你一个秘密：其实master分支已经自动创建完成了，只是不显示而已，你需要添加（add）一个物理文件进去，然后提交(commit)就可以看到master分支了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo <span class=\"string\">\"hello maps\"</span> &gt;index.txt</div><div class=\"line\"></div><div class=\"line\">$ git commit -m <span class=\"string\">\"commit index.txt file\"</span></div><div class=\"line\">[master (root-commit) be4ae99] commit index.txt file</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+)</div><div class=\"line\">\tcreate mode <span class=\"number\">100644</span> index.txt</div><div class=\"line\"></div><div class=\"line\">$ git branch</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>通过上面三步(添加一个物理文件、add到git的index库中、commit到git的本地仓库中)之后，我们可以看到master分支已经显示出来了！针对不易啊！<br><em>注：其实上上步骤(上一步的上一步)中我们描述的执行一次空的提交(commit)是多余的；完全用上面三步走战略就行啦！</em></p>\n<p>通过第二大步的操作后，我们本来新建develop分支的，结构却不由自主的“被创建一个master分支”。现状的状况就是我们在空的仓库中新建了一个master分支，然后在master分支中新建了一个index.txt文件。下面只能操作第三步，再次新建我们的develop分支喽。</p>\n<p><strong>三、再次新建develop分支（git branch develop）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch develop</div></pre></td></tr></table></figure></p>\n<p>执行完新建develop命令后，我们查看develop命令是否新建完成了（怎么现在对git branch这个命令越来越怀疑了，不会它又自动为我新建一个其它的分支吧，哈哈。眼见为实，操作看看吧）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>看到了吧，我们新建的develop分支已经出来了，但是奇怪的是我们上一步新建的master分支前面为什么一个”<em>“呢，其实这个”</em>“代表当前所在的分支；上面的意思就目前仓库中有两个分支(develop、master)；而你当前所在的分支是master中。<em>那么到目前为止，现在的状况就是在本地代码仓库中，有一个master分支和一个develop分支，而master分支中有一个index.txt文件，而develop中没有任何文件。</em></p>\n<p><strong>四、把master分支中的文件合并到develop中</strong></p>\n<ul>\n<li>如标题一样，我们的目的是把master分支中的文件合并到develop中去，但是我们还不能直接用合并命令，还需要按照步骤执行如下操作：</li>\n</ul>\n<p>1、切换到develop分支中(为啥这么做呢，git的合并规则是这样，比如我要把master分支合并到develop分支中，那么我就需要先切换到develop分支中，然后执行合并命令)</p>\n<p>   先切换到develop分支中<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout develop</div><div class=\"line\">Switched to branch <span class=\"string\">'develop'</span></div></pre></td></tr></table></figure></p>\n<p>   切换完成后，看看我们当前所处的分支是否是develop分支（看到没，develop前面一个“*”，代表当前所在分支是develop）<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> * develop</div><div class=\"line\"> \tmaster</div></pre></td></tr></table></figure></p>\n<p>2、执行合并分支的命令(<em>所以git合并命令git merge master的真正意思就是把master分支合并到我所在的当前分支develop中</em>)</p>\n<p>   然后执行合并master分支到develop分支中的操作(执行完成后，我们就可以到develop分支下面看到合并过来的index.txt文件了)<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge master</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure></p>\n<p><strong>五、修改合并到develop分支中的文件内容为hello develop，并提交</strong></p>\n<p>我们因为执行了上一步的合并master分支到develop分支的操作，所以我们当前所在分支是develop；那么我们修改该分支下面的index.txt文件内容为：hello develop<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello develop</div></pre></td></tr></table></figure></p>\n<p>然后执行添加(add)和提交(commit)操作.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add index.txt</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"修改index文件为hello develop\"</span>\t</div><div class=\"line\">[develop bf5d39d] 修改index文件为hello develop</div><div class=\"line\">\t<span class=\"number\">1</span> file changed, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</div></pre></td></tr></table></figure>\n<p><strong>六、切换到master分支,并修改文件内容为hello master</strong></p>\n<p>   切换到master分支<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">Switched to branch <span class=\"string\">'master'</span></div></pre></td></tr></table></figure></p>\n<p>   修改文件内容(因为上一步修改的是develop分支中的index文件，那么我们切换到master分支后，其中的index.txt文件是不会发生改变的，所以内容依然是hello maps)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">原内容：hello maps</div><div class=\"line\">新内容：hello master</div></pre></td></tr></table></figure></p>\n<p><strong>七、小述一下</strong></p>\n<p>到目前为止，我们修改了develop分支中的内容为：hello develop；而修改master分支中的内容为：hello master；并且当前所在分支是master分支，那么接下来我们需要合并develop分支中的文件到当前所在分支master中来。因为两个分支中的文件都发生了更改，所以合并时肯定会报冲突，至于冲突下面解决。</p>\n<p><strong>八、合并develop分支的内容到master分支中</strong></p>\n<ul>\n<li>先检查一下当前所在分支是否是master中（看到了吧 ，master分支前面一个“*”号，代表当前所在分支是master上面）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\"> \tdevelop</div><div class=\"line\"> * master</div></pre></td></tr></table></figure>\n<ul>\n<li>合并develop分支中的内容到master分支上面（我们执行合并命令后git merge develop之后提示了4行信息）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge develop</div><div class=\"line\">Auto-merging index.<span class=\"function\">txt</div><div class=\"line\"><span class=\"title\">CONFLICT</span> <span class=\"params\">(content)</span>: Merge conflict in index.txt</div><div class=\"line\">Automatic merge failed</span>; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的提示证明此次合并失败，以为两个文件中的内容合并过程中冲突了。</p>\n<ul>\n<li><p>使用git diff命令查看两个文件冲突的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --cc index.txt</div><div class=\"line\">index <span class=\"number\">2e6</span>baf7,<span class=\"number\">246</span>b739..<span class=\"number\">0000000</span></div><div class=\"line\">--- a/index.txt</div><div class=\"line\">+++ b/index.txt</div><div class=\"line\">@@@ -<span class=\"number\">1</span>,<span class=\"number\">1</span> -<span class=\"number\">1</span>,<span class=\"number\">1</span> +<span class=\"number\">1</span>,<span class=\"number\">5</span> @@@</div><div class=\"line\">- hello master</div><div class=\"line\"> -hello develop</div><div class=\"line\">++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">++hello master</div><div class=\"line\">++=======</div><div class=\"line\">++hello develop</div><div class=\"line\">++&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们也可以到当前分支master中直接打开index.txt文件查看，或者用cat命令查看也可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>九、冲突解决–手工</strong></p>\n<p>我们执行合并操作后，因为两个分支分别对同一个文件进行了修改，所以合并的时候就报冲突了(其实合并执行后，git把文件中凡是冲突的地方都写到当前分支的文件中了，只不过用特殊标记标注了而已)下面是合并冲突后的index.txt文件内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat index.txt</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">hello master</div><div class=\"line\">=======</div><div class=\"line\">hello develop</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</div></pre></td></tr></table></figure>\n<p>针对上面的文件，我们先看&lt;&lt;&lt;&lt;&lt;&lt;&lt;（7个&lt;） 到 =======（7个=）之间的内容为：hello master；这就是当前所在分支master<br>分支下面index.txt的文件内容(一般是我修改的)；再接着看从=======（7个=） 到 &gt;&gt;&gt;&gt;&gt;&gt;&gt;（7个&gt;）之间的内容为：hello develop；这就是develop分支下面index.txt的文件内容(一般是别人修改的)。</p>\n<p>所以我们现在要做的就是解决冲突，具体怎么解决冲突，有以下处理办法：</p>\n<p> 1、把develop分支中的内容覆盖(擦除)掉master分支中的内容(就好比develop战胜)</p>\n<pre><code>文件最终内容为：hello develop\n</code></pre><p> 2、把master分支中的内容覆盖(擦除)掉develop分支中的内容(就好比master战胜)</p>\n<p>   文件最终内容为：hello master</p>\n<p> 3、把master分支中的内容与develop分支中的内容都保留(就好比develop分支和master分支和解)</p>\n<p>   文件最终内容为：hello master hello develop</p>\n<p>不管最终我们以何种方式解决冲突(以谁的内容为主),最终我们都需要删除index.txt文件中的其他无用的git冲突标示符(“+”、”&lt;”、”=”、”&gt;”)；然后我们执行添加(add)和提交(commit)操作,具体不在详述了，前面有说到！</p>\n<p><strong>十、冲突解决–工具</strong></p>\n<p>第九步中，我们已经通过手工方式解决了冲突，但是如果一个文件中有N多地方的内容都冲突，那么我们通过手工解决非常费劲，并且容易出错，所以借助工具(mergetool)解决这些体力活是明智之举。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div><div class=\"line\"></div><div class=\"line\">This message is displayed because <span class=\"string\">'merge.tool'</span> is not configured.</div><div class=\"line\">See <span class=\"string\">'git mergetool --tool-help'</span> or <span class=\"string\">'git help config'</span> <span class=\"keyword\">for</span> more details.</div><div class=\"line\"><span class=\"string\">'git mergetool'</span> will now attempt to use one of the following tools:</div><div class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff</div><div class=\"line\">Merging:</div><div class=\"line\">index.txt</div><div class=\"line\"></div><div class=\"line\">Normal merge conflict <span class=\"keyword\">for</span> <span class=\"string\">'index.txt'</span>:</div><div class=\"line\">  &#123;local&#125;: modified file</div><div class=\"line\">  &#123;remote&#125;: <span class=\"function\">modified file</div><div class=\"line\">Hit return to start merge resolution <span class=\"title\">tool</span> <span class=\"params\">(tortoisemerge)</span>:</span></div></pre></td></tr></table></figure>\n<p>输入“git mergetool”命令后，直接再按一次回车键就会弹出合并工具的界面：<br><img src=\"http://soujava.com/images/gitmerge1.png\" alt=\"Alt text\" title=\"git 合并工具\"></p>\n<p>你可以右键点击冲突的行内容，然后点击弹出的菜单项进行合并操作，然后可以看工具的下面区域实时显示合并后的内容效果。</p>\n<p>通过工具合并后，我们仍然需要直接添加(add)和提交(commit)操作。</p>\n"},{"title":"java8使用stream对简单数据集排序","date":"2017-04-21T09:40:43.000Z","_content":"Stream是java8新增一个工具类，在java.util.stream.*;中，不得不说的是stream功能异常强大，一旦你接触之后就不想再用哪些旧的jdk中api方法了；下面先以日常开发中的集合数据排序为例慢慢了解stream中的sorted方法。\n\n<!--more-->\n\n**一、对List数据集合排序**\n\n>1、对List集合进行升序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的List数据集合\n  \t\tList<Integer> list1 = Lists.newArrayList(1,3,2,5,4,6,8,2); \n\t\t//直接调用sorted方法进行排序，val1-val2\n  \t\tlist1 = list1.stream().sorted((val1,val2) ->val1-val2).collect(Collectors.toList());\n  \t\tSystem.out.println(list1);\n\t}\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n>2、对List集合进行降序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的List数据集合\n  \t\tList<Integer> list1 = Lists.newArrayList(1,3,2,5,4,6,8,2); \n\t\t//直接调用sorted方法进行排序，val2-val1\n  \t\tlist1 = list1.stream().sorted((val1,val2) ->val2-val1).collect(Collectors.toList());\n  \t\tSystem.out.println(list1);\n\t}\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n>3、对List集合进行升序排列--自定义比较器\n\n```java\n\t\n\t//先定义一个比较器，默认按照升序\n\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t//在sorted方法中使用自定义的比较器进行排序\n\tlist1 = list1.stream().sorted(compara).collect(Collectors.toList());\n\tSystem.out.println(list1);\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n\n>4、对List集合进行降序排列--自定义比较器\n\n```java\n\t\n\t//先定义一个比较器，默认按照升序\n\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t//在sorted方法中使用自定义的比较器进行排序，并且调用reversed方法反转了比较结果\n\tlist1 = list1.stream().sorted(compara.reversed()).collect(Collectors.toList());\n\tSystem.out.println(list1);\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n>5、对Array数组进行升序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//直接调用sorted方法进行排序,val1-val2\n\t\tarray1 = Stream.of(array1).sorted((val1,val2) -> val1-val2).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n>6、对Array数组进行降序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//直接调用sorted方法进行排序，val2-val1\n\t\tarray1 = Stream.of(array1).sorted((val1,val2) -> val2-val1).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n>7、对Array数组进行升序排列--自定义比较器\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//自定义比较器，默认按照升序排序\n\t\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t\t//直接调用sorted方法进行排序\n\t\tarray1 = Stream.of(array1).sorted(compara).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n>8、对Array数组进行降序序排列--自定义比较器\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//自定义比较器，默认按照升序排序\n\t\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t\t//直接调用sorted方法进行排序，对比较器进行了反转处理，即按照降序排序\n\t\tarray1 = Stream.of(array1).sorted(compara.reversed()).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n\n是不是感觉用着非常愉快，其实对复杂的数据结构更能体现！","source":"_posts/java8使用stream对简单数据集排序.md","raw":"---\ntitle: java8使用stream对简单数据集排序\ndate: 2017-04-21 17:40:43\ncategories: java\ntags: java\n---\nStream是java8新增一个工具类，在java.util.stream.*;中，不得不说的是stream功能异常强大，一旦你接触之后就不想再用哪些旧的jdk中api方法了；下面先以日常开发中的集合数据排序为例慢慢了解stream中的sorted方法。\n\n<!--more-->\n\n**一、对List数据集合排序**\n\n>1、对List集合进行升序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的List数据集合\n  \t\tList<Integer> list1 = Lists.newArrayList(1,3,2,5,4,6,8,2); \n\t\t//直接调用sorted方法进行排序，val1-val2\n  \t\tlist1 = list1.stream().sorted((val1,val2) ->val1-val2).collect(Collectors.toList());\n  \t\tSystem.out.println(list1);\n\t}\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n>2、对List集合进行降序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的List数据集合\n  \t\tList<Integer> list1 = Lists.newArrayList(1,3,2,5,4,6,8,2); \n\t\t//直接调用sorted方法进行排序，val2-val1\n  \t\tlist1 = list1.stream().sorted((val1,val2) ->val2-val1).collect(Collectors.toList());\n  \t\tSystem.out.println(list1);\n\t}\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n>3、对List集合进行升序排列--自定义比较器\n\n```java\n\t\n\t//先定义一个比较器，默认按照升序\n\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t//在sorted方法中使用自定义的比较器进行排序\n\tlist1 = list1.stream().sorted(compara).collect(Collectors.toList());\n\tSystem.out.println(list1);\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n\n>4、对List集合进行降序排列--自定义比较器\n\n```java\n\t\n\t//先定义一个比较器，默认按照升序\n\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t//在sorted方法中使用自定义的比较器进行排序，并且调用reversed方法反转了比较结果\n\tlist1 = list1.stream().sorted(compara.reversed()).collect(Collectors.toList());\n\tSystem.out.println(list1);\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n>5、对Array数组进行升序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//直接调用sorted方法进行排序,val1-val2\n\t\tarray1 = Stream.of(array1).sorted((val1,val2) -> val1-val2).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n>6、对Array数组进行降序排列\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//直接调用sorted方法进行排序，val2-val1\n\t\tarray1 = Stream.of(array1).sorted((val1,val2) -> val2-val1).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n>7、对Array数组进行升序排列--自定义比较器\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//自定义比较器，默认按照升序排序\n\t\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t\t//直接调用sorted方法进行排序\n\t\tarray1 = Stream.of(array1).sorted(compara).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理\n\n>8、对Array数组进行降序序排列--自定义比较器\n\n```java\n\t\n\tpublic void streamSortTest1(){\n  \t\t//定义一个简单的数组集合\n  \t\tInteger[] array1 = {1,3,2,5,4,6,8,2};\n\t\t//自定义比较器，默认按照升序排序\n\t\tComparator<Integer> compara = Comparator.comparing(u->u);\n\t\t//直接调用sorted方法进行排序，对比较器进行了反转处理，即按照降序排序\n\t\tarray1 = Stream.of(array1).sorted(compara.reversed()).toArray(Integer[]::new);\n\t\tSystem.out.println(Arrays.asList(array1));\n\t}\n\n```\n\n以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理\n\n\n是不是感觉用着非常愉快，其实对复杂的数据结构更能体现！","slug":"java8使用stream对简单数据集排序","published":1,"updated":"2018-07-08T09:37:48.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pis002f30tzux37nnvj","content":"<p>Stream是java8新增一个工具类，在java.util.stream.*;中，不得不说的是stream功能异常强大，一旦你接触之后就不想再用哪些旧的jdk中api方法了；下面先以日常开发中的集合数据排序为例慢慢了解stream中的sorted方法。</p>\n<a id=\"more\"></a>\n<p><strong>一、对List数据集合排序</strong></p>\n<blockquote>\n<p>1、对List集合进行升序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的List数据集合</span></div><div class=\"line\"> \t\tList&lt;Integer&gt; list1 = Lists.newArrayList(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>); </div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，val1-val2</span></div><div class=\"line\"> \t\tlist1 = list1.stream().sorted((val1,val2) -&gt;val1-val2).collect(Collectors.toList());</div><div class=\"line\"> \t\tSystem.out.println(list1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>2、对List集合进行降序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的List数据集合</span></div><div class=\"line\"> \t\tList&lt;Integer&gt; list1 = Lists.newArrayList(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>); </div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，val2-val1</span></div><div class=\"line\"> \t\tlist1 = list1.stream().sorted((val1,val2) -&gt;val2-val1).collect(Collectors.toList());</div><div class=\"line\"> \t\tSystem.out.println(list1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<blockquote>\n<p>3、对List集合进行升序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//先定义一个比较器，默认按照升序</span></div><div class=\"line\">Comparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\"><span class=\"comment\">//在sorted方法中使用自定义的比较器进行排序</span></div><div class=\"line\">list1 = list1.stream().sorted(compara).collect(Collectors.toList());</div><div class=\"line\">System.out.println(list1);</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>4、对List集合进行降序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//先定义一个比较器，默认按照升序</span></div><div class=\"line\">Comparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\"><span class=\"comment\">//在sorted方法中使用自定义的比较器进行排序，并且调用reversed方法反转了比较结果</span></div><div class=\"line\">list1 = list1.stream().sorted(compara.reversed()).collect(Collectors.toList());</div><div class=\"line\">System.out.println(list1);</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<blockquote>\n<p>5、对Array数组进行升序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序,val1-val2</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted((val1,val2) -&gt; val1-val2).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>6、对Array数组进行降序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，val2-val1</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted((val1,val2) -&gt; val2-val1).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<blockquote>\n<p>7、对Array数组进行升序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//自定义比较器，默认按照升序排序</span></div><div class=\"line\">\tComparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted(compara).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>8、对Array数组进行降序序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//自定义比较器，默认按照升序排序</span></div><div class=\"line\">\tComparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，对比较器进行了反转处理，即按照降序排序</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted(compara.reversed()).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<p>是不是感觉用着非常愉快，其实对复杂的数据结构更能体现！</p>\n","excerpt":"<p>Stream是java8新增一个工具类，在java.util.stream.*;中，不得不说的是stream功能异常强大，一旦你接触之后就不想再用哪些旧的jdk中api方法了；下面先以日常开发中的集合数据排序为例慢慢了解stream中的sorted方法。</p>","more":"<p><strong>一、对List数据集合排序</strong></p>\n<blockquote>\n<p>1、对List集合进行升序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的List数据集合</span></div><div class=\"line\"> \t\tList&lt;Integer&gt; list1 = Lists.newArrayList(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>); </div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，val1-val2</span></div><div class=\"line\"> \t\tlist1 = list1.stream().sorted((val1,val2) -&gt;val1-val2).collect(Collectors.toList());</div><div class=\"line\"> \t\tSystem.out.println(list1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>2、对List集合进行降序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的List数据集合</span></div><div class=\"line\"> \t\tList&lt;Integer&gt; list1 = Lists.newArrayList(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>); </div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，val2-val1</span></div><div class=\"line\"> \t\tlist1 = list1.stream().sorted((val1,val2) -&gt;val2-val1).collect(Collectors.toList());</div><div class=\"line\"> \t\tSystem.out.println(list1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<blockquote>\n<p>3、对List集合进行升序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//先定义一个比较器，默认按照升序</span></div><div class=\"line\">Comparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\"><span class=\"comment\">//在sorted方法中使用自定义的比较器进行排序</span></div><div class=\"line\">list1 = list1.stream().sorted(compara).collect(Collectors.toList());</div><div class=\"line\">System.out.println(list1);</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>4、对List集合进行降序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//先定义一个比较器，默认按照升序</span></div><div class=\"line\">Comparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\"><span class=\"comment\">//在sorted方法中使用自定义的比较器进行排序，并且调用reversed方法反转了比较结果</span></div><div class=\"line\">list1 = list1.stream().sorted(compara.reversed()).collect(Collectors.toList());</div><div class=\"line\">System.out.println(list1);</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<blockquote>\n<p>5、对Array数组进行升序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序,val1-val2</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted((val1,val2) -&gt; val1-val2).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>6、对Array数组进行降序排列</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，val2-val1</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted((val1,val2) -&gt; val2-val1).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<blockquote>\n<p>7、对Array数组进行升序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//自定义比较器，默认按照升序排序</span></div><div class=\"line\">\tComparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted(compara).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[1, 2, 2, 3, 4, 5, 6, 8]；可见排序结果按照 升序 规则进行排序处理</p>\n<blockquote>\n<p>8、对Array数组进行降序序排列–自定义比较器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">streamSortTest1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//定义一个简单的数组集合</span></div><div class=\"line\"> \t\tInteger[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">\t<span class=\"comment\">//自定义比较器，默认按照升序排序</span></div><div class=\"line\">\tComparator&lt;Integer&gt; compara = Comparator.comparing(u-&gt;u);</div><div class=\"line\">\t<span class=\"comment\">//直接调用sorted方法进行排序，对比较器进行了反转处理，即按照降序排序</span></div><div class=\"line\">\tarray1 = Stream.of(array1).sorted(compara.reversed()).toArray(Integer[]::<span class=\"keyword\">new</span>);</div><div class=\"line\">\tSystem.out.println(Arrays.asList(array1));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出结果为：[8, 6, 5, 4, 3, 2, 2, 1]；可见排序结果按照 降序 规则进行排序处理</p>\n<p>是不是感觉用着非常愉快，其实对复杂的数据结构更能体现！</p>"},{"title":"java中集合使用中遇到的-坑","date":"2017-04-25T06:27:21.000Z","_content":"平时开发过程中用的最多的莫过于基本类型、包装类、集合等等了，但是最近在使用集合时，偶尔使用不当会出现一些想不到的问题(bug)；为什么使用不当呢，因为我们对集合的操作都是使用JDK原生的API方法进行操作的，那么之所以使用不当，是因为对jdk源码中的api方法的不了解所致，下面就具体罗列一下具体的坑吧。\n\n<!--more-->\n\n**1、数组之间的拷贝-Arrays.copyOf()**\n\n>我们直接用java.util.Arrays工具类的copyOf方法进行数组拷贝\n\n```java\n\t\nclass Student implements Cloneable{\n\t\n\tprivate String studentId;\n\tprivate String studentName;\n\t\n\t\n\tpublic Student(String studentId, String studentName) {\n\t\tsuper();\n\t\tthis.studentId = studentId;\n\t\tthis.studentName = studentName;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [studentId=\" + studentId + \", studentName=\" + studentName + \"]\";\n\t}\n\tpublic String getStudentId() {\n\t\treturn studentId;\n\t}\n\tpublic void setStudentId(String studentId) {\n\t\tthis.studentId = studentId;\n\t}\n\tpublic String getStudentName() {\n\t\treturn studentName;\n\t}\n\tpublic void setStudentName(String studentName) {\n\t\tthis.studentName = studentName;\n\t}\n\t\n\t@Override\n\tprotected Student clone() throws CloneNotSupportedException {\n\t\tStudent stu = null;\n\t\ttry{\n\t\t\tstu = (Student) super.clone();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn stu;\n\t}\n\t\n}\n\n```\n\n```java\n\n\tint[] intArray = {1,2,3,4,5};\n\tint[] intTempArray = Arrays.copyOf(intArray, intArray.length);\n\tintTempArray[4] = 6;\n\tSystem.out.println(\"intArray:\"+Arrays.toString(intArray));\n\tSystem.out.println(\"intTempArray:\"+Arrays.toString(intTempArray));\n\t\n\tdouble[] doubleArray = {1.0,2.0,3.0,4.0,5.0};\n\tdouble[] doubleTempArray = Arrays.copyOf(doubleArray, doubleArray.length);\n\tdoubleTempArray[4] = 6.0;\n\tSystem.out.println(\"doubleArray:\"+Arrays.toString(doubleArray));\n\tSystem.out.println(\"doubleTempArray:\"+Arrays.toString(doubleTempArray));\n\t\n\tString[] strArray = {\"a\",\"b\",\"c\",\"d\",\"e\"};\n\tString[] strTempArray = Arrays.copyOf(strArray, strArray.length);\n\tstrTempArray[4] = \"F\";\n\tSystem.out.println(\"strArray:\"+Arrays.toString(strArray));\n\tSystem.out.println(\"strTempArray:\"+Arrays.toString(strTempArray));\n\t\n\tStudent[] studentArray = {new Student(\"1\", \"A\"),new Student(\"2\", \"B\"),new Student(\"3\", \"C\")};\n\tStudent[] studentTempArray = Arrays.copyOf(studentArray, studentArray.length);\n\tstudentTempArray[2].setStudentName(\"D\");\n\tSystem.out.println(\"studentArray:\"+Arrays.toString(studentArray));\n\tSystem.out.println(\"studentTempArray:\"+Arrays.toString(studentTempArray));\n\n```\n\n以上代码只是最基本的数组实例，我们直接看最后一段代码，声明了Student类型的数组，然后通过Arrays.copyOf方法进行拷贝处理，得到一个新的Student类型的数组，然后我们对新得到的Student类型的数组中的对象进行重新赋值操作，然后我们查看以下输出结果：\n\n```java\n\n\tintArray:[1, 2, 3, 4, 5]\n\tintTempArray:[1, 2, 3, 4, 6]\n\tdoubleArray:[1.0, 2.0, 3.0, 4.0, 5.0]\n\tdoubleTempArray:[1.0, 2.0, 3.0, 4.0, 6.0]\n\tstrArray:[a, b, c, d, e]\n\tstrTempArray:[a, b, c, d, F]\n\tstr1Array:[a, b, c, d, e]\n\tstr1TempArray:[a, b, c, d, F]\n\tstudentArray:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B], Student [studentId=3, studentName=D]]\n\tstudentTempArray:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B], Student [studentId=3, studentName=D]]\n\n```\n\n可以看到上面的数组拷贝示例中，不管对老数组中的值进行更改还是对新数组中的值进行更改，都不会相互影响；而最后的Student类型的数组示例中，不管对老数组(studentArray)中的值进行更改还是对新数组(studentTempArray)中的值进行更改，都会相互影响；比如我们对拷贝生成的新数组studentTempArray中的索引为2的对象的学生姓名重新赋值，然后老数组中对应的索引的对象的学生姓名也被修改了；其实这就是所谓的数组浅拷贝，在使用Arrays.copyOf方法时要特别注意。\n\n**2、基本类型的数组转换为集合会出现数据类型未知错误-Arrays.asList()**\n\n平时开发中，也经常会遇到把一个Array数组转换成List集合，Arrays.asList(data)；但是这个方法如果使用不当，也会出现问题\n\n```java\n\n\tint[] intArray = {1,2,3};\n\tList list= Arrays.asList(intArray);\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\t\n```\n上面的代码很简单，就是把intArray数组转换成List，其输出结果如下：\n\n>size:1 list:[[I@2a139a55]\n\n看到输出结果是不是感觉有点茫然，list的长度应该为3才对啊，并且应该直接输出其中的元素才对啊。\n\n首先我们看看asList的源码：\n\n```java\n\n\tpublic static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n\t\n```\n\n>asList方法输入的是一个泛型变长参数，我们知道基本类型是不能泛型化的，也就是说8个基本类型不能作为泛型参数，要想作为泛型参数就必须使用其所对应的包装类型，那前面的例子传递了一个int类型的数组,在asList方法中，直接把这个数组当作了一个参数进行处理；然后打印的集合内容是一个对象串，并不是其中的元素，这是为什么呢，我们点击上面的asList方法中的new ArrayList这个类源码中看一下：\n\n```java\n\n\t/**\n     * @serial include\n     */\n    private static class ArrayList<E> extends AbstractList<E>\n        implements RandomAccess, java.io.Serializable\n    {\n        private static final long serialVersionUID = -2764017481108945198L;\n        private final E[] a;\n\n        ArrayList(E[] array) {\n            a = Objects.requireNonNull(array);\n        }\n\n        @Override\n        public int size() {\n            return a.length;\n        }\n\n\t\t.......省略其他代码\t\t\n\n```\n\n查看ArrayList源码可以看到，其是Arrays类的一个静态内部类，并不是我们平时声明List集合时的ArrayList类，只不过他们都继承了AbstractList这个类，所以List list= Arrays.asList(intArray);这句代码把Arrays的静态内部类赋值给Lits实例变量才不至于报异常。并且我们可以看到ArrayList内部类中有一个泛型的数组常量:\n>private final E[] a；\n\n所以我们也可以通过下面代码获取转换后的list集合中对应索引的数据。\n\n>System.out.println(\"size:\"+list.size()+\" list:\"+((int[])list.get(0))[1]);\n>\n>size:3 list:1\n\n好了，重新回到刚才那个问题，已经看到asList(T... a) 方法的入参是一个泛型参数，所以我们需要传递对应的基本类型的包装类或者其他对象参数，示例如下：\n\n```java\n\n\tInteger[] integerArray = {1,2,3};\n\tList list= Arrays.asList(integerArray);\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\n```\n我们把上面的数组基本类型转换为其对应的包装类之后，就正常了！输出如下：\n\n>size:3 list:[1, 2, 3]\n\n总结：使用Arrays.asList方法转换数组为list时，入参的类型一定不能是基本数据类型，需要传递包装类或者其它非基本数据类型\n\n```java\n\n\tString[] StringArray = {\"a\",\"b\",\"c\"};\n\tList list= Arrays.asList(StringArray);\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\t\t\n\tStudent[] studentArray = {new Student(\"1\",\"A\"),new Student(\"2\",\"B\")};\n\tList listStu = Arrays.asList(studentArray);\n\tSystem.out.println(\"size:\"+listStu.size()+\" list:\"+listStu.toString());\n\n```\n\n上面传递的非基本数组类型输出如下：\n\n>size:3 list:[a, b, c]\n>\n>size:2 list:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B]]\n\n\n**3、数组转换为集合后不能调用add方法新增元素-Arrays.asList()**\n\n接着第2个坑的另一个使用方法进行说明，一般来讲我们把一个数组转换为集合之后，肯定要对集合进行增、删、改、查操作，那么我首先演示一下集合的增加操作：\n\n```java\n\t\n\tString[] StringArray = {\"a\",\"b\",\"c\"};\n\tList list= Arrays.asList(StringArray);\n\tlist.add(\"d\");\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\n```\n\n上面代码输出结果其实抛异常了，是下面这样：\n\n>Exception in thread \"main\" java.lang.UnsupportedOperationException\n\n是不是很纳闷，既然可以正常把数组转换为集合，那么为什么不能向集合中添加数据呢？其实上面已经说过了，调用Arrays.asList方法后，返回的其实是Arrays的内部类，并不是我们平时声明集合时(new ArrayList() )的真正意义上的ArrayList类；之所以可以把Arrays的内部类ArrayList赋值给List类变量，是因为他们有同一个父类-AbstractList，然而List list变量指向的并不是真正意义上的集合。\n\n所以我们继续再看看Arrays的内部类ArrayList源码会发现，其中只有以下几个方法：\n\n>public int size()  #元素数量\n\n>public Object[] toArray() #转化为数组，实现了数组的浅拷贝\n\n>public <T> T[] toArray(T[] a) \n\n>public E get(int index) #获得指定索引的元素\n\n>public E set(int index, E element) #设置制定索引元素\n\n>public int indexOf(Object o) #查找元素的索引值\n\n>public boolean contains(Object o) #查找元素是否存在\n\n>public Spliterator<E> spliterator() #定义分割器\n\n>public void forEach(Consumer<? super E> action) #遍历\n\n>public void replaceAll(UnaryOperator<E> operator)\n\n>public void sort(Comparator<? super E> c)\n\n是不是没有发现add方法，add方法只不过是抽象类-AbstractList的方法,我们再进入该抽象类的方法中可以看到直接抛出了一个异常，刚好就是刚才我们调用add方法时的异常，OK，一切真相大白了。\n\n```java\n\n\tpublic void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\n```\n\n总结，我们通过调用Arrays.asList方法把数组转换为集合后，返回的集合并不是真正意义上的ArrayList，而是Arrays的静态内部类，所以并不能调用add方法向集合中添加元素，但是可以调用内部类自己的方法从集合中获取集合元素，设置集合中的元素等操作\n\n\n**4、对生成的子列表修改元素后源集合也会被修改-subList()**\n\n平时开发中，将一个大的list集合截取成符合条件的集合也是很常见的事情，那么我们一般直接通过subList方法去截取，只要api有的方法我们就直接用嘛，避免重复造轮子。\n\n```java\n\n\tList list1 = Lists.newArrayList(\"a\",\"b\",\"c\");\n\tList list2 = list1.subList(0, list1.size());\n\tlist2.add(\"d\");\n\t\t\n\tSystem.out.println(\"list1长度:\"+list1.size()+\" list1元素:\"+list1);\n\tSystem.out.println(\"list2长度:\"+list2.size()+\" list2元素:\"+list2);\n\t\t\n\tList list3 = Lists.newArrayList(1,2,3);\n\tList list4 = list3.subList(0, list3.size());\n\tlist4.add(4);\n\tSystem.out.println(\"list3长度:\"+list3.size()+\" list3元素:\"+list3);\n\tSystem.out.println(\"list4长度:\"+list4.size()+\" list4元素:\"+list4);\n\n```\n\n上面的代码输出为如下：\n\n>list1长度:4 list1元素:[a, b, c, d]\n>\n>list2长度:4 list2元素:[a, b, c, d]\n>\n>list3长度:4 list3元素:[1, 2, 3, 4]\n>\n>list4长度:4 list4元素:[1, 2, 3, 4]\n\n可以看到一个现象，我们向通过subList方法生成的新集合中添加元素后，新集合和老集合都发生了变化，分析一下subList方法，可以发现SubList其实是ArrayList类的内部类，并且我们可以看到其定义的add方法如下：\n\n```java\n\n\tprivate class SubList extends AbstractList<E> implements RandomAccess {\n        private final AbstractList<E> parent;\n        private final int parentOffset;\n        private final int offset;\n        int size;\n\n        SubList(AbstractList<E> parent,\n                int offset, int fromIndex, int toIndex) {\n            this.parent = parent;\n            this.parentOffset = fromIndex;\n            this.offset = offset + fromIndex;\n            this.size = toIndex - fromIndex;\n            this.modCount = ArrayList.this.modCount;\n        }\n\n        public E set(int index, E e) {\n            rangeCheck(index);\n            checkForComodification();\n            E oldValue = ArrayList.this.elementData(offset + index);\n            ArrayList.this.elementData[offset + index] = e;\n            return oldValue;\n        }\n\n        public E get(int index) {\n            rangeCheck(index);\n            checkForComodification();\n            return ArrayList.this.elementData(offset + index);\n        }\n\n        public int size() {\n            checkForComodification();\n            return this.size;\n        }\n\n        public void add(int index, E e) {\n            rangeCheckForAdd(index);\n            checkForComodification();\n            parent.add(parentOffset + index, e);\n            this.modCount = parent.modCount;\n            this.size++;\n        }\n\n```\n\n可以看到是针对parent进行的add操作，其实parent就是调用者(源集合)，并且它返回的SubList类也是AbstractList的子类，其所有的get、set、add、remove等都是在原始列表上的操作，并没有重新定义集合，从而可以说明对元素的操作其实是在源集合上进行的，所以对新截取的集合中元素的操作也就直接同步反映到源集合中。\n\n总结：subList产生的列表只是一个源集合的视图概念，所有对生成的子集合中元素的修改操作都会直接作用于源集合\n\n\n**5、对生成子列表添加元素操作会抛并发修改异常-subList()**\n\n```java\n\n\tList list1 = Lists.newArrayList(\"a\",\"b\",\"c\");\n\tList list2 = list1.subList(0, list1.size());\n\tlist1.add(\"d\");\n\t\t\n\tSystem.out.println(\"list1长度:\"+list1.size()+\" list1元素:\"+list1);\n\tSystem.out.println(\"list2长度:\"+list2.size()+\" list2元素:\"+list2);\n\n```\n\n上面的示例中，我们通过subList方法获取子集合list2后，对源集合list1进行元素添加，然后输出如下（报异常）：\n\n>list1长度:4 list1元素:[a, b, c, d]\n>\n>Exception in thread \"main\" java.util.ConcurrentModificationException\n\n怎么报了一个并发修改异常呢，我们点击subList类可以看到其有一个add方法\n\n```java\n\n\t public void add(int index, E e) {\n        rangeCheckForAdd(index); \n        checkForComodification(); //检测判断当前修改计数器是否与子列表生成时一致\n        parent.add(parentOffset + index, e);\n        this.modCount = parent.modCount;\n        this.size++;\n    }\n\n```\n\n进入checkForComodification方法源码可以看：\n\n```java\n\t\n\tprivate void checkForComodification() {\n       if (ArrayList.this.modCount != this.modCount)\n         throw new ConcurrentModificationException();\n    }\n\n```\n上面的方法主要看if分支判断条件，其实subList中的add方法中添加了修改次数比较判断，这个modCount变量是ArrayList中的一个变量，即每次调用arrayList类的add方法时，该变量都会自增操作；当我们调用subList方法时，subList对应的内部类中的构造方法就自己初始化一个自己的modeCount值，并且是直接把源集合的modeCount变量赋值给自己的，所以调用subList构造方法后，再次针对源集合list调用add方法添加元素时，就必然会使modCount自增操作，那么自增后，再看上面的代码checkForComodification()方法中的if判断条件就为true了，那么就抛出了并发修改异常了。\n\n注：再使用subList生成子列表后，不要再修改源集合列表数据，最好保持原列表的只读状态(通过Collections.unmodifiableList)。","source":"_posts/java中集合使用中遇到的-坑.md","raw":"---\ntitle: java中集合使用中遇到的-坑\ndate: 2017-04-25 14:27:21\ncategories: java\ntags: java\n---\n平时开发过程中用的最多的莫过于基本类型、包装类、集合等等了，但是最近在使用集合时，偶尔使用不当会出现一些想不到的问题(bug)；为什么使用不当呢，因为我们对集合的操作都是使用JDK原生的API方法进行操作的，那么之所以使用不当，是因为对jdk源码中的api方法的不了解所致，下面就具体罗列一下具体的坑吧。\n\n<!--more-->\n\n**1、数组之间的拷贝-Arrays.copyOf()**\n\n>我们直接用java.util.Arrays工具类的copyOf方法进行数组拷贝\n\n```java\n\t\nclass Student implements Cloneable{\n\t\n\tprivate String studentId;\n\tprivate String studentName;\n\t\n\t\n\tpublic Student(String studentId, String studentName) {\n\t\tsuper();\n\t\tthis.studentId = studentId;\n\t\tthis.studentName = studentName;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [studentId=\" + studentId + \", studentName=\" + studentName + \"]\";\n\t}\n\tpublic String getStudentId() {\n\t\treturn studentId;\n\t}\n\tpublic void setStudentId(String studentId) {\n\t\tthis.studentId = studentId;\n\t}\n\tpublic String getStudentName() {\n\t\treturn studentName;\n\t}\n\tpublic void setStudentName(String studentName) {\n\t\tthis.studentName = studentName;\n\t}\n\t\n\t@Override\n\tprotected Student clone() throws CloneNotSupportedException {\n\t\tStudent stu = null;\n\t\ttry{\n\t\t\tstu = (Student) super.clone();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn stu;\n\t}\n\t\n}\n\n```\n\n```java\n\n\tint[] intArray = {1,2,3,4,5};\n\tint[] intTempArray = Arrays.copyOf(intArray, intArray.length);\n\tintTempArray[4] = 6;\n\tSystem.out.println(\"intArray:\"+Arrays.toString(intArray));\n\tSystem.out.println(\"intTempArray:\"+Arrays.toString(intTempArray));\n\t\n\tdouble[] doubleArray = {1.0,2.0,3.0,4.0,5.0};\n\tdouble[] doubleTempArray = Arrays.copyOf(doubleArray, doubleArray.length);\n\tdoubleTempArray[4] = 6.0;\n\tSystem.out.println(\"doubleArray:\"+Arrays.toString(doubleArray));\n\tSystem.out.println(\"doubleTempArray:\"+Arrays.toString(doubleTempArray));\n\t\n\tString[] strArray = {\"a\",\"b\",\"c\",\"d\",\"e\"};\n\tString[] strTempArray = Arrays.copyOf(strArray, strArray.length);\n\tstrTempArray[4] = \"F\";\n\tSystem.out.println(\"strArray:\"+Arrays.toString(strArray));\n\tSystem.out.println(\"strTempArray:\"+Arrays.toString(strTempArray));\n\t\n\tStudent[] studentArray = {new Student(\"1\", \"A\"),new Student(\"2\", \"B\"),new Student(\"3\", \"C\")};\n\tStudent[] studentTempArray = Arrays.copyOf(studentArray, studentArray.length);\n\tstudentTempArray[2].setStudentName(\"D\");\n\tSystem.out.println(\"studentArray:\"+Arrays.toString(studentArray));\n\tSystem.out.println(\"studentTempArray:\"+Arrays.toString(studentTempArray));\n\n```\n\n以上代码只是最基本的数组实例，我们直接看最后一段代码，声明了Student类型的数组，然后通过Arrays.copyOf方法进行拷贝处理，得到一个新的Student类型的数组，然后我们对新得到的Student类型的数组中的对象进行重新赋值操作，然后我们查看以下输出结果：\n\n```java\n\n\tintArray:[1, 2, 3, 4, 5]\n\tintTempArray:[1, 2, 3, 4, 6]\n\tdoubleArray:[1.0, 2.0, 3.0, 4.0, 5.0]\n\tdoubleTempArray:[1.0, 2.0, 3.0, 4.0, 6.0]\n\tstrArray:[a, b, c, d, e]\n\tstrTempArray:[a, b, c, d, F]\n\tstr1Array:[a, b, c, d, e]\n\tstr1TempArray:[a, b, c, d, F]\n\tstudentArray:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B], Student [studentId=3, studentName=D]]\n\tstudentTempArray:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B], Student [studentId=3, studentName=D]]\n\n```\n\n可以看到上面的数组拷贝示例中，不管对老数组中的值进行更改还是对新数组中的值进行更改，都不会相互影响；而最后的Student类型的数组示例中，不管对老数组(studentArray)中的值进行更改还是对新数组(studentTempArray)中的值进行更改，都会相互影响；比如我们对拷贝生成的新数组studentTempArray中的索引为2的对象的学生姓名重新赋值，然后老数组中对应的索引的对象的学生姓名也被修改了；其实这就是所谓的数组浅拷贝，在使用Arrays.copyOf方法时要特别注意。\n\n**2、基本类型的数组转换为集合会出现数据类型未知错误-Arrays.asList()**\n\n平时开发中，也经常会遇到把一个Array数组转换成List集合，Arrays.asList(data)；但是这个方法如果使用不当，也会出现问题\n\n```java\n\n\tint[] intArray = {1,2,3};\n\tList list= Arrays.asList(intArray);\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\t\n```\n上面的代码很简单，就是把intArray数组转换成List，其输出结果如下：\n\n>size:1 list:[[I@2a139a55]\n\n看到输出结果是不是感觉有点茫然，list的长度应该为3才对啊，并且应该直接输出其中的元素才对啊。\n\n首先我们看看asList的源码：\n\n```java\n\n\tpublic static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n\t\n```\n\n>asList方法输入的是一个泛型变长参数，我们知道基本类型是不能泛型化的，也就是说8个基本类型不能作为泛型参数，要想作为泛型参数就必须使用其所对应的包装类型，那前面的例子传递了一个int类型的数组,在asList方法中，直接把这个数组当作了一个参数进行处理；然后打印的集合内容是一个对象串，并不是其中的元素，这是为什么呢，我们点击上面的asList方法中的new ArrayList这个类源码中看一下：\n\n```java\n\n\t/**\n     * @serial include\n     */\n    private static class ArrayList<E> extends AbstractList<E>\n        implements RandomAccess, java.io.Serializable\n    {\n        private static final long serialVersionUID = -2764017481108945198L;\n        private final E[] a;\n\n        ArrayList(E[] array) {\n            a = Objects.requireNonNull(array);\n        }\n\n        @Override\n        public int size() {\n            return a.length;\n        }\n\n\t\t.......省略其他代码\t\t\n\n```\n\n查看ArrayList源码可以看到，其是Arrays类的一个静态内部类，并不是我们平时声明List集合时的ArrayList类，只不过他们都继承了AbstractList这个类，所以List list= Arrays.asList(intArray);这句代码把Arrays的静态内部类赋值给Lits实例变量才不至于报异常。并且我们可以看到ArrayList内部类中有一个泛型的数组常量:\n>private final E[] a；\n\n所以我们也可以通过下面代码获取转换后的list集合中对应索引的数据。\n\n>System.out.println(\"size:\"+list.size()+\" list:\"+((int[])list.get(0))[1]);\n>\n>size:3 list:1\n\n好了，重新回到刚才那个问题，已经看到asList(T... a) 方法的入参是一个泛型参数，所以我们需要传递对应的基本类型的包装类或者其他对象参数，示例如下：\n\n```java\n\n\tInteger[] integerArray = {1,2,3};\n\tList list= Arrays.asList(integerArray);\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\n```\n我们把上面的数组基本类型转换为其对应的包装类之后，就正常了！输出如下：\n\n>size:3 list:[1, 2, 3]\n\n总结：使用Arrays.asList方法转换数组为list时，入参的类型一定不能是基本数据类型，需要传递包装类或者其它非基本数据类型\n\n```java\n\n\tString[] StringArray = {\"a\",\"b\",\"c\"};\n\tList list= Arrays.asList(StringArray);\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\t\t\n\tStudent[] studentArray = {new Student(\"1\",\"A\"),new Student(\"2\",\"B\")};\n\tList listStu = Arrays.asList(studentArray);\n\tSystem.out.println(\"size:\"+listStu.size()+\" list:\"+listStu.toString());\n\n```\n\n上面传递的非基本数组类型输出如下：\n\n>size:3 list:[a, b, c]\n>\n>size:2 list:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B]]\n\n\n**3、数组转换为集合后不能调用add方法新增元素-Arrays.asList()**\n\n接着第2个坑的另一个使用方法进行说明，一般来讲我们把一个数组转换为集合之后，肯定要对集合进行增、删、改、查操作，那么我首先演示一下集合的增加操作：\n\n```java\n\t\n\tString[] StringArray = {\"a\",\"b\",\"c\"};\n\tList list= Arrays.asList(StringArray);\n\tlist.add(\"d\");\n\tSystem.out.println(\"size:\"+list.size()+\" list:\"+list.toString());\n\n```\n\n上面代码输出结果其实抛异常了，是下面这样：\n\n>Exception in thread \"main\" java.lang.UnsupportedOperationException\n\n是不是很纳闷，既然可以正常把数组转换为集合，那么为什么不能向集合中添加数据呢？其实上面已经说过了，调用Arrays.asList方法后，返回的其实是Arrays的内部类，并不是我们平时声明集合时(new ArrayList() )的真正意义上的ArrayList类；之所以可以把Arrays的内部类ArrayList赋值给List类变量，是因为他们有同一个父类-AbstractList，然而List list变量指向的并不是真正意义上的集合。\n\n所以我们继续再看看Arrays的内部类ArrayList源码会发现，其中只有以下几个方法：\n\n>public int size()  #元素数量\n\n>public Object[] toArray() #转化为数组，实现了数组的浅拷贝\n\n>public <T> T[] toArray(T[] a) \n\n>public E get(int index) #获得指定索引的元素\n\n>public E set(int index, E element) #设置制定索引元素\n\n>public int indexOf(Object o) #查找元素的索引值\n\n>public boolean contains(Object o) #查找元素是否存在\n\n>public Spliterator<E> spliterator() #定义分割器\n\n>public void forEach(Consumer<? super E> action) #遍历\n\n>public void replaceAll(UnaryOperator<E> operator)\n\n>public void sort(Comparator<? super E> c)\n\n是不是没有发现add方法，add方法只不过是抽象类-AbstractList的方法,我们再进入该抽象类的方法中可以看到直接抛出了一个异常，刚好就是刚才我们调用add方法时的异常，OK，一切真相大白了。\n\n```java\n\n\tpublic void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\n```\n\n总结，我们通过调用Arrays.asList方法把数组转换为集合后，返回的集合并不是真正意义上的ArrayList，而是Arrays的静态内部类，所以并不能调用add方法向集合中添加元素，但是可以调用内部类自己的方法从集合中获取集合元素，设置集合中的元素等操作\n\n\n**4、对生成的子列表修改元素后源集合也会被修改-subList()**\n\n平时开发中，将一个大的list集合截取成符合条件的集合也是很常见的事情，那么我们一般直接通过subList方法去截取，只要api有的方法我们就直接用嘛，避免重复造轮子。\n\n```java\n\n\tList list1 = Lists.newArrayList(\"a\",\"b\",\"c\");\n\tList list2 = list1.subList(0, list1.size());\n\tlist2.add(\"d\");\n\t\t\n\tSystem.out.println(\"list1长度:\"+list1.size()+\" list1元素:\"+list1);\n\tSystem.out.println(\"list2长度:\"+list2.size()+\" list2元素:\"+list2);\n\t\t\n\tList list3 = Lists.newArrayList(1,2,3);\n\tList list4 = list3.subList(0, list3.size());\n\tlist4.add(4);\n\tSystem.out.println(\"list3长度:\"+list3.size()+\" list3元素:\"+list3);\n\tSystem.out.println(\"list4长度:\"+list4.size()+\" list4元素:\"+list4);\n\n```\n\n上面的代码输出为如下：\n\n>list1长度:4 list1元素:[a, b, c, d]\n>\n>list2长度:4 list2元素:[a, b, c, d]\n>\n>list3长度:4 list3元素:[1, 2, 3, 4]\n>\n>list4长度:4 list4元素:[1, 2, 3, 4]\n\n可以看到一个现象，我们向通过subList方法生成的新集合中添加元素后，新集合和老集合都发生了变化，分析一下subList方法，可以发现SubList其实是ArrayList类的内部类，并且我们可以看到其定义的add方法如下：\n\n```java\n\n\tprivate class SubList extends AbstractList<E> implements RandomAccess {\n        private final AbstractList<E> parent;\n        private final int parentOffset;\n        private final int offset;\n        int size;\n\n        SubList(AbstractList<E> parent,\n                int offset, int fromIndex, int toIndex) {\n            this.parent = parent;\n            this.parentOffset = fromIndex;\n            this.offset = offset + fromIndex;\n            this.size = toIndex - fromIndex;\n            this.modCount = ArrayList.this.modCount;\n        }\n\n        public E set(int index, E e) {\n            rangeCheck(index);\n            checkForComodification();\n            E oldValue = ArrayList.this.elementData(offset + index);\n            ArrayList.this.elementData[offset + index] = e;\n            return oldValue;\n        }\n\n        public E get(int index) {\n            rangeCheck(index);\n            checkForComodification();\n            return ArrayList.this.elementData(offset + index);\n        }\n\n        public int size() {\n            checkForComodification();\n            return this.size;\n        }\n\n        public void add(int index, E e) {\n            rangeCheckForAdd(index);\n            checkForComodification();\n            parent.add(parentOffset + index, e);\n            this.modCount = parent.modCount;\n            this.size++;\n        }\n\n```\n\n可以看到是针对parent进行的add操作，其实parent就是调用者(源集合)，并且它返回的SubList类也是AbstractList的子类，其所有的get、set、add、remove等都是在原始列表上的操作，并没有重新定义集合，从而可以说明对元素的操作其实是在源集合上进行的，所以对新截取的集合中元素的操作也就直接同步反映到源集合中。\n\n总结：subList产生的列表只是一个源集合的视图概念，所有对生成的子集合中元素的修改操作都会直接作用于源集合\n\n\n**5、对生成子列表添加元素操作会抛并发修改异常-subList()**\n\n```java\n\n\tList list1 = Lists.newArrayList(\"a\",\"b\",\"c\");\n\tList list2 = list1.subList(0, list1.size());\n\tlist1.add(\"d\");\n\t\t\n\tSystem.out.println(\"list1长度:\"+list1.size()+\" list1元素:\"+list1);\n\tSystem.out.println(\"list2长度:\"+list2.size()+\" list2元素:\"+list2);\n\n```\n\n上面的示例中，我们通过subList方法获取子集合list2后，对源集合list1进行元素添加，然后输出如下（报异常）：\n\n>list1长度:4 list1元素:[a, b, c, d]\n>\n>Exception in thread \"main\" java.util.ConcurrentModificationException\n\n怎么报了一个并发修改异常呢，我们点击subList类可以看到其有一个add方法\n\n```java\n\n\t public void add(int index, E e) {\n        rangeCheckForAdd(index); \n        checkForComodification(); //检测判断当前修改计数器是否与子列表生成时一致\n        parent.add(parentOffset + index, e);\n        this.modCount = parent.modCount;\n        this.size++;\n    }\n\n```\n\n进入checkForComodification方法源码可以看：\n\n```java\n\t\n\tprivate void checkForComodification() {\n       if (ArrayList.this.modCount != this.modCount)\n         throw new ConcurrentModificationException();\n    }\n\n```\n上面的方法主要看if分支判断条件，其实subList中的add方法中添加了修改次数比较判断，这个modCount变量是ArrayList中的一个变量，即每次调用arrayList类的add方法时，该变量都会自增操作；当我们调用subList方法时，subList对应的内部类中的构造方法就自己初始化一个自己的modeCount值，并且是直接把源集合的modeCount变量赋值给自己的，所以调用subList构造方法后，再次针对源集合list调用add方法添加元素时，就必然会使modCount自增操作，那么自增后，再看上面的代码checkForComodification()方法中的if判断条件就为true了，那么就抛出了并发修改异常了。\n\n注：再使用subList生成子列表后，不要再修改源集合列表数据，最好保持原列表的只读状态(通过Collections.unmodifiableList)。","slug":"java中集合使用中遇到的-坑","published":1,"updated":"2018-07-08T09:37:48.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1piu002j30tza1izk23e","content":"<p>平时开发过程中用的最多的莫过于基本类型、包装类、集合等等了，但是最近在使用集合时，偶尔使用不当会出现一些想不到的问题(bug)；为什么使用不当呢，因为我们对集合的操作都是使用JDK原生的API方法进行操作的，那么之所以使用不当，是因为对jdk源码中的api方法的不了解所致，下面就具体罗列一下具体的坑吧。</p>\n<a id=\"more\"></a>\n<p><strong>1、数组之间的拷贝-Arrays.copyOf()</strong></p>\n<blockquote>\n<p>我们直接用java.util.Arrays工具类的copyOf方法进行数组拷贝</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String studentId;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String studentName;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String studentId, String studentName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentId = studentId;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentName = studentName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Student [studentId=\"</span> + studentId + <span class=\"string\">\", studentName=\"</span> + studentName + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStudentId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> studentId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudentId</span><span class=\"params\">(String studentId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentId = studentId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStudentName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> studentName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudentName</span><span class=\"params\">(String studentName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentName = studentName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Student <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</div><div class=\"line\">\t\tStudent stu = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\tstu = (Student) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stu;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span>[] intArray = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span>[] intTempArray = Arrays.copyOf(intArray, intArray.length);</div><div class=\"line\">intTempArray[<span class=\"number\">4</span>] = <span class=\"number\">6</span>;</div><div class=\"line\">System.out.println(<span class=\"string\">\"intArray:\"</span>+Arrays.toString(intArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"intTempArray:\"</span>+Arrays.toString(intTempArray));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span>[] doubleArray = &#123;<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>,<span class=\"number\">5.0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">double</span>[] doubleTempArray = Arrays.copyOf(doubleArray, doubleArray.length);</div><div class=\"line\">doubleTempArray[<span class=\"number\">4</span>] = <span class=\"number\">6.0</span>;</div><div class=\"line\">System.out.println(<span class=\"string\">\"doubleArray:\"</span>+Arrays.toString(doubleArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"doubleTempArray:\"</span>+Arrays.toString(doubleTempArray));</div><div class=\"line\"></div><div class=\"line\">String[] strArray = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>,<span class=\"string\">\"e\"</span>&#125;;</div><div class=\"line\">String[] strTempArray = Arrays.copyOf(strArray, strArray.length);</div><div class=\"line\">strTempArray[<span class=\"number\">4</span>] = <span class=\"string\">\"F\"</span>;</div><div class=\"line\">System.out.println(<span class=\"string\">\"strArray:\"</span>+Arrays.toString(strArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"strTempArray:\"</span>+Arrays.toString(strTempArray));</div><div class=\"line\"></div><div class=\"line\">Student[] studentArray = &#123;<span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"A\"</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"B\"</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"3\"</span>, <span class=\"string\">\"C\"</span>)&#125;;</div><div class=\"line\">Student[] studentTempArray = Arrays.copyOf(studentArray, studentArray.length);</div><div class=\"line\">studentTempArray[<span class=\"number\">2</span>].setStudentName(<span class=\"string\">\"D\"</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"studentArray:\"</span>+Arrays.toString(studentArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"studentTempArray:\"</span>+Arrays.toString(studentTempArray));</div></pre></td></tr></table></figure>\n<p>以上代码只是最基本的数组实例，我们直接看最后一段代码，声明了Student类型的数组，然后通过Arrays.copyOf方法进行拷贝处理，得到一个新的Student类型的数组，然后我们对新得到的Student类型的数组中的对象进行重新赋值操作，然后我们查看以下输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">intArray:[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\">intTempArray:[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</div><div class=\"line\">doubleArray:[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">5.0</span>]</div><div class=\"line\">doubleTempArray:[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">6.0</span>]</div><div class=\"line\">strArray:[a, b, c, d, e]</div><div class=\"line\">strTempArray:[a, b, c, d, F]</div><div class=\"line\">str1Array:[a, b, c, d, e]</div><div class=\"line\">str1TempArray:[a, b, c, d, F]</div><div class=\"line\">studentArray:[Student [studentId=<span class=\"number\">1</span>, studentName=A], Student [studentId=<span class=\"number\">2</span>, studentName=B], Student [studentId=<span class=\"number\">3</span>, studentName=D]]</div><div class=\"line\">studentTempArray:[Student [studentId=<span class=\"number\">1</span>, studentName=A], Student [studentId=<span class=\"number\">2</span>, studentName=B], Student [studentId=<span class=\"number\">3</span>, studentName=D]]</div></pre></td></tr></table></figure>\n<p>可以看到上面的数组拷贝示例中，不管对老数组中的值进行更改还是对新数组中的值进行更改，都不会相互影响；而最后的Student类型的数组示例中，不管对老数组(studentArray)中的值进行更改还是对新数组(studentTempArray)中的值进行更改，都会相互影响；比如我们对拷贝生成的新数组studentTempArray中的索引为2的对象的学生姓名重新赋值，然后老数组中对应的索引的对象的学生姓名也被修改了；其实这就是所谓的数组浅拷贝，在使用Arrays.copyOf方法时要特别注意。</p>\n<p><strong>2、基本类型的数组转换为集合会出现数据类型未知错误-Arrays.asList()</strong></p>\n<p>平时开发中，也经常会遇到把一个Array数组转换成List集合，Arrays.asList(data)；但是这个方法如果使用不当，也会出现问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span>[] intArray = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(intArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div></pre></td></tr></table></figure>\n<p>上面的代码很简单，就是把intArray数组转换成List，其输出结果如下：</p>\n<blockquote>\n<p>size:1 list:[[I@2a139a55]</p>\n</blockquote>\n<p>看到输出结果是不是感觉有点茫然，list的长度应该为3才对啊，并且应该直接输出其中的元素才对啊。</p>\n<p>首先我们看看asList的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">asList</span><span class=\"params\">(T... a)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(a);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>asList方法输入的是一个泛型变长参数，我们知道基本类型是不能泛型化的，也就是说8个基本类型不能作为泛型参数，要想作为泛型参数就必须使用其所对应的包装类型，那前面的例子传递了一个int类型的数组,在asList方法中，直接把这个数组当作了一个参数进行处理；然后打印的集合内容是一个对象串，并不是其中的元素，这是为什么呢，我们点击上面的asList方法中的new ArrayList这个类源码中看一下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * <span class=\"doctag\">@serial</span> include</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">RandomAccess</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">2764017481108945198L</span>;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> E[] a;</div><div class=\"line\"></div><div class=\"line\">       ArrayList(E[] array) &#123;</div><div class=\"line\">           a = Objects.requireNonNull(array);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> a.length;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">\t.......省略其他代码</div></pre></td></tr></table></figure>\n<p>查看ArrayList源码可以看到，其是Arrays类的一个静态内部类，并不是我们平时声明List集合时的ArrayList类，只不过他们都继承了AbstractList这个类，所以List list= Arrays.asList(intArray);这句代码把Arrays的静态内部类赋值给Lits实例变量才不至于报异常。并且我们可以看到ArrayList内部类中有一个泛型的数组常量:</p>\n<blockquote>\n<p>private final E[] a；</p>\n</blockquote>\n<p>所以我们也可以通过下面代码获取转换后的list集合中对应索引的数据。</p>\n<blockquote>\n<p>System.out.println(“size:”+list.size()+” list:”+((int[])list.get(0))[1]);</p>\n<p>size:3 list:1</p>\n</blockquote>\n<p>好了，重新回到刚才那个问题，已经看到asList(T… a) 方法的入参是一个泛型参数，所以我们需要传递对应的基本类型的包装类或者其他对象参数，示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Integer[] integerArray = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(integerArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div></pre></td></tr></table></figure>\n<p>我们把上面的数组基本类型转换为其对应的包装类之后，就正常了！输出如下：</p>\n<blockquote>\n<p>size:3 list:[1, 2, 3]</p>\n</blockquote>\n<p>总结：使用Arrays.asList方法转换数组为list时，入参的类型一定不能是基本数据类型，需要传递包装类或者其它非基本数据类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">String[] StringArray = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(StringArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div><div class=\"line\">\t</div><div class=\"line\">Student[] studentArray = &#123;<span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"A\"</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"B\"</span>)&#125;;</div><div class=\"line\">List listStu = Arrays.asList(studentArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+listStu.size()+<span class=\"string\">\" list:\"</span>+listStu.toString());</div></pre></td></tr></table></figure>\n<p>上面传递的非基本数组类型输出如下：</p>\n<blockquote>\n<p>size:3 list:[a, b, c]</p>\n<p>size:2 list:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B]]</p>\n</blockquote>\n<p><strong>3、数组转换为集合后不能调用add方法新增元素-Arrays.asList()</strong></p>\n<p>接着第2个坑的另一个使用方法进行说明，一般来讲我们把一个数组转换为集合之后，肯定要对集合进行增、删、改、查操作，那么我首先演示一下集合的增加操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">String[] StringArray = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(StringArray);</div><div class=\"line\">list.add(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div></pre></td></tr></table></figure>\n<p>上面代码输出结果其实抛异常了，是下面这样：</p>\n<blockquote>\n<p>Exception in thread “main” java.lang.UnsupportedOperationException</p>\n</blockquote>\n<p>是不是很纳闷，既然可以正常把数组转换为集合，那么为什么不能向集合中添加数据呢？其实上面已经说过了，调用Arrays.asList方法后，返回的其实是Arrays的内部类，并不是我们平时声明集合时(new ArrayList() )的真正意义上的ArrayList类；之所以可以把Arrays的内部类ArrayList赋值给List类变量，是因为他们有同一个父类-AbstractList，然而List list变量指向的并不是真正意义上的集合。</p>\n<p>所以我们继续再看看Arrays的内部类ArrayList源码会发现，其中只有以下几个方法：</p>\n<blockquote>\n<p>public int size()  #元素数量</p>\n<p>public Object[] toArray() #转化为数组，实现了数组的浅拷贝</p>\n<p>public <t> T[] toArray(T[] a) </t></p>\n<p>public E get(int index) #获得指定索引的元素</p>\n<p>public E set(int index, E element) #设置制定索引元素</p>\n<p>public int indexOf(Object o) #查找元素的索引值</p>\n<p>public boolean contains(Object o) #查找元素是否存在</p>\n<p>public Spliterator<e> spliterator() #定义分割器</e></p>\n<p>public void forEach(Consumer&lt;? super E&gt; action) #遍历</p>\n<p>public void replaceAll(UnaryOperator<e> operator)</e></p>\n<p>public void sort(Comparator&lt;? super E&gt; c)</p>\n</blockquote>\n<p>是不是没有发现add方法，add方法只不过是抽象类-AbstractList的方法,我们再进入该抽象类的方法中可以看到直接抛出了一个异常，刚好就是刚才我们调用add方法时的异常，OK，一切真相大白了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>总结，我们通过调用Arrays.asList方法把数组转换为集合后，返回的集合并不是真正意义上的ArrayList，而是Arrays的静态内部类，所以并不能调用add方法向集合中添加元素，但是可以调用内部类自己的方法从集合中获取集合元素，设置集合中的元素等操作</p>\n<p><strong>4、对生成的子列表修改元素后源集合也会被修改-subList()</strong></p>\n<p>平时开发中，将一个大的list集合截取成符合条件的集合也是很常见的事情，那么我们一般直接通过subList方法去截取，只要api有的方法我们就直接用嘛，避免重复造轮子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">List list1 = Lists.newArrayList(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>);</div><div class=\"line\">List list2 = list1.subList(<span class=\"number\">0</span>, list1.size());</div><div class=\"line\">list2.add(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">System.out.println(<span class=\"string\">\"list1长度:\"</span>+list1.size()+<span class=\"string\">\" list1元素:\"</span>+list1);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list2长度:\"</span>+list2.size()+<span class=\"string\">\" list2元素:\"</span>+list2);</div><div class=\"line\">\t</div><div class=\"line\">List list3 = Lists.newArrayList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\">List list4 = list3.subList(<span class=\"number\">0</span>, list3.size());</div><div class=\"line\">list4.add(<span class=\"number\">4</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list3长度:\"</span>+list3.size()+<span class=\"string\">\" list3元素:\"</span>+list3);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list4长度:\"</span>+list4.size()+<span class=\"string\">\" list4元素:\"</span>+list4);</div></pre></td></tr></table></figure>\n<p>上面的代码输出为如下：</p>\n<blockquote>\n<p>list1长度:4 list1元素:[a, b, c, d]</p>\n<p>list2长度:4 list2元素:[a, b, c, d]</p>\n<p>list3长度:4 list3元素:[1, 2, 3, 4]</p>\n<p>list4长度:4 list4元素:[1, 2, 3, 4]</p>\n</blockquote>\n<p>可以看到一个现象，我们向通过subList方法生成的新集合中添加元素后，新集合和老集合都发生了变化，分析一下subList方法，可以发现SubList其实是ArrayList类的内部类，并且我们可以看到其定义的add方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubList</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RandomAccess</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AbstractList&lt;E&gt; parent;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentOffset;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset;</div><div class=\"line\">       <span class=\"keyword\">int</span> size;</div><div class=\"line\"></div><div class=\"line\">       SubList(AbstractList&lt;E&gt; parent,</div><div class=\"line\">               <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex) &#123;</div><div class=\"line\">           <span class=\"keyword\">this</span>.parent = parent;</div><div class=\"line\">           <span class=\"keyword\">this</span>.parentOffset = fromIndex;</div><div class=\"line\">           <span class=\"keyword\">this</span>.offset = offset + fromIndex;</div><div class=\"line\">           <span class=\"keyword\">this</span>.size = toIndex - fromIndex;</div><div class=\"line\">           <span class=\"keyword\">this</span>.modCount = ArrayList.<span class=\"keyword\">this</span>.modCount;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</div><div class=\"line\">           rangeCheck(index);</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           E oldValue = ArrayList.<span class=\"keyword\">this</span>.elementData(offset + index);</div><div class=\"line\">           ArrayList.<span class=\"keyword\">this</span>.elementData[offset + index] = e;</div><div class=\"line\">           <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">           rangeCheck(index);</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           <span class=\"keyword\">return</span> ArrayList.<span class=\"keyword\">this</span>.elementData(offset + index);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</div><div class=\"line\">           rangeCheckForAdd(index);</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           parent.add(parentOffset + index, e);</div><div class=\"line\">           <span class=\"keyword\">this</span>.modCount = parent.modCount;</div><div class=\"line\">           <span class=\"keyword\">this</span>.size++;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>可以看到是针对parent进行的add操作，其实parent就是调用者(源集合)，并且它返回的SubList类也是AbstractList的子类，其所有的get、set、add、remove等都是在原始列表上的操作，并没有重新定义集合，从而可以说明对元素的操作其实是在源集合上进行的，所以对新截取的集合中元素的操作也就直接同步反映到源集合中。</p>\n<p>总结：subList产生的列表只是一个源集合的视图概念，所有对生成的子集合中元素的修改操作都会直接作用于源集合</p>\n<p><strong>5、对生成子列表添加元素操作会抛并发修改异常-subList()</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">List list1 = Lists.newArrayList(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>);</div><div class=\"line\">List list2 = list1.subList(<span class=\"number\">0</span>, list1.size());</div><div class=\"line\">list1.add(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">System.out.println(<span class=\"string\">\"list1长度:\"</span>+list1.size()+<span class=\"string\">\" list1元素:\"</span>+list1);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list2长度:\"</span>+list2.size()+<span class=\"string\">\" list2元素:\"</span>+list2);</div></pre></td></tr></table></figure>\n<p>上面的示例中，我们通过subList方法获取子集合list2后，对源集合list1进行元素添加，然后输出如下（报异常）：</p>\n<blockquote>\n<p>list1长度:4 list1元素:[a, b, c, d]</p>\n<p>Exception in thread “main” java.util.ConcurrentModificationException</p>\n</blockquote>\n<p>怎么报了一个并发修改异常呢，我们点击subList类可以看到其有一个add方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</div><div class=\"line\">      rangeCheckForAdd(index); </div><div class=\"line\">      checkForComodification(); <span class=\"comment\">//检测判断当前修改计数器是否与子列表生成时一致</span></div><div class=\"line\">      parent.add(parentOffset + index, e);</div><div class=\"line\">      <span class=\"keyword\">this</span>.modCount = parent.modCount;</div><div class=\"line\">      <span class=\"keyword\">this</span>.size++;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>进入checkForComodification方法源码可以看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (ArrayList.<span class=\"keyword\">this</span>.modCount != <span class=\"keyword\">this</span>.modCount)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>上面的方法主要看if分支判断条件，其实subList中的add方法中添加了修改次数比较判断，这个modCount变量是ArrayList中的一个变量，即每次调用arrayList类的add方法时，该变量都会自增操作；当我们调用subList方法时，subList对应的内部类中的构造方法就自己初始化一个自己的modeCount值，并且是直接把源集合的modeCount变量赋值给自己的，所以调用subList构造方法后，再次针对源集合list调用add方法添加元素时，就必然会使modCount自增操作，那么自增后，再看上面的代码checkForComodification()方法中的if判断条件就为true了，那么就抛出了并发修改异常了。</p>\n<p>注：再使用subList生成子列表后，不要再修改源集合列表数据，最好保持原列表的只读状态(通过Collections.unmodifiableList)。</p>\n","excerpt":"<p>平时开发过程中用的最多的莫过于基本类型、包装类、集合等等了，但是最近在使用集合时，偶尔使用不当会出现一些想不到的问题(bug)；为什么使用不当呢，因为我们对集合的操作都是使用JDK原生的API方法进行操作的，那么之所以使用不当，是因为对jdk源码中的api方法的不了解所致，下面就具体罗列一下具体的坑吧。</p>","more":"<p><strong>1、数组之间的拷贝-Arrays.copyOf()</strong></p>\n<blockquote>\n<p>我们直接用java.util.Arrays工具类的copyOf方法进行数组拷贝</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String studentId;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String studentName;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String studentId, String studentName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentId = studentId;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentName = studentName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Student [studentId=\"</span> + studentId + <span class=\"string\">\", studentName=\"</span> + studentName + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStudentId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> studentId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudentId</span><span class=\"params\">(String studentId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentId = studentId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStudentName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> studentName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudentName</span><span class=\"params\">(String studentName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.studentName = studentName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Student <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</div><div class=\"line\">\t\tStudent stu = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\tstu = (Student) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stu;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span>[] intArray = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span>[] intTempArray = Arrays.copyOf(intArray, intArray.length);</div><div class=\"line\">intTempArray[<span class=\"number\">4</span>] = <span class=\"number\">6</span>;</div><div class=\"line\">System.out.println(<span class=\"string\">\"intArray:\"</span>+Arrays.toString(intArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"intTempArray:\"</span>+Arrays.toString(intTempArray));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span>[] doubleArray = &#123;<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>,<span class=\"number\">5.0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">double</span>[] doubleTempArray = Arrays.copyOf(doubleArray, doubleArray.length);</div><div class=\"line\">doubleTempArray[<span class=\"number\">4</span>] = <span class=\"number\">6.0</span>;</div><div class=\"line\">System.out.println(<span class=\"string\">\"doubleArray:\"</span>+Arrays.toString(doubleArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"doubleTempArray:\"</span>+Arrays.toString(doubleTempArray));</div><div class=\"line\"></div><div class=\"line\">String[] strArray = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>,<span class=\"string\">\"e\"</span>&#125;;</div><div class=\"line\">String[] strTempArray = Arrays.copyOf(strArray, strArray.length);</div><div class=\"line\">strTempArray[<span class=\"number\">4</span>] = <span class=\"string\">\"F\"</span>;</div><div class=\"line\">System.out.println(<span class=\"string\">\"strArray:\"</span>+Arrays.toString(strArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"strTempArray:\"</span>+Arrays.toString(strTempArray));</div><div class=\"line\"></div><div class=\"line\">Student[] studentArray = &#123;<span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"A\"</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"B\"</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"3\"</span>, <span class=\"string\">\"C\"</span>)&#125;;</div><div class=\"line\">Student[] studentTempArray = Arrays.copyOf(studentArray, studentArray.length);</div><div class=\"line\">studentTempArray[<span class=\"number\">2</span>].setStudentName(<span class=\"string\">\"D\"</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"studentArray:\"</span>+Arrays.toString(studentArray));</div><div class=\"line\">System.out.println(<span class=\"string\">\"studentTempArray:\"</span>+Arrays.toString(studentTempArray));</div></pre></td></tr></table></figure>\n<p>以上代码只是最基本的数组实例，我们直接看最后一段代码，声明了Student类型的数组，然后通过Arrays.copyOf方法进行拷贝处理，得到一个新的Student类型的数组，然后我们对新得到的Student类型的数组中的对象进行重新赋值操作，然后我们查看以下输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">intArray:[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\">intTempArray:[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</div><div class=\"line\">doubleArray:[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">5.0</span>]</div><div class=\"line\">doubleTempArray:[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">6.0</span>]</div><div class=\"line\">strArray:[a, b, c, d, e]</div><div class=\"line\">strTempArray:[a, b, c, d, F]</div><div class=\"line\">str1Array:[a, b, c, d, e]</div><div class=\"line\">str1TempArray:[a, b, c, d, F]</div><div class=\"line\">studentArray:[Student [studentId=<span class=\"number\">1</span>, studentName=A], Student [studentId=<span class=\"number\">2</span>, studentName=B], Student [studentId=<span class=\"number\">3</span>, studentName=D]]</div><div class=\"line\">studentTempArray:[Student [studentId=<span class=\"number\">1</span>, studentName=A], Student [studentId=<span class=\"number\">2</span>, studentName=B], Student [studentId=<span class=\"number\">3</span>, studentName=D]]</div></pre></td></tr></table></figure>\n<p>可以看到上面的数组拷贝示例中，不管对老数组中的值进行更改还是对新数组中的值进行更改，都不会相互影响；而最后的Student类型的数组示例中，不管对老数组(studentArray)中的值进行更改还是对新数组(studentTempArray)中的值进行更改，都会相互影响；比如我们对拷贝生成的新数组studentTempArray中的索引为2的对象的学生姓名重新赋值，然后老数组中对应的索引的对象的学生姓名也被修改了；其实这就是所谓的数组浅拷贝，在使用Arrays.copyOf方法时要特别注意。</p>\n<p><strong>2、基本类型的数组转换为集合会出现数据类型未知错误-Arrays.asList()</strong></p>\n<p>平时开发中，也经常会遇到把一个Array数组转换成List集合，Arrays.asList(data)；但是这个方法如果使用不当，也会出现问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span>[] intArray = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(intArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div></pre></td></tr></table></figure>\n<p>上面的代码很简单，就是把intArray数组转换成List，其输出结果如下：</p>\n<blockquote>\n<p>size:1 list:[[I@2a139a55]</p>\n</blockquote>\n<p>看到输出结果是不是感觉有点茫然，list的长度应该为3才对啊，并且应该直接输出其中的元素才对啊。</p>\n<p>首先我们看看asList的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">asList</span><span class=\"params\">(T... a)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(a);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>asList方法输入的是一个泛型变长参数，我们知道基本类型是不能泛型化的，也就是说8个基本类型不能作为泛型参数，要想作为泛型参数就必须使用其所对应的包装类型，那前面的例子传递了一个int类型的数组,在asList方法中，直接把这个数组当作了一个参数进行处理；然后打印的集合内容是一个对象串，并不是其中的元素，这是为什么呢，我们点击上面的asList方法中的new ArrayList这个类源码中看一下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * <span class=\"doctag\">@serial</span> include</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</div><div class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title\">RandomAccess</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">2764017481108945198L</span>;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> E[] a;</div><div class=\"line\"></div><div class=\"line\">       ArrayList(E[] array) &#123;</div><div class=\"line\">           a = Objects.requireNonNull(array);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> a.length;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">\t.......省略其他代码</div></pre></td></tr></table></figure>\n<p>查看ArrayList源码可以看到，其是Arrays类的一个静态内部类，并不是我们平时声明List集合时的ArrayList类，只不过他们都继承了AbstractList这个类，所以List list= Arrays.asList(intArray);这句代码把Arrays的静态内部类赋值给Lits实例变量才不至于报异常。并且我们可以看到ArrayList内部类中有一个泛型的数组常量:</p>\n<blockquote>\n<p>private final E[] a；</p>\n</blockquote>\n<p>所以我们也可以通过下面代码获取转换后的list集合中对应索引的数据。</p>\n<blockquote>\n<p>System.out.println(“size:”+list.size()+” list:”+((int[])list.get(0))[1]);</p>\n<p>size:3 list:1</p>\n</blockquote>\n<p>好了，重新回到刚才那个问题，已经看到asList(T… a) 方法的入参是一个泛型参数，所以我们需要传递对应的基本类型的包装类或者其他对象参数，示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Integer[] integerArray = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(integerArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div></pre></td></tr></table></figure>\n<p>我们把上面的数组基本类型转换为其对应的包装类之后，就正常了！输出如下：</p>\n<blockquote>\n<p>size:3 list:[1, 2, 3]</p>\n</blockquote>\n<p>总结：使用Arrays.asList方法转换数组为list时，入参的类型一定不能是基本数据类型，需要传递包装类或者其它非基本数据类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">String[] StringArray = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(StringArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div><div class=\"line\">\t</div><div class=\"line\">Student[] studentArray = &#123;<span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"A\"</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"B\"</span>)&#125;;</div><div class=\"line\">List listStu = Arrays.asList(studentArray);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+listStu.size()+<span class=\"string\">\" list:\"</span>+listStu.toString());</div></pre></td></tr></table></figure>\n<p>上面传递的非基本数组类型输出如下：</p>\n<blockquote>\n<p>size:3 list:[a, b, c]</p>\n<p>size:2 list:[Student [studentId=1, studentName=A], Student [studentId=2, studentName=B]]</p>\n</blockquote>\n<p><strong>3、数组转换为集合后不能调用add方法新增元素-Arrays.asList()</strong></p>\n<p>接着第2个坑的另一个使用方法进行说明，一般来讲我们把一个数组转换为集合之后，肯定要对集合进行增、删、改、查操作，那么我首先演示一下集合的增加操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">String[] StringArray = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>&#125;;</div><div class=\"line\">List list= Arrays.asList(StringArray);</div><div class=\"line\">list.add(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"size:\"</span>+list.size()+<span class=\"string\">\" list:\"</span>+list.toString());</div></pre></td></tr></table></figure>\n<p>上面代码输出结果其实抛异常了，是下面这样：</p>\n<blockquote>\n<p>Exception in thread “main” java.lang.UnsupportedOperationException</p>\n</blockquote>\n<p>是不是很纳闷，既然可以正常把数组转换为集合，那么为什么不能向集合中添加数据呢？其实上面已经说过了，调用Arrays.asList方法后，返回的其实是Arrays的内部类，并不是我们平时声明集合时(new ArrayList() )的真正意义上的ArrayList类；之所以可以把Arrays的内部类ArrayList赋值给List类变量，是因为他们有同一个父类-AbstractList，然而List list变量指向的并不是真正意义上的集合。</p>\n<p>所以我们继续再看看Arrays的内部类ArrayList源码会发现，其中只有以下几个方法：</p>\n<blockquote>\n<p>public int size()  #元素数量</p>\n<p>public Object[] toArray() #转化为数组，实现了数组的浅拷贝</p>\n<p>public <T> T[] toArray(T[] a) </p>\n<p>public E get(int index) #获得指定索引的元素</p>\n<p>public E set(int index, E element) #设置制定索引元素</p>\n<p>public int indexOf(Object o) #查找元素的索引值</p>\n<p>public boolean contains(Object o) #查找元素是否存在</p>\n<p>public Spliterator<E> spliterator() #定义分割器</p>\n<p>public void forEach(Consumer&lt;? super E&gt; action) #遍历</p>\n<p>public void replaceAll(UnaryOperator<E> operator)</p>\n<p>public void sort(Comparator&lt;? super E&gt; c)</p>\n</blockquote>\n<p>是不是没有发现add方法，add方法只不过是抽象类-AbstractList的方法,我们再进入该抽象类的方法中可以看到直接抛出了一个异常，刚好就是刚才我们调用add方法时的异常，OK，一切真相大白了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>总结，我们通过调用Arrays.asList方法把数组转换为集合后，返回的集合并不是真正意义上的ArrayList，而是Arrays的静态内部类，所以并不能调用add方法向集合中添加元素，但是可以调用内部类自己的方法从集合中获取集合元素，设置集合中的元素等操作</p>\n<p><strong>4、对生成的子列表修改元素后源集合也会被修改-subList()</strong></p>\n<p>平时开发中，将一个大的list集合截取成符合条件的集合也是很常见的事情，那么我们一般直接通过subList方法去截取，只要api有的方法我们就直接用嘛，避免重复造轮子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">List list1 = Lists.newArrayList(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>);</div><div class=\"line\">List list2 = list1.subList(<span class=\"number\">0</span>, list1.size());</div><div class=\"line\">list2.add(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">System.out.println(<span class=\"string\">\"list1长度:\"</span>+list1.size()+<span class=\"string\">\" list1元素:\"</span>+list1);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list2长度:\"</span>+list2.size()+<span class=\"string\">\" list2元素:\"</span>+list2);</div><div class=\"line\">\t</div><div class=\"line\">List list3 = Lists.newArrayList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\">List list4 = list3.subList(<span class=\"number\">0</span>, list3.size());</div><div class=\"line\">list4.add(<span class=\"number\">4</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list3长度:\"</span>+list3.size()+<span class=\"string\">\" list3元素:\"</span>+list3);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list4长度:\"</span>+list4.size()+<span class=\"string\">\" list4元素:\"</span>+list4);</div></pre></td></tr></table></figure>\n<p>上面的代码输出为如下：</p>\n<blockquote>\n<p>list1长度:4 list1元素:[a, b, c, d]</p>\n<p>list2长度:4 list2元素:[a, b, c, d]</p>\n<p>list3长度:4 list3元素:[1, 2, 3, 4]</p>\n<p>list4长度:4 list4元素:[1, 2, 3, 4]</p>\n</blockquote>\n<p>可以看到一个现象，我们向通过subList方法生成的新集合中添加元素后，新集合和老集合都发生了变化，分析一下subList方法，可以发现SubList其实是ArrayList类的内部类，并且我们可以看到其定义的add方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubList</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RandomAccess</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AbstractList&lt;E&gt; parent;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentOffset;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset;</div><div class=\"line\">       <span class=\"keyword\">int</span> size;</div><div class=\"line\"></div><div class=\"line\">       SubList(AbstractList&lt;E&gt; parent,</div><div class=\"line\">               <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex) &#123;</div><div class=\"line\">           <span class=\"keyword\">this</span>.parent = parent;</div><div class=\"line\">           <span class=\"keyword\">this</span>.parentOffset = fromIndex;</div><div class=\"line\">           <span class=\"keyword\">this</span>.offset = offset + fromIndex;</div><div class=\"line\">           <span class=\"keyword\">this</span>.size = toIndex - fromIndex;</div><div class=\"line\">           <span class=\"keyword\">this</span>.modCount = ArrayList.<span class=\"keyword\">this</span>.modCount;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</div><div class=\"line\">           rangeCheck(index);</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           E oldValue = ArrayList.<span class=\"keyword\">this</span>.elementData(offset + index);</div><div class=\"line\">           ArrayList.<span class=\"keyword\">this</span>.elementData[offset + index] = e;</div><div class=\"line\">           <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">           rangeCheck(index);</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           <span class=\"keyword\">return</span> ArrayList.<span class=\"keyword\">this</span>.elementData(offset + index);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</div><div class=\"line\">           rangeCheckForAdd(index);</div><div class=\"line\">           checkForComodification();</div><div class=\"line\">           parent.add(parentOffset + index, e);</div><div class=\"line\">           <span class=\"keyword\">this</span>.modCount = parent.modCount;</div><div class=\"line\">           <span class=\"keyword\">this</span>.size++;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>可以看到是针对parent进行的add操作，其实parent就是调用者(源集合)，并且它返回的SubList类也是AbstractList的子类，其所有的get、set、add、remove等都是在原始列表上的操作，并没有重新定义集合，从而可以说明对元素的操作其实是在源集合上进行的，所以对新截取的集合中元素的操作也就直接同步反映到源集合中。</p>\n<p>总结：subList产生的列表只是一个源集合的视图概念，所有对生成的子集合中元素的修改操作都会直接作用于源集合</p>\n<p><strong>5、对生成子列表添加元素操作会抛并发修改异常-subList()</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">List list1 = Lists.newArrayList(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>);</div><div class=\"line\">List list2 = list1.subList(<span class=\"number\">0</span>, list1.size());</div><div class=\"line\">list1.add(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">System.out.println(<span class=\"string\">\"list1长度:\"</span>+list1.size()+<span class=\"string\">\" list1元素:\"</span>+list1);</div><div class=\"line\">System.out.println(<span class=\"string\">\"list2长度:\"</span>+list2.size()+<span class=\"string\">\" list2元素:\"</span>+list2);</div></pre></td></tr></table></figure>\n<p>上面的示例中，我们通过subList方法获取子集合list2后，对源集合list1进行元素添加，然后输出如下（报异常）：</p>\n<blockquote>\n<p>list1长度:4 list1元素:[a, b, c, d]</p>\n<p>Exception in thread “main” java.util.ConcurrentModificationException</p>\n</blockquote>\n<p>怎么报了一个并发修改异常呢，我们点击subList类可以看到其有一个add方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</div><div class=\"line\">      rangeCheckForAdd(index); </div><div class=\"line\">      checkForComodification(); <span class=\"comment\">//检测判断当前修改计数器是否与子列表生成时一致</span></div><div class=\"line\">      parent.add(parentOffset + index, e);</div><div class=\"line\">      <span class=\"keyword\">this</span>.modCount = parent.modCount;</div><div class=\"line\">      <span class=\"keyword\">this</span>.size++;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>进入checkForComodification方法源码可以看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (ArrayList.<span class=\"keyword\">this</span>.modCount != <span class=\"keyword\">this</span>.modCount)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>上面的方法主要看if分支判断条件，其实subList中的add方法中添加了修改次数比较判断，这个modCount变量是ArrayList中的一个变量，即每次调用arrayList类的add方法时，该变量都会自增操作；当我们调用subList方法时，subList对应的内部类中的构造方法就自己初始化一个自己的modeCount值，并且是直接把源集合的modeCount变量赋值给自己的，所以调用subList构造方法后，再次针对源集合list调用add方法添加元素时，就必然会使modCount自增操作，那么自增后，再看上面的代码checkForComodification()方法中的if判断条件就为true了，那么就抛出了并发修改异常了。</p>\n<p>注：再使用subList生成子列表后，不要再修改源集合列表数据，最好保持原列表的只读状态(通过Collections.unmodifiableList)。</p>"},{"title":"java8中使用stream流和for循环分别对数据集合遍历的差异","date":"2016-08-31T01:44:41.000Z","_content":"最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<Map<String,Object>>）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！\n\n### 一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n\n**2、使用java8的stream的forEach遍历集合并输出**\n```java\n\tlistMap.stream().forEach(p -> System.out.println(p.get(\"id\")+\" \"+p.get(\"title\")));\n```\n控制台打印内容如下：花费1582毫秒\n```java\n\t..... ..........\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1582\n```\n**3、使用for循环遍历集合并输出**\n```java\n\t for(Map map:listMap){\n\t    System.out.println(map.get(\"id\")+\" \"+map.get(\"title\"));\n\t }\n```\n控制台打印内容如下：花费1548毫秒\n```java\n\t99995 title99995\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1548\n```\n**4、小结**\n \n 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】\n\n 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】\n\n 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】\n\n 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！\n\n### 二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n**2、声明个长度为2的集合**\n```java\n\t\t//该集合中的key键就是上面长度为10W集合中的id的值\n\t\tMap<String,Object> mapTop = new HashMap<String,Object>();\n\t    mapTop.put(\"10\", \"1\");\n\t    mapTop.put(\"90\", \"0\");\n```\n接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;\n\n**3、用java8的stream流遍历**\n```java\n\tlistMap.stream().map((s)->{\n\t\t\t\treturn s.put(\"top\",mapTop.get(String.valueOf(s.get(\"id\"))));\n\t\t\t}).collect(Collectors.toList());\n```\n上面的代码中我们通过stream流中的map进行数据追加：\n追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},...]\n追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},...]\n\n花费时间：4641毫秒\n\n**4、用for循环遍历**\n```java\n\t for(Map map:listMap){\n\t    \tmap.put(\"top\", mapTop.get(String.valueOf(map.get(\"id\"))));\n\t }\n```\n\n花费时间：5513毫秒\n\n**5、小结**\n\n当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！\n\n后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！\n\n![Alt text](http://soujava.com/images/javaStream2.png)\n","source":"_posts/java8中使用stream流和for循环分别对数据集合遍历的差异.md","raw":"---\ntitle: java8中使用stream流和for循环分别对数据集合遍历的差异\ndate: 2016-08-31 09:44:41\ncategories: java\ntags: java8 Stream\n---\n最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<Map<String,Object>>）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！\n\n### 一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n\n**2、使用java8的stream的forEach遍历集合并输出**\n```java\n\tlistMap.stream().forEach(p -> System.out.println(p.get(\"id\")+\" \"+p.get(\"title\")));\n```\n控制台打印内容如下：花费1582毫秒\n```java\n\t..... ..........\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1582\n```\n**3、使用for循环遍历集合并输出**\n```java\n\t for(Map map:listMap){\n\t    System.out.println(map.get(\"id\")+\" \"+map.get(\"title\"));\n\t }\n```\n控制台打印内容如下：花费1548毫秒\n```java\n\t99995 title99995\n\t99996 title99996\n\t99997 title99997\n\t99998 title99998\n\t99999 title99999\n\t花费时间：1548\n```\n**4、小结**\n \n 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】\n\n 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】\n\n 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】\n\n 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！\n\n### 二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据) ###\n\n**1、声明个长度为10W的集合**\n```java\n\t\tList<Map<String,Object>> listMap = new ArrayList<Map<String,Object>>();\n\t    for(int i=0;i<100000;i++){\n\t    \tMap<String,Object> map = new HashMap<String,Object>();\n\t\t    map.put(\"id\", i);\n\t\t    map.put(\"title\", \"title\"+i);\n\t\t    map.put(\"view\", \"view\"+i);\n\t\t    listMap.add(map);\n\t    }\n```\n**2、声明个长度为2的集合**\n```java\n\t\t//该集合中的key键就是上面长度为10W集合中的id的值\n\t\tMap<String,Object> mapTop = new HashMap<String,Object>();\n\t    mapTop.put(\"10\", \"1\");\n\t    mapTop.put(\"90\", \"0\");\n```\n接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;\n\n**3、用java8的stream流遍历**\n```java\n\tlistMap.stream().map((s)->{\n\t\t\t\treturn s.put(\"top\",mapTop.get(String.valueOf(s.get(\"id\"))));\n\t\t\t}).collect(Collectors.toList());\n```\n上面的代码中我们通过stream流中的map进行数据追加：\n追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},...]\n追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},...]\n\n花费时间：4641毫秒\n\n**4、用for循环遍历**\n```java\n\t for(Map map:listMap){\n\t    \tmap.put(\"top\", mapTop.get(String.valueOf(map.get(\"id\"))));\n\t }\n```\n\n花费时间：5513毫秒\n\n**5、小结**\n\n当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！\n\n后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！\n\n![Alt text](http://soujava.com/images/javaStream2.png)\n","slug":"java8中使用stream流和for循环分别对数据集合遍历的差异","published":1,"updated":"2018-07-08T09:37:48.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1piw002m30tz4bo9xc86","content":"<p>最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<map<string,object>&gt;）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！</map<string,object></p>\n<h3 id=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\"><a href=\"#一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\" class=\"headerlink\" title=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)\"></a>一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、使用java8的stream的forEach遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().forEach(p -&gt; System.out.println(p.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+p.get(<span class=\"string\">\"title\"</span>)));</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1582毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">..... ..........</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1582</span></div></pre></td></tr></table></figure></p>\n<p><strong>3、使用for循环遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   System.out.println(map.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+map.get(<span class=\"string\">\"title\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1548毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">99995</span> title99995</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1548</span></div></pre></td></tr></table></figure></p>\n<p><strong>4、小结</strong></p>\n<p> 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】</p>\n<p> 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】</p>\n<p> 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】</p>\n<p> 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！</p>\n<h3 id=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\"><a href=\"#二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\" class=\"headerlink\" title=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)\"></a>二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、声明个长度为2的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该集合中的key键就是上面长度为10W集合中的id的值</span></div><div class=\"line\">Map&lt;String,Object&gt; mapTop = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"90\"</span>, <span class=\"string\">\"0\"</span>);</div></pre></td></tr></table></figure></p>\n<p>接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;</p>\n<p><strong>3、用java8的stream流遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().map((s)-&gt;&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> s.put(<span class=\"string\">\"top\"</span>,mapTop.get(String.valueOf(s.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">\t\t&#125;).collect(Collectors.toList());</div></pre></td></tr></table></figure></p>\n<p>上面的代码中我们通过stream流中的map进行数据追加：<br>追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},…]<br>追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},…]</p>\n<p>花费时间：4641毫秒</p>\n<p><strong>4、用for循环遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   \tmap.put(<span class=\"string\">\"top\"</span>, mapTop.get(String.valueOf(map.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>花费时间：5513毫秒</p>\n<p><strong>5、小结</strong></p>\n<p>当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！</p>\n<p>后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！</p>\n<p><img src=\"http://soujava.com/images/javaStream2.png\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<p>最近在平时开发中越来越多的会用到java8新增的流处理功能Stream；用一次就上瘾的感觉啊！在处理一个稍微大一些的数据集合时（长度为10W的List<Map<String,Object>&gt;）,刚好对比一下用java8的stream遍历集合和用java的for循环遍历集合的效率差异！</p>\n<h3 id=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\"><a href=\"#一、分别比较用两种方式遍历集合并输出集合中元素的效率-不在循环中加工组装集合数据\" class=\"headerlink\" title=\"一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)\"></a>一、分别比较用两种方式遍历集合并输出集合中元素的效率(不在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、使用java8的stream的forEach遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().forEach(p -&gt; System.out.println(p.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+p.get(<span class=\"string\">\"title\"</span>)));</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1582毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">..... ..........</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1582</span></div></pre></td></tr></table></figure></p>\n<p><strong>3、使用for循环遍历集合并输出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   System.out.println(map.get(<span class=\"string\">\"id\"</span>)+<span class=\"string\">\" \"</span>+map.get(<span class=\"string\">\"title\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台打印内容如下：花费1548毫秒<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">99995</span> title99995</div><div class=\"line\"><span class=\"number\">99996</span> title99996</div><div class=\"line\"><span class=\"number\">99997</span> title99997</div><div class=\"line\"><span class=\"number\">99998</span> title99998</div><div class=\"line\"><span class=\"number\">99999</span> title99999</div><div class=\"line\">花费时间：<span class=\"number\">1548</span></div></pre></td></tr></table></figure></p>\n<p><strong>4、小结</strong></p>\n<p> 长度为1W时：  for循环【170毫秒】    stram循环 【240毫秒】</p>\n<p> 长度为10W时： for循环【1548毫秒】    stram循环【1582毫秒】</p>\n<p> 长度为100W时：for循环【21099毫秒】   stram循环【20291毫秒】</p>\n<p> 所以个人经过上面的测试发现其实两种方式去遍历集合的效率是差不多的！</p>\n<h3 id=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\"><a href=\"#二、分别比较用两种方式遍历集合并输出集合中元素的效率-在循环中加工组装集合数据\" class=\"headerlink\" title=\"二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)\"></a>二、分别比较用两种方式遍历集合并输出集合中元素的效率(在循环中加工组装集合数据)</h3><p><strong>1、声明个长度为10W的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Map&lt;String,Object&gt;&gt; listMap = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">   \tMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    map.put(<span class=\"string\">\"id\"</span>, i);</div><div class=\"line\">    map.put(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"title\"</span>+i);</div><div class=\"line\">    map.put(<span class=\"string\">\"view\"</span>, <span class=\"string\">\"view\"</span>+i);</div><div class=\"line\">    listMap.add(map);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2、声明个长度为2的集合</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该集合中的key键就是上面长度为10W集合中的id的值</span></div><div class=\"line\">Map&lt;String,Object&gt; mapTop = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">   mapTop.put(<span class=\"string\">\"90\"</span>, <span class=\"string\">\"0\"</span>);</div></pre></td></tr></table></figure></p>\n<p>接下来我们分别用for循环和stream流循环遍历集合并且在遍历过程中向集合中追加一个新的键值对数据top:XX;</p>\n<p><strong>3、用java8的stream流遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">listMap.stream().map((s)-&gt;&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> s.put(<span class=\"string\">\"top\"</span>,mapTop.get(String.valueOf(s.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">\t\t&#125;).collect(Collectors.toList());</div></pre></td></tr></table></figure></p>\n<p>上面的代码中我们通过stream流中的map进行数据追加：<br>追加前的集合数据结构：[{view=view0,id=0, title=title0},{view=view0,id=10, title=title0},…]<br>追加后的集合数据结构：[{view=view0, top=null, id=0, title=title0},{view=view10, top=1, id=10, title=title10},…]</p>\n<p>花费时间：4641毫秒</p>\n<p><strong>4、用for循环遍历</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(Map map:listMap)&#123;</div><div class=\"line\">   \tmap.put(<span class=\"string\">\"top\"</span>, mapTop.get(String.valueOf(map.get(<span class=\"string\">\"id\"</span>))));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>花费时间：5513毫秒</p>\n<p><strong>5、小结</strong></p>\n<p>当分别使用两种方式对同一集合进行遍历并且数据追加时，效率也是不相上下的，使用stream流循环稍微快那么一丁点！</p>\n<p>后来通过“科学上网”的方式，搜集到了一篇老外写的关于stream循环和for循环的文章，说的是意思是不应该用stream循环替换你的for循环！个人感觉这也因场景而定，不能一概而论，首先比如在循环过程中如果涉及复杂的数据装载和加工，那么个人感觉使用for循环比较好理解；反之则使用stream流的方式比较好；并且我们不能仅仅因为循环这一动作就下结论不太科学，比如stream的分组、过滤等等其他功能是for循环所不能及的！</p>\n<p><img src=\"http://soujava.com/images/javaStream2.png\" alt=\"Alt text\"></p>\n"},{"title":"java三目运算符之规则(坑)","date":"2017-04-20T11:40:25.000Z","_content":"平时开发过程中，判断操作除了使用if-else语句之外，三目运算符也经常被使用，然而在使用三目运算符过程中，我们异步都很老实，但是其使用规则则不曾了解，下面就了解一下它的使用规则。\n\n<!--more-->\n\n**一、描述**\n\n先了解一下三目运算符的语法：\n\n>表达式1?表达式2:表达式3;\n\n*当表达式1为true时，则执行表达式2；当表达式1为false时，则执行表达式3*\n\n先看下面的一段代码，分析一下执行结果：\n\n```java\n\n\t@Test\n\tpublic void Test(){\n\t\tint i = 60;\n\t\tString str1 = String.valueOf(i < 100 ? 80 : 100);\n\t\tSystem.out.println(\"str1:\"+str1);\n\t\t\n\t\tString str2 = String.valueOf(i < 100 ? 80 : 100.0);\n\t\tSystem.out.println(\"str2:\"+str2);\n\t\t\n\t\tString str3 = String.valueOf(i < 100 ? 80L : 100.0);\n\t\tSystem.out.println(\"str2:\"+str3);\n\t\t\n\t\tString str4 = String.valueOf(i < 100 ? \"80\" : 100.0);\n\t\tSystem.out.println(\"str2:\"+str4);\n\t\t\n\t\tString str5 = String.valueOf(i < 100 ? 80 : \"字符串\");\n\t\tSystem.out.println(\"str2:\"+str5);\n\n\t\tString str6 = String.valueOf(i < 100 ? true : 100.06);\n\t\tSystem.out.println(\"str6:\"+str6);\n\t}\n\n```\n\n运行之后的返回结果如下：\n\n```java\n\t\n\tstr1:80\n\n\tstr2:80.0\n\n\tstr3:80.0\n\n\tstr4:80\n\n\tstr5:80\n\n\tstr6:true\n\n```\n\n**二、分析**\n\n>1、String str1 = String.valueOf(i < 100 ? 80 : 100);\n\n这句代码运行结果为 str1:80,无容置疑，完全正确，也不需要过多解释了。\n\n>2、String str2 = String.valueOf(i < 100 ? 80 : 100.0);\n\n这句代码运行结果为 str2:80.0,看到结果有点纳闷了，因为i=60；并且i<100;所以应该执行表达式2，应该打印出 80 才对啊，怎么会打印出 80.0为浮点数类型呢？\n其实三木运算符还有一个规则：\n\n若两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换，int转为long，long转为浮点型(float、double)等\n\n所以以上代码中，int类型的变量i会被转换为跟100.0同类型(浮点型)；看来三目运算是先执行类型检查->类型转换->执行运算\n\n>3、String str3 = String.valueOf(i < 100 ? 80L : 100.0);\n\n这句代码运行结果为 str3:80.0,此时结合第2行代码的分析可以这么判定，因为i为int型，并且表达式2(80L)中为Long型，理论上i应该会被自动转换为Long型，但是表达式3是浮点型，所以i最终会被转换为浮点型。\n\n>4、String str4 = String.valueOf(i < 100 ? \"80\" : 100.0);\n\n这句代码运行结果为 str4:80,因为表达式2为字符型，表达式3是浮点型，所以浮点型可以转换为字符型，因此打印的是 str4:80\n\n>5、String str5 = String.valueOf(i < 100 ? 80 : \"字符串\");\n\n这句代码运行结果为 str5:80；具体原因可以参照第4行代码的分析；但是在第4行代码分析的基础上，还需要再深入分析一下，表达式2和表达式3类型如果不能相互转换呢？其实三目运算符规则就是如果不能类型转换的话，就不做类型转换。\n\n>6、String str6 = String.valueOf(i < 100 ? true : 100.06);\n\n这句代码运行结果为 str6:true，再次验证三目运算符运算时，如果不能类型转换的话，就不做类型转换。\n\n**三、总结**\n\n>如果两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换规则，int转为long，long转为float/double等\n\n>如果两个操作数表达式类型不能相互转换，则不作转换；比如数值型都可以转换为字符串，但是字符串不能都转换为数值型。\n\n>使用三目运算时，如果使用不当，仅仅会发生自动的类型转换；语句执行流程永远不变。\n\n>在使用三目运算符时，表达式类型务必一致\n","source":"_posts/java三目运算符之规则-坑.md","raw":"---\ntitle: java三目运算符之规则(坑)\ndate: 2017-04-20 19:40:25\ncategories: java\ntags: java\n---\n平时开发过程中，判断操作除了使用if-else语句之外，三目运算符也经常被使用，然而在使用三目运算符过程中，我们异步都很老实，但是其使用规则则不曾了解，下面就了解一下它的使用规则。\n\n<!--more-->\n\n**一、描述**\n\n先了解一下三目运算符的语法：\n\n>表达式1?表达式2:表达式3;\n\n*当表达式1为true时，则执行表达式2；当表达式1为false时，则执行表达式3*\n\n先看下面的一段代码，分析一下执行结果：\n\n```java\n\n\t@Test\n\tpublic void Test(){\n\t\tint i = 60;\n\t\tString str1 = String.valueOf(i < 100 ? 80 : 100);\n\t\tSystem.out.println(\"str1:\"+str1);\n\t\t\n\t\tString str2 = String.valueOf(i < 100 ? 80 : 100.0);\n\t\tSystem.out.println(\"str2:\"+str2);\n\t\t\n\t\tString str3 = String.valueOf(i < 100 ? 80L : 100.0);\n\t\tSystem.out.println(\"str2:\"+str3);\n\t\t\n\t\tString str4 = String.valueOf(i < 100 ? \"80\" : 100.0);\n\t\tSystem.out.println(\"str2:\"+str4);\n\t\t\n\t\tString str5 = String.valueOf(i < 100 ? 80 : \"字符串\");\n\t\tSystem.out.println(\"str2:\"+str5);\n\n\t\tString str6 = String.valueOf(i < 100 ? true : 100.06);\n\t\tSystem.out.println(\"str6:\"+str6);\n\t}\n\n```\n\n运行之后的返回结果如下：\n\n```java\n\t\n\tstr1:80\n\n\tstr2:80.0\n\n\tstr3:80.0\n\n\tstr4:80\n\n\tstr5:80\n\n\tstr6:true\n\n```\n\n**二、分析**\n\n>1、String str1 = String.valueOf(i < 100 ? 80 : 100);\n\n这句代码运行结果为 str1:80,无容置疑，完全正确，也不需要过多解释了。\n\n>2、String str2 = String.valueOf(i < 100 ? 80 : 100.0);\n\n这句代码运行结果为 str2:80.0,看到结果有点纳闷了，因为i=60；并且i<100;所以应该执行表达式2，应该打印出 80 才对啊，怎么会打印出 80.0为浮点数类型呢？\n其实三木运算符还有一个规则：\n\n若两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换，int转为long，long转为浮点型(float、double)等\n\n所以以上代码中，int类型的变量i会被转换为跟100.0同类型(浮点型)；看来三目运算是先执行类型检查->类型转换->执行运算\n\n>3、String str3 = String.valueOf(i < 100 ? 80L : 100.0);\n\n这句代码运行结果为 str3:80.0,此时结合第2行代码的分析可以这么判定，因为i为int型，并且表达式2(80L)中为Long型，理论上i应该会被自动转换为Long型，但是表达式3是浮点型，所以i最终会被转换为浮点型。\n\n>4、String str4 = String.valueOf(i < 100 ? \"80\" : 100.0);\n\n这句代码运行结果为 str4:80,因为表达式2为字符型，表达式3是浮点型，所以浮点型可以转换为字符型，因此打印的是 str4:80\n\n>5、String str5 = String.valueOf(i < 100 ? 80 : \"字符串\");\n\n这句代码运行结果为 str5:80；具体原因可以参照第4行代码的分析；但是在第4行代码分析的基础上，还需要再深入分析一下，表达式2和表达式3类型如果不能相互转换呢？其实三目运算符规则就是如果不能类型转换的话，就不做类型转换。\n\n>6、String str6 = String.valueOf(i < 100 ? true : 100.06);\n\n这句代码运行结果为 str6:true，再次验证三目运算符运算时，如果不能类型转换的话，就不做类型转换。\n\n**三、总结**\n\n>如果两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换规则，int转为long，long转为float/double等\n\n>如果两个操作数表达式类型不能相互转换，则不作转换；比如数值型都可以转换为字符串，但是字符串不能都转换为数值型。\n\n>使用三目运算时，如果使用不当，仅仅会发生自动的类型转换；语句执行流程永远不变。\n\n>在使用三目运算符时，表达式类型务必一致\n","slug":"java三目运算符之规则-坑","published":1,"updated":"2018-07-08T09:37:48.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1piy002q30tzoronkhjl","content":"<p>平时开发过程中，判断操作除了使用if-else语句之外，三目运算符也经常被使用，然而在使用三目运算符过程中，我们异步都很老实，但是其使用规则则不曾了解，下面就了解一下它的使用规则。</p>\n<a id=\"more\"></a>\n<p><strong>一、描述</strong></p>\n<p>先了解一下三目运算符的语法：</p>\n<blockquote>\n<p>表达式1?表达式2:表达式3;</p>\n</blockquote>\n<p><em>当表达式1为true时，则执行表达式2；当表达式1为false时，则执行表达式3</em></p>\n<p>先看下面的一段代码，分析一下执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">60</span>;</div><div class=\"line\">\tString str1 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80</span> : <span class=\"number\">100</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str1:\"</span>+str1);</div><div class=\"line\">\t</div><div class=\"line\">\tString str2 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80</span> : <span class=\"number\">100.0</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str2);</div><div class=\"line\">\t</div><div class=\"line\">\tString str3 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80L</span> : <span class=\"number\">100.0</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str3);</div><div class=\"line\">\t</div><div class=\"line\">\tString str4 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"string\">\"80\"</span> : <span class=\"number\">100.0</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str4);</div><div class=\"line\">\t</div><div class=\"line\">\tString str5 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80</span> : <span class=\"string\">\"字符串\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str5);</div><div class=\"line\"></div><div class=\"line\">\tString str6 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"keyword\">true</span> : <span class=\"number\">100.06</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str6:\"</span>+str6);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行之后的返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">str1:<span class=\"number\">80</span></div><div class=\"line\"></div><div class=\"line\">str2:<span class=\"number\">80.0</span></div><div class=\"line\"></div><div class=\"line\">str3:<span class=\"number\">80.0</span></div><div class=\"line\"></div><div class=\"line\">str4:<span class=\"number\">80</span></div><div class=\"line\"></div><div class=\"line\">str5:<span class=\"number\">80</span></div><div class=\"line\"></div><div class=\"line\">str6:<span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p><strong>二、分析</strong></p>\n<blockquote>\n<p>1、String str1 = String.valueOf(i &lt; 100 ? 80 : 100);</p>\n</blockquote>\n<p>这句代码运行结果为 str1:80,无容置疑，完全正确，也不需要过多解释了。</p>\n<blockquote>\n<p>2、String str2 = String.valueOf(i &lt; 100 ? 80 : 100.0);</p>\n</blockquote>\n<p>这句代码运行结果为 str2:80.0,看到结果有点纳闷了，因为i=60；并且i&lt;100;所以应该执行表达式2，应该打印出 80 才对啊，怎么会打印出 80.0为浮点数类型呢？<br>其实三木运算符还有一个规则：</p>\n<p>若两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换，int转为long，long转为浮点型(float、double)等</p>\n<p>所以以上代码中，int类型的变量i会被转换为跟100.0同类型(浮点型)；看来三目运算是先执行类型检查-&gt;类型转换-&gt;执行运算</p>\n<blockquote>\n<p>3、String str3 = String.valueOf(i &lt; 100 ? 80L : 100.0);</p>\n</blockquote>\n<p>这句代码运行结果为 str3:80.0,此时结合第2行代码的分析可以这么判定，因为i为int型，并且表达式2(80L)中为Long型，理论上i应该会被自动转换为Long型，但是表达式3是浮点型，所以i最终会被转换为浮点型。</p>\n<blockquote>\n<p>4、String str4 = String.valueOf(i &lt; 100 ? “80” : 100.0);</p>\n</blockquote>\n<p>这句代码运行结果为 str4:80,因为表达式2为字符型，表达式3是浮点型，所以浮点型可以转换为字符型，因此打印的是 str4:80</p>\n<blockquote>\n<p>5、String str5 = String.valueOf(i &lt; 100 ? 80 : “字符串”);</p>\n</blockquote>\n<p>这句代码运行结果为 str5:80；具体原因可以参照第4行代码的分析；但是在第4行代码分析的基础上，还需要再深入分析一下，表达式2和表达式3类型如果不能相互转换呢？其实三目运算符规则就是如果不能类型转换的话，就不做类型转换。</p>\n<blockquote>\n<p>6、String str6 = String.valueOf(i &lt; 100 ? true : 100.06);</p>\n</blockquote>\n<p>这句代码运行结果为 str6:true，再次验证三目运算符运算时，如果不能类型转换的话，就不做类型转换。</p>\n<p><strong>三、总结</strong></p>\n<blockquote>\n<p>如果两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换规则，int转为long，long转为float/double等</p>\n<p>如果两个操作数表达式类型不能相互转换，则不作转换；比如数值型都可以转换为字符串，但是字符串不能都转换为数值型。</p>\n<p>使用三目运算时，如果使用不当，仅仅会发生自动的类型转换；语句执行流程永远不变。</p>\n<p>在使用三目运算符时，表达式类型务必一致</p>\n</blockquote>\n","excerpt":"<p>平时开发过程中，判断操作除了使用if-else语句之外，三目运算符也经常被使用，然而在使用三目运算符过程中，我们异步都很老实，但是其使用规则则不曾了解，下面就了解一下它的使用规则。</p>","more":"<p><strong>一、描述</strong></p>\n<p>先了解一下三目运算符的语法：</p>\n<blockquote>\n<p>表达式1?表达式2:表达式3;</p>\n</blockquote>\n<p><em>当表达式1为true时，则执行表达式2；当表达式1为false时，则执行表达式3</em></p>\n<p>先看下面的一段代码，分析一下执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">60</span>;</div><div class=\"line\">\tString str1 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80</span> : <span class=\"number\">100</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str1:\"</span>+str1);</div><div class=\"line\">\t</div><div class=\"line\">\tString str2 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80</span> : <span class=\"number\">100.0</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str2);</div><div class=\"line\">\t</div><div class=\"line\">\tString str3 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80L</span> : <span class=\"number\">100.0</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str3);</div><div class=\"line\">\t</div><div class=\"line\">\tString str4 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"string\">\"80\"</span> : <span class=\"number\">100.0</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str4);</div><div class=\"line\">\t</div><div class=\"line\">\tString str5 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"number\">80</span> : <span class=\"string\">\"字符串\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str2:\"</span>+str5);</div><div class=\"line\"></div><div class=\"line\">\tString str6 = String.valueOf(i &lt; <span class=\"number\">100</span> ? <span class=\"keyword\">true</span> : <span class=\"number\">100.06</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"str6:\"</span>+str6);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行之后的返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">str1:<span class=\"number\">80</span></div><div class=\"line\"></div><div class=\"line\">str2:<span class=\"number\">80.0</span></div><div class=\"line\"></div><div class=\"line\">str3:<span class=\"number\">80.0</span></div><div class=\"line\"></div><div class=\"line\">str4:<span class=\"number\">80</span></div><div class=\"line\"></div><div class=\"line\">str5:<span class=\"number\">80</span></div><div class=\"line\"></div><div class=\"line\">str6:<span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p><strong>二、分析</strong></p>\n<blockquote>\n<p>1、String str1 = String.valueOf(i &lt; 100 ? 80 : 100);</p>\n</blockquote>\n<p>这句代码运行结果为 str1:80,无容置疑，完全正确，也不需要过多解释了。</p>\n<blockquote>\n<p>2、String str2 = String.valueOf(i &lt; 100 ? 80 : 100.0);</p>\n</blockquote>\n<p>这句代码运行结果为 str2:80.0,看到结果有点纳闷了，因为i=60；并且i&lt;100;所以应该执行表达式2，应该打印出 80 才对啊，怎么会打印出 80.0为浮点数类型呢？<br>其实三木运算符还有一个规则：</p>\n<p>若两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换，int转为long，long转为浮点型(float、double)等</p>\n<p>所以以上代码中，int类型的变量i会被转换为跟100.0同类型(浮点型)；看来三目运算是先执行类型检查-&gt;类型转换-&gt;执行运算</p>\n<blockquote>\n<p>3、String str3 = String.valueOf(i &lt; 100 ? 80L : 100.0);</p>\n</blockquote>\n<p>这句代码运行结果为 str3:80.0,此时结合第2行代码的分析可以这么判定，因为i为int型，并且表达式2(80L)中为Long型，理论上i应该会被自动转换为Long型，但是表达式3是浮点型，所以i最终会被转换为浮点型。</p>\n<blockquote>\n<p>4、String str4 = String.valueOf(i &lt; 100 ? “80” : 100.0);</p>\n</blockquote>\n<p>这句代码运行结果为 str4:80,因为表达式2为字符型，表达式3是浮点型，所以浮点型可以转换为字符型，因此打印的是 str4:80</p>\n<blockquote>\n<p>5、String str5 = String.valueOf(i &lt; 100 ? 80 : “字符串”);</p>\n</blockquote>\n<p>这句代码运行结果为 str5:80；具体原因可以参照第4行代码的分析；但是在第4行代码分析的基础上，还需要再深入分析一下，表达式2和表达式3类型如果不能相互转换呢？其实三目运算符规则就是如果不能类型转换的话，就不做类型转换。</p>\n<blockquote>\n<p>6、String str6 = String.valueOf(i &lt; 100 ? true : 100.06);</p>\n</blockquote>\n<p>这句代码运行结果为 str6:true，再次验证三目运算符运算时，如果不能类型转换的话，就不做类型转换。</p>\n<p><strong>三、总结</strong></p>\n<blockquote>\n<p>如果两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换规则，int转为long，long转为float/double等</p>\n<p>如果两个操作数表达式类型不能相互转换，则不作转换；比如数值型都可以转换为字符串，但是字符串不能都转换为数值型。</p>\n<p>使用三目运算时，如果使用不当，仅仅会发生自动的类型转换；语句执行流程永远不变。</p>\n<p>在使用三目运算符时，表达式类型务必一致</p>\n</blockquote>"},{"title":"java使用jxl读取excel数据时特殊符号处理","date":"2016-08-17T03:40:01.000Z","_content":"\n使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。\n 未处理之前代码：\n```java\n     Workbook modelBook = Workbook.getWorkbook(input);\n\t Sheet sheet = modelBook.getSheet(0);\n```\n处理之后的代码：\n```java\n     WorkbookSettings setting = new WorkbookSettings();\n\t Locale locale = new Locale(\"zh\",\"CN\");\n\t setting.setLocale(locale);\n\t setting.setEncoding(\"ISO-8859-1\");\n\t Workbook modelBook = Workbook.getWorkbook(input,setting);\n```\n注：处理之后的代码片段中前4行代码段，用来解决乱码问题！\n\n","source":"_posts/java使用jxl读取excel数据时特殊符号处理.md","raw":"---\ntitle: java使用jxl读取excel数据时特殊符号处理\ndate: 2016-08-17 11:40:01\ncategories: java\ntags: jxl\n---\n\n使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。\n 未处理之前代码：\n```java\n     Workbook modelBook = Workbook.getWorkbook(input);\n\t Sheet sheet = modelBook.getSheet(0);\n```\n处理之后的代码：\n```java\n     WorkbookSettings setting = new WorkbookSettings();\n\t Locale locale = new Locale(\"zh\",\"CN\");\n\t setting.setLocale(locale);\n\t setting.setEncoding(\"ISO-8859-1\");\n\t Workbook modelBook = Workbook.getWorkbook(input,setting);\n```\n注：处理之后的代码片段中前4行代码段，用来解决乱码问题！\n\n","slug":"java使用jxl读取excel数据时特殊符号处理","published":1,"updated":"2018-07-08T09:37:48.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj0002u30tzavw7t84x","content":"<p>使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。<br> 未处理之前代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   Workbook modelBook = Workbook.getWorkbook(input);</div><div class=\"line\">Sheet sheet = modelBook.getSheet(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>处理之后的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   WorkbookSettings setting = <span class=\"keyword\">new</span> WorkbookSettings();</div><div class=\"line\">Locale locale = <span class=\"keyword\">new</span> Locale(<span class=\"string\">\"zh\"</span>,<span class=\"string\">\"CN\"</span>);</div><div class=\"line\">setting.setLocale(locale);</div><div class=\"line\">setting.setEncoding(<span class=\"string\">\"ISO-8859-1\"</span>);</div><div class=\"line\">Workbook modelBook = Workbook.getWorkbook(input,setting);</div></pre></td></tr></table></figure></p>\n<p>注：处理之后的代码片段中前4行代码段，用来解决乱码问题！</p>\n","excerpt":"","more":"<p>使用JXL读取Excel中数据时，如果Excel中的单元格中有M1.5×6这样的值时，读取数据时，不能识别×，或者为乱码（？）。<br> 未处理之前代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   Workbook modelBook = Workbook.getWorkbook(input);</div><div class=\"line\">Sheet sheet = modelBook.getSheet(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>处理之后的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   WorkbookSettings setting = <span class=\"keyword\">new</span> WorkbookSettings();</div><div class=\"line\">Locale locale = <span class=\"keyword\">new</span> Locale(<span class=\"string\">\"zh\"</span>,<span class=\"string\">\"CN\"</span>);</div><div class=\"line\">setting.setLocale(locale);</div><div class=\"line\">setting.setEncoding(<span class=\"string\">\"ISO-8859-1\"</span>);</div><div class=\"line\">Workbook modelBook = Workbook.getWorkbook(input,setting);</div></pre></td></tr></table></figure></p>\n<p>注：处理之后的代码片段中前4行代码段，用来解决乱码问题！</p>\n"},{"title":"java和javaScript代码进行交互初探一","date":"2017-04-22T08:34:17.000Z","_content":"开发这么长时间，一直的开发思想模式就是java负责服务器端(后台)运行，js负责前端(前台)交互体验，两个语言没有任何代码级别的交互；但其实还有另一种开发模式，就是java和javascript混合开发，前后端不那么分离；即java代码可以直接调用javascript文件中定义的函数；javascript中定义的函数可以读取java代码中定义的变量数据；感觉有点意思！其实这种开发模式个人觉得也很有价值，比如下面的场景：\n\n<!--more-->\n\n>用户在浏览一个商品，突然这个商品由于某些原因要求进行打折处理，比如打8折，即需要把该商品的价格乘以80%；\n>\n>因为上面说的打8折不是固定的，有可能一会打8折，一会又打5折，所以需要把这个信息在一个地方维护起来，那么我们就把打折规则封装到javascript文件定义的函数中\n>\n>java代码获取该商品的价格后，直接调用javascript文件中定义的打折规则函数，重新计算商品价格即可\n>\n\n**一、编写javascript文件**\n\n>1、在本地磁盘上新建一个js文件,比如在D:\\maps.js\n>\n>2、在js文件中定义一个商品对应的打折函数\n\n```java\n\t\n\t//该函数非常简单，就是把商品价格打8折\n\tfunction discount(money){\n      return money * 0.8;\n    }\n\n```\n\n**二、编写java代码**\n\n>1、新建一个java类文件，名称随便起\n> \n>2、在java文件中新建一个main方法，用来写测试代码\n>\n```java\n\t\n\t/**\n\t * 商品消费方法\n\t * @throws ScriptException \n\t * @throws FileNotFoundException \n\t * @throws NoSuchMethodException \n\t */\n\tpublic static void spend(int money) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\t//获取javascript执行引擎\n\t\tScriptEngine engine = new ScriptEngineManager().getEngineByName(\"javascript\"); \n        System.out.println(\"该商品价格：\"+money);\n         //装载待执行的Js代码文件\n        engine.eval(new FileReader(\"D:/maps.js\"));\n         //先判断是否可调用方法\n        if (engine instanceof Invocable) {\n             Invocable in = (Invocable) engine;\n             // 执行Js中的discount()函数\n             Double result = (Double) in.invokeFunction(\"discount\", money);\n             System.out.println(\"打折后的商品价格构是：\" + result.intValue());\n        }\n\t}\n\t\n\tpublic static void main(String[] args) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\tspend(100);\n\t}\n\n```\n\n>上面代码输出结果：\n>\n>该商品价格：100\n>\n>打折后的商品价格是：80\n\n\n**三、修改javascript文件**\n\n>1、修改maps.js文件中的打折函数，在函数中新增使用一个java代码中定义的变量\n>\n```java\n\n\t//说白了，就是把js函数中写死的百分比改成了重java代码中获取\n\tfunction discount(money){\n     \treturn money * dis;\n\t}\n\t\n```\n\n**四、修改java代码**\n\n```java\n\n\t/**\n\t * 商品消费方法\n\t * @throws ScriptException \n\t * @throws FileNotFoundException \n\t * @throws NoSuchMethodException \n\t */\n\tpublic static void spend(int money) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\t//获取javascript执行引擎\n\t\tScriptEngine engine = new ScriptEngineManager().getEngineByName(\"javascript\"); \n\t\t//定义js函数中使用的折扣变量\n\t\tBindings bind = engine.createBindings();\n\t\tbind.put(\"dis\", 0.9);\n\t\tengine.setBindings(bind, ScriptContext.ENGINE_SCOPE);\n        System.out.println(\"该商品价格：\"+money);\n         //装载待执行的Js代码文件\n        engine.eval(new FileReader(\"D:/maps.js\"));\n         //先判断是否可调用方法\n        if (engine instanceof Invocable) {\n             Invocable in = (Invocable) engine;\n             // 执行Js中的discount()函数\n             Double result = (Double) in.invokeFunction(\"discount\", money);\n             System.out.println(\"打折后的商品价格是：\" + result.intValue());\n        }\n\t}\n\t\n\tpublic static void main(String[] args) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\tspend(100);\n\t}\n\n\n```\n\n>其实上面java代码中只增加了如下代码\n>\n>Bindings bind = engine.createBindings();//创建一个js执行引擎的数据绑定器\n>\n>bind.put(\"dis\", 0.9); //定义dis变量值\n>\n>engine.setBindings(bind, ScriptContext.ENGINE_SCOPE);\n> \n\n上面的例子实现了简单的java代码和js代码交互功能，这样其实我们可以实现另一个场景，不需要重启服务器，就可以实时控制扩展和变更后台运行的一些灵活的业务规则。\n","source":"_posts/java和javaScript代码进行交互初探一.md","raw":"---\ntitle: java和javaScript代码进行交互初探一\ndate: 2017-04-22 16:34:17\ncategories: java\ntags: java\n---\n开发这么长时间，一直的开发思想模式就是java负责服务器端(后台)运行，js负责前端(前台)交互体验，两个语言没有任何代码级别的交互；但其实还有另一种开发模式，就是java和javascript混合开发，前后端不那么分离；即java代码可以直接调用javascript文件中定义的函数；javascript中定义的函数可以读取java代码中定义的变量数据；感觉有点意思！其实这种开发模式个人觉得也很有价值，比如下面的场景：\n\n<!--more-->\n\n>用户在浏览一个商品，突然这个商品由于某些原因要求进行打折处理，比如打8折，即需要把该商品的价格乘以80%；\n>\n>因为上面说的打8折不是固定的，有可能一会打8折，一会又打5折，所以需要把这个信息在一个地方维护起来，那么我们就把打折规则封装到javascript文件定义的函数中\n>\n>java代码获取该商品的价格后，直接调用javascript文件中定义的打折规则函数，重新计算商品价格即可\n>\n\n**一、编写javascript文件**\n\n>1、在本地磁盘上新建一个js文件,比如在D:\\maps.js\n>\n>2、在js文件中定义一个商品对应的打折函数\n\n```java\n\t\n\t//该函数非常简单，就是把商品价格打8折\n\tfunction discount(money){\n      return money * 0.8;\n    }\n\n```\n\n**二、编写java代码**\n\n>1、新建一个java类文件，名称随便起\n> \n>2、在java文件中新建一个main方法，用来写测试代码\n>\n```java\n\t\n\t/**\n\t * 商品消费方法\n\t * @throws ScriptException \n\t * @throws FileNotFoundException \n\t * @throws NoSuchMethodException \n\t */\n\tpublic static void spend(int money) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\t//获取javascript执行引擎\n\t\tScriptEngine engine = new ScriptEngineManager().getEngineByName(\"javascript\"); \n        System.out.println(\"该商品价格：\"+money);\n         //装载待执行的Js代码文件\n        engine.eval(new FileReader(\"D:/maps.js\"));\n         //先判断是否可调用方法\n        if (engine instanceof Invocable) {\n             Invocable in = (Invocable) engine;\n             // 执行Js中的discount()函数\n             Double result = (Double) in.invokeFunction(\"discount\", money);\n             System.out.println(\"打折后的商品价格构是：\" + result.intValue());\n        }\n\t}\n\t\n\tpublic static void main(String[] args) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\tspend(100);\n\t}\n\n```\n\n>上面代码输出结果：\n>\n>该商品价格：100\n>\n>打折后的商品价格是：80\n\n\n**三、修改javascript文件**\n\n>1、修改maps.js文件中的打折函数，在函数中新增使用一个java代码中定义的变量\n>\n```java\n\n\t//说白了，就是把js函数中写死的百分比改成了重java代码中获取\n\tfunction discount(money){\n     \treturn money * dis;\n\t}\n\t\n```\n\n**四、修改java代码**\n\n```java\n\n\t/**\n\t * 商品消费方法\n\t * @throws ScriptException \n\t * @throws FileNotFoundException \n\t * @throws NoSuchMethodException \n\t */\n\tpublic static void spend(int money) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\t//获取javascript执行引擎\n\t\tScriptEngine engine = new ScriptEngineManager().getEngineByName(\"javascript\"); \n\t\t//定义js函数中使用的折扣变量\n\t\tBindings bind = engine.createBindings();\n\t\tbind.put(\"dis\", 0.9);\n\t\tengine.setBindings(bind, ScriptContext.ENGINE_SCOPE);\n        System.out.println(\"该商品价格：\"+money);\n         //装载待执行的Js代码文件\n        engine.eval(new FileReader(\"D:/maps.js\"));\n         //先判断是否可调用方法\n        if (engine instanceof Invocable) {\n             Invocable in = (Invocable) engine;\n             // 执行Js中的discount()函数\n             Double result = (Double) in.invokeFunction(\"discount\", money);\n             System.out.println(\"打折后的商品价格是：\" + result.intValue());\n        }\n\t}\n\t\n\tpublic static void main(String[] args) throws FileNotFoundException, ScriptException, NoSuchMethodException{\n\t\tspend(100);\n\t}\n\n\n```\n\n>其实上面java代码中只增加了如下代码\n>\n>Bindings bind = engine.createBindings();//创建一个js执行引擎的数据绑定器\n>\n>bind.put(\"dis\", 0.9); //定义dis变量值\n>\n>engine.setBindings(bind, ScriptContext.ENGINE_SCOPE);\n> \n\n上面的例子实现了简单的java代码和js代码交互功能，这样其实我们可以实现另一个场景，不需要重启服务器，就可以实时控制扩展和变更后台运行的一些灵活的业务规则。\n","slug":"java和javaScript代码进行交互初探一","published":1,"updated":"2018-07-08T09:37:48.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj2002y30tzba20m22r","content":"<p>开发这么长时间，一直的开发思想模式就是java负责服务器端(后台)运行，js负责前端(前台)交互体验，两个语言没有任何代码级别的交互；但其实还有另一种开发模式，就是java和javascript混合开发，前后端不那么分离；即java代码可以直接调用javascript文件中定义的函数；javascript中定义的函数可以读取java代码中定义的变量数据；感觉有点意思！其实这种开发模式个人觉得也很有价值，比如下面的场景：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>用户在浏览一个商品，突然这个商品由于某些原因要求进行打折处理，比如打8折，即需要把该商品的价格乘以80%；</p>\n<p>因为上面说的打8折不是固定的，有可能一会打8折，一会又打5折，所以需要把这个信息在一个地方维护起来，那么我们就把打折规则封装到javascript文件定义的函数中</p>\n<p>java代码获取该商品的价格后，直接调用javascript文件中定义的打折规则函数，重新计算商品价格即可</p>\n</blockquote>\n<p><strong>一、编写javascript文件</strong></p>\n<blockquote>\n<p>1、在本地磁盘上新建一个js文件,比如在D:\\maps.js</p>\n<p>2、在js文件中定义一个商品对应的打折函数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//该函数非常简单，就是把商品价格打8折</span></div><div class=\"line\"><span class=\"function\">function <span class=\"title\">discount</span><span class=\"params\">(money)</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> money * <span class=\"number\">0.8</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><strong>二、编写java代码</strong></p>\n<blockquote>\n<p>1、新建一个java类文件，名称随便起</p>\n<p>2、在java文件中新建一个main方法，用来写测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 商品消费方法</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ScriptException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> FileNotFoundException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NoSuchMethodException </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">spend</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//获取javascript执行引擎</span></div><div class=\"line\">\tScriptEngine engine = <span class=\"keyword\">new</span> ScriptEngineManager().getEngineByName(<span class=\"string\">\"javascript\"</span>); </div><div class=\"line\">       System.out.println(<span class=\"string\">\"该商品价格：\"</span>+money);</div><div class=\"line\">        <span class=\"comment\">//装载待执行的Js代码文件</span></div><div class=\"line\">       engine.eval(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"D:/maps.js\"</span>));</div><div class=\"line\">        <span class=\"comment\">//先判断是否可调用方法</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (engine <span class=\"keyword\">instanceof</span> Invocable) &#123;</div><div class=\"line\">            Invocable in = (Invocable) engine;</div><div class=\"line\">            <span class=\"comment\">// 执行Js中的discount()函数</span></div><div class=\"line\">            Double result = (Double) in.invokeFunction(<span class=\"string\">\"discount\"</span>, money);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"打折后的商品价格构是：\"</span> + result.intValue());</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\tspend(<span class=\"number\">100</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码输出结果：</p>\n<p>该商品价格：100</p>\n<p>打折后的商品价格是：80</p>\n</blockquote>\n<p><strong>三、修改javascript文件</strong></p>\n<blockquote>\n<p>1、修改maps.js文件中的打折函数，在函数中新增使用一个java代码中定义的变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//说白了，就是把js函数中写死的百分比改成了重java代码中获取</span></div><div class=\"line\"><span class=\"function\">function <span class=\"title\">discount</span><span class=\"params\">(money)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> money * dis;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>四、修改java代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 商品消费方法</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ScriptException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> FileNotFoundException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NoSuchMethodException </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">spend</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//获取javascript执行引擎</span></div><div class=\"line\">\tScriptEngine engine = <span class=\"keyword\">new</span> ScriptEngineManager().getEngineByName(<span class=\"string\">\"javascript\"</span>); </div><div class=\"line\">\t<span class=\"comment\">//定义js函数中使用的折扣变量</span></div><div class=\"line\">\tBindings bind = engine.createBindings();</div><div class=\"line\">\tbind.put(<span class=\"string\">\"dis\"</span>, <span class=\"number\">0.9</span>);</div><div class=\"line\">\tengine.setBindings(bind, ScriptContext.ENGINE_SCOPE);</div><div class=\"line\">       System.out.println(<span class=\"string\">\"该商品价格：\"</span>+money);</div><div class=\"line\">        <span class=\"comment\">//装载待执行的Js代码文件</span></div><div class=\"line\">       engine.eval(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"D:/maps.js\"</span>));</div><div class=\"line\">        <span class=\"comment\">//先判断是否可调用方法</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (engine <span class=\"keyword\">instanceof</span> Invocable) &#123;</div><div class=\"line\">            Invocable in = (Invocable) engine;</div><div class=\"line\">            <span class=\"comment\">// 执行Js中的discount()函数</span></div><div class=\"line\">            Double result = (Double) in.invokeFunction(<span class=\"string\">\"discount\"</span>, money);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"打折后的商品价格是：\"</span> + result.intValue());</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\tspend(<span class=\"number\">100</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其实上面java代码中只增加了如下代码</p>\n<p>Bindings bind = engine.createBindings();//创建一个js执行引擎的数据绑定器</p>\n<p>bind.put(“dis”, 0.9); //定义dis变量值</p>\n<p>engine.setBindings(bind, ScriptContext.ENGINE_SCOPE);</p>\n</blockquote>\n<p>上面的例子实现了简单的java代码和js代码交互功能，这样其实我们可以实现另一个场景，不需要重启服务器，就可以实时控制扩展和变更后台运行的一些灵活的业务规则。</p>\n","excerpt":"<p>开发这么长时间，一直的开发思想模式就是java负责服务器端(后台)运行，js负责前端(前台)交互体验，两个语言没有任何代码级别的交互；但其实还有另一种开发模式，就是java和javascript混合开发，前后端不那么分离；即java代码可以直接调用javascript文件中定义的函数；javascript中定义的函数可以读取java代码中定义的变量数据；感觉有点意思！其实这种开发模式个人觉得也很有价值，比如下面的场景：</p>","more":"<blockquote>\n<p>用户在浏览一个商品，突然这个商品由于某些原因要求进行打折处理，比如打8折，即需要把该商品的价格乘以80%；</p>\n<p>因为上面说的打8折不是固定的，有可能一会打8折，一会又打5折，所以需要把这个信息在一个地方维护起来，那么我们就把打折规则封装到javascript文件定义的函数中</p>\n<p>java代码获取该商品的价格后，直接调用javascript文件中定义的打折规则函数，重新计算商品价格即可</p>\n</blockquote>\n<p><strong>一、编写javascript文件</strong></p>\n<blockquote>\n<p>1、在本地磁盘上新建一个js文件,比如在D:\\maps.js</p>\n<p>2、在js文件中定义一个商品对应的打折函数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//该函数非常简单，就是把商品价格打8折</span></div><div class=\"line\"><span class=\"function\">function <span class=\"title\">discount</span><span class=\"params\">(money)</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> money * <span class=\"number\">0.8</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><strong>二、编写java代码</strong></p>\n<blockquote>\n<p>1、新建一个java类文件，名称随便起</p>\n<p>2、在java文件中新建一个main方法，用来写测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 商品消费方法</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ScriptException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> FileNotFoundException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NoSuchMethodException </div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">spend</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//获取javascript执行引擎</span></div><div class=\"line\">\tScriptEngine engine = <span class=\"keyword\">new</span> ScriptEngineManager().getEngineByName(<span class=\"string\">\"javascript\"</span>); </div><div class=\"line\">       System.out.println(<span class=\"string\">\"该商品价格：\"</span>+money);</div><div class=\"line\">        <span class=\"comment\">//装载待执行的Js代码文件</span></div><div class=\"line\">       engine.eval(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"D:/maps.js\"</span>));</div><div class=\"line\">        <span class=\"comment\">//先判断是否可调用方法</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (engine <span class=\"keyword\">instanceof</span> Invocable) &#123;</div><div class=\"line\">            Invocable in = (Invocable) engine;</div><div class=\"line\">            <span class=\"comment\">// 执行Js中的discount()函数</span></div><div class=\"line\">            Double result = (Double) in.invokeFunction(<span class=\"string\">\"discount\"</span>, money);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"打折后的商品价格构是：\"</span> + result.intValue());</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\tspend(<span class=\"number\">100</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码输出结果：</p>\n<p>该商品价格：100</p>\n<p>打折后的商品价格是：80</p>\n</blockquote>\n<p><strong>三、修改javascript文件</strong></p>\n<blockquote>\n<p>1、修改maps.js文件中的打折函数，在函数中新增使用一个java代码中定义的变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//说白了，就是把js函数中写死的百分比改成了重java代码中获取</span></div><div class=\"line\"><span class=\"function\">function <span class=\"title\">discount</span><span class=\"params\">(money)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> money * dis;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>四、修改java代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 商品消费方法</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ScriptException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> FileNotFoundException </div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NoSuchMethodException </div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">spend</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//获取javascript执行引擎</span></div><div class=\"line\">\tScriptEngine engine = <span class=\"keyword\">new</span> ScriptEngineManager().getEngineByName(<span class=\"string\">\"javascript\"</span>); </div><div class=\"line\">\t<span class=\"comment\">//定义js函数中使用的折扣变量</span></div><div class=\"line\">\tBindings bind = engine.createBindings();</div><div class=\"line\">\tbind.put(<span class=\"string\">\"dis\"</span>, <span class=\"number\">0.9</span>);</div><div class=\"line\">\tengine.setBindings(bind, ScriptContext.ENGINE_SCOPE);</div><div class=\"line\">       System.out.println(<span class=\"string\">\"该商品价格：\"</span>+money);</div><div class=\"line\">        <span class=\"comment\">//装载待执行的Js代码文件</span></div><div class=\"line\">       engine.eval(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"D:/maps.js\"</span>));</div><div class=\"line\">        <span class=\"comment\">//先判断是否可调用方法</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (engine <span class=\"keyword\">instanceof</span> Invocable) &#123;</div><div class=\"line\">            Invocable in = (Invocable) engine;</div><div class=\"line\">            <span class=\"comment\">// 执行Js中的discount()函数</span></div><div class=\"line\">            Double result = (Double) in.invokeFunction(<span class=\"string\">\"discount\"</span>, money);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"打折后的商品价格是：\"</span> + result.intValue());</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, ScriptException, NoSuchMethodException</span>&#123;</div><div class=\"line\">\tspend(<span class=\"number\">100</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其实上面java代码中只增加了如下代码</p>\n<p>Bindings bind = engine.createBindings();//创建一个js执行引擎的数据绑定器</p>\n<p>bind.put(“dis”, 0.9); //定义dis变量值</p>\n<p>engine.setBindings(bind, ScriptContext.ENGINE_SCOPE);</p>\n</blockquote>\n<p>上面的例子实现了简单的java代码和js代码交互功能，这样其实我们可以实现另一个场景，不需要重启服务器，就可以实时控制扩展和变更后台运行的一些灵活的业务规则。</p>"},{"title":"java定时任务Timer小试一下","date":"2016-09-14T07:16:26.000Z","_content":"java定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。\n\n<!--more-->\n\n### 一、我们定义一个需要定时执行的任务的类\n```java\n\tpackage test; \n\timport java.util.Timer; \n\tpublic class TimeTaskTest {\n\t\tpublic static void main(String[] args){ \n\t\t\tTimer timer = new Timer(); \n\t\t\ttimer.schedule(new Task(), 60 * 1000); \n\t\t} \n\t} \n```\n\n注：我们的定时任务，就在这个类的main函数里执行\n\n1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务\n\n2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，\npublic void schedule(TimerTask task,long delay) \n\n首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：\n\n```java\n\tpackage test; \n\n\timport java.util.TimerTask; \n\n\tpublic class Task extends TimerTask { \n\n\t\tpublic void run(){ \n\t\t\tSystem.out.println(\"定时任务执行\"); \n\t\t} \n\t} \n```\n我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。\n\n第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，\n所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。\n\n### 二、循环执行任务\n\n循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，\n这样就用到了schedule方法的是另一个重载函数\n```java\n\tpublic void schedule(TimerTask task,long delay,long period) \t\n```\n\n前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），\n比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。\n\n### 三、定时\n\n指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，\n就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：\n\n```java\n\tpublic void schedule(TimerTask task,Date time) \n```\n比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。\n有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。\n\nschedule最后一个重载的方法是\n```java\n\tpublic void schedule(TimerTask task,Date firstTime,long period) \n```\n### 四、扩展\n\nj2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧\n\n","source":"_posts/java定时任务Timer小试一下.md","raw":"---\ntitle: java定时任务Timer小试一下\ndate: 2016-09-14 15:16:26\ncategories: java\ntags: java定时任务\n---\njava定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。\n\n<!--more-->\n\n### 一、我们定义一个需要定时执行的任务的类\n```java\n\tpackage test; \n\timport java.util.Timer; \n\tpublic class TimeTaskTest {\n\t\tpublic static void main(String[] args){ \n\t\t\tTimer timer = new Timer(); \n\t\t\ttimer.schedule(new Task(), 60 * 1000); \n\t\t} \n\t} \n```\n\n注：我们的定时任务，就在这个类的main函数里执行\n\n1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务\n\n2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，\npublic void schedule(TimerTask task,long delay) \n\n首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：\n\n```java\n\tpackage test; \n\n\timport java.util.TimerTask; \n\n\tpublic class Task extends TimerTask { \n\n\t\tpublic void run(){ \n\t\t\tSystem.out.println(\"定时任务执行\"); \n\t\t} \n\t} \n```\n我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。\n\n第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，\n所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。\n\n### 二、循环执行任务\n\n循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，\n这样就用到了schedule方法的是另一个重载函数\n```java\n\tpublic void schedule(TimerTask task,long delay,long period) \t\n```\n\n前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），\n比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。\n\n### 三、定时\n\n指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，\n就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：\n\n```java\n\tpublic void schedule(TimerTask task,Date time) \n```\n比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。\n有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。\n\nschedule最后一个重载的方法是\n```java\n\tpublic void schedule(TimerTask task,Date firstTime,long period) \n```\n### 四、扩展\n\nj2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧\n\n","slug":"java定时任务Timer小试一下","published":1,"updated":"2018-07-08T09:37:48.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj3003230tz9ohcy6t5","content":"<p>java定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、我们定义一个需要定时执行的任务的类\"><a href=\"#一、我们定义一个需要定时执行的任务的类\" class=\"headerlink\" title=\"一、我们定义一个需要定时执行的任务的类\"></a>一、我们定义一个需要定时执行的任务的类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Timer; </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeTaskTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </div><div class=\"line\">\t\tTimer timer = <span class=\"keyword\">new</span> Timer(); </div><div class=\"line\">\t\ttimer.schedule(<span class=\"keyword\">new</span> Task(), <span class=\"number\">60</span> * <span class=\"number\">1000</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：我们的定时任务，就在这个类的main函数里执行</p>\n<p>1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务</p>\n<p>2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，<br>public void schedule(TimerTask task,long delay) </p>\n<p>首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span> </span>&#123; </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123; </div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"定时任务执行\"</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。</p>\n<p>第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，<br>所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。</p>\n<h3 id=\"二、循环执行任务\"><a href=\"#二、循环执行任务\" class=\"headerlink\" title=\"二、循环执行任务\"></a>二、循环执行任务</h3><p>循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，<br>这样就用到了schedule方法的是另一个重载函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,<span class=\"keyword\">long</span> delay,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<p>前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），<br>比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。</p>\n<h3 id=\"三、定时\"><a href=\"#三、定时\" class=\"headerlink\" title=\"三、定时\"></a>三、定时</h3><p>指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，<br>就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date time)</span></span></div></pre></td></tr></table></figure>\n<p>比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。<br>有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。</p>\n<p>schedule最后一个重载的方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date firstTime,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"四、扩展\"><a href=\"#四、扩展\" class=\"headerlink\" title=\"四、扩展\"></a>四、扩展</h3><p>j2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧</p>\n","excerpt":"<p>java定时任务Timer 关于定时任务，似乎跟时间操作的联系并不是很大，但是前面既然提到了定时任务，索性在这里一起解决了。设置定时任务很简单，用Timer类就搞定了。</p>","more":"<h3 id=\"一、我们定义一个需要定时执行的任务的类\"><a href=\"#一、我们定义一个需要定时执行的任务的类\" class=\"headerlink\" title=\"一、我们定义一个需要定时执行的任务的类\"></a>一、我们定义一个需要定时执行的任务的类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Timer; </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeTaskTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </div><div class=\"line\">\t\tTimer timer = <span class=\"keyword\">new</span> Timer(); </div><div class=\"line\">\t\ttimer.schedule(<span class=\"keyword\">new</span> Task(), <span class=\"number\">60</span> * <span class=\"number\">1000</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：我们的定时任务，就在这个类的main函数里执行</p>\n<p>1、上面的代码实现了这样一个功能，当TimeTask程序启动以后，过一分钟后执行某项任务</p>\n<p>2、很简单吧：先new一个Timer对象，然后调用它的schedule方法，这个方法有四个重载的方法，这里我们用其中一个，<br>public void schedule(TimerTask task,long delay) </p>\n<p>首先，第一个参数第一个参数就是我们要执行的任务。这是一个TimerTask对象，确切点说是一个实现TimerTask的类的对象，因为TimerTask是个抽象类。上面的代码里 面，Task就是我们自己定义的实现了TimerTask的类，因为是在同一个包里面，所以没有显性的import进来。Task类的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> test; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span> </span>&#123; </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123; </div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"定时任务执行\"</span>); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们的Task必须实现TimerTask的方法run，要执行的任务就在这个run方法里面，这里，我们只让它往控制台打一行字。</p>\n<p>第二个参数第二个参数是一个long型的值。这是延迟的时间，就是从程序开始以后，再过多少时间来执行定时任务。这个long型的值是毫秒数，<br>所以前面我们的程序里面，过一分钟后执行用的参数值就是 60 * 1000。</p>\n<h3 id=\"二、循环执行任务\"><a href=\"#二、循环执行任务\" class=\"headerlink\" title=\"二、循环执行任务\"></a>二、循环执行任务</h3><p>循环执行设置定时任务的时候，往往我们需要重复的执行这样任务，每隔一段时间执行一次，而上面的方法是只执行一次的，<br>这样就用到了schedule方法的是另一个重载函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,<span class=\"keyword\">long</span> delay,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<p>前两个参数就不用说什么了，最后一个参数就是间隔的时间，又是个long型的毫秒数（看来java里涉及到时间的，跟这个long是脱不了干系了），<br>比如我们希望上面的任务从第一次执行后，每个一分钟执行一次，第三个参数值赋60 * 1000就ok了。</p>\n<h3 id=\"三、定时\"><a href=\"#三、定时\" class=\"headerlink\" title=\"三、定时\"></a>三、定时</h3><p>指定执行时间既然号称是定时任务，我们肯定希望由我们来指定任务指定的时间，显然上面的方法就不中用了，因为我们不知道程序什么时间开始运行，<br>就没办法确定需要延时多少。没关系，schedule四个重载的方法还没用完呢。用下面这个就OK了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date time)</span></span></div></pre></td></tr></table></figure>\n<p>比如，我们希望定时任务2006年7月2日0时0分执行，只要给第二个参数传一个时间设置为2006年7月2日0时0分的Date对象就可以了。<br>有一种情况是，可能我们的程序启动的时候，已经是2006年7月3日了，这样的话，程序一启动，定时任务就开始执行了。</p>\n<p>schedule最后一个重载的方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task,Date firstTime,<span class=\"keyword\">long</span> period)</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"四、扩展\"><a href=\"#四、扩展\" class=\"headerlink\" title=\"四、扩展\"></a>四、扩展</h3><p>j2ee中的定时任务在实际的项目中，往往定时任务需要对web工程中的资源进行操作，这样一来，用上面的单个程序的方式可能就有点力不从心了，因为很多web工程的资源它操作不到。解决的办法是，使用Servlet，把执行定时任务的那些代码放到Servlet的init()函数里就可以了，这个easy，就没有必要再写示例代码了吧</p>"},{"title":"java接收oracle中clob类型字段值","date":"2016-07-06T08:16:33.000Z","_content":"oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？\n \n    Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\n    Reader is = columnContentClob.getCharacterStream();//用reader接收\n    BufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\n    String columnContent = bf.readLine();//读取大文本的内容\n\n**实例**\n\n\tString driver = \"oracle.jdbc.OracleDriver\";\n    String url = \"jdbc:oracle:thin:@127.0.0.1:1521/databaseName\";\n    String username = \"username\";\n    String password = \"password\";\n    Class.forName(driver);\n    Connection conn = DriverManager.getConnection(url, username, password);\n\n \tResultSet rs = null;\n    PreparedStatement pstmt = null;\n    String query = \"SELECT description FROM mytable WHERE id = ?\";\n    try {\n      conn = getConnection();\n      pstmt = conn.prepareStatement(query);\n      pstmt.setInt(1, id);\n      rs = pstmt.executeQuery();\n      rs.next();\n      Clob clob = rs.getClob(1);//rs.getClob(\"description\");\n      \n    } finally {\n      rs.close();\n      pstmt.close();\n      conn.close();\n    }","source":"_posts/java接收oracle中clob类型字段值.md","raw":"---\ntitle: java接收oracle中clob类型字段值\ndate: 2016-07-06 16:16:33\ncategories: java\ntags: java接收clob字段\n---\noracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？\n \n    Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\n    Reader is = columnContentClob.getCharacterStream();//用reader接收\n    BufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\n    String columnContent = bf.readLine();//读取大文本的内容\n\n**实例**\n\n\tString driver = \"oracle.jdbc.OracleDriver\";\n    String url = \"jdbc:oracle:thin:@127.0.0.1:1521/databaseName\";\n    String username = \"username\";\n    String password = \"password\";\n    Class.forName(driver);\n    Connection conn = DriverManager.getConnection(url, username, password);\n\n \tResultSet rs = null;\n    PreparedStatement pstmt = null;\n    String query = \"SELECT description FROM mytable WHERE id = ?\";\n    try {\n      conn = getConnection();\n      pstmt = conn.prepareStatement(query);\n      pstmt.setInt(1, id);\n      rs = pstmt.executeQuery();\n      rs.next();\n      Clob clob = rs.getClob(1);//rs.getClob(\"description\");\n      \n    } finally {\n      rs.close();\n      pstmt.close();\n      conn.close();\n    }","slug":"java接收oracle中clob类型字段值","published":1,"updated":"2018-07-08T09:37:48.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj5003630tz4p9uv8kk","content":"<p>oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？</p>\n<pre><code>Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\nReader is = columnContentClob.getCharacterStream();//用reader接收\nBufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\nString columnContent = bf.readLine();//读取大文本的内容\n</code></pre><p><strong>实例</strong></p>\n<pre><code>String driver = &quot;oracle.jdbc.OracleDriver&quot;;\nString url = &quot;jdbc:oracle:thin:@127.0.0.1:1521/databaseName&quot;;\nString username = &quot;username&quot;;\nString password = &quot;password&quot;;\nClass.forName(driver);\nConnection conn = DriverManager.getConnection(url, username, password);\n\n ResultSet rs = null;\nPreparedStatement pstmt = null;\nString query = &quot;SELECT description FROM mytable WHERE id = ?&quot;;\ntry {\n  conn = getConnection();\n  pstmt = conn.prepareStatement(query);\n  pstmt.setInt(1, id);\n  rs = pstmt.executeQuery();\n  rs.next();\n  Clob clob = rs.getClob(1);//rs.getClob(&quot;description&quot;);\n\n} finally {\n  rs.close();\n  pstmt.close();\n  conn.close();\n}\n</code></pre>","excerpt":"","more":"<p>oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？</p>\n<pre><code>Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用\nReader is = columnContentClob.getCharacterStream();//用reader接收\nBufferedReader bf = new BufferedReader(is);//实例化一个缓冲流\nString columnContent = bf.readLine();//读取大文本的内容\n</code></pre><p><strong>实例</strong></p>\n<pre><code>String driver = &quot;oracle.jdbc.OracleDriver&quot;;\nString url = &quot;jdbc:oracle:thin:@127.0.0.1:1521/databaseName&quot;;\nString username = &quot;username&quot;;\nString password = &quot;password&quot;;\nClass.forName(driver);\nConnection conn = DriverManager.getConnection(url, username, password);\n\n ResultSet rs = null;\nPreparedStatement pstmt = null;\nString query = &quot;SELECT description FROM mytable WHERE id = ?&quot;;\ntry {\n  conn = getConnection();\n  pstmt = conn.prepareStatement(query);\n  pstmt.setInt(1, id);\n  rs = pstmt.executeQuery();\n  rs.next();\n  Clob clob = rs.getClob(1);//rs.getClob(&quot;description&quot;);\n\n} finally {\n  rs.close();\n  pstmt.close();\n  conn.close();\n}\n</code></pre>"},{"title":"java新旧版本的排序","date":"2017-05-06T02:47:14.000Z","_content":"因为最近在做app客户的rest接口，所以要确保后台提供给app的rest接口是相对安全的，就涉及到了一些加密操作，其实主要涉及以下两种加密方式：\n\n- AES加密\n- MD5加密\n\n其实针对上面两种加密方式我们应用在不同的场景，AES加密主要应用在POST、DELETE等对于服务器来讲不能确保”幂等“的操作；MD5加密主要应用在GET等对于服务器来讲可以确保“幂等”的操作。\n\n一般是先确定待加密的value值集合，然后把value值集合进行自然排序，然后再加上双方约定好的秘钥串进行最终的MD5加密处理。\n\n所以加密过程中为了确保双方的加密后的值能一致，都进行了排序处理，下面就针对排序这一操作在熟悉一下java中的排序。\n\n<!--more-->\n\n**一、自然排序**\n\n自然排序就是不适用自定义的比较器进行排序，而是适用默认的比较器进行排序操作，比如经常使用的java.util包中的比较器工具类。\n\n1. 对list集合自然排序--Collections.sort(list)\n\n```java\n\n\tList<String> list = Arrays.asList(\"a\",\"c\",\"中\",\"b\");\n\tCollections.sort(list);\n```\n\n以上代码排序后结果：\n\n>[a, b, c, 中]\n\n\n2. 对Array数组自然排序--Arrays.sort(array)\n\n```java\n\n\tString[] array = {\"a\",\"c\",\"中\",\"b\"};\n\tArrays.sort(array);\n\n```\t\n\n以上代码排序后结果：\n\n>[a, b, c, 中]\n\n\n3. 对Map集合自然排序--Collections.sort(list)\n\n```java\n\n\tMap<String,String> map = new HashMap<String,String>();\n\tmap.put(\"name\", \"a\");\n\tmap.put(\"code\", \"c\");\n\tmap.put(\"real\", \"中\");\n\tmap.put(\"attr\", \"b\");\n\t\n\tCollection<String> collect = map.values();\n\tList<String> mapList = new ArrayList<String>(collect);\n\tCollections.sort(mapList);\n\n```\n\n以上代码排序后结果：\n\n>[a, b, c, 中]\n\n\n注：可以看到以上所使用到的自然排序后，结果都是一样,按照升序进行排序。那么我们如果想让集合中的元素降序排列该怎么办呢，那就需要自定义比较器了。\n\n**二、自定义比较器进行排序**\n\n说到自定义比较器，就不得不说Comparator和Comparable这两个比较接口，下面进行各自说明一下\n\n**1. Comparable接口**\n\n该接口主要用来将自定义的类型具有排序特性，那么就需要实现该接口，该接口中只有一个compareTo方法，源码如下：\n\n```java\n\npublic interface Comparable<T> {\n\n\tpublic int compareTo(T o);\t\n}\n\n```\n\n主要应用在以下场景\n\n>针对集合中的泛型元素不具有排序特征(集合中的元素没有实现Comparable接口)，如果集合中的泛型元素不具有排序特性，那么我们就不能使用上面的例子中的默认比较器进行排序操作。\n\n- 下面新建一个学生类-Student\n\n```java\n\n\tpublic class Student{\n\t\n\t\tprivate String name; //名称\n\t\tprivate int age; //年龄\n\t\t\n\t\tStudent(String name,int age){\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t\t}\n\t}\n\n```\n\n- 声明一个集合，并且把Student实例添加到集合中\n\n```java\n\n\tStudent stu1 = new Student(\"王明\",25);\n\tStudent stu2 = new Student(\"李茜\",29);\n\tStudent stu3 = new Student(\"魏泽\",18);\n\tList<Student> stuList = Arrays.asList(stu1,stu2,stu3);\n\n```\n\n- 使用默认的集合排序方式对集合进行排序操作(无法编译)\n\n```java\n\n\tCollections.sort(stuList); //编译报错\n\n\t//The method sort(List<T>) in the type Collections is not applicable for the arguments (List<Student>)\n\n```\n之所以我们针对泛型元素为Student类型的集合stuList进行默认排序时，无法通过编译，因为集合中的泛型元素Student没有不具有排序特性(Student没有实现Comparable接口)；\n\n- 我们对Student类进行改造-实现Comparable接口，并覆写比较方法\n\n```java\n\t/**\n\t * 把Student类实现Comparable接口，然后该类就具有了排序特性，然后覆写比较方法\n\t * @author maps\n\t */\n\tpublic class Student implements Comparable<Student>{\n\t\n\t\tprivate String name;\n\t\tprivate int age;\n\t\t\n\t\t@Override\n\t\tpublic int compareTo(Student o) { //覆写比较方法，按照年龄升序排列\n\t\t\treturn this.age-o.getAge();\n\t\t}\n\t\t\n\t\tStudent(String name,int age){\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t\t}\n\t}\n\n```\n\n- 然后还使用默认的比较器进行排序操作\n\n```java\n\n\tStudent stu1 = new Student(\"王明\",25);\n\tStudent stu2 = new Student(\"李茜\",29);\n\tStudent stu3 = new Student(\"魏泽\",18);\n\tList<Student> stuList = Arrays.asList(stu1,stu2,stu3);\n\n\tCollections.sort(stuList); //可以正常编译、运行\n\n```\n\n运行以上代码后输出：\n\n>>[User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]\n\n可以看到我们把集合中的泛型元素Student实现Comparable接口之后，该类就具有了排序特性，那么我们就可以使用sort方法进行排序了，不需要再针对包含该泛型元素的集合额外的自定义比较器了。\n\n其实针对这个接口的作用主要就是将元素具有排序特性，那么该接口的使用有一定的局限性，也就是只能操作自己定义的类；比如上面例子中的Student类是导入第三方的，该类没有实现Comparable接口，我们也没有源码，那么我们现在要针对泛型元素为Student的集合元素进行排序时该怎么办呢？\n\n然而我们针对那些不具有排序特性的泛型集合进行排序是很常见的操作，那么我们针对这种情况应该怎么办呢？那么我们可以通过使用Comparator接口来自定义比较器进行排序操作。\n\n**2. Comparator接口**\n\n该接口的功能就是自定义比较器操作，针对上面例子最后提出的问题我们接着分析。\n\n该接口主要有以下两个应用场景：\n\n>使那些不具备排序特性的元素可以进行排序操作\n\n- 下面新建一个学生类-Student，该类仍然不具有排序特性\n\n```java\n\n\tpublic class Student{\n\t\n\t\tprivate String name; //名称\n\t\tprivate int age; //年龄\n\t\t\n\t\tStudent(String name,int age){\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t\t}\n\t}\n\n```\n\n- 声明一个集合，并且把Student实例添加到集合中\n\n```java\n\n\tStudent stu1 = new Student(\"王明\",25);\n\tStudent stu2 = new Student(\"李茜\",29);\n\tStudent stu3 = new Student(\"魏泽\",18);\n\tList<Student> stuList = Arrays.asList(stu1,stu2,stu3);\n\n```\n\n- 使用默认的集合排序方式对集合进行排序操作(无法编译)\n\n```java\n\n\tCollections.sort(stuList); //编译报错\n\n```\n\n- 我们定义一个针对不具有排序特性的Student的元素集合定义一个比较器\n\n```java\n\n\t/**\n\t * 定义一个普通的类，然后把该类实现Comparator排序接口即可，泛型类型就是我们待排序的Student类\n\t * @author maps\n\t */\n\tpublic class StudentComparator implements Comparator<Student>{\n\n\t\t@Override\n\t\tpublic int compare(Student o1, Student o2) {\n\t\t\treturn o1.getAge()-o2.getAge();\n\t\t}\n\t}\n\n```\n\n- 使用我们自定义的比较器对刚才的stuList集合进行排序操作\n\n```java\n\n\tCollections.sort(stuList, new StudentComparator());\n\n```\n上面代码执行结果：\n\n>> [User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]\n\n可以看到使用我们自定义的比较器后，排序时使用了集合中的泛型元素的年龄(age)属性进行了升序排列。\n\n\n>自定义一个比较器，然后覆盖默认的排序方法\n\n其实这种使用场景在上面已经用到了，就是下面一行代码\n\n>>Collections.sort(stuList, new StudentComparator());\n\n我们可以看到Collections.sort方法定义了两个不同参数格式的重载方法，其中一个参数的sort方法就是使用默认的比较器(集合中泛型元素实现接口Comparable后覆写的比较方法)进行排序的操作；其中两个参数的sort方法中第二个参数就是我们自定义的比较器实例，所以当我们传递第二个参数时，也就表明我们将使用我们自定义的比较器来覆盖默认的比较器进行排序操作，具体就不进行演示了，上面例子中已经展示了。\n\n其实Comparator接口中定义了很多有用的方法，比如把排序规则反转、构件排序链等等，比如我们定义的比较器是按照学生的年龄进行升序排序的，那么我们可以使用比较器的反转方法进行降序排列。\n\n```java\n\n\tCollections.sort(stuList,new StudentComparator().reversed());\n\n```\n\n上面代码运行结果：\n\n>[User [name=李茜, age=29], User [name=王明, age=25], User [name=魏泽, age=18]]\n\n可以看到我们使用比较器反转方法后，按照了年龄降序进行排序。","source":"_posts/java新旧版本的排序.md","raw":"---\ntitle: java新旧版本的排序\ndate: 2017-05-06 10:47:14\ncategories: java\ntags: java\n---\n因为最近在做app客户的rest接口，所以要确保后台提供给app的rest接口是相对安全的，就涉及到了一些加密操作，其实主要涉及以下两种加密方式：\n\n- AES加密\n- MD5加密\n\n其实针对上面两种加密方式我们应用在不同的场景，AES加密主要应用在POST、DELETE等对于服务器来讲不能确保”幂等“的操作；MD5加密主要应用在GET等对于服务器来讲可以确保“幂等”的操作。\n\n一般是先确定待加密的value值集合，然后把value值集合进行自然排序，然后再加上双方约定好的秘钥串进行最终的MD5加密处理。\n\n所以加密过程中为了确保双方的加密后的值能一致，都进行了排序处理，下面就针对排序这一操作在熟悉一下java中的排序。\n\n<!--more-->\n\n**一、自然排序**\n\n自然排序就是不适用自定义的比较器进行排序，而是适用默认的比较器进行排序操作，比如经常使用的java.util包中的比较器工具类。\n\n1. 对list集合自然排序--Collections.sort(list)\n\n```java\n\n\tList<String> list = Arrays.asList(\"a\",\"c\",\"中\",\"b\");\n\tCollections.sort(list);\n```\n\n以上代码排序后结果：\n\n>[a, b, c, 中]\n\n\n2. 对Array数组自然排序--Arrays.sort(array)\n\n```java\n\n\tString[] array = {\"a\",\"c\",\"中\",\"b\"};\n\tArrays.sort(array);\n\n```\t\n\n以上代码排序后结果：\n\n>[a, b, c, 中]\n\n\n3. 对Map集合自然排序--Collections.sort(list)\n\n```java\n\n\tMap<String,String> map = new HashMap<String,String>();\n\tmap.put(\"name\", \"a\");\n\tmap.put(\"code\", \"c\");\n\tmap.put(\"real\", \"中\");\n\tmap.put(\"attr\", \"b\");\n\t\n\tCollection<String> collect = map.values();\n\tList<String> mapList = new ArrayList<String>(collect);\n\tCollections.sort(mapList);\n\n```\n\n以上代码排序后结果：\n\n>[a, b, c, 中]\n\n\n注：可以看到以上所使用到的自然排序后，结果都是一样,按照升序进行排序。那么我们如果想让集合中的元素降序排列该怎么办呢，那就需要自定义比较器了。\n\n**二、自定义比较器进行排序**\n\n说到自定义比较器，就不得不说Comparator和Comparable这两个比较接口，下面进行各自说明一下\n\n**1. Comparable接口**\n\n该接口主要用来将自定义的类型具有排序特性，那么就需要实现该接口，该接口中只有一个compareTo方法，源码如下：\n\n```java\n\npublic interface Comparable<T> {\n\n\tpublic int compareTo(T o);\t\n}\n\n```\n\n主要应用在以下场景\n\n>针对集合中的泛型元素不具有排序特征(集合中的元素没有实现Comparable接口)，如果集合中的泛型元素不具有排序特性，那么我们就不能使用上面的例子中的默认比较器进行排序操作。\n\n- 下面新建一个学生类-Student\n\n```java\n\n\tpublic class Student{\n\t\n\t\tprivate String name; //名称\n\t\tprivate int age; //年龄\n\t\t\n\t\tStudent(String name,int age){\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t\t}\n\t}\n\n```\n\n- 声明一个集合，并且把Student实例添加到集合中\n\n```java\n\n\tStudent stu1 = new Student(\"王明\",25);\n\tStudent stu2 = new Student(\"李茜\",29);\n\tStudent stu3 = new Student(\"魏泽\",18);\n\tList<Student> stuList = Arrays.asList(stu1,stu2,stu3);\n\n```\n\n- 使用默认的集合排序方式对集合进行排序操作(无法编译)\n\n```java\n\n\tCollections.sort(stuList); //编译报错\n\n\t//The method sort(List<T>) in the type Collections is not applicable for the arguments (List<Student>)\n\n```\n之所以我们针对泛型元素为Student类型的集合stuList进行默认排序时，无法通过编译，因为集合中的泛型元素Student没有不具有排序特性(Student没有实现Comparable接口)；\n\n- 我们对Student类进行改造-实现Comparable接口，并覆写比较方法\n\n```java\n\t/**\n\t * 把Student类实现Comparable接口，然后该类就具有了排序特性，然后覆写比较方法\n\t * @author maps\n\t */\n\tpublic class Student implements Comparable<Student>{\n\t\n\t\tprivate String name;\n\t\tprivate int age;\n\t\t\n\t\t@Override\n\t\tpublic int compareTo(Student o) { //覆写比较方法，按照年龄升序排列\n\t\t\treturn this.age-o.getAge();\n\t\t}\n\t\t\n\t\tStudent(String name,int age){\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t\t}\n\t}\n\n```\n\n- 然后还使用默认的比较器进行排序操作\n\n```java\n\n\tStudent stu1 = new Student(\"王明\",25);\n\tStudent stu2 = new Student(\"李茜\",29);\n\tStudent stu3 = new Student(\"魏泽\",18);\n\tList<Student> stuList = Arrays.asList(stu1,stu2,stu3);\n\n\tCollections.sort(stuList); //可以正常编译、运行\n\n```\n\n运行以上代码后输出：\n\n>>[User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]\n\n可以看到我们把集合中的泛型元素Student实现Comparable接口之后，该类就具有了排序特性，那么我们就可以使用sort方法进行排序了，不需要再针对包含该泛型元素的集合额外的自定义比较器了。\n\n其实针对这个接口的作用主要就是将元素具有排序特性，那么该接口的使用有一定的局限性，也就是只能操作自己定义的类；比如上面例子中的Student类是导入第三方的，该类没有实现Comparable接口，我们也没有源码，那么我们现在要针对泛型元素为Student的集合元素进行排序时该怎么办呢？\n\n然而我们针对那些不具有排序特性的泛型集合进行排序是很常见的操作，那么我们针对这种情况应该怎么办呢？那么我们可以通过使用Comparator接口来自定义比较器进行排序操作。\n\n**2. Comparator接口**\n\n该接口的功能就是自定义比较器操作，针对上面例子最后提出的问题我们接着分析。\n\n该接口主要有以下两个应用场景：\n\n>使那些不具备排序特性的元素可以进行排序操作\n\n- 下面新建一个学生类-Student，该类仍然不具有排序特性\n\n```java\n\n\tpublic class Student{\n\t\n\t\tprivate String name; //名称\n\t\tprivate int age; //年龄\n\t\t\n\t\tStudent(String name,int age){\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t\t}\n\t}\n\n```\n\n- 声明一个集合，并且把Student实例添加到集合中\n\n```java\n\n\tStudent stu1 = new Student(\"王明\",25);\n\tStudent stu2 = new Student(\"李茜\",29);\n\tStudent stu3 = new Student(\"魏泽\",18);\n\tList<Student> stuList = Arrays.asList(stu1,stu2,stu3);\n\n```\n\n- 使用默认的集合排序方式对集合进行排序操作(无法编译)\n\n```java\n\n\tCollections.sort(stuList); //编译报错\n\n```\n\n- 我们定义一个针对不具有排序特性的Student的元素集合定义一个比较器\n\n```java\n\n\t/**\n\t * 定义一个普通的类，然后把该类实现Comparator排序接口即可，泛型类型就是我们待排序的Student类\n\t * @author maps\n\t */\n\tpublic class StudentComparator implements Comparator<Student>{\n\n\t\t@Override\n\t\tpublic int compare(Student o1, Student o2) {\n\t\t\treturn o1.getAge()-o2.getAge();\n\t\t}\n\t}\n\n```\n\n- 使用我们自定义的比较器对刚才的stuList集合进行排序操作\n\n```java\n\n\tCollections.sort(stuList, new StudentComparator());\n\n```\n上面代码执行结果：\n\n>> [User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]\n\n可以看到使用我们自定义的比较器后，排序时使用了集合中的泛型元素的年龄(age)属性进行了升序排列。\n\n\n>自定义一个比较器，然后覆盖默认的排序方法\n\n其实这种使用场景在上面已经用到了，就是下面一行代码\n\n>>Collections.sort(stuList, new StudentComparator());\n\n我们可以看到Collections.sort方法定义了两个不同参数格式的重载方法，其中一个参数的sort方法就是使用默认的比较器(集合中泛型元素实现接口Comparable后覆写的比较方法)进行排序的操作；其中两个参数的sort方法中第二个参数就是我们自定义的比较器实例，所以当我们传递第二个参数时，也就表明我们将使用我们自定义的比较器来覆盖默认的比较器进行排序操作，具体就不进行演示了，上面例子中已经展示了。\n\n其实Comparator接口中定义了很多有用的方法，比如把排序规则反转、构件排序链等等，比如我们定义的比较器是按照学生的年龄进行升序排序的，那么我们可以使用比较器的反转方法进行降序排列。\n\n```java\n\n\tCollections.sort(stuList,new StudentComparator().reversed());\n\n```\n\n上面代码运行结果：\n\n>[User [name=李茜, age=29], User [name=王明, age=25], User [name=魏泽, age=18]]\n\n可以看到我们使用比较器反转方法后，按照了年龄降序进行排序。","slug":"java新旧版本的排序","published":1,"updated":"2018-07-08T09:37:48.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj6003a30tz2cedpni7","content":"<p>因为最近在做app客户的rest接口，所以要确保后台提供给app的rest接口是相对安全的，就涉及到了一些加密操作，其实主要涉及以下两种加密方式：</p>\n<ul>\n<li>AES加密</li>\n<li>MD5加密</li>\n</ul>\n<p>其实针对上面两种加密方式我们应用在不同的场景，AES加密主要应用在POST、DELETE等对于服务器来讲不能确保”幂等“的操作；MD5加密主要应用在GET等对于服务器来讲可以确保“幂等”的操作。</p>\n<p>一般是先确定待加密的value值集合，然后把value值集合进行自然排序，然后再加上双方约定好的秘钥串进行最终的MD5加密处理。</p>\n<p>所以加密过程中为了确保双方的加密后的值能一致，都进行了排序处理，下面就针对排序这一操作在熟悉一下java中的排序。</p>\n<a id=\"more\"></a>\n<p><strong>一、自然排序</strong></p>\n<p>自然排序就是不适用自定义的比较器进行排序，而是适用默认的比较器进行排序操作，比如经常使用的java.util包中的比较器工具类。</p>\n<ol>\n<li>对list集合自然排序–Collections.sort(list)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"中\"</span>,<span class=\"string\">\"b\"</span>);</div><div class=\"line\">Collections.sort(list);</div></pre></td></tr></table></figure>\n<p>以上代码排序后结果：</p>\n<blockquote>\n<p>[a, b, c, 中]</p>\n</blockquote>\n<ol>\n<li>对Array数组自然排序–Arrays.sort(array)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\tString[] array = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"中\"</span>,<span class=\"string\">\"b\"</span>&#125;;</div><div class=\"line\">\tArrays.sort(array);</div><div class=\"line\"></div><div class=\"line\">```\t</div><div class=\"line\"></div><div class=\"line\">以上代码排序后结果：</div><div class=\"line\"></div><div class=\"line\">&gt;[a, b, c, 中]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>. 对Map集合自然排序--Collections.sort(list)</div><div class=\"line\"></div><div class=\"line\">```java</div><div class=\"line\"></div><div class=\"line\">\tMap&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</div><div class=\"line\">\tmap.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"a\"</span>);</div><div class=\"line\">\tmap.put(<span class=\"string\">\"code\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\">\tmap.put(<span class=\"string\">\"real\"</span>, <span class=\"string\">\"中\"</span>);</div><div class=\"line\">\tmap.put(<span class=\"string\">\"attr\"</span>, <span class=\"string\">\"b\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tCollection&lt;String&gt; collect = map.values();</div><div class=\"line\">\tList&lt;String&gt; mapList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(collect);</div><div class=\"line\">\tCollections.sort(mapList);</div></pre></td></tr></table></figure>\n<p>以上代码排序后结果：</p>\n<blockquote>\n<p>[a, b, c, 中]</p>\n</blockquote>\n<p>注：可以看到以上所使用到的自然排序后，结果都是一样,按照升序进行排序。那么我们如果想让集合中的元素降序排列该怎么办呢，那就需要自定义比较器了。</p>\n<p><strong>二、自定义比较器进行排序</strong></p>\n<p>说到自定义比较器，就不得不说Comparator和Comparable这两个比较接口，下面进行各自说明一下</p>\n<p><strong>1. Comparable接口</strong></p>\n<p>该接口主要用来将自定义的类型具有排序特性，那么就需要实现该接口，该接口中只有一个compareTo方法，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要应用在以下场景</p>\n<blockquote>\n<p>针对集合中的泛型元素不具有排序特征(集合中的元素没有实现Comparable接口)，如果集合中的泛型元素不具有排序特性，那么我们就不能使用上面的例子中的默认比较器进行排序操作。</p>\n</blockquote>\n<ul>\n<li>下面新建一个学生类-Student</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; <span class=\"comment\">//名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; <span class=\"comment\">//年龄</span></div><div class=\"line\">\t</div><div class=\"line\">\tStudent(String name,<span class=\"keyword\">int</span> age)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>声明一个集合，并且把Student实例添加到集合中</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"王明\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李茜\"</span>,<span class=\"number\">29</span>);</div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"魏泽\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">List&lt;Student&gt; stuList = Arrays.asList(stu1,stu2,stu3);</div></pre></td></tr></table></figure>\n<ul>\n<li>使用默认的集合排序方式对集合进行排序操作(无法编译)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList); <span class=\"comment\">//编译报错</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//The method sort(List&lt;T&gt;) in the type Collections is not applicable for the arguments (List&lt;Student&gt;)</span></div></pre></td></tr></table></figure>\n<p>之所以我们针对泛型元素为Student类型的集合stuList进行默认排序时，无法通过编译，因为集合中的泛型元素Student没有不具有排序特性(Student没有实现Comparable接口)；</p>\n<ul>\n<li>我们对Student类进行改造-实现Comparable接口，并覆写比较方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 把Student类实现Comparable接口，然后该类就具有了排序特性，然后覆写比较方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Student</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Student o)</span> </span>&#123; <span class=\"comment\">//覆写比较方法，按照年龄升序排列</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age-o.getAge();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tStudent(String name,<span class=\"keyword\">int</span> age)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>然后还使用默认的比较器进行排序操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"王明\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李茜\"</span>,<span class=\"number\">29</span>);</div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"魏泽\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">List&lt;Student&gt; stuList = Arrays.asList(stu1,stu2,stu3);</div><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList); <span class=\"comment\">//可以正常编译、运行</span></div></pre></td></tr></table></figure>\n<p>运行以上代码后输出：</p>\n<blockquote>\n<blockquote>\n<p>[User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]</p>\n</blockquote>\n</blockquote>\n<p>可以看到我们把集合中的泛型元素Student实现Comparable接口之后，该类就具有了排序特性，那么我们就可以使用sort方法进行排序了，不需要再针对包含该泛型元素的集合额外的自定义比较器了。</p>\n<p>其实针对这个接口的作用主要就是将元素具有排序特性，那么该接口的使用有一定的局限性，也就是只能操作自己定义的类；比如上面例子中的Student类是导入第三方的，该类没有实现Comparable接口，我们也没有源码，那么我们现在要针对泛型元素为Student的集合元素进行排序时该怎么办呢？</p>\n<p>然而我们针对那些不具有排序特性的泛型集合进行排序是很常见的操作，那么我们针对这种情况应该怎么办呢？那么我们可以通过使用Comparator接口来自定义比较器进行排序操作。</p>\n<p><strong>2. Comparator接口</strong></p>\n<p>该接口的功能就是自定义比较器操作，针对上面例子最后提出的问题我们接着分析。</p>\n<p>该接口主要有以下两个应用场景：</p>\n<blockquote>\n<p>使那些不具备排序特性的元素可以进行排序操作</p>\n</blockquote>\n<ul>\n<li>下面新建一个学生类-Student，该类仍然不具有排序特性</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; <span class=\"comment\">//名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; <span class=\"comment\">//年龄</span></div><div class=\"line\">\t</div><div class=\"line\">\tStudent(String name,<span class=\"keyword\">int</span> age)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>声明一个集合，并且把Student实例添加到集合中</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"王明\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李茜\"</span>,<span class=\"number\">29</span>);</div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"魏泽\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">List&lt;Student&gt; stuList = Arrays.asList(stu1,stu2,stu3);</div></pre></td></tr></table></figure>\n<ul>\n<li>使用默认的集合排序方式对集合进行排序操作(无法编译)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList); <span class=\"comment\">//编译报错</span></div></pre></td></tr></table></figure>\n<ul>\n<li>我们定义一个针对不具有排序特性的Student的元素集合定义一个比较器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义一个普通的类，然后把该类实现Comparator排序接口即可，泛型类型就是我们待排序的Student类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> o1.getAge()-o2.getAge();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用我们自定义的比较器对刚才的stuList集合进行排序操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList, <span class=\"keyword\">new</span> StudentComparator());</div></pre></td></tr></table></figure>\n<p>上面代码执行结果：</p>\n<blockquote>\n<blockquote>\n<p>[User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]</p>\n</blockquote>\n</blockquote>\n<p>可以看到使用我们自定义的比较器后，排序时使用了集合中的泛型元素的年龄(age)属性进行了升序排列。</p>\n<blockquote>\n<p>自定义一个比较器，然后覆盖默认的排序方法</p>\n</blockquote>\n<p>其实这种使用场景在上面已经用到了，就是下面一行代码</p>\n<blockquote>\n<blockquote>\n<p>Collections.sort(stuList, new StudentComparator());</p>\n</blockquote>\n</blockquote>\n<p>我们可以看到Collections.sort方法定义了两个不同参数格式的重载方法，其中一个参数的sort方法就是使用默认的比较器(集合中泛型元素实现接口Comparable后覆写的比较方法)进行排序的操作；其中两个参数的sort方法中第二个参数就是我们自定义的比较器实例，所以当我们传递第二个参数时，也就表明我们将使用我们自定义的比较器来覆盖默认的比较器进行排序操作，具体就不进行演示了，上面例子中已经展示了。</p>\n<p>其实Comparator接口中定义了很多有用的方法，比如把排序规则反转、构件排序链等等，比如我们定义的比较器是按照学生的年龄进行升序排序的，那么我们可以使用比较器的反转方法进行降序排列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList,<span class=\"keyword\">new</span> StudentComparator().reversed());</div></pre></td></tr></table></figure>\n<p>上面代码运行结果：</p>\n<blockquote>\n<p>[User [name=李茜, age=29], User [name=王明, age=25], User [name=魏泽, age=18]]</p>\n</blockquote>\n<p>可以看到我们使用比较器反转方法后，按照了年龄降序进行排序。</p>\n","excerpt":"<p>因为最近在做app客户的rest接口，所以要确保后台提供给app的rest接口是相对安全的，就涉及到了一些加密操作，其实主要涉及以下两种加密方式：</p>\n<ul>\n<li>AES加密</li>\n<li>MD5加密</li>\n</ul>\n<p>其实针对上面两种加密方式我们应用在不同的场景，AES加密主要应用在POST、DELETE等对于服务器来讲不能确保”幂等“的操作；MD5加密主要应用在GET等对于服务器来讲可以确保“幂等”的操作。</p>\n<p>一般是先确定待加密的value值集合，然后把value值集合进行自然排序，然后再加上双方约定好的秘钥串进行最终的MD5加密处理。</p>\n<p>所以加密过程中为了确保双方的加密后的值能一致，都进行了排序处理，下面就针对排序这一操作在熟悉一下java中的排序。</p>","more":"<p><strong>一、自然排序</strong></p>\n<p>自然排序就是不适用自定义的比较器进行排序，而是适用默认的比较器进行排序操作，比如经常使用的java.util包中的比较器工具类。</p>\n<ol>\n<li>对list集合自然排序–Collections.sort(list)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"中\"</span>,<span class=\"string\">\"b\"</span>);</div><div class=\"line\">Collections.sort(list);</div></pre></td></tr></table></figure>\n<p>以上代码排序后结果：</p>\n<blockquote>\n<p>[a, b, c, 中]</p>\n</blockquote>\n<ol>\n<li>对Array数组自然排序–Arrays.sort(array)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\tString[] array = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"中\"</span>,<span class=\"string\">\"b\"</span>&#125;;</div><div class=\"line\">\tArrays.sort(array);</div><div class=\"line\"></div><div class=\"line\">```\t</div><div class=\"line\"></div><div class=\"line\">以上代码排序后结果：</div><div class=\"line\"></div><div class=\"line\">&gt;[a, b, c, 中]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>. 对Map集合自然排序--Collections.sort(list)</div><div class=\"line\"></div><div class=\"line\">```java</div><div class=\"line\"></div><div class=\"line\">\tMap&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</div><div class=\"line\">\tmap.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"a\"</span>);</div><div class=\"line\">\tmap.put(<span class=\"string\">\"code\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\">\tmap.put(<span class=\"string\">\"real\"</span>, <span class=\"string\">\"中\"</span>);</div><div class=\"line\">\tmap.put(<span class=\"string\">\"attr\"</span>, <span class=\"string\">\"b\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tCollection&lt;String&gt; collect = map.values();</div><div class=\"line\">\tList&lt;String&gt; mapList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(collect);</div><div class=\"line\">\tCollections.sort(mapList);</div></pre></td></tr></table></figure>\n<p>以上代码排序后结果：</p>\n<blockquote>\n<p>[a, b, c, 中]</p>\n</blockquote>\n<p>注：可以看到以上所使用到的自然排序后，结果都是一样,按照升序进行排序。那么我们如果想让集合中的元素降序排列该怎么办呢，那就需要自定义比较器了。</p>\n<p><strong>二、自定义比较器进行排序</strong></p>\n<p>说到自定义比较器，就不得不说Comparator和Comparable这两个比较接口，下面进行各自说明一下</p>\n<p><strong>1. Comparable接口</strong></p>\n<p>该接口主要用来将自定义的类型具有排序特性，那么就需要实现该接口，该接口中只有一个compareTo方法，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要应用在以下场景</p>\n<blockquote>\n<p>针对集合中的泛型元素不具有排序特征(集合中的元素没有实现Comparable接口)，如果集合中的泛型元素不具有排序特性，那么我们就不能使用上面的例子中的默认比较器进行排序操作。</p>\n</blockquote>\n<ul>\n<li>下面新建一个学生类-Student</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; <span class=\"comment\">//名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; <span class=\"comment\">//年龄</span></div><div class=\"line\">\t</div><div class=\"line\">\tStudent(String name,<span class=\"keyword\">int</span> age)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>声明一个集合，并且把Student实例添加到集合中</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"王明\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李茜\"</span>,<span class=\"number\">29</span>);</div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"魏泽\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">List&lt;Student&gt; stuList = Arrays.asList(stu1,stu2,stu3);</div></pre></td></tr></table></figure>\n<ul>\n<li>使用默认的集合排序方式对集合进行排序操作(无法编译)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList); <span class=\"comment\">//编译报错</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//The method sort(List&lt;T&gt;) in the type Collections is not applicable for the arguments (List&lt;Student&gt;)</span></div></pre></td></tr></table></figure>\n<p>之所以我们针对泛型元素为Student类型的集合stuList进行默认排序时，无法通过编译，因为集合中的泛型元素Student没有不具有排序特性(Student没有实现Comparable接口)；</p>\n<ul>\n<li>我们对Student类进行改造-实现Comparable接口，并覆写比较方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 把Student类实现Comparable接口，然后该类就具有了排序特性，然后覆写比较方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Student</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Student o)</span> </span>&#123; <span class=\"comment\">//覆写比较方法，按照年龄升序排列</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age-o.getAge();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tStudent(String name,<span class=\"keyword\">int</span> age)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>然后还使用默认的比较器进行排序操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"王明\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李茜\"</span>,<span class=\"number\">29</span>);</div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"魏泽\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">List&lt;Student&gt; stuList = Arrays.asList(stu1,stu2,stu3);</div><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList); <span class=\"comment\">//可以正常编译、运行</span></div></pre></td></tr></table></figure>\n<p>运行以上代码后输出：</p>\n<blockquote>\n<blockquote>\n<p>[User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]</p>\n</blockquote>\n</blockquote>\n<p>可以看到我们把集合中的泛型元素Student实现Comparable接口之后，该类就具有了排序特性，那么我们就可以使用sort方法进行排序了，不需要再针对包含该泛型元素的集合额外的自定义比较器了。</p>\n<p>其实针对这个接口的作用主要就是将元素具有排序特性，那么该接口的使用有一定的局限性，也就是只能操作自己定义的类；比如上面例子中的Student类是导入第三方的，该类没有实现Comparable接口，我们也没有源码，那么我们现在要针对泛型元素为Student的集合元素进行排序时该怎么办呢？</p>\n<p>然而我们针对那些不具有排序特性的泛型集合进行排序是很常见的操作，那么我们针对这种情况应该怎么办呢？那么我们可以通过使用Comparator接口来自定义比较器进行排序操作。</p>\n<p><strong>2. Comparator接口</strong></p>\n<p>该接口的功能就是自定义比较器操作，针对上面例子最后提出的问题我们接着分析。</p>\n<p>该接口主要有以下两个应用场景：</p>\n<blockquote>\n<p>使那些不具备排序特性的元素可以进行排序操作</p>\n</blockquote>\n<ul>\n<li>下面新建一个学生类-Student，该类仍然不具有排序特性</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; <span class=\"comment\">//名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; <span class=\"comment\">//年龄</span></div><div class=\"line\">\t</div><div class=\"line\">\tStudent(String name,<span class=\"keyword\">int</span> age)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>声明一个集合，并且把Student实例添加到集合中</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"王明\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李茜\"</span>,<span class=\"number\">29</span>);</div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"魏泽\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">List&lt;Student&gt; stuList = Arrays.asList(stu1,stu2,stu3);</div></pre></td></tr></table></figure>\n<ul>\n<li>使用默认的集合排序方式对集合进行排序操作(无法编译)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList); <span class=\"comment\">//编译报错</span></div></pre></td></tr></table></figure>\n<ul>\n<li>我们定义一个针对不具有排序特性的Student的元素集合定义一个比较器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义一个普通的类，然后把该类实现Comparator排序接口即可，泛型类型就是我们待排序的Student类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> o1.getAge()-o2.getAge();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用我们自定义的比较器对刚才的stuList集合进行排序操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList, <span class=\"keyword\">new</span> StudentComparator());</div></pre></td></tr></table></figure>\n<p>上面代码执行结果：</p>\n<blockquote>\n<blockquote>\n<p>[User [name=魏泽, age=18], User [name=王明, age=25], User [name=李茜, age=29]]</p>\n</blockquote>\n</blockquote>\n<p>可以看到使用我们自定义的比较器后，排序时使用了集合中的泛型元素的年龄(age)属性进行了升序排列。</p>\n<blockquote>\n<p>自定义一个比较器，然后覆盖默认的排序方法</p>\n</blockquote>\n<p>其实这种使用场景在上面已经用到了，就是下面一行代码</p>\n<blockquote>\n<blockquote>\n<p>Collections.sort(stuList, new StudentComparator());</p>\n</blockquote>\n</blockquote>\n<p>我们可以看到Collections.sort方法定义了两个不同参数格式的重载方法，其中一个参数的sort方法就是使用默认的比较器(集合中泛型元素实现接口Comparable后覆写的比较方法)进行排序的操作；其中两个参数的sort方法中第二个参数就是我们自定义的比较器实例，所以当我们传递第二个参数时，也就表明我们将使用我们自定义的比较器来覆盖默认的比较器进行排序操作，具体就不进行演示了，上面例子中已经展示了。</p>\n<p>其实Comparator接口中定义了很多有用的方法，比如把排序规则反转、构件排序链等等，比如我们定义的比较器是按照学生的年龄进行升序排序的，那么我们可以使用比较器的反转方法进行降序排列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Collections.sort(stuList,<span class=\"keyword\">new</span> StudentComparator().reversed());</div></pre></td></tr></table></figure>\n<p>上面代码运行结果：</p>\n<blockquote>\n<p>[User [name=李茜, age=29], User [name=王明, age=25], User [name=魏泽, age=18]]</p>\n</blockquote>\n<p>可以看到我们使用比较器反转方法后，按照了年龄降序进行排序。</p>"},{"title":"java通过Stream对list集合分组","date":"2016-07-15T06:00:11.000Z","_content":"现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下\n\n```java\n\n\tpackage com.maps;\n\n    public class User{\n    \tprivate Integer id;\n\t\tprivate String type;\n\t\tprivate String name; \n\t\t\n\t\tpublic User(){}\n\t\tpublic User(Integer id,String type,String name){\n\t\t\tthis.id = id;\n\t\t\tthis.type = type;\n\t\t\tthis.name = name;\n\t\t}   \n\n\t\tpublic void setId(Integer id){\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Integer getId(){\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setType(String type){\n\t\t\tthis.type = type;\n\t\t}\n\t\t\n\t\tpublic String getType(){\n\t\t\treturn type;\n\t\t}\n\t\t\n\t\tpublic void setName(String name){\n\t\t\tthis.name = name;\n\t\t}\n\t\t\n\t\tpublic String getName(){\n\t\t\treturn name;\n\t\t}\n    }\n```\n\n```java\n\n\tpackage com.maps;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\timport java.util.stream.Collectors;\n\n    public class MainUser{\n    \t\n\t\tpublic static void main(String[] args){\n\t\t\tList<User> list = getUserList();\n\t\t\tMap<String,List<User>> userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));\n\t\t}\n\n\n\t\tpublic static List<User> getUserList(){\n\t\t\tUser user1 = new User(1,\"张三\",\"小学\");\n\t\t\tUser user2 = new User(2,\"李四\",\"小学\");\n\t\t\tUser user3 = new User(3,\"王五\",\"初中\");\n\t\t\tUser user4 = new User(4,\"马六\",\"高中\");\n\t\t\t\n\t\t\tList<User> list = new ArrayList<User>();\n\t\t\tlist.add(user1);\n\t\t\tlist.add(user2);\n\t\t\tlist.add(user3);\n\t\t\tlist.add(user4);\n\t\t\t\t\n\t\t\treturn list;\n\t\t}\n    }\n```\n\n运行上面例子得到下面的结果\n```java\n    {高中=[com.maps.User@448139f0], 初中=[com.maps.User@7cca494b], 小学=[com.maps.User@7ba4f24f, com.maps.User@3b9a45b3]}\n```\n是不是感觉不用for循环挺爽！","source":"_posts/java通过Stream对list集合分组.md","raw":"---\ntitle: java通过Stream对list集合分组\ndate: 2016-07-15 14:00:11\ncategories: java\ntags: java8 Stream\n---\n现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下\n\n```java\n\n\tpackage com.maps;\n\n    public class User{\n    \tprivate Integer id;\n\t\tprivate String type;\n\t\tprivate String name; \n\t\t\n\t\tpublic User(){}\n\t\tpublic User(Integer id,String type,String name){\n\t\t\tthis.id = id;\n\t\t\tthis.type = type;\n\t\t\tthis.name = name;\n\t\t}   \n\n\t\tpublic void setId(Integer id){\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Integer getId(){\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setType(String type){\n\t\t\tthis.type = type;\n\t\t}\n\t\t\n\t\tpublic String getType(){\n\t\t\treturn type;\n\t\t}\n\t\t\n\t\tpublic void setName(String name){\n\t\t\tthis.name = name;\n\t\t}\n\t\t\n\t\tpublic String getName(){\n\t\t\treturn name;\n\t\t}\n    }\n```\n\n```java\n\n\tpackage com.maps;\n\n\timport java.util.ArrayList;\n\timport java.util.List;\n\timport java.util.Map;\n\timport java.util.stream.Collectors;\n\n    public class MainUser{\n    \t\n\t\tpublic static void main(String[] args){\n\t\t\tList<User> list = getUserList();\n\t\t\tMap<String,List<User>> userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));\n\t\t}\n\n\n\t\tpublic static List<User> getUserList(){\n\t\t\tUser user1 = new User(1,\"张三\",\"小学\");\n\t\t\tUser user2 = new User(2,\"李四\",\"小学\");\n\t\t\tUser user3 = new User(3,\"王五\",\"初中\");\n\t\t\tUser user4 = new User(4,\"马六\",\"高中\");\n\t\t\t\n\t\t\tList<User> list = new ArrayList<User>();\n\t\t\tlist.add(user1);\n\t\t\tlist.add(user2);\n\t\t\tlist.add(user3);\n\t\t\tlist.add(user4);\n\t\t\t\t\n\t\t\treturn list;\n\t\t}\n    }\n```\n\n运行上面例子得到下面的结果\n```java\n    {高中=[com.maps.User@448139f0], 初中=[com.maps.User@7cca494b], 小学=[com.maps.User@7ba4f24f, com.maps.User@3b9a45b3]}\n```\n是不是感觉不用for循环挺爽！","slug":"java通过Stream对list集合分组","published":1,"updated":"2018-07-08T09:37:48.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj7003d30tz2hzl8v19","content":"<p>现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">   \t<span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String type;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Integer id,String type,String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;   </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainUser</span></span>&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tList&lt;User&gt; list = getUserList();</div><div class=\"line\">\t\tMap&lt;String,List&lt;User&gt;&gt; userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"张三\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>,<span class=\"string\">\"王五\"</span>,<span class=\"string\">\"初中\"</span>);</div><div class=\"line\">\t\tUser user4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>,<span class=\"string\">\"马六\"</span>,<span class=\"string\">\"高中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</div><div class=\"line\">\t\tlist.add(user1);</div><div class=\"line\">\t\tlist.add(user2);</div><div class=\"line\">\t\tlist.add(user3);</div><div class=\"line\">\t\tlist.add(user4);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>运行上面例子得到下面的结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;高中=[com.maps.User@<span class=\"number\">448139f</span>0], 初中=[com.maps.User@<span class=\"number\">7</span>cca494b], 小学=[com.maps.User@<span class=\"number\">7</span>ba4f24f, com.maps.User@<span class=\"number\">3</span>b9a45b3]&#125;</div></pre></td></tr></table></figure></p>\n<p>是不是感觉不用for循环挺爽！</p>\n","excerpt":"","more":"<p>现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">   \t<span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String type;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name; </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Integer id,String type,String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;   </div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> type;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainUser</span></span>&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tList&lt;User&gt; list = getUserList();</div><div class=\"line\">\t\tMap&lt;String,List&lt;User&gt;&gt; userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tUser user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"张三\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"小学\"</span>);</div><div class=\"line\">\t\tUser user3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>,<span class=\"string\">\"王五\"</span>,<span class=\"string\">\"初中\"</span>);</div><div class=\"line\">\t\tUser user4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>,<span class=\"string\">\"马六\"</span>,<span class=\"string\">\"高中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</div><div class=\"line\">\t\tlist.add(user1);</div><div class=\"line\">\t\tlist.add(user2);</div><div class=\"line\">\t\tlist.add(user3);</div><div class=\"line\">\t\tlist.add(user4);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>运行上面例子得到下面的结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;高中=[com.maps.User@<span class=\"number\">448139f</span>0], 初中=[com.maps.User@<span class=\"number\">7</span>cca494b], 小学=[com.maps.User@<span class=\"number\">7</span>ba4f24f, com.maps.User@<span class=\"number\">3</span>b9a45b3]&#125;</div></pre></td></tr></table></figure></p>\n<p>是不是感觉不用for循环挺爽！</p>\n"},{"title":"java通过反射操作类","date":"2017-05-10T03:17:22.000Z","_content":"\n在开发中用到反射操作具体类的情况比较少，但是我们用到的一些开发框架确都是反射的应用代表，比如spring、hibernate、mybatis等等框架。\n\n就拿spring框架来讲，我们在application.xml中配置一个bean标签，然后把类的全路径配置好之后，spring启动初始化时就把这个类路径对应的具体类初始化成了一个真正意义上的bean对象，我们就可以直接使用这个bean对象中的方法进行操作了；这里面最典型的就是aop、ioc了。\n\n**一、使用原生反射方式**\n\n\n<!--more-->\n\n\n**1. 新建一个普通的java类-Student**\n\n```java\n\n \tpublic class Student{\n\t\tprivate String userName;\n\t\tprivate String passWord;\n\t\t\n\t\tpublic Student(){}\n\t\t\n\t\tpublic Student(String userName,String passWord){\n\t\t\tthis.userName = userName;\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\t\tpublic String getPassWord() {\n\t\t\treturn passWord;\n\t\t}\n\t\tpublic void setPassWord(String passWord) {\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"Student [userName=\" + userName + \", passWord=\" + passWord + \"]\";\n\t\t}\n\t}\n\n```\n\n**2. 通过反射方法-getDeclaredMethods()获取该类中的全部方法**\n\n *注：通过getDeclaredMethods获取该类中所有方法，包括公共、保护、默认（包）访问和私有方法，当然不包括其继承的方法(比如Student的隐形继承的类Object中的方法)；通过getMethods获取所有公用（public）方法包括其继承类的公用方法(即包含父类Object中的方法)*\n\n```java\n\t\n\tClass<?> clazz = null;\n\ttry {\n\t\tclazz = Class.forName(\"com.maps.test.proxy.Student\");\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\n\n\tMethod[] methods = clazz.getDeclaredMethods();\n\tfor(int i=0;i<methods.length;i++){\n\t\tMethod method = methods[i];\n\t\t\n\t\tParameter[] parameters = method.getParameters();\n\t\tStringBuilder sbf = new StringBuilder(\"(\");\n\t\tfor(int m=0;m<parameters.length;m++){\n\t\t\tParameter parameter = parameters[m];\n\t\t\tString parameterName = parameter.getName();\n\t\t\tint modify = parameter.getModifiers();\n\t\t\tString parameterModify = Modifier.toString(modify);\n\t\t\tString parameterType = parameter.getType().getSimpleName();\n\t\t\tsbf.append(parameterModify).append(\" \").append(parameterType).append(\" \").append(parameterName).append(\",\");\n\t\t}\n\t\tif(sbf.lastIndexOf(\",\")>=0){\n\t\t\tsbf.deleteCharAt(sbf.length()-1);\t\n\t\t}\n\t\tsbf.append(\")\");\n\t\t\n\t\tSystem.out.println(\"[methodInfo:{methodName:\"+method.getName()+\",returnType:\"+method.getReturnType().getName()+\"}\"+\",parameterInfo:{\"+sbf.toString()+\"}]\");\n\t}\n\n```\n\n以上代码运行结果-输出了每一个方法和方法中的参数的访问权限、类型、名称信息\n\n>[methodInfo:{methodName:toString,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]\n[methodInfo:{methodName:setUserName,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]\n[methodInfo:{methodName:setPassWord,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]\n[methodInfo:{methodName:getPassWord,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]\n[methodInfo:{methodName:getUserName,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]\n\n\n**3. 通过反射方法-getDeclaredFields()获取该类中的所有属性**\n\n*注：getDeclaredFields方法用于获得类中的所有的属性，包括public、private和proteced、default，但是不包括父类中的属性；getFields方法获得类中的所有的公共（public）的字段，包括父类中声明的属性*\n\n```java\n\n\tField[] fields = clazz.getDeclaredFields();\n\tfor(int i=0;i<fields.length;i++){\n\t\tField field = fields[i];\n\t\tString fieldName = field.getName();//获取属性的名称\n\t\tClass<?> fieldType = field.getType();//获取属性的类型\n\t\tString fieldTypeValue = fieldType.getSimpleName(); //获取属性的简单类型，即不带java.lang前缀\n\t\tint modify = field.getModifiers();//获取数学的访问权限\n\t\tString modifyVal = Modifier.toString(modify);\n\t\tSystem.out.println(\"[fieldInfo:{fieldModify:\"+modifyVal+\",fieldType:\"+fieldTypeValue+\",fieldName:\"+fieldName+\"}]\");\n\t}\n\n```\n\n以上代码运行结果-输出了Student类中定义的两个属性\n\n>[fieldInfo:{fieldModify:private,fieldType:String,fieldName:userName}]\n[fieldInfo:{fieldModify:private,fieldType:String,fieldName:passWord}]\n\n**4. 通过反射调用类中的方法**\n\n```java\n\n\t/**\n\t * 通过类路径加载类Student\n\t */\n\tClass<?> clazz = null;\n\ttry {\n\t\tclazz = Class.forName(\"com.maps.test.proxy.Student\");\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\n\ttry {\n\t\t//实例化Studnt对象\n\t\tObject obj = clazz.newInstance();\n\t\t//获取Student中的方法名为setUserName，参数数量只有一个，参数类型为String的方法体\n\t\tMethod setUserNameMethod = clazz.getMethod(\"setUserName\",String.class);\n\t\t//通过反射invoke调用Student对象中的setUseName方法，并且传递参数“maps”\n\t\tsetUserNameMethod.invoke(obj,\"maps\");\n\t\t\n\t\t/**\n\t\t * 直接修改Student中的属性值\n\t\t */\n\t\tField field = clazz.getDeclaredField(\"userName\");//获取Studnt中名称为userName的属性\n\t    field.setAccessible(true);//设置该属性的可访问权限\n\t    field.set(obj, \"mapingsheng\");//然后把该属性的值设置为“mapingsheng”\n\t\t\n\t\t/**\n\t\t * 通过反射调用getUserName方法获取上一步设置好的属性-userName的值\n\t\t */\n\t\tMethod getUserNameMethod = clazz.getMethod(\"getUserName\");\n\t\tString userNameValue = (String) getUserNameMethod.invoke(obj);\n\t\tSystem.out.println(userNameValue);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n```\n\n以上代码运行结果：\n\n>mapingsheng\n\n\n**二、使用java动态代理-InvocationHandler方式**\n\n代理就是通过中间的代理对象间接的调用真实对象的方法的应用模式，在java中，java.lang.reflect API提供了API提供了proxy类和InvocationHandler接口来实现动态代理操作。Proxy类根据给定的参数创建动态代理类。 InvocationHandler调用动态代理类的方法。 以下将详细讨论所有这些情况：\n\n\n\n- java.lang.reflect.Proxy是一个提供静态方法来创建动态代理类的类。Proxy类中有一个newProxyInstance（）方法定义如下：\n\n```java\n\n\tpublic static Object newProxyInstance （ClassLoader loader ，Class <？> [] interfaces ，InvocationHandler h）\n\n```\n\n这个方法中的三个参数的意义：\n\n>ClassLoader：这个类加载器将定义动态代理类。类加载器可以通过正在创建其动态代理的类或接口来获取。\n>\n>interfaces：第二个参数是被代理的类所实现的所有接口的数组\n>\n>InvocationHandler：第三个参数是传递实现java.lang.reflect.InvocationHandler的类的实例\n>\n\n\n- java中的InvocationHandler是java.lang.reflect包中的接口。InvocationHandler由用户类实现，以调用动态代理类的方法。invoke方法的语法如下\n\n```java\n\n\tObject invoke（Object proxy ，Method m ，Object [] args） \n\n```\n\n这个方法中的三个参数的意义：\n\n>Object：这是调用方法的代理实例。 \n>\n>Method：这对应于在代理实例上调用的接口方法。 \n>\n>Object []：它包含一个在方法调用中传递的参数数组。\n>\n\n\n**- 具体使用代码演示java的动态代理操作**\n\n通过一个结婚的场景来模拟动态代理场景，比如日常生活中要结婚的话，需要预定场地和吃饭的酒店，并且出行需要预定汽车服务。\n\n- 一个代理结构(中介)提供了很多套餐(酒店+出行套餐、酒店+婚礼主持+出行套餐等等)--代理类MarryProxy\n- 这个代理机构提供了很多套餐服务，一般开发中都是面向接口编程(MarryPackageService、MarryPackageServiceImpl)\n\n我们采取最经济的套餐（酒店+出行套餐）来讲，可以看到上面场景一共需要提供如下类：\n\n1. 定义一个结婚套餐服务接口\n\n```java\n\n\t/**\n\t * 结婚套餐(提供酒店+出行服务)\n\t * @author mapingsheng\n\t */\n\tpublic interface MarryPackageService {\n\t\t\n\t\t/**\n\t\t * 提供酒店服务，一站式解决婚礼举办、就餐问题\n\t\t * @return\n\t\t */\n\t\tpublic String hotel(String address,String hotelName);\n\t\t/**\n\t\t * 提供用车服务，解决出行问题\n\t\t * @return\n\t\t */\n\t\tpublic String car(String carName);\n\t}\n\n```\n\n2. 定义一个结婚套餐接口的实现类\n\n```java\n\n\t/**\n\t * 结婚套餐(提供酒店+出行服务)具体业务类\n\t * @author mapingsheng\n\t */\n\tpublic class MarryPackageServiceImpl implements MarryPackageService{\n\t\n\t\t@Override\n\t\tpublic String hotel(String address, String hotelName) {\n\t\t\tDate date = new Date();\n\t\t\tSimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\t\t\n\t\t\treturn sf.format(date)+\" 【\"+address+\" \"+hotelName+\"】 提供就餐服务\";\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String car(String carName) {\n\t\t\treturn \"【\"+carName+\"】  提供出行服务\";\n\t\t}\n\t}\n\n```\n\n3. 定义一个代理结构-代理类\n\n*注：代理类必须实现InvocationHandler接口，我们在构造方法中初始化被代理的对象*\n\n```java\n\n\timport java.lang.reflect.InvocationHandler;\n\timport java.lang.reflect.Method;\n\t\n\tpublic class MarryProxy implements InvocationHandler{\n\t\n\t\tprivate Object obj;//这个就是我们要代理的真实对象\n\t\t\n\t\t/**\n\t\t * 通过构造函数初始化代理对象\n\t\t * @param obj\n\t\t */\n\t\tpublic  MarryProxy(Object obj){\n\t\t\t this.obj = obj;\n\t\t }\n\t\t\n\t\t/**\n\t\t * 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n\t\t */\n\t\t@Override\n\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\treturn method.invoke(obj, args);\n\t\t}\n\t}\n\n```\n\n4. 新建一个测试类\n\n```java\n\n\timport java.lang.reflect.InvocationHandler;\n\timport java.lang.reflect.Proxy;\n\t\n\tpublic class MarryClient {\n\t\n\t\tpublic static void main(String[] args) {\n\t\t\t//我们要代理的真实对象\n\t\t\tMarryPackageService marryPackageService = new MarryPackageServiceImpl();\n\t\t\t//初始化代理类\n\t\t\tInvocationHandler handler = new MarryProxy(marryPackageService);\n\t\t\t//通过Proxy的newProxyInstance方法来创建我们的代理对象\n\t\t\tObject obj = Proxy.newProxyInstance(marryPackageService.getClass().getClassLoader(), \n\t\t\t\t\t\t\t\t\t\t\t\tmarryPackageService.getClass().getInterfaces(), \n\t\t\t\t\t\t\t\t\t\t\t\thandler);\n\t\t\t\n\t\t\tMarryPackageService marryService = (MarryPackageService) obj;\n\t\t\tString hotelInfo = marryService.hotel(\"北京市海淀区中关村南大街8号\", \"香格里拉大酒店\");\n\t\t\tString carInfo = marryService.car(\"奥迪A6\");\n\t\t\tSystem.out.println(hotelInfo+\" \"+carInfo);\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>2017-05-10 14:41:57 【北京市海淀区中关村南大街8号 香格里拉大酒店】 提供就餐服务 【奥迪A6】  提供出行服务\n\n\n","source":"_posts/java通过反射操作类.md","raw":"---\ntitle: java通过反射操作类\ndate: 2017-05-10 11:17:22\ncategories: java\ntags: java\n---\n\n在开发中用到反射操作具体类的情况比较少，但是我们用到的一些开发框架确都是反射的应用代表，比如spring、hibernate、mybatis等等框架。\n\n就拿spring框架来讲，我们在application.xml中配置一个bean标签，然后把类的全路径配置好之后，spring启动初始化时就把这个类路径对应的具体类初始化成了一个真正意义上的bean对象，我们就可以直接使用这个bean对象中的方法进行操作了；这里面最典型的就是aop、ioc了。\n\n**一、使用原生反射方式**\n\n\n<!--more-->\n\n\n**1. 新建一个普通的java类-Student**\n\n```java\n\n \tpublic class Student{\n\t\tprivate String userName;\n\t\tprivate String passWord;\n\t\t\n\t\tpublic Student(){}\n\t\t\n\t\tpublic Student(String userName,String passWord){\n\t\t\tthis.userName = userName;\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\t\tpublic String getPassWord() {\n\t\t\treturn passWord;\n\t\t}\n\t\tpublic void setPassWord(String passWord) {\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"Student [userName=\" + userName + \", passWord=\" + passWord + \"]\";\n\t\t}\n\t}\n\n```\n\n**2. 通过反射方法-getDeclaredMethods()获取该类中的全部方法**\n\n *注：通过getDeclaredMethods获取该类中所有方法，包括公共、保护、默认（包）访问和私有方法，当然不包括其继承的方法(比如Student的隐形继承的类Object中的方法)；通过getMethods获取所有公用（public）方法包括其继承类的公用方法(即包含父类Object中的方法)*\n\n```java\n\t\n\tClass<?> clazz = null;\n\ttry {\n\t\tclazz = Class.forName(\"com.maps.test.proxy.Student\");\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\n\n\tMethod[] methods = clazz.getDeclaredMethods();\n\tfor(int i=0;i<methods.length;i++){\n\t\tMethod method = methods[i];\n\t\t\n\t\tParameter[] parameters = method.getParameters();\n\t\tStringBuilder sbf = new StringBuilder(\"(\");\n\t\tfor(int m=0;m<parameters.length;m++){\n\t\t\tParameter parameter = parameters[m];\n\t\t\tString parameterName = parameter.getName();\n\t\t\tint modify = parameter.getModifiers();\n\t\t\tString parameterModify = Modifier.toString(modify);\n\t\t\tString parameterType = parameter.getType().getSimpleName();\n\t\t\tsbf.append(parameterModify).append(\" \").append(parameterType).append(\" \").append(parameterName).append(\",\");\n\t\t}\n\t\tif(sbf.lastIndexOf(\",\")>=0){\n\t\t\tsbf.deleteCharAt(sbf.length()-1);\t\n\t\t}\n\t\tsbf.append(\")\");\n\t\t\n\t\tSystem.out.println(\"[methodInfo:{methodName:\"+method.getName()+\",returnType:\"+method.getReturnType().getName()+\"}\"+\",parameterInfo:{\"+sbf.toString()+\"}]\");\n\t}\n\n```\n\n以上代码运行结果-输出了每一个方法和方法中的参数的访问权限、类型、名称信息\n\n>[methodInfo:{methodName:toString,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]\n[methodInfo:{methodName:setUserName,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]\n[methodInfo:{methodName:setPassWord,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]\n[methodInfo:{methodName:getPassWord,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]\n[methodInfo:{methodName:getUserName,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]\n\n\n**3. 通过反射方法-getDeclaredFields()获取该类中的所有属性**\n\n*注：getDeclaredFields方法用于获得类中的所有的属性，包括public、private和proteced、default，但是不包括父类中的属性；getFields方法获得类中的所有的公共（public）的字段，包括父类中声明的属性*\n\n```java\n\n\tField[] fields = clazz.getDeclaredFields();\n\tfor(int i=0;i<fields.length;i++){\n\t\tField field = fields[i];\n\t\tString fieldName = field.getName();//获取属性的名称\n\t\tClass<?> fieldType = field.getType();//获取属性的类型\n\t\tString fieldTypeValue = fieldType.getSimpleName(); //获取属性的简单类型，即不带java.lang前缀\n\t\tint modify = field.getModifiers();//获取数学的访问权限\n\t\tString modifyVal = Modifier.toString(modify);\n\t\tSystem.out.println(\"[fieldInfo:{fieldModify:\"+modifyVal+\",fieldType:\"+fieldTypeValue+\",fieldName:\"+fieldName+\"}]\");\n\t}\n\n```\n\n以上代码运行结果-输出了Student类中定义的两个属性\n\n>[fieldInfo:{fieldModify:private,fieldType:String,fieldName:userName}]\n[fieldInfo:{fieldModify:private,fieldType:String,fieldName:passWord}]\n\n**4. 通过反射调用类中的方法**\n\n```java\n\n\t/**\n\t * 通过类路径加载类Student\n\t */\n\tClass<?> clazz = null;\n\ttry {\n\t\tclazz = Class.forName(\"com.maps.test.proxy.Student\");\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\n\ttry {\n\t\t//实例化Studnt对象\n\t\tObject obj = clazz.newInstance();\n\t\t//获取Student中的方法名为setUserName，参数数量只有一个，参数类型为String的方法体\n\t\tMethod setUserNameMethod = clazz.getMethod(\"setUserName\",String.class);\n\t\t//通过反射invoke调用Student对象中的setUseName方法，并且传递参数“maps”\n\t\tsetUserNameMethod.invoke(obj,\"maps\");\n\t\t\n\t\t/**\n\t\t * 直接修改Student中的属性值\n\t\t */\n\t\tField field = clazz.getDeclaredField(\"userName\");//获取Studnt中名称为userName的属性\n\t    field.setAccessible(true);//设置该属性的可访问权限\n\t    field.set(obj, \"mapingsheng\");//然后把该属性的值设置为“mapingsheng”\n\t\t\n\t\t/**\n\t\t * 通过反射调用getUserName方法获取上一步设置好的属性-userName的值\n\t\t */\n\t\tMethod getUserNameMethod = clazz.getMethod(\"getUserName\");\n\t\tString userNameValue = (String) getUserNameMethod.invoke(obj);\n\t\tSystem.out.println(userNameValue);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n```\n\n以上代码运行结果：\n\n>mapingsheng\n\n\n**二、使用java动态代理-InvocationHandler方式**\n\n代理就是通过中间的代理对象间接的调用真实对象的方法的应用模式，在java中，java.lang.reflect API提供了API提供了proxy类和InvocationHandler接口来实现动态代理操作。Proxy类根据给定的参数创建动态代理类。 InvocationHandler调用动态代理类的方法。 以下将详细讨论所有这些情况：\n\n\n\n- java.lang.reflect.Proxy是一个提供静态方法来创建动态代理类的类。Proxy类中有一个newProxyInstance（）方法定义如下：\n\n```java\n\n\tpublic static Object newProxyInstance （ClassLoader loader ，Class <？> [] interfaces ，InvocationHandler h）\n\n```\n\n这个方法中的三个参数的意义：\n\n>ClassLoader：这个类加载器将定义动态代理类。类加载器可以通过正在创建其动态代理的类或接口来获取。\n>\n>interfaces：第二个参数是被代理的类所实现的所有接口的数组\n>\n>InvocationHandler：第三个参数是传递实现java.lang.reflect.InvocationHandler的类的实例\n>\n\n\n- java中的InvocationHandler是java.lang.reflect包中的接口。InvocationHandler由用户类实现，以调用动态代理类的方法。invoke方法的语法如下\n\n```java\n\n\tObject invoke（Object proxy ，Method m ，Object [] args） \n\n```\n\n这个方法中的三个参数的意义：\n\n>Object：这是调用方法的代理实例。 \n>\n>Method：这对应于在代理实例上调用的接口方法。 \n>\n>Object []：它包含一个在方法调用中传递的参数数组。\n>\n\n\n**- 具体使用代码演示java的动态代理操作**\n\n通过一个结婚的场景来模拟动态代理场景，比如日常生活中要结婚的话，需要预定场地和吃饭的酒店，并且出行需要预定汽车服务。\n\n- 一个代理结构(中介)提供了很多套餐(酒店+出行套餐、酒店+婚礼主持+出行套餐等等)--代理类MarryProxy\n- 这个代理机构提供了很多套餐服务，一般开发中都是面向接口编程(MarryPackageService、MarryPackageServiceImpl)\n\n我们采取最经济的套餐（酒店+出行套餐）来讲，可以看到上面场景一共需要提供如下类：\n\n1. 定义一个结婚套餐服务接口\n\n```java\n\n\t/**\n\t * 结婚套餐(提供酒店+出行服务)\n\t * @author mapingsheng\n\t */\n\tpublic interface MarryPackageService {\n\t\t\n\t\t/**\n\t\t * 提供酒店服务，一站式解决婚礼举办、就餐问题\n\t\t * @return\n\t\t */\n\t\tpublic String hotel(String address,String hotelName);\n\t\t/**\n\t\t * 提供用车服务，解决出行问题\n\t\t * @return\n\t\t */\n\t\tpublic String car(String carName);\n\t}\n\n```\n\n2. 定义一个结婚套餐接口的实现类\n\n```java\n\n\t/**\n\t * 结婚套餐(提供酒店+出行服务)具体业务类\n\t * @author mapingsheng\n\t */\n\tpublic class MarryPackageServiceImpl implements MarryPackageService{\n\t\n\t\t@Override\n\t\tpublic String hotel(String address, String hotelName) {\n\t\t\tDate date = new Date();\n\t\t\tSimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\t\t\n\t\t\treturn sf.format(date)+\" 【\"+address+\" \"+hotelName+\"】 提供就餐服务\";\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String car(String carName) {\n\t\t\treturn \"【\"+carName+\"】  提供出行服务\";\n\t\t}\n\t}\n\n```\n\n3. 定义一个代理结构-代理类\n\n*注：代理类必须实现InvocationHandler接口，我们在构造方法中初始化被代理的对象*\n\n```java\n\n\timport java.lang.reflect.InvocationHandler;\n\timport java.lang.reflect.Method;\n\t\n\tpublic class MarryProxy implements InvocationHandler{\n\t\n\t\tprivate Object obj;//这个就是我们要代理的真实对象\n\t\t\n\t\t/**\n\t\t * 通过构造函数初始化代理对象\n\t\t * @param obj\n\t\t */\n\t\tpublic  MarryProxy(Object obj){\n\t\t\t this.obj = obj;\n\t\t }\n\t\t\n\t\t/**\n\t\t * 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n\t\t */\n\t\t@Override\n\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\treturn method.invoke(obj, args);\n\t\t}\n\t}\n\n```\n\n4. 新建一个测试类\n\n```java\n\n\timport java.lang.reflect.InvocationHandler;\n\timport java.lang.reflect.Proxy;\n\t\n\tpublic class MarryClient {\n\t\n\t\tpublic static void main(String[] args) {\n\t\t\t//我们要代理的真实对象\n\t\t\tMarryPackageService marryPackageService = new MarryPackageServiceImpl();\n\t\t\t//初始化代理类\n\t\t\tInvocationHandler handler = new MarryProxy(marryPackageService);\n\t\t\t//通过Proxy的newProxyInstance方法来创建我们的代理对象\n\t\t\tObject obj = Proxy.newProxyInstance(marryPackageService.getClass().getClassLoader(), \n\t\t\t\t\t\t\t\t\t\t\t\tmarryPackageService.getClass().getInterfaces(), \n\t\t\t\t\t\t\t\t\t\t\t\thandler);\n\t\t\t\n\t\t\tMarryPackageService marryService = (MarryPackageService) obj;\n\t\t\tString hotelInfo = marryService.hotel(\"北京市海淀区中关村南大街8号\", \"香格里拉大酒店\");\n\t\t\tString carInfo = marryService.car(\"奥迪A6\");\n\t\t\tSystem.out.println(hotelInfo+\" \"+carInfo);\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>2017-05-10 14:41:57 【北京市海淀区中关村南大街8号 香格里拉大酒店】 提供就餐服务 【奥迪A6】  提供出行服务\n\n\n","slug":"java通过反射操作类","published":1,"updated":"2018-07-08T09:37:48.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pj9003h30tz18na34ub","content":"<p>在开发中用到反射操作具体类的情况比较少，但是我们用到的一些开发框架确都是反射的应用代表，比如spring、hibernate、mybatis等等框架。</p>\n<p>就拿spring框架来讲，我们在application.xml中配置一个bean标签，然后把类的全路径配置好之后，spring启动初始化时就把这个类路径对应的具体类初始化成了一个真正意义上的bean对象，我们就可以直接使用这个bean对象中的方法进行操作了；这里面最典型的就是aop、ioc了。</p>\n<p><strong>一、使用原生反射方式</strong></p>\n<a id=\"more\"></a>\n<p><strong>1. 新建一个普通的java类-Student</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String userName;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String passWord;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String userName,String passWord)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassWord</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassWord</span><span class=\"params\">(String passWord)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Student [userName=\"</span> + userName + <span class=\"string\">\", passWord=\"</span> + passWord + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 通过反射方法-getDeclaredMethods()获取该类中的全部方法</strong></p>\n<p> <em>注：通过getDeclaredMethods获取该类中所有方法，包括公共、保护、默认（包）访问和私有方法，当然不包括其继承的方法(比如Student的隐形继承的类Object中的方法)；通过getMethods获取所有公用（public）方法包括其继承类的公用方法(即包含父类Object中的方法)</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class&lt;?&gt; clazz = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tclazz = Class.forName(<span class=\"string\">\"com.maps.test.proxy.Student\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Method[] methods = clazz.getDeclaredMethods();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;methods.length;i++)&#123;</div><div class=\"line\">\tMethod method = methods[i];</div><div class=\"line\">\t</div><div class=\"line\">\tParameter[] parameters = method.getParameters();</div><div class=\"line\">\tStringBuilder sbf = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"(\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">0</span>;m&lt;parameters.length;m++)&#123;</div><div class=\"line\">\t\tParameter parameter = parameters[m];</div><div class=\"line\">\t\tString parameterName = parameter.getName();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> modify = parameter.getModifiers();</div><div class=\"line\">\t\tString parameterModify = Modifier.toString(modify);</div><div class=\"line\">\t\tString parameterType = parameter.getType().getSimpleName();</div><div class=\"line\">\t\tsbf.append(parameterModify).append(<span class=\"string\">\" \"</span>).append(parameterType).append(<span class=\"string\">\" \"</span>).append(parameterName).append(<span class=\"string\">\",\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sbf.lastIndexOf(<span class=\"string\">\",\"</span>)&gt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\tsbf.deleteCharAt(sbf.length()-<span class=\"number\">1</span>);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsbf.append(<span class=\"string\">\")\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"[methodInfo:&#123;methodName:\"</span>+method.getName()+<span class=\"string\">\",returnType:\"</span>+method.getReturnType().getName()+<span class=\"string\">\"&#125;\"</span>+<span class=\"string\">\",parameterInfo:&#123;\"</span>+sbf.toString()+<span class=\"string\">\"&#125;]\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果-输出了每一个方法和方法中的参数的访问权限、类型、名称信息</p>\n<blockquote>\n<p>[methodInfo:{methodName:toString,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]<br>[methodInfo:{methodName:setUserName,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]<br>[methodInfo:{methodName:setPassWord,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]<br>[methodInfo:{methodName:getPassWord,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]<br>[methodInfo:{methodName:getUserName,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]</p>\n</blockquote>\n<p><strong>3. 通过反射方法-getDeclaredFields()获取该类中的所有属性</strong></p>\n<p><em>注：getDeclaredFields方法用于获得类中的所有的属性，包括public、private和proteced、default，但是不包括父类中的属性；getFields方法获得类中的所有的公共（public）的字段，包括父类中声明的属性</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Field[] fields = clazz.getDeclaredFields();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;fields.length;i++)&#123;</div><div class=\"line\">\tField field = fields[i];</div><div class=\"line\">\tString fieldName = field.getName();<span class=\"comment\">//获取属性的名称</span></div><div class=\"line\">\tClass&lt;?&gt; fieldType = field.getType();<span class=\"comment\">//获取属性的类型</span></div><div class=\"line\">\tString fieldTypeValue = fieldType.getSimpleName(); <span class=\"comment\">//获取属性的简单类型，即不带java.lang前缀</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> modify = field.getModifiers();<span class=\"comment\">//获取数学的访问权限</span></div><div class=\"line\">\tString modifyVal = Modifier.toString(modify);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"[fieldInfo:&#123;fieldModify:\"</span>+modifyVal+<span class=\"string\">\",fieldType:\"</span>+fieldTypeValue+<span class=\"string\">\",fieldName:\"</span>+fieldName+<span class=\"string\">\"&#125;]\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果-输出了Student类中定义的两个属性</p>\n<blockquote>\n<p>[fieldInfo:{fieldModify:private,fieldType:String,fieldName:userName}]<br>[fieldInfo:{fieldModify:private,fieldType:String,fieldName:passWord}]</p>\n</blockquote>\n<p><strong>4. 通过反射调用类中的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通过类路径加载类Student</div><div class=\"line\"> */</div><div class=\"line\">Class&lt;?&gt; clazz = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tclazz = Class.forName(<span class=\"string\">\"com.maps.test.proxy.Student\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//实例化Studnt对象</span></div><div class=\"line\">\tObject obj = clazz.newInstance();</div><div class=\"line\">\t<span class=\"comment\">//获取Student中的方法名为setUserName，参数数量只有一个，参数类型为String的方法体</span></div><div class=\"line\">\tMethod setUserNameMethod = clazz.getMethod(<span class=\"string\">\"setUserName\"</span>,String.class);</div><div class=\"line\">\t<span class=\"comment\">//通过反射invoke调用Student对象中的setUseName方法，并且传递参数“maps”</span></div><div class=\"line\">\tsetUserNameMethod.invoke(obj,<span class=\"string\">\"maps\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 直接修改Student中的属性值</div><div class=\"line\">\t */</div><div class=\"line\">\tField field = clazz.getDeclaredField(<span class=\"string\">\"userName\"</span>);<span class=\"comment\">//获取Studnt中名称为userName的属性</span></div><div class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置该属性的可访问权限</span></div><div class=\"line\">    field.set(obj, <span class=\"string\">\"mapingsheng\"</span>);<span class=\"comment\">//然后把该属性的值设置为“mapingsheng”</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过反射调用getUserName方法获取上一步设置好的属性-userName的值</div><div class=\"line\">\t */</div><div class=\"line\">\tMethod getUserNameMethod = clazz.getMethod(<span class=\"string\">\"getUserName\"</span>);</div><div class=\"line\">\tString userNameValue = (String) getUserNameMethod.invoke(obj);</div><div class=\"line\">\tSystem.out.println(userNameValue);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>mapingsheng</p>\n</blockquote>\n<p><strong>二、使用java动态代理-InvocationHandler方式</strong></p>\n<p>代理就是通过中间的代理对象间接的调用真实对象的方法的应用模式，在java中，java.lang.reflect API提供了API提供了proxy类和InvocationHandler接口来实现动态代理操作。Proxy类根据给定的参数创建动态代理类。 InvocationHandler调用动态代理类的方法。 以下将详细讨论所有这些情况：</p>\n<ul>\n<li>java.lang.reflect.Proxy是一个提供静态方法来创建动态代理类的类。Proxy类中有一个newProxyInstance（）方法定义如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object newProxyInstance （ClassLoader loader ，Class &lt;？&gt; [] interfaces ，InvocationHandler h）</div></pre></td></tr></table></figure>\n<p>这个方法中的三个参数的意义：</p>\n<blockquote>\n<p>ClassLoader：这个类加载器将定义动态代理类。类加载器可以通过正在创建其动态代理的类或接口来获取。</p>\n<p>interfaces：第二个参数是被代理的类所实现的所有接口的数组</p>\n<p>InvocationHandler：第三个参数是传递实现java.lang.reflect.InvocationHandler的类的实例</p>\n</blockquote>\n<ul>\n<li>java中的InvocationHandler是java.lang.reflect包中的接口。InvocationHandler由用户类实现，以调用动态代理类的方法。invoke方法的语法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Object invoke（Object proxy ，Method m ，Object [] args）</div></pre></td></tr></table></figure>\n<p>这个方法中的三个参数的意义：</p>\n<blockquote>\n<p>Object：这是调用方法的代理实例。 </p>\n<p>Method：这对应于在代理实例上调用的接口方法。 </p>\n<p>Object []：它包含一个在方法调用中传递的参数数组。</p>\n</blockquote>\n<p><strong>- 具体使用代码演示java的动态代理操作</strong></p>\n<p>通过一个结婚的场景来模拟动态代理场景，比如日常生活中要结婚的话，需要预定场地和吃饭的酒店，并且出行需要预定汽车服务。</p>\n<ul>\n<li>一个代理结构(中介)提供了很多套餐(酒店+出行套餐、酒店+婚礼主持+出行套餐等等)–代理类MarryProxy</li>\n<li>这个代理机构提供了很多套餐服务，一般开发中都是面向接口编程(MarryPackageService、MarryPackageServiceImpl)</li>\n</ul>\n<p>我们采取最经济的套餐（酒店+出行套餐）来讲，可以看到上面场景一共需要提供如下类：</p>\n<ol>\n<li>定义一个结婚套餐服务接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 结婚套餐(提供酒店+出行服务)</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MarryPackageService</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 提供酒店服务，一站式解决婚礼举办、就餐问题</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hotel</span><span class=\"params\">(String address,String hotelName)</span></span>;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 提供用车服务，解决出行问题</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">car</span><span class=\"params\">(String carName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>定义一个结婚套餐接口的实现类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 结婚套餐(提供酒店+出行服务)具体业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarryPackageServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">MarryPackageService</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hotel</span><span class=\"params\">(String address, String hotelName)</span> </span>&#123;</div><div class=\"line\">\t\tDate date = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">\t\tSimpleDateFormat sf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sf.format(date)+<span class=\"string\">\" 【\"</span>+address+<span class=\"string\">\" \"</span>+hotelName+<span class=\"string\">\"】 提供就餐服务\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">car</span><span class=\"params\">(String carName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"【\"</span>+carName+<span class=\"string\">\"】  提供出行服务\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>定义一个代理结构-代理类</li>\n</ol>\n<p><em>注：代理类必须实现InvocationHandler接口，我们在构造方法中初始化被代理的对象</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarryProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object obj;<span class=\"comment\">//这个就是我们要代理的真实对象</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过构造函数初始化代理对象</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> obj</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">MarryProxy</span><span class=\"params\">(Object obj)</span></span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">this</span>.obj = obj;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> method.invoke(obj, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>新建一个测试类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarryClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//我们要代理的真实对象</span></div><div class=\"line\">\t\tMarryPackageService marryPackageService = <span class=\"keyword\">new</span> MarryPackageServiceImpl();</div><div class=\"line\">\t\t<span class=\"comment\">//初始化代理类</span></div><div class=\"line\">\t\tInvocationHandler handler = <span class=\"keyword\">new</span> MarryProxy(marryPackageService);</div><div class=\"line\">\t\t<span class=\"comment\">//通过Proxy的newProxyInstance方法来创建我们的代理对象</span></div><div class=\"line\">\t\tObject obj = Proxy.newProxyInstance(marryPackageService.getClass().getClassLoader(), </div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t\tmarryPackageService.getClass().getInterfaces(), </div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t\thandler);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tMarryPackageService marryService = (MarryPackageService) obj;</div><div class=\"line\">\t\tString hotelInfo = marryService.hotel(<span class=\"string\">\"北京市海淀区中关村南大街8号\"</span>, <span class=\"string\">\"香格里拉大酒店\"</span>);</div><div class=\"line\">\t\tString carInfo = marryService.car(<span class=\"string\">\"奥迪A6\"</span>);</div><div class=\"line\">\t\tSystem.out.println(hotelInfo+<span class=\"string\">\" \"</span>+carInfo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>2017-05-10 14:41:57 【北京市海淀区中关村南大街8号 香格里拉大酒店】 提供就餐服务 【奥迪A6】  提供出行服务</p>\n</blockquote>\n","excerpt":"<p>在开发中用到反射操作具体类的情况比较少，但是我们用到的一些开发框架确都是反射的应用代表，比如spring、hibernate、mybatis等等框架。</p>\n<p>就拿spring框架来讲，我们在application.xml中配置一个bean标签，然后把类的全路径配置好之后，spring启动初始化时就把这个类路径对应的具体类初始化成了一个真正意义上的bean对象，我们就可以直接使用这个bean对象中的方法进行操作了；这里面最典型的就是aop、ioc了。</p>\n<p><strong>一、使用原生反射方式</strong></p>","more":"<p><strong>1. 新建一个普通的java类-Student</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String userName;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String passWord;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String userName,String passWord)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassWord</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassWord</span><span class=\"params\">(String passWord)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Student [userName=\"</span> + userName + <span class=\"string\">\", passWord=\"</span> + passWord + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 通过反射方法-getDeclaredMethods()获取该类中的全部方法</strong></p>\n<p> <em>注：通过getDeclaredMethods获取该类中所有方法，包括公共、保护、默认（包）访问和私有方法，当然不包括其继承的方法(比如Student的隐形继承的类Object中的方法)；通过getMethods获取所有公用（public）方法包括其继承类的公用方法(即包含父类Object中的方法)</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class&lt;?&gt; clazz = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tclazz = Class.forName(<span class=\"string\">\"com.maps.test.proxy.Student\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Method[] methods = clazz.getDeclaredMethods();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;methods.length;i++)&#123;</div><div class=\"line\">\tMethod method = methods[i];</div><div class=\"line\">\t</div><div class=\"line\">\tParameter[] parameters = method.getParameters();</div><div class=\"line\">\tStringBuilder sbf = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"(\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">0</span>;m&lt;parameters.length;m++)&#123;</div><div class=\"line\">\t\tParameter parameter = parameters[m];</div><div class=\"line\">\t\tString parameterName = parameter.getName();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> modify = parameter.getModifiers();</div><div class=\"line\">\t\tString parameterModify = Modifier.toString(modify);</div><div class=\"line\">\t\tString parameterType = parameter.getType().getSimpleName();</div><div class=\"line\">\t\tsbf.append(parameterModify).append(<span class=\"string\">\" \"</span>).append(parameterType).append(<span class=\"string\">\" \"</span>).append(parameterName).append(<span class=\"string\">\",\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sbf.lastIndexOf(<span class=\"string\">\",\"</span>)&gt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\tsbf.deleteCharAt(sbf.length()-<span class=\"number\">1</span>);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsbf.append(<span class=\"string\">\")\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"[methodInfo:&#123;methodName:\"</span>+method.getName()+<span class=\"string\">\",returnType:\"</span>+method.getReturnType().getName()+<span class=\"string\">\"&#125;\"</span>+<span class=\"string\">\",parameterInfo:&#123;\"</span>+sbf.toString()+<span class=\"string\">\"&#125;]\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果-输出了每一个方法和方法中的参数的访问权限、类型、名称信息</p>\n<blockquote>\n<p>[methodInfo:{methodName:toString,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]<br>[methodInfo:{methodName:setUserName,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]<br>[methodInfo:{methodName:setPassWord,returnType:void,methodModify:public},parameterInfo:{( String arg0)}]<br>[methodInfo:{methodName:getPassWord,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]<br>[methodInfo:{methodName:getUserName,returnType:java.lang.String,methodModify:public},parameterInfo:{()}]</p>\n</blockquote>\n<p><strong>3. 通过反射方法-getDeclaredFields()获取该类中的所有属性</strong></p>\n<p><em>注：getDeclaredFields方法用于获得类中的所有的属性，包括public、private和proteced、default，但是不包括父类中的属性；getFields方法获得类中的所有的公共（public）的字段，包括父类中声明的属性</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Field[] fields = clazz.getDeclaredFields();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;fields.length;i++)&#123;</div><div class=\"line\">\tField field = fields[i];</div><div class=\"line\">\tString fieldName = field.getName();<span class=\"comment\">//获取属性的名称</span></div><div class=\"line\">\tClass&lt;?&gt; fieldType = field.getType();<span class=\"comment\">//获取属性的类型</span></div><div class=\"line\">\tString fieldTypeValue = fieldType.getSimpleName(); <span class=\"comment\">//获取属性的简单类型，即不带java.lang前缀</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> modify = field.getModifiers();<span class=\"comment\">//获取数学的访问权限</span></div><div class=\"line\">\tString modifyVal = Modifier.toString(modify);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"[fieldInfo:&#123;fieldModify:\"</span>+modifyVal+<span class=\"string\">\",fieldType:\"</span>+fieldTypeValue+<span class=\"string\">\",fieldName:\"</span>+fieldName+<span class=\"string\">\"&#125;]\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果-输出了Student类中定义的两个属性</p>\n<blockquote>\n<p>[fieldInfo:{fieldModify:private,fieldType:String,fieldName:userName}]<br>[fieldInfo:{fieldModify:private,fieldType:String,fieldName:passWord}]</p>\n</blockquote>\n<p><strong>4. 通过反射调用类中的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通过类路径加载类Student</div><div class=\"line\"> */</span></div><div class=\"line\">Class&lt;?&gt; clazz = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tclazz = Class.forName(<span class=\"string\">\"com.maps.test.proxy.Student\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//实例化Studnt对象</span></div><div class=\"line\">\tObject obj = clazz.newInstance();</div><div class=\"line\">\t<span class=\"comment\">//获取Student中的方法名为setUserName，参数数量只有一个，参数类型为String的方法体</span></div><div class=\"line\">\tMethod setUserNameMethod = clazz.getMethod(<span class=\"string\">\"setUserName\"</span>,String.class);</div><div class=\"line\">\t<span class=\"comment\">//通过反射invoke调用Student对象中的setUseName方法，并且传递参数“maps”</span></div><div class=\"line\">\tsetUserNameMethod.invoke(obj,<span class=\"string\">\"maps\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 直接修改Student中的属性值</div><div class=\"line\">\t */</span></div><div class=\"line\">\tField field = clazz.getDeclaredField(<span class=\"string\">\"userName\"</span>);<span class=\"comment\">//获取Studnt中名称为userName的属性</span></div><div class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置该属性的可访问权限</span></div><div class=\"line\">    field.set(obj, <span class=\"string\">\"mapingsheng\"</span>);<span class=\"comment\">//然后把该属性的值设置为“mapingsheng”</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 通过反射调用getUserName方法获取上一步设置好的属性-userName的值</div><div class=\"line\">\t */</span></div><div class=\"line\">\tMethod getUserNameMethod = clazz.getMethod(<span class=\"string\">\"getUserName\"</span>);</div><div class=\"line\">\tString userNameValue = (String) getUserNameMethod.invoke(obj);</div><div class=\"line\">\tSystem.out.println(userNameValue);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>mapingsheng</p>\n</blockquote>\n<p><strong>二、使用java动态代理-InvocationHandler方式</strong></p>\n<p>代理就是通过中间的代理对象间接的调用真实对象的方法的应用模式，在java中，java.lang.reflect API提供了API提供了proxy类和InvocationHandler接口来实现动态代理操作。Proxy类根据给定的参数创建动态代理类。 InvocationHandler调用动态代理类的方法。 以下将详细讨论所有这些情况：</p>\n<ul>\n<li>java.lang.reflect.Proxy是一个提供静态方法来创建动态代理类的类。Proxy类中有一个newProxyInstance（）方法定义如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object newProxyInstance （ClassLoader loader ，Class &lt;？&gt; [] interfaces ，InvocationHandler h）</div></pre></td></tr></table></figure>\n<p>这个方法中的三个参数的意义：</p>\n<blockquote>\n<p>ClassLoader：这个类加载器将定义动态代理类。类加载器可以通过正在创建其动态代理的类或接口来获取。</p>\n<p>interfaces：第二个参数是被代理的类所实现的所有接口的数组</p>\n<p>InvocationHandler：第三个参数是传递实现java.lang.reflect.InvocationHandler的类的实例</p>\n</blockquote>\n<ul>\n<li>java中的InvocationHandler是java.lang.reflect包中的接口。InvocationHandler由用户类实现，以调用动态代理类的方法。invoke方法的语法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Object invoke（Object proxy ，Method m ，Object [] args）</div></pre></td></tr></table></figure>\n<p>这个方法中的三个参数的意义：</p>\n<blockquote>\n<p>Object：这是调用方法的代理实例。 </p>\n<p>Method：这对应于在代理实例上调用的接口方法。 </p>\n<p>Object []：它包含一个在方法调用中传递的参数数组。</p>\n</blockquote>\n<p><strong>- 具体使用代码演示java的动态代理操作</strong></p>\n<p>通过一个结婚的场景来模拟动态代理场景，比如日常生活中要结婚的话，需要预定场地和吃饭的酒店，并且出行需要预定汽车服务。</p>\n<ul>\n<li>一个代理结构(中介)提供了很多套餐(酒店+出行套餐、酒店+婚礼主持+出行套餐等等)–代理类MarryProxy</li>\n<li>这个代理机构提供了很多套餐服务，一般开发中都是面向接口编程(MarryPackageService、MarryPackageServiceImpl)</li>\n</ul>\n<p>我们采取最经济的套餐（酒店+出行套餐）来讲，可以看到上面场景一共需要提供如下类：</p>\n<ol>\n<li>定义一个结婚套餐服务接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 结婚套餐(提供酒店+出行服务)</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MarryPackageService</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 提供酒店服务，一站式解决婚礼举办、就餐问题</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hotel</span><span class=\"params\">(String address,String hotelName)</span></span>;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 提供用车服务，解决出行问题</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">car</span><span class=\"params\">(String carName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>定义一个结婚套餐接口的实现类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 结婚套餐(提供酒店+出行服务)具体业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarryPackageServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">MarryPackageService</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hotel</span><span class=\"params\">(String address, String hotelName)</span> </span>&#123;</div><div class=\"line\">\t\tDate date = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">\t\tSimpleDateFormat sf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sf.format(date)+<span class=\"string\">\" 【\"</span>+address+<span class=\"string\">\" \"</span>+hotelName+<span class=\"string\">\"】 提供就餐服务\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">car</span><span class=\"params\">(String carName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"【\"</span>+carName+<span class=\"string\">\"】  提供出行服务\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>定义一个代理结构-代理类</li>\n</ol>\n<p><em>注：代理类必须实现InvocationHandler接口，我们在构造方法中初始化被代理的对象</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarryProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object obj;<span class=\"comment\">//这个就是我们要代理的真实对象</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 通过构造函数初始化代理对象</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> obj</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">MarryProxy</span><span class=\"params\">(Object obj)</span></span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">this</span>.obj = obj;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> method.invoke(obj, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>新建一个测试类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarryClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//我们要代理的真实对象</span></div><div class=\"line\">\t\tMarryPackageService marryPackageService = <span class=\"keyword\">new</span> MarryPackageServiceImpl();</div><div class=\"line\">\t\t<span class=\"comment\">//初始化代理类</span></div><div class=\"line\">\t\tInvocationHandler handler = <span class=\"keyword\">new</span> MarryProxy(marryPackageService);</div><div class=\"line\">\t\t<span class=\"comment\">//通过Proxy的newProxyInstance方法来创建我们的代理对象</span></div><div class=\"line\">\t\tObject obj = Proxy.newProxyInstance(marryPackageService.getClass().getClassLoader(), </div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t\tmarryPackageService.getClass().getInterfaces(), </div><div class=\"line\">\t\t\t\t\t\t\t\t\t\t\thandler);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tMarryPackageService marryService = (MarryPackageService) obj;</div><div class=\"line\">\t\tString hotelInfo = marryService.hotel(<span class=\"string\">\"北京市海淀区中关村南大街8号\"</span>, <span class=\"string\">\"香格里拉大酒店\"</span>);</div><div class=\"line\">\t\tString carInfo = marryService.car(<span class=\"string\">\"奥迪A6\"</span>);</div><div class=\"line\">\t\tSystem.out.println(hotelInfo+<span class=\"string\">\" \"</span>+carInfo);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>2017-05-10 14:41:57 【北京市海淀区中关村南大街8号 香格里拉大酒店】 提供就餐服务 【奥迪A6】  提供出行服务</p>\n</blockquote>"},{"title":"jersey-1--轻量级Rest接口后台服务框架搭建","date":"2017-07-03T11:28:20.000Z","_content":"\n随着项目的收尾与上线，忽然感觉到犹如悟空丢掉金箍棒双手释然之感；但这种感觉也犹如隐鼠出洞惶恐至极；或许把一个项目做完之后的反思与感悟可以让我这个大龄coder对这种悚然之感得以慰藉！\n\n<!--more-->\n\n**一、项目背景**\n\n由于手机app端用到了***公司的IM中间件产品，说白了就是在手机中添加一个跟微信聊天一样的功能；该版本app已经上线，但是需要对这个IM中的群组、单聊等活跃度进行数据分析，把聊天数据进行采集，然后存入大数据平台，通过数据分析系统进行分析报表处理。所以迫切需要做一个数据中转服务系统，要求这套系统短小精悍，越轻量级越好，关键是研发周期就5天！！！！\n\n项目框架图\n\n![Alt text](http://soujava.com/images/jerseykuangjiatu.png)\n\n\n**二、技术调研**\n\n\n后来经过技术调研，看中了jersey这个rest框架，简单了解试用之后就当机立断的选用了。首先看他的简介：\n\n![Alt text](http://soujava.com/images/jerseyabort.png)\n\n归纳一下就是：\n\n> - 一个开源的RESTful Web服务框架，可以非常简单的开发rest服务，并且支持各种数据类型\n>\n> - 基于底层的JAX-RS API实现\n> \n\n**三、项目搭建**\n\n\n**1. 添加依赖**\n\n基于maven新建web工程，然后在pom.xml文件中添加相关的依赖\n\n```java\n\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-core</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n  \t\n  \t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-server</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-servlet</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-bundle</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-json</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\n\t    <dependency>\n\t      <groupId>junit</groupId>\n\t      <artifactId>junit</artifactId>\n\t      <version>3.8.1</version>\n\t      <scope>test</scope>\n\t    </dependency>\n\n```\n\n**2. 新建一个rest接口的数据封装类-HelloWordVO**\n\n```java\n\n\tpackage com.maps.vo;\n\t\n\timport java.io.Serializable;\n\t\n\tpublic class HelloWordVO implements Serializable{\n\t\tprivate static final long serialVersionUID = 9129043716825852339L;\n\t\t\n\t\tprivate String notice;\n\t\n\t\tpublic String getNotice() {\n\t\t\treturn notice;\n\t\t}\n\t\n\t\tpublic void setNotice(String notice) {\n\t\t\tthis.notice = notice;\n\t\t}\n\t}\n\n```\n\n\n**3. 新建一个rest接口的服务类(控制器)-HelloWordController**\n\n```java\n\n\tpackage com.maps.rest;\n\t\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.Produces;\n\t\n\timport com.maps.vo.HelloWordVO;\n\t\n\t@Path(\"/\")\n\tpublic class HelloWordController {\n\t\t\n\t\t@GET\n\t\t@Path(\"/helloWord\")\n\t\t@Produces({ \"application/json\" })\n\t\tpublic HelloWordVO helloWord(){\n\t\t\tHelloWordVO helloword = new HelloWordVO();\n\t\t\thelloword.setNotice(\"helloword\");\n\t\t\treturn helloword;\n\t\t}\n\t}\n\n```\n\n\n**4. 配置src/main/webapp/WEB-INF/web.xml**\n\n对于一个web工程来讲，必不可少的就是servlet，说白了，所有的请求响应都是基于servlet处理的，而servlet又需要运行在servlet容器中，所以我们在web.xml中配置servlet容器\n\n```java\n\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n\t\tversion=\"3.0\">\n\t    \n\t    <servlet>\n\t    \t<!-- 配置servlet容器运行的容器 -->\n\t\t\t<servlet-name>jersey</servlet-name> \n\t\t\t<servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>\n\t        \n\t\t\t<!-- 配置servlet容器初始化的类的路径，就好比spring中的 <context:component-scan base-package=\"com.*\" />的功能 -->\n\t\t\t<init-param>\n\t            <param-name>com.sun.jersey.config.property.packages</param-name>\n\t\t\t\t<param-value>com.maps</param-value> \n\t\t\t</init-param> \n\t\t\t\n\t\t\t<!-- 开启简单的java对象直接映射转换json的功能，说白了就是可以在相应中直接在方法中对应的的java对象作为响应返回 ，\n\t\t\t就好比spring中的   @RestController的功能 -->\n\t\t\t<init-param>\n\t            <param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>\n\t            <param-value>true</param-value>\n\t        </init-param>\n\t\t\t\n\t\t\t<load-on-startup>1</load-on-startup>\n\t\t</servlet>\n\t    \n\t    <servlet-mapping>\n\t        <servlet-name>jersey</servlet-name>\n\t        <url-pattern>/*</url-pattern>\n\t    </servlet-mapping>\n\t    \n\t  <display-name>Archetype Created Web Application</display-name>\n\t</web-app>\n\n```\n\n*到现在为止，我们的rest服务接口已经开发完毕了*\n\n\n**5. 运行pom.xml编译项目工程**\n\n> clean install package\n\n\n**4. 启动tomcat服务器,并访问helloWord对应的rest接口**\n\n\n![Alt text](http://soujava.com/images/jerseyhello.png)\n\n\n**四、小结**\n\n> 首先搭建一个项目开发框架非常快速简单，几分钟就可以搭建完成，对比用springMvc去搭建的话可想而知\n> \n> 对于一个纯净版的工程，整个项目编译完成后的程序文件总大小仅仅3M，而对于一个纯净版的springMVC项目至少要30M，启动该项目仅仅3秒左右，而启动springmvc项目则要10秒以上\n> \n> 上面的与springMvc对比不是为了说他不好，主要取决于技术定位与应用场景；当然springmvc可以轻而易举做的事情，jersey就不一定可以\n\n\n\n\n\n\n","source":"_posts/jersey-1-轻量级Rest接口后台服务框架搭建.md","raw":"---\ntitle: jersey-1--轻量级Rest接口后台服务框架搭建\ndate: 2017-07-03 19:28:20\ncategories: jersey\ntags: java\n---\n\n随着项目的收尾与上线，忽然感觉到犹如悟空丢掉金箍棒双手释然之感；但这种感觉也犹如隐鼠出洞惶恐至极；或许把一个项目做完之后的反思与感悟可以让我这个大龄coder对这种悚然之感得以慰藉！\n\n<!--more-->\n\n**一、项目背景**\n\n由于手机app端用到了***公司的IM中间件产品，说白了就是在手机中添加一个跟微信聊天一样的功能；该版本app已经上线，但是需要对这个IM中的群组、单聊等活跃度进行数据分析，把聊天数据进行采集，然后存入大数据平台，通过数据分析系统进行分析报表处理。所以迫切需要做一个数据中转服务系统，要求这套系统短小精悍，越轻量级越好，关键是研发周期就5天！！！！\n\n项目框架图\n\n![Alt text](http://soujava.com/images/jerseykuangjiatu.png)\n\n\n**二、技术调研**\n\n\n后来经过技术调研，看中了jersey这个rest框架，简单了解试用之后就当机立断的选用了。首先看他的简介：\n\n![Alt text](http://soujava.com/images/jerseyabort.png)\n\n归纳一下就是：\n\n> - 一个开源的RESTful Web服务框架，可以非常简单的开发rest服务，并且支持各种数据类型\n>\n> - 基于底层的JAX-RS API实现\n> \n\n**三、项目搭建**\n\n\n**1. 添加依赖**\n\n基于maven新建web工程，然后在pom.xml文件中添加相关的依赖\n\n```java\n\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-core</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n  \t\n  \t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-server</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-servlet</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-bundle</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t    <groupId>com.sun.jersey</groupId>\n\t\t    <artifactId>jersey-json</artifactId>\n\t\t    <version>1.19.4</version>\n\t\t</dependency>\n\n\t    <dependency>\n\t      <groupId>junit</groupId>\n\t      <artifactId>junit</artifactId>\n\t      <version>3.8.1</version>\n\t      <scope>test</scope>\n\t    </dependency>\n\n```\n\n**2. 新建一个rest接口的数据封装类-HelloWordVO**\n\n```java\n\n\tpackage com.maps.vo;\n\t\n\timport java.io.Serializable;\n\t\n\tpublic class HelloWordVO implements Serializable{\n\t\tprivate static final long serialVersionUID = 9129043716825852339L;\n\t\t\n\t\tprivate String notice;\n\t\n\t\tpublic String getNotice() {\n\t\t\treturn notice;\n\t\t}\n\t\n\t\tpublic void setNotice(String notice) {\n\t\t\tthis.notice = notice;\n\t\t}\n\t}\n\n```\n\n\n**3. 新建一个rest接口的服务类(控制器)-HelloWordController**\n\n```java\n\n\tpackage com.maps.rest;\n\t\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.Produces;\n\t\n\timport com.maps.vo.HelloWordVO;\n\t\n\t@Path(\"/\")\n\tpublic class HelloWordController {\n\t\t\n\t\t@GET\n\t\t@Path(\"/helloWord\")\n\t\t@Produces({ \"application/json\" })\n\t\tpublic HelloWordVO helloWord(){\n\t\t\tHelloWordVO helloword = new HelloWordVO();\n\t\t\thelloword.setNotice(\"helloword\");\n\t\t\treturn helloword;\n\t\t}\n\t}\n\n```\n\n\n**4. 配置src/main/webapp/WEB-INF/web.xml**\n\n对于一个web工程来讲，必不可少的就是servlet，说白了，所有的请求响应都是基于servlet处理的，而servlet又需要运行在servlet容器中，所以我们在web.xml中配置servlet容器\n\n```java\n\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n\t\tversion=\"3.0\">\n\t    \n\t    <servlet>\n\t    \t<!-- 配置servlet容器运行的容器 -->\n\t\t\t<servlet-name>jersey</servlet-name> \n\t\t\t<servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>\n\t        \n\t\t\t<!-- 配置servlet容器初始化的类的路径，就好比spring中的 <context:component-scan base-package=\"com.*\" />的功能 -->\n\t\t\t<init-param>\n\t            <param-name>com.sun.jersey.config.property.packages</param-name>\n\t\t\t\t<param-value>com.maps</param-value> \n\t\t\t</init-param> \n\t\t\t\n\t\t\t<!-- 开启简单的java对象直接映射转换json的功能，说白了就是可以在相应中直接在方法中对应的的java对象作为响应返回 ，\n\t\t\t就好比spring中的   @RestController的功能 -->\n\t\t\t<init-param>\n\t            <param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>\n\t            <param-value>true</param-value>\n\t        </init-param>\n\t\t\t\n\t\t\t<load-on-startup>1</load-on-startup>\n\t\t</servlet>\n\t    \n\t    <servlet-mapping>\n\t        <servlet-name>jersey</servlet-name>\n\t        <url-pattern>/*</url-pattern>\n\t    </servlet-mapping>\n\t    \n\t  <display-name>Archetype Created Web Application</display-name>\n\t</web-app>\n\n```\n\n*到现在为止，我们的rest服务接口已经开发完毕了*\n\n\n**5. 运行pom.xml编译项目工程**\n\n> clean install package\n\n\n**4. 启动tomcat服务器,并访问helloWord对应的rest接口**\n\n\n![Alt text](http://soujava.com/images/jerseyhello.png)\n\n\n**四、小结**\n\n> 首先搭建一个项目开发框架非常快速简单，几分钟就可以搭建完成，对比用springMvc去搭建的话可想而知\n> \n> 对于一个纯净版的工程，整个项目编译完成后的程序文件总大小仅仅3M，而对于一个纯净版的springMVC项目至少要30M，启动该项目仅仅3秒左右，而启动springmvc项目则要10秒以上\n> \n> 上面的与springMvc对比不是为了说他不好，主要取决于技术定位与应用场景；当然springmvc可以轻而易举做的事情，jersey就不一定可以\n\n\n\n\n\n\n","slug":"jersey-1-轻量级Rest接口后台服务框架搭建","published":1,"updated":"2018-07-08T09:37:48.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pja003l30tz2p1sgmul","content":"<p>随着项目的收尾与上线，忽然感觉到犹如悟空丢掉金箍棒双手释然之感；但这种感觉也犹如隐鼠出洞惶恐至极；或许把一个项目做完之后的反思与感悟可以让我这个大龄coder对这种悚然之感得以慰藉！</p>\n<a id=\"more\"></a>\n<p><strong>一、项目背景</strong></p>\n<p>由于手机app端用到了<em>*</em>公司的IM中间件产品，说白了就是在手机中添加一个跟微信聊天一样的功能；该版本app已经上线，但是需要对这个IM中的群组、单聊等活跃度进行数据分析，把聊天数据进行采集，然后存入大数据平台，通过数据分析系统进行分析报表处理。所以迫切需要做一个数据中转服务系统，要求这套系统短小精悍，越轻量级越好，关键是研发周期就5天！！！！</p>\n<p>项目框架图</p>\n<p><img src=\"http://soujava.com/images/jerseykuangjiatu.png\" alt=\"Alt text\"></p>\n<p><strong>二、技术调研</strong></p>\n<p>后来经过技术调研，看中了jersey这个rest框架，简单了解试用之后就当机立断的选用了。首先看他的简介：</p>\n<p><img src=\"http://soujava.com/images/jerseyabort.png\" alt=\"Alt text\"></p>\n<p>归纳一下就是：</p>\n<blockquote>\n<ul>\n<li><p>一个开源的RESTful Web服务框架，可以非常简单的开发rest服务，并且支持各种数据类型</p>\n</li>\n<li><p>基于底层的JAX-RS API实现</p>\n</li>\n</ul>\n</blockquote>\n<p><strong>三、项目搭建</strong></p>\n<p><strong>1. 添加依赖</strong></p>\n<p>基于maven新建web工程，然后在pom.xml文件中添加相关的依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-core&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t\t&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-bundle&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.8.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p><strong>2. 新建一个rest接口的数据封装类-HelloWordVO</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.vo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWordVO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">9129043716825852339L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String notice;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNotice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNotice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3. 新建一个rest接口的服务类(控制器)-HelloWordController</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.HelloWordVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWordController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/helloWord\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123; <span class=\"string\">\"application/json\"</span> &#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HelloWordVO <span class=\"title\">helloWord</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tHelloWordVO helloword = <span class=\"keyword\">new</span> HelloWordVO();</div><div class=\"line\">\t\thelloword.setNotice(<span class=\"string\">\"helloword\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> helloword;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4. 配置src/main/webapp/WEB-INF/web.xml</strong></p>\n<p>对于一个web工程来讲，必不可少的就是servlet，说白了，所有的请求响应都是基于servlet处理的，而servlet又需要运行在servlet容器中，所以我们在web.xml中配置servlet容器</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</div><div class=\"line\">\tversion=\"3.0\"&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;servlet&gt;</div><div class=\"line\">    \t&lt;!-- 配置servlet容器运行的容器 --&gt;</div><div class=\"line\">\t\t&lt;servlet-name&gt;jersey&lt;/servlet-name&gt; </div><div class=\"line\">\t\t&lt;servlet-class&gt;com.sun.jersey.spi.container.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class=\"line\">        </div><div class=\"line\">\t\t&lt;!-- 配置servlet容器初始化的类的路径，就好比spring中的 &lt;context:component-scan base-package=\"com.*\" /&gt;的功能 --&gt;</div><div class=\"line\">\t\t&lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;</div><div class=\"line\">\t\t\t&lt;param-value&gt;com.maps&lt;/param-value&gt; </div><div class=\"line\">\t\t&lt;/init-param&gt; </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&lt;!-- 开启简单的java对象直接映射转换json的功能，说白了就是可以在相应中直接在方法中对应的的java对象作为响应返回 ，</div><div class=\"line\">\t\t就好比spring中的   @RestController的功能 --&gt;</div><div class=\"line\">\t\t&lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;</div><div class=\"line\">            &lt;param-value&gt;true&lt;/param-value&gt;</div><div class=\"line\">        &lt;/init-param&gt;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">\t&lt;/servlet&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;servlet-mapping&gt;</div><div class=\"line\">        &lt;servlet-name&gt;jersey&lt;/servlet-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class=\"line\">    &lt;/servlet-mapping&gt;</div><div class=\"line\">    </div><div class=\"line\">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n<p><em>到现在为止，我们的rest服务接口已经开发完毕了</em></p>\n<p><strong>5. 运行pom.xml编译项目工程</strong></p>\n<blockquote>\n<p>clean install package</p>\n</blockquote>\n<p><strong>4. 启动tomcat服务器,并访问helloWord对应的rest接口</strong></p>\n<p><img src=\"http://soujava.com/images/jerseyhello.png\" alt=\"Alt text\"></p>\n<p><strong>四、小结</strong></p>\n<blockquote>\n<p>首先搭建一个项目开发框架非常快速简单，几分钟就可以搭建完成，对比用springMvc去搭建的话可想而知</p>\n<p>对于一个纯净版的工程，整个项目编译完成后的程序文件总大小仅仅3M，而对于一个纯净版的springMVC项目至少要30M，启动该项目仅仅3秒左右，而启动springmvc项目则要10秒以上</p>\n<p>上面的与springMvc对比不是为了说他不好，主要取决于技术定位与应用场景；当然springmvc可以轻而易举做的事情，jersey就不一定可以</p>\n</blockquote>\n","excerpt":"<p>随着项目的收尾与上线，忽然感觉到犹如悟空丢掉金箍棒双手释然之感；但这种感觉也犹如隐鼠出洞惶恐至极；或许把一个项目做完之后的反思与感悟可以让我这个大龄coder对这种悚然之感得以慰藉！</p>","more":"<p><strong>一、项目背景</strong></p>\n<p>由于手机app端用到了<em>*</em>公司的IM中间件产品，说白了就是在手机中添加一个跟微信聊天一样的功能；该版本app已经上线，但是需要对这个IM中的群组、单聊等活跃度进行数据分析，把聊天数据进行采集，然后存入大数据平台，通过数据分析系统进行分析报表处理。所以迫切需要做一个数据中转服务系统，要求这套系统短小精悍，越轻量级越好，关键是研发周期就5天！！！！</p>\n<p>项目框架图</p>\n<p><img src=\"http://soujava.com/images/jerseykuangjiatu.png\" alt=\"Alt text\"></p>\n<p><strong>二、技术调研</strong></p>\n<p>后来经过技术调研，看中了jersey这个rest框架，简单了解试用之后就当机立断的选用了。首先看他的简介：</p>\n<p><img src=\"http://soujava.com/images/jerseyabort.png\" alt=\"Alt text\"></p>\n<p>归纳一下就是：</p>\n<blockquote>\n<ul>\n<li><p>一个开源的RESTful Web服务框架，可以非常简单的开发rest服务，并且支持各种数据类型</p>\n</li>\n<li><p>基于底层的JAX-RS API实现</p>\n</li>\n</ul>\n</blockquote>\n<p><strong>三、项目搭建</strong></p>\n<p><strong>1. 添加依赖</strong></p>\n<p>基于maven新建web工程，然后在pom.xml文件中添加相关的依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-core&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t\t&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-bundle&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.19.4&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.8.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p><strong>2. 新建一个rest接口的数据封装类-HelloWordVO</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.vo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWordVO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">9129043716825852339L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String notice;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNotice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNotice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3. 新建一个rest接口的服务类(控制器)-HelloWordController</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.HelloWordVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWordController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/helloWord\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123; <span class=\"string\">\"application/json\"</span> &#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HelloWordVO <span class=\"title\">helloWord</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tHelloWordVO helloword = <span class=\"keyword\">new</span> HelloWordVO();</div><div class=\"line\">\t\thelloword.setNotice(<span class=\"string\">\"helloword\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> helloword;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4. 配置src/main/webapp/WEB-INF/web.xml</strong></p>\n<p>对于一个web工程来讲，必不可少的就是servlet，说白了，所有的请求响应都是基于servlet处理的，而servlet又需要运行在servlet容器中，所以我们在web.xml中配置servlet容器</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</div><div class=\"line\">\tversion=\"3.0\"&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;servlet&gt;</div><div class=\"line\">    \t&lt;!-- 配置servlet容器运行的容器 --&gt;</div><div class=\"line\">\t\t&lt;servlet-name&gt;jersey&lt;/servlet-name&gt; </div><div class=\"line\">\t\t&lt;servlet-class&gt;com.sun.jersey.spi.container.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class=\"line\">        </div><div class=\"line\">\t\t&lt;!-- 配置servlet容器初始化的类的路径，就好比spring中的 &lt;context:component-scan base-package=\"com.*\" /&gt;的功能 --&gt;</div><div class=\"line\">\t\t&lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;</div><div class=\"line\">\t\t\t&lt;param-value&gt;com.maps&lt;/param-value&gt; </div><div class=\"line\">\t\t&lt;/init-param&gt; </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&lt;!-- 开启简单的java对象直接映射转换json的功能，说白了就是可以在相应中直接在方法中对应的的java对象作为响应返回 ，</div><div class=\"line\">\t\t就好比spring中的   @RestController的功能 --&gt;</div><div class=\"line\">\t\t&lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;</div><div class=\"line\">            &lt;param-value&gt;true&lt;/param-value&gt;</div><div class=\"line\">        &lt;/init-param&gt;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">\t&lt;/servlet&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;servlet-mapping&gt;</div><div class=\"line\">        &lt;servlet-name&gt;jersey&lt;/servlet-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class=\"line\">    &lt;/servlet-mapping&gt;</div><div class=\"line\">    </div><div class=\"line\">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n<p><em>到现在为止，我们的rest服务接口已经开发完毕了</em></p>\n<p><strong>5. 运行pom.xml编译项目工程</strong></p>\n<blockquote>\n<p>clean install package</p>\n</blockquote>\n<p><strong>4. 启动tomcat服务器,并访问helloWord对应的rest接口</strong></p>\n<p><img src=\"http://soujava.com/images/jerseyhello.png\" alt=\"Alt text\"></p>\n<p><strong>四、小结</strong></p>\n<blockquote>\n<p>首先搭建一个项目开发框架非常快速简单，几分钟就可以搭建完成，对比用springMvc去搭建的话可想而知</p>\n<p>对于一个纯净版的工程，整个项目编译完成后的程序文件总大小仅仅3M，而对于一个纯净版的springMVC项目至少要30M，启动该项目仅仅3秒左右，而启动springmvc项目则要10秒以上</p>\n<p>上面的与springMvc对比不是为了说他不好，主要取决于技术定位与应用场景；当然springmvc可以轻而易举做的事情，jersey就不一定可以</p>\n</blockquote>"},{"title":"jersey-2--轻量级Rest接口后台服务常规接口开发","date":"2017-07-04T07:27:35.000Z","_content":"\n随着上一篇文章讲解了jersey框架的搭建运行，这一篇主要围绕我们平时开发rest接口方式进行示例；平时开发rest接口时无非提供GET、POST、PUT、DELETE等等类型的方法，或者在header中传入一些验证参数，下面我们就以user为例，主要围绕user的增删改查行为进行开发对应的rest接口。\n\n<!--more-->\n\n**一、新建rest接口数据封装VO类-UserVO**\n\n```java\n\n\tpackage com.maps.vo;\n\n\timport java.io.Serializable;\n\t\n\timport javax.xml.bind.annotation.XmlAccessType;\n\timport javax.xml.bind.annotation.XmlAccessorType;\n\timport javax.xml.bind.annotation.XmlElement;\n\timport javax.xml.bind.annotation.XmlRootElement;\n\t\n\t@XmlRootElement\n\tpublic class UserVO implements Serializable{\n\t\n\t\tprivate static final long serialVersionUID = 6599357158756293288L;\n\t\t\n\t\tprivate String id;\n\t\tprivate String userName;\n\t\tprivate String passWord;\n\t\tprivate int age;\n\t\tprivate String email;\n\t\tprivate String address;\n\t\t\n\t\t\n\t\tpublic String getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\t\tpublic String getPassWord() {\n\t\t\treturn passWord;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic String getEmail() {\n\t\t\treturn email;\n\t\t}\n\t\tpublic String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic void setId(String id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\t\tpublic void setPassWord(String passWord) {\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic void setEmail(String email) {\n\t\t\tthis.email = email;\n\t\t}\n\t\tpublic void setAddress(String address) {\n\t\t\tthis.address = address;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(\"UserVO [id=\").append(id).append(\", userName=\").append(userName).append(\", passWord=\")\n\t\t\t\t\t.append(passWord).append(\", age=\").append(age).append(\", email=\").append(email).append(\", address=\")\n\t\t\t\t\t.append(address).append(\"]\");\n\t\t\treturn builder.toString();\n\t\t}\n\t}\n\n\n```\n\n**二、新建rest接口服务类-UserController**\n\n\n**1. 【GET】创建返回json类型的rest接口方法**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\t\n\t\t/**\n\t\t * 获取单个用户数据的rest接口，并且返回数据格式为json类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/json\")\n\t\t@Produces(\"application/json\")\n\t    public UserVO info() {\n\t\t\t\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t        return user;\n\t    }\n\t\t\n\t\t/**\n\t\t * 获取用户列表数据的rest接口，并且返回数据格式为json类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/json/list\")\n\t\t@Produces(MediaType.APPLICATION_JSON)\n\t\tpublic List<UserVO> infoList(){\n\t\t\tList<UserVO> userList = new ArrayList<UserVO>();\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t\t\t\n\t\t\tUserVO user2 = new UserVO();\n\t\t\tuser2.setId(\"1\");\n\t\t\tuser2.setUserName(\"李四\");\n\t\t\tuser2.setAge(25);\n\t\t\tuser2.setPassWord(\"111111\");\n\t\t\tuser2.setEmail(\"wedaf@199ta.com\");\n\t\t\tuser2.setAddress(\"宋城路\");\n\t\t\t\n\t\t\tuserList.add(user);\n\t\t\tuserList.add(user2);\n\t\t\t\n\t\t\treturn userList;\n\t\t}\n\t\t\n\t}\n\n\n```\n\n*启动tomcat，访问rest接口*\n\n> http://localhost:8080/jersey/user/info/json\n\n返回json对象类型的数据\n\n```java\n\n\t{\n\t\tuserName: \"zhansan\",\n\t\tpassWord: \"123456\",\n\t\tage: 25,\n\t\temail: \"asfdsa@199ta.com\",\n\t\taddress: \"大山中\",\n\t\tuserId: \"1\"\n\t}\n\n```\n\n> http://localhost:8080/jersey/user/info/json/list\n\n返回json数组类型的数据\n\n```java\n\n\t[\n\t\t{\n\t\t\tuserName: \"zhansan\",\n\t\t\tpassWord: \"123456\",\n\t\t\tage: 25,\n\t\t\temail: \"asfdsa@199ta.com\",\n\t\t\taddress: \"大山中\",\n\t\t\tuserId: \"1\"\n\t\t},\n\t\t{\n\t\t\tuserName: \"李四\",\n\t\t\tpassWord: \"111111\",\n\t\t\tage: 25,\n\t\t\temail: \"wedaf@199ta.com\",\n\t\t\taddress: \"宋城路\",\n\t\t\tuserId: \"1\"\n\t\t}\n\t\t]\n\n```\n\n**2. 【GET】创建返回xml类型的rest接口方法**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\t/**\n\t\t * 获取单个用户对象数据的rest接口，并且返回数据格式为xml类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/xml\")\n\t\t@Produces(\"application/xml\")\n\t\tpublic UserVO infoXml(){\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t\t\t\n\t\t\treturn user;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取用户列表rest接口，并且返回数据格式为xml类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/xml/list\")\n\t\t@Produces(\"application/xml\")\n\t\tpublic List<UserVO> infoXmlList(){\n\t\t\tList<UserVO> userList = new ArrayList<UserVO>();\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t\t\t\n\t\t\tUserVO user2 = new UserVO();\n\t\t\tuser2.setId(\"1\");\n\t\t\tuser2.setUserName(\"李四\");\n\t\t\tuser2.setAge(25);\n\t\t\tuser2.setPassWord(\"111111\");\n\t\t\tuser2.setEmail(\"wedaf@199ta.com\");\n\t\t\tuser2.setAddress(\"宋城路\");\n\t\t\t\n\t\t\tuserList.add(user);\n\t\t\tuserList.add(user2);\n\t\t\t\n\t\t\treturn userList;\n\t\t}\n\t}\n\n```\n\n> http://localhost:8080/jersey/user/info/xml\n\n返回xml对象类型的数据\n\n```java\n\t\n\t<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\t<userVO>\n\t\t<userId>1</userId>\n\t\t<userName>zhansan</userName>\n\t\t<passWord>123456</passWord>\n\t\t<age>25</age>\n\t\t<email>asfdsa@199ta.com</email>\n\t\t<address>大山中</address>\n\t</userVO>\n\n```\n\n> http://localhost:8080/jersey/user/info/xml/list\n\n返回xml集合类型的数据\n\n```java\n\t\n\t<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\t<userVOes>\n\t\t<userVO>\n\t\t\t<userId>1</userId>\n\t\t\t<userName>zhansan</userName>\n\t\t\t<passWord>123456</passWord>\n\t\t\t<age>25</age>\n\t\t\t<email>asfdsa@199ta.com</email>\n\t\t\t<address>大山中</address>\n\t\t</userVO>\n\t\t<userVO>\n\t\t\t<userId>1</userId>\n\t\t\t<userName>李四</userName>\n\t\t\t<passWord>111111</passWord>\n\t\t\t<age>25</age>\n\t\t\t<email>wedaf@199ta.com</email>\n\t\t\t<address>宋城路</address>\n\t\t</userVO>\n\t</userVOes>\n\n```\n\n**3. 【GET】动态url请求rest接口-动态传参**\n\n在请求url中动态传参\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\n\t\t/**\n\t\t * 在请求url路径中动态传递参数\n\t\t * @param id 用户id\n\t\t * @return\n\t\t */\t\n\t\t@GET\n\t\t@Path(\"/path/{id}\")\n\t\t@Produces({\"application/json\"})\n\t\tpublic UserVO pathJson(@PathParam(\"id\") String id){\n\t\t\t\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(id);\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大中华\");\n\t\t\t\n\t\t\treturn user;\n\t\t}\t\n\t}\n\n\n```\n\n> http://localhost:8080/jersey/user/path/path中动态传参\n\n```java\n\n\t{\n\t\tuserName: \"zhansan\",\n\t\tpassWord: \"123456\",\n\t\tage: 25,\n\t\temail: \"asfdsa@199ta.com\",\n\t\taddress: \"大中华\",\n\t\tuserId: \"path中动态传参\"\n\t}\n\n```\n\n**4. 【POST】创建post类型，并且只接受json格式数据体的rest方法**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\tprivate static Map<String,UserVO> mapTemp = new HashMap<String, UserVO>();\n\t\t\n\n\t\t/**\n\t\t * 添加用户的rest接口，\n\t\t * @param user json数据格式的user对象参数\n\t\t * @return\n\t\t */\n\t\t@POST\n\t\t@Path(\"/addUser\")\n\t\t@Consumes({\"application/json\"})\n\t\t@Produces({\"application/json\"})\n\t\tpublic List<UserVO> addUser(UserVO user){\n\t\t\tuserListTemp.add(user);\n\t\t\t\n\t\t\treturn userListTemp;\n\t\t}\n\t\t\n\t}\n\n```\n\n> 通过rest接口工具调用\n\n![Alt text](http://soujava.com/images/restinvokepost.png)\n\n![Alt text](http://soujava.com/images/restinvokepostresponse.png)\n\n\n**5. 【POST】创建post类型，并且只接受json格式数据体的rest方法,同时需要在header中传递校验码参数**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\tprivate static Map<String,UserVO> mapTemp = new HashMap<String, UserVO>();\n\t\t\n\t\t/**\n\t\t * 添加用户的rest接口，并且header中需要传递对应的md5校验值\n\t\t * @param user json数据格式的use对象参数\n\t\t * @param md5val  在请求的header中传递的校验码\n\t\t * @return\n\t\t */\n\t\t@POST\n\t\t@Path(\"/addUser/headCheck\")\n\t\t@Consumes({\"application/json\"})\n\t\t@Produces({\"application/json\"})\n\t\tpublic Map<String,UserVO> addUser(UserVO user,@HeaderParam(\"md5val\") String md5val){\n\t\t\tmapTemp.put(md5val, user);\n\t\t\t\n\t\t\treturn mapTemp;\n\t\t}\n\t\t\n\t}\n\n\n```\n\n> 通过rest接口工具调用\n\n![Alt text](http://soujava.com/images/restpostheader.png)\n\n![Alt text](http://soujava.com/images/restpostheaderresult.png)\n\n\n**5. 【DELETE】创建delete类型的rest方法，删除用户操作**\n\n```java\n\n\tpackage com.maps.rest;\n\t\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\n\t\t/**\n\t\t * 通过动态传参的方式，创建一个delete方法类型删除用户的rest接口，返回一个字符串状态\n\t\t * @param id\n\t\t * @return\n\t\t */\n\t\t@DELETE\n\t\t@Path(\"/delete/{id}\")\n\t\t@Produces(MediaType.TEXT_PLAIN)\n\t\tpublic String deleteUser(@PathParam(\"id\") String id){\n\t\t\tSystem.out.println(\"DELETE  -- deleteUser by \"+id);\n\t\t\treturn \"success\";\n\t\t}\n\t\t\n\t}\n\n```\n\n> 通过rest接口工具调用\n\n![Alt text](http://soujava.com/images/deleteinvoke.png)\n\n![Alt text](http://soujava.com/images/deleteresult.png)\n\n\n截止目前我们已经把我们常规的rest接口的开发方式都实现了，在实现过程中也看到了我们都是用注解去处理的，那么下面我们大概讲述一下每一个rest接口对应的不同的注解的作用。\n\n**二、注解描述**\n\n> **请求方式 @GET @POST @DELETE**\n\n> - 在上面的REST接口对应的方法中都有对应的方法类型(rest接口的请求方式)，添加对应的注解，该rest接口就需要用什么类型的方式进行请求\n\n\n> **接口地址 @Path**\n\n> - 该注解就如同springmvc中的@RequestMapping注解一样的作用，主要用来指定该方法对应的rest接口的访问地址是什么\n\n> **动态传参 @PathParam(\"id\")**\n\n> - 这个注解一般配合注解@Path一起使用，当在@Path注解中指定对应的动态参数，然后在方法参数中使用注解@PathParam进行绑定，该参数相当于springmvc中的@PathVariable(\"id\")注解的作用\n\n> **请求参数类型(接受的参数类型) @Consumes(\"application/json\")**\n\n> - 我们不管使用get请求rest接口，或者使用post请求rest接口，一般都需要传参，该注解就是用来限制对应的rest方法中所要接受的对应参数类型的，上面的例子我们指定对应的rest接口只接受对应的json类型的参数；当然该注解其实可以使用对应的枚举赋值，后续开发中最好使用枚举进行复制-@Consumes({MediaType.TEXT_PLAIN})，下面看看对应的枚举支持的类型：\n\n```java\n\n\tpublic class MediaType {\n    \n\t    private String type;\n\t    private String subtype;\n\t\n\t\t/** \"application/xml\" */\n\t    public final static String APPLICATION_XML = \"application/xml\";\n\t\n\t\t/** \"application/atom+xml\" */\n\t    public final static String APPLICATION_ATOM_XML = \"application/atom+xml\";\n\t\n\t\t/** \"application/xhtml+xml\" */\n\t    public final static String APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n\t\n\t\t/** \"application/svg+xml\" */\n\t    public final static String APPLICATION_SVG_XML = \"application/svg+xml\";\n\t\n\t\t/** \"application/json\" */\n\t    public final static String APPLICATION_JSON = \"application/json\";\n\t\n\t\t/** \"multipart/form-data\" */\n\t    public final static String MULTIPART_FORM_DATA = \"multipart/form-data\";\n\t\n\t\t/** \"application/octet-stream\" */\n\t    public final static String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n\t\n\t\t/** \"text/plain\" */\n\t    public final static String TEXT_PLAIN = \"text/plain\";\n\t\n\t\t/** \"text/xml\" */\n\t    public final static String TEXT_XML = \"text/xml\";\n\t\n\t\t/** \"text/html\" */\n\t    public final static String TEXT_HTML = \"text/html\";\t\n\t\n\t\t.......\n\t}\n\n```\n\n> **响应数据类型 @Produces({\"application/json\"})**\n\n> - 该注解就是用来限定对应的rest接口的返回值类型，相似与springmvc中的@ResponseBody注解的作用，当然该传参形式也可以使用枚举类型，同上面的@Consumes注解使用的枚举传参方式一样\n\n\n> **响应类型为xml格式的数据封装 @XmlRootElement**\n\n> - 可以看到在我们刚开始定义rest接口数据封装VO类时，在UserVO类上面使用了该注解定义，该注解主要的作用就是制定当rest接口中的响应数据类型为xml格式的UserVO数据时，使用UserVO类名作为根节点，当返回的xml数据集为多条(集合)时，则根节点为类名+es（UserVOes），具体可以看上面的示例；不过我们可以通过其他注解进行具体个性化指定，以后再具体讲解。\n\n\n> **请求头(header)中传递参数 @HeaderParam(\"md5val\")**\n\n> - 该注解主要用来封装在调用rest接口时，需要在请求头(header)中传递参数的作用，一般当对应的rest接口需要进行一些认证校验处理时，一般都把对应的校验参数通过header传递，该注解等同于springmvc中的@RequestHeader(\"md5val\")的作用。\n\n\n到目前为止，对应的常规的rest接口的开发就写完了，然后针对开发过程中用到的注解及使用场景进行了具体描述。\n","source":"_posts/jersey-2-轻量级Rest接口后台服务常规接口开发.md","raw":"---\ntitle: jersey-2--轻量级Rest接口后台服务常规接口开发\ndate: 2017-07-04 15:27:35\ncategories: jersey\ntags: java\n---\n\n随着上一篇文章讲解了jersey框架的搭建运行，这一篇主要围绕我们平时开发rest接口方式进行示例；平时开发rest接口时无非提供GET、POST、PUT、DELETE等等类型的方法，或者在header中传入一些验证参数，下面我们就以user为例，主要围绕user的增删改查行为进行开发对应的rest接口。\n\n<!--more-->\n\n**一、新建rest接口数据封装VO类-UserVO**\n\n```java\n\n\tpackage com.maps.vo;\n\n\timport java.io.Serializable;\n\t\n\timport javax.xml.bind.annotation.XmlAccessType;\n\timport javax.xml.bind.annotation.XmlAccessorType;\n\timport javax.xml.bind.annotation.XmlElement;\n\timport javax.xml.bind.annotation.XmlRootElement;\n\t\n\t@XmlRootElement\n\tpublic class UserVO implements Serializable{\n\t\n\t\tprivate static final long serialVersionUID = 6599357158756293288L;\n\t\t\n\t\tprivate String id;\n\t\tprivate String userName;\n\t\tprivate String passWord;\n\t\tprivate int age;\n\t\tprivate String email;\n\t\tprivate String address;\n\t\t\n\t\t\n\t\tpublic String getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\t\tpublic String getPassWord() {\n\t\t\treturn passWord;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic String getEmail() {\n\t\t\treturn email;\n\t\t}\n\t\tpublic String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic void setId(String id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\t\tpublic void setPassWord(String passWord) {\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic void setEmail(String email) {\n\t\t\tthis.email = email;\n\t\t}\n\t\tpublic void setAddress(String address) {\n\t\t\tthis.address = address;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(\"UserVO [id=\").append(id).append(\", userName=\").append(userName).append(\", passWord=\")\n\t\t\t\t\t.append(passWord).append(\", age=\").append(age).append(\", email=\").append(email).append(\", address=\")\n\t\t\t\t\t.append(address).append(\"]\");\n\t\t\treturn builder.toString();\n\t\t}\n\t}\n\n\n```\n\n**二、新建rest接口服务类-UserController**\n\n\n**1. 【GET】创建返回json类型的rest接口方法**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\t\n\t\t/**\n\t\t * 获取单个用户数据的rest接口，并且返回数据格式为json类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/json\")\n\t\t@Produces(\"application/json\")\n\t    public UserVO info() {\n\t\t\t\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t        return user;\n\t    }\n\t\t\n\t\t/**\n\t\t * 获取用户列表数据的rest接口，并且返回数据格式为json类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/json/list\")\n\t\t@Produces(MediaType.APPLICATION_JSON)\n\t\tpublic List<UserVO> infoList(){\n\t\t\tList<UserVO> userList = new ArrayList<UserVO>();\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t\t\t\n\t\t\tUserVO user2 = new UserVO();\n\t\t\tuser2.setId(\"1\");\n\t\t\tuser2.setUserName(\"李四\");\n\t\t\tuser2.setAge(25);\n\t\t\tuser2.setPassWord(\"111111\");\n\t\t\tuser2.setEmail(\"wedaf@199ta.com\");\n\t\t\tuser2.setAddress(\"宋城路\");\n\t\t\t\n\t\t\tuserList.add(user);\n\t\t\tuserList.add(user2);\n\t\t\t\n\t\t\treturn userList;\n\t\t}\n\t\t\n\t}\n\n\n```\n\n*启动tomcat，访问rest接口*\n\n> http://localhost:8080/jersey/user/info/json\n\n返回json对象类型的数据\n\n```java\n\n\t{\n\t\tuserName: \"zhansan\",\n\t\tpassWord: \"123456\",\n\t\tage: 25,\n\t\temail: \"asfdsa@199ta.com\",\n\t\taddress: \"大山中\",\n\t\tuserId: \"1\"\n\t}\n\n```\n\n> http://localhost:8080/jersey/user/info/json/list\n\n返回json数组类型的数据\n\n```java\n\n\t[\n\t\t{\n\t\t\tuserName: \"zhansan\",\n\t\t\tpassWord: \"123456\",\n\t\t\tage: 25,\n\t\t\temail: \"asfdsa@199ta.com\",\n\t\t\taddress: \"大山中\",\n\t\t\tuserId: \"1\"\n\t\t},\n\t\t{\n\t\t\tuserName: \"李四\",\n\t\t\tpassWord: \"111111\",\n\t\t\tage: 25,\n\t\t\temail: \"wedaf@199ta.com\",\n\t\t\taddress: \"宋城路\",\n\t\t\tuserId: \"1\"\n\t\t}\n\t\t]\n\n```\n\n**2. 【GET】创建返回xml类型的rest接口方法**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\t/**\n\t\t * 获取单个用户对象数据的rest接口，并且返回数据格式为xml类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/xml\")\n\t\t@Produces(\"application/xml\")\n\t\tpublic UserVO infoXml(){\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t\t\t\n\t\t\treturn user;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取用户列表rest接口，并且返回数据格式为xml类型\n\t\t * @return\n\t\t */\n\t\t@GET\n\t\t@Path(\"/info/xml/list\")\n\t\t@Produces(\"application/xml\")\n\t\tpublic List<UserVO> infoXmlList(){\n\t\t\tList<UserVO> userList = new ArrayList<UserVO>();\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(\"1\");\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大山中\");\n\t\t\t\n\t\t\tUserVO user2 = new UserVO();\n\t\t\tuser2.setId(\"1\");\n\t\t\tuser2.setUserName(\"李四\");\n\t\t\tuser2.setAge(25);\n\t\t\tuser2.setPassWord(\"111111\");\n\t\t\tuser2.setEmail(\"wedaf@199ta.com\");\n\t\t\tuser2.setAddress(\"宋城路\");\n\t\t\t\n\t\t\tuserList.add(user);\n\t\t\tuserList.add(user2);\n\t\t\t\n\t\t\treturn userList;\n\t\t}\n\t}\n\n```\n\n> http://localhost:8080/jersey/user/info/xml\n\n返回xml对象类型的数据\n\n```java\n\t\n\t<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\t<userVO>\n\t\t<userId>1</userId>\n\t\t<userName>zhansan</userName>\n\t\t<passWord>123456</passWord>\n\t\t<age>25</age>\n\t\t<email>asfdsa@199ta.com</email>\n\t\t<address>大山中</address>\n\t</userVO>\n\n```\n\n> http://localhost:8080/jersey/user/info/xml/list\n\n返回xml集合类型的数据\n\n```java\n\t\n\t<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\t<userVOes>\n\t\t<userVO>\n\t\t\t<userId>1</userId>\n\t\t\t<userName>zhansan</userName>\n\t\t\t<passWord>123456</passWord>\n\t\t\t<age>25</age>\n\t\t\t<email>asfdsa@199ta.com</email>\n\t\t\t<address>大山中</address>\n\t\t</userVO>\n\t\t<userVO>\n\t\t\t<userId>1</userId>\n\t\t\t<userName>李四</userName>\n\t\t\t<passWord>111111</passWord>\n\t\t\t<age>25</age>\n\t\t\t<email>wedaf@199ta.com</email>\n\t\t\t<address>宋城路</address>\n\t\t</userVO>\n\t</userVOes>\n\n```\n\n**3. 【GET】动态url请求rest接口-动态传参**\n\n在请求url中动态传参\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\n\t\t/**\n\t\t * 在请求url路径中动态传递参数\n\t\t * @param id 用户id\n\t\t * @return\n\t\t */\t\n\t\t@GET\n\t\t@Path(\"/path/{id}\")\n\t\t@Produces({\"application/json\"})\n\t\tpublic UserVO pathJson(@PathParam(\"id\") String id){\n\t\t\t\n\t\t\tUserVO user = new UserVO();\n\t\t\tuser.setId(id);\n\t\t\tuser.setUserName(\"zhansan\");\n\t\t\tuser.setAge(25);\n\t\t\tuser.setPassWord(\"123456\");\n\t\t\tuser.setEmail(\"asfdsa@199ta.com\");\n\t\t\tuser.setAddress(\"大中华\");\n\t\t\t\n\t\t\treturn user;\n\t\t}\t\n\t}\n\n\n```\n\n> http://localhost:8080/jersey/user/path/path中动态传参\n\n```java\n\n\t{\n\t\tuserName: \"zhansan\",\n\t\tpassWord: \"123456\",\n\t\tage: 25,\n\t\temail: \"asfdsa@199ta.com\",\n\t\taddress: \"大中华\",\n\t\tuserId: \"path中动态传参\"\n\t}\n\n```\n\n**4. 【POST】创建post类型，并且只接受json格式数据体的rest方法**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\tprivate static Map<String,UserVO> mapTemp = new HashMap<String, UserVO>();\n\t\t\n\n\t\t/**\n\t\t * 添加用户的rest接口，\n\t\t * @param user json数据格式的user对象参数\n\t\t * @return\n\t\t */\n\t\t@POST\n\t\t@Path(\"/addUser\")\n\t\t@Consumes({\"application/json\"})\n\t\t@Produces({\"application/json\"})\n\t\tpublic List<UserVO> addUser(UserVO user){\n\t\t\tuserListTemp.add(user);\n\t\t\t\n\t\t\treturn userListTemp;\n\t\t}\n\t\t\n\t}\n\n```\n\n> 通过rest接口工具调用\n\n![Alt text](http://soujava.com/images/restinvokepost.png)\n\n![Alt text](http://soujava.com/images/restinvokepostresponse.png)\n\n\n**5. 【POST】创建post类型，并且只接受json格式数据体的rest方法,同时需要在header中传递校验码参数**\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\tprivate static Map<String,UserVO> mapTemp = new HashMap<String, UserVO>();\n\t\t\n\t\t/**\n\t\t * 添加用户的rest接口，并且header中需要传递对应的md5校验值\n\t\t * @param user json数据格式的use对象参数\n\t\t * @param md5val  在请求的header中传递的校验码\n\t\t * @return\n\t\t */\n\t\t@POST\n\t\t@Path(\"/addUser/headCheck\")\n\t\t@Consumes({\"application/json\"})\n\t\t@Produces({\"application/json\"})\n\t\tpublic Map<String,UserVO> addUser(UserVO user,@HeaderParam(\"md5val\") String md5val){\n\t\t\tmapTemp.put(md5val, user);\n\t\t\t\n\t\t\treturn mapTemp;\n\t\t}\n\t\t\n\t}\n\n\n```\n\n> 通过rest接口工具调用\n\n![Alt text](http://soujava.com/images/restpostheader.png)\n\n![Alt text](http://soujava.com/images/restpostheaderresult.png)\n\n\n**5. 【DELETE】创建delete类型的rest方法，删除用户操作**\n\n```java\n\n\tpackage com.maps.rest;\n\t\n\timport java.util.ArrayList;\n\timport java.util.HashMap;\n\timport java.util.LinkedList;\n\timport java.util.List;\n\timport java.util.Map;\n\t\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DELETE;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.HeaderParam;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.PathParam;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.core.MediaType;\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"user\")\n\tpublic class UserController {\n\t\t\n\t\n\t\t/**\n\t\t * 通过动态传参的方式，创建一个delete方法类型删除用户的rest接口，返回一个字符串状态\n\t\t * @param id\n\t\t * @return\n\t\t */\n\t\t@DELETE\n\t\t@Path(\"/delete/{id}\")\n\t\t@Produces(MediaType.TEXT_PLAIN)\n\t\tpublic String deleteUser(@PathParam(\"id\") String id){\n\t\t\tSystem.out.println(\"DELETE  -- deleteUser by \"+id);\n\t\t\treturn \"success\";\n\t\t}\n\t\t\n\t}\n\n```\n\n> 通过rest接口工具调用\n\n![Alt text](http://soujava.com/images/deleteinvoke.png)\n\n![Alt text](http://soujava.com/images/deleteresult.png)\n\n\n截止目前我们已经把我们常规的rest接口的开发方式都实现了，在实现过程中也看到了我们都是用注解去处理的，那么下面我们大概讲述一下每一个rest接口对应的不同的注解的作用。\n\n**二、注解描述**\n\n> **请求方式 @GET @POST @DELETE**\n\n> - 在上面的REST接口对应的方法中都有对应的方法类型(rest接口的请求方式)，添加对应的注解，该rest接口就需要用什么类型的方式进行请求\n\n\n> **接口地址 @Path**\n\n> - 该注解就如同springmvc中的@RequestMapping注解一样的作用，主要用来指定该方法对应的rest接口的访问地址是什么\n\n> **动态传参 @PathParam(\"id\")**\n\n> - 这个注解一般配合注解@Path一起使用，当在@Path注解中指定对应的动态参数，然后在方法参数中使用注解@PathParam进行绑定，该参数相当于springmvc中的@PathVariable(\"id\")注解的作用\n\n> **请求参数类型(接受的参数类型) @Consumes(\"application/json\")**\n\n> - 我们不管使用get请求rest接口，或者使用post请求rest接口，一般都需要传参，该注解就是用来限制对应的rest方法中所要接受的对应参数类型的，上面的例子我们指定对应的rest接口只接受对应的json类型的参数；当然该注解其实可以使用对应的枚举赋值，后续开发中最好使用枚举进行复制-@Consumes({MediaType.TEXT_PLAIN})，下面看看对应的枚举支持的类型：\n\n```java\n\n\tpublic class MediaType {\n    \n\t    private String type;\n\t    private String subtype;\n\t\n\t\t/** \"application/xml\" */\n\t    public final static String APPLICATION_XML = \"application/xml\";\n\t\n\t\t/** \"application/atom+xml\" */\n\t    public final static String APPLICATION_ATOM_XML = \"application/atom+xml\";\n\t\n\t\t/** \"application/xhtml+xml\" */\n\t    public final static String APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n\t\n\t\t/** \"application/svg+xml\" */\n\t    public final static String APPLICATION_SVG_XML = \"application/svg+xml\";\n\t\n\t\t/** \"application/json\" */\n\t    public final static String APPLICATION_JSON = \"application/json\";\n\t\n\t\t/** \"multipart/form-data\" */\n\t    public final static String MULTIPART_FORM_DATA = \"multipart/form-data\";\n\t\n\t\t/** \"application/octet-stream\" */\n\t    public final static String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n\t\n\t\t/** \"text/plain\" */\n\t    public final static String TEXT_PLAIN = \"text/plain\";\n\t\n\t\t/** \"text/xml\" */\n\t    public final static String TEXT_XML = \"text/xml\";\n\t\n\t\t/** \"text/html\" */\n\t    public final static String TEXT_HTML = \"text/html\";\t\n\t\n\t\t.......\n\t}\n\n```\n\n> **响应数据类型 @Produces({\"application/json\"})**\n\n> - 该注解就是用来限定对应的rest接口的返回值类型，相似与springmvc中的@ResponseBody注解的作用，当然该传参形式也可以使用枚举类型，同上面的@Consumes注解使用的枚举传参方式一样\n\n\n> **响应类型为xml格式的数据封装 @XmlRootElement**\n\n> - 可以看到在我们刚开始定义rest接口数据封装VO类时，在UserVO类上面使用了该注解定义，该注解主要的作用就是制定当rest接口中的响应数据类型为xml格式的UserVO数据时，使用UserVO类名作为根节点，当返回的xml数据集为多条(集合)时，则根节点为类名+es（UserVOes），具体可以看上面的示例；不过我们可以通过其他注解进行具体个性化指定，以后再具体讲解。\n\n\n> **请求头(header)中传递参数 @HeaderParam(\"md5val\")**\n\n> - 该注解主要用来封装在调用rest接口时，需要在请求头(header)中传递参数的作用，一般当对应的rest接口需要进行一些认证校验处理时，一般都把对应的校验参数通过header传递，该注解等同于springmvc中的@RequestHeader(\"md5val\")的作用。\n\n\n到目前为止，对应的常规的rest接口的开发就写完了，然后针对开发过程中用到的注解及使用场景进行了具体描述。\n","slug":"jersey-2-轻量级Rest接口后台服务常规接口开发","published":1,"updated":"2018-07-08T09:37:48.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjc003p30tz1skz1mel","content":"<p>随着上一篇文章讲解了jersey框架的搭建运行，这一篇主要围绕我们平时开发rest接口方式进行示例；平时开发rest接口时无非提供GET、POST、PUT、DELETE等等类型的方法，或者在header中传入一些验证参数，下面我们就以user为例，主要围绕user的增删改查行为进行开发对应的rest接口。</p>\n<a id=\"more\"></a>\n<p><strong>一、新建rest接口数据封装VO类-UserVO</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.vo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlAccessType;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlAccessorType;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlElement;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlRootElement;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@XmlRootElement</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserVO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6599357158756293288L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String userName;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String passWord;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String email;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String address;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassWord</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassWord</span><span class=\"params\">(String passWord)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tbuilder.append(<span class=\"string\">\"UserVO [id=\"</span>).append(id).append(<span class=\"string\">\", userName=\"</span>).append(userName).append(<span class=\"string\">\", passWord=\"</span>)</div><div class=\"line\">\t\t\t\t.append(passWord).append(<span class=\"string\">\", age=\"</span>).append(age).append(<span class=\"string\">\", email=\"</span>).append(email).append(<span class=\"string\">\", address=\"</span>)</div><div class=\"line\">\t\t\t\t.append(address).append(<span class=\"string\">\"]\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>二、新建rest接口服务类-UserController</strong></p>\n<p><strong>1. 【GET】创建返回json类型的rest接口方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取单个用户数据的rest接口，并且返回数据格式为json类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/json\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(<span class=\"string\">\"application/json\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserVO <span class=\"title\">info</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> user;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取用户列表数据的rest接口，并且返回数据格式为json类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/json/list\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title\">infoList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tList&lt;UserVO&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;UserVO&gt;();</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user2 = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser2.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser2.setUserName(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">\t\tuser2.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser2.setPassWord(<span class=\"string\">\"111111\"</span>);</div><div class=\"line\">\t\tuser2.setEmail(<span class=\"string\">\"wedaf@199ta.com\"</span>);</div><div class=\"line\">\t\tuser2.setAddress(<span class=\"string\">\"宋城路\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tuserList.add(user);</div><div class=\"line\">\t\tuserList.add(user2);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userList;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>启动tomcat，访问rest接口</em></p>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/json\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/user/info/json</a></p>\n</blockquote>\n<p>返回json对象类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">\tuserName: <span class=\"string\">\"zhansan\"</span>,</div><div class=\"line\">\tpassWord: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\temail: <span class=\"string\">\"asfdsa@199ta.com\"</span>,</div><div class=\"line\">\taddress: <span class=\"string\">\"大山中\"</span>,</div><div class=\"line\">\tuserId: <span class=\"string\">\"1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/json/list\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/user/info/json/list</a></p>\n</blockquote>\n<p>返回json数组类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tuserName: <span class=\"string\">\"zhansan\"</span>,</div><div class=\"line\">\t\tpassWord: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">\t\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\t\temail: <span class=\"string\">\"asfdsa@199ta.com\"</span>,</div><div class=\"line\">\t\taddress: <span class=\"string\">\"大山中\"</span>,</div><div class=\"line\">\t\tuserId: <span class=\"string\">\"1\"</span></div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tuserName: <span class=\"string\">\"李四\"</span>,</div><div class=\"line\">\t\tpassWord: <span class=\"string\">\"111111\"</span>,</div><div class=\"line\">\t\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\t\temail: <span class=\"string\">\"wedaf@199ta.com\"</span>,</div><div class=\"line\">\t\taddress: <span class=\"string\">\"宋城路\"</span>,</div><div class=\"line\">\t\tuserId: <span class=\"string\">\"1\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t]</div></pre></td></tr></table></figure>\n<p><strong>2. 【GET】创建返回xml类型的rest接口方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取单个用户对象数据的rest接口，并且返回数据格式为xml类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/xml\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(<span class=\"string\">\"application/xml\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserVO <span class=\"title\">infoXml</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取用户列表rest接口，并且返回数据格式为xml类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/xml/list\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(<span class=\"string\">\"application/xml\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title\">infoXmlList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tList&lt;UserVO&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;UserVO&gt;();</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user2 = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser2.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser2.setUserName(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">\t\tuser2.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser2.setPassWord(<span class=\"string\">\"111111\"</span>);</div><div class=\"line\">\t\tuser2.setEmail(<span class=\"string\">\"wedaf@199ta.com\"</span>);</div><div class=\"line\">\t\tuser2.setAddress(<span class=\"string\">\"宋城路\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tuserList.add(user);</div><div class=\"line\">\t\tuserList.add(user2);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userList;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/xml\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/user/info/xml</a></p>\n</blockquote>\n<p>返回xml对象类型的数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\">&lt;userVO&gt;</div><div class=\"line\">\t&lt;userId&gt;1&lt;/userId&gt;</div><div class=\"line\">\t&lt;userName&gt;zhansan&lt;/userName&gt;</div><div class=\"line\">\t&lt;passWord&gt;123456&lt;/passWord&gt;</div><div class=\"line\">\t&lt;age&gt;25&lt;/age&gt;</div><div class=\"line\">\t&lt;email&gt;asfdsa@199ta.com&lt;/email&gt;</div><div class=\"line\">\t&lt;address&gt;大山中&lt;/address&gt;</div><div class=\"line\">&lt;/userVO&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/xml/list\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/user/info/xml/list</a></p>\n</blockquote>\n<p>返回xml集合类型的数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\">&lt;userVOes&gt;</div><div class=\"line\">\t&lt;userVO&gt;</div><div class=\"line\">\t\t&lt;userId&gt;1&lt;/userId&gt;</div><div class=\"line\">\t\t&lt;userName&gt;zhansan&lt;/userName&gt;</div><div class=\"line\">\t\t&lt;passWord&gt;123456&lt;/passWord&gt;</div><div class=\"line\">\t\t&lt;age&gt;25&lt;/age&gt;</div><div class=\"line\">\t\t&lt;email&gt;asfdsa@199ta.com&lt;/email&gt;</div><div class=\"line\">\t\t&lt;address&gt;大山中&lt;/address&gt;</div><div class=\"line\">\t&lt;/userVO&gt;</div><div class=\"line\">\t&lt;userVO&gt;</div><div class=\"line\">\t\t&lt;userId&gt;1&lt;/userId&gt;</div><div class=\"line\">\t\t&lt;userName&gt;李四&lt;/userName&gt;</div><div class=\"line\">\t\t&lt;passWord&gt;111111&lt;/passWord&gt;</div><div class=\"line\">\t\t&lt;age&gt;25&lt;/age&gt;</div><div class=\"line\">\t\t&lt;email&gt;wedaf@199ta.com&lt;/email&gt;</div><div class=\"line\">\t\t&lt;address&gt;宋城路&lt;/address&gt;</div><div class=\"line\">\t&lt;/userVO&gt;</div><div class=\"line\">&lt;/userVOes&gt;</div></pre></td></tr></table></figure>\n<p><strong>3. 【GET】动态url请求rest接口-动态传参</strong></p>\n<p>在请求url中动态传参</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在请求url路径中动态传递参数</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */\t</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/path/&#123;id&#125;\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserVO <span class=\"title\">pathJson</span><span class=\"params\">(@PathParam(<span class=\"string\">\"id\"</span>)</span> String id)</span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(id);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大中华\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/path/path中动态传参\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/user/path/path中动态传参</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">\tuserName: <span class=\"string\">\"zhansan\"</span>,</div><div class=\"line\">\tpassWord: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\temail: <span class=\"string\">\"asfdsa@199ta.com\"</span>,</div><div class=\"line\">\taddress: <span class=\"string\">\"大中华\"</span>,</div><div class=\"line\">\tuserId: <span class=\"string\">\"path中动态传参\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4. 【POST】创建post类型，并且只接受json格式数据体的rest方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String,UserVO&gt; mapTemp = <span class=\"keyword\">new</span> HashMap&lt;String, UserVO&gt;();</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 添加用户的rest接口，</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> user json数据格式的user对象参数</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@POST</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/addUser\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Consumes</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title\">addUser</span><span class=\"params\">(UserVO user)</span></span>&#123;</div><div class=\"line\">\t\tuserListTemp.add(user);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userListTemp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通过rest接口工具调用</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/restinvokepost.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/restinvokepostresponse.png\" alt=\"Alt text\"></p>\n<p><strong>5. 【POST】创建post类型，并且只接受json格式数据体的rest方法,同时需要在header中传递校验码参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String,UserVO&gt; mapTemp = <span class=\"keyword\">new</span> HashMap&lt;String, UserVO&gt;();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 添加用户的rest接口，并且header中需要传递对应的md5校验值</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> user json数据格式的use对象参数</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> md5val  在请求的header中传递的校验码</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@POST</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/addUser/headCheck\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Consumes</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,UserVO&gt; <span class=\"title\">addUser</span><span class=\"params\">(UserVO user,@HeaderParam(<span class=\"string\">\"md5val\"</span>)</span> String md5val)</span>&#123;</div><div class=\"line\">\t\tmapTemp.put(md5val, user);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mapTemp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通过rest接口工具调用</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/restpostheader.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/restpostheaderresult.png\" alt=\"Alt text\"></p>\n<p><strong>5. 【DELETE】创建delete类型的rest方法，删除用户操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过动态传参的方式，创建一个delete方法类型删除用户的rest接口，返回一个字符串状态</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@DELETE</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/delete/&#123;id&#125;\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(MediaType.TEXT_PLAIN)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteUser</span><span class=\"params\">(@PathParam(<span class=\"string\">\"id\"</span>)</span> String id)</span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"DELETE  -- deleteUser by \"</span>+id);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通过rest接口工具调用</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/deleteinvoke.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/deleteresult.png\" alt=\"Alt text\"></p>\n<p>截止目前我们已经把我们常规的rest接口的开发方式都实现了，在实现过程中也看到了我们都是用注解去处理的，那么下面我们大概讲述一下每一个rest接口对应的不同的注解的作用。</p>\n<p><strong>二、注解描述</strong></p>\n<blockquote>\n<p><strong>请求方式 @GET @POST @DELETE</strong></p>\n<ul>\n<li>在上面的REST接口对应的方法中都有对应的方法类型(rest接口的请求方式)，添加对应的注解，该rest接口就需要用什么类型的方式进行请求</li>\n</ul>\n<p><strong>接口地址 @Path</strong></p>\n<ul>\n<li>该注解就如同springmvc中的@RequestMapping注解一样的作用，主要用来指定该方法对应的rest接口的访问地址是什么</li>\n</ul>\n<p><strong>动态传参 @PathParam(“id”)</strong></p>\n<ul>\n<li>这个注解一般配合注解@Path一起使用，当在@Path注解中指定对应的动态参数，然后在方法参数中使用注解@PathParam进行绑定，该参数相当于springmvc中的@PathVariable(“id”)注解的作用</li>\n</ul>\n<p><strong>请求参数类型(接受的参数类型) @Consumes(“application/json”)</strong></p>\n<ul>\n<li>我们不管使用get请求rest接口，或者使用post请求rest接口，一般都需要传参，该注解就是用来限制对应的rest方法中所要接受的对应参数类型的，上面的例子我们指定对应的rest接口只接受对应的json类型的参数；当然该注解其实可以使用对应的枚举赋值，后续开发中最好使用枚举进行复制-@Consumes({MediaType.TEXT_PLAIN})，下面看看对应的枚举支持的类型：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaType</span> </span>&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">private</span> String type;</div><div class=\"line\">    <span class=\"keyword\">private</span> String subtype;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_XML = <span class=\"string\">\"application/xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/atom+xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_ATOM_XML = <span class=\"string\">\"application/atom+xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/xhtml+xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_XHTML_XML = <span class=\"string\">\"application/xhtml+xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/svg+xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_SVG_XML = <span class=\"string\">\"application/svg+xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/json\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_JSON = <span class=\"string\">\"application/json\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"multipart/form-data\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String MULTIPART_FORM_DATA = <span class=\"string\">\"multipart/form-data\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/octet-stream\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_OCTET_STREAM = <span class=\"string\">\"application/octet-stream\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"text/plain\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TEXT_PLAIN = <span class=\"string\">\"text/plain\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"text/xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TEXT_XML = <span class=\"string\">\"text/xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"text/html\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TEXT_HTML = <span class=\"string\">\"text/html\"</span>;\t</div><div class=\"line\"></div><div class=\"line\">\t.......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>响应数据类型 @Produces({“application/json”})</strong></p>\n<ul>\n<li>该注解就是用来限定对应的rest接口的返回值类型，相似与springmvc中的@ResponseBody注解的作用，当然该传参形式也可以使用枚举类型，同上面的@Consumes注解使用的枚举传参方式一样</li>\n</ul>\n<p><strong>响应类型为xml格式的数据封装 @XmlRootElement</strong></p>\n<ul>\n<li>可以看到在我们刚开始定义rest接口数据封装VO类时，在UserVO类上面使用了该注解定义，该注解主要的作用就是制定当rest接口中的响应数据类型为xml格式的UserVO数据时，使用UserVO类名作为根节点，当返回的xml数据集为多条(集合)时，则根节点为类名+es（UserVOes），具体可以看上面的示例；不过我们可以通过其他注解进行具体个性化指定，以后再具体讲解。</li>\n</ul>\n<p><strong>请求头(header)中传递参数 @HeaderParam(“md5val”)</strong></p>\n<ul>\n<li>该注解主要用来封装在调用rest接口时，需要在请求头(header)中传递参数的作用，一般当对应的rest接口需要进行一些认证校验处理时，一般都把对应的校验参数通过header传递，该注解等同于springmvc中的@RequestHeader(“md5val”)的作用。</li>\n</ul>\n</blockquote>\n<p>到目前为止，对应的常规的rest接口的开发就写完了，然后针对开发过程中用到的注解及使用场景进行了具体描述。</p>\n","excerpt":"<p>随着上一篇文章讲解了jersey框架的搭建运行，这一篇主要围绕我们平时开发rest接口方式进行示例；平时开发rest接口时无非提供GET、POST、PUT、DELETE等等类型的方法，或者在header中传入一些验证参数，下面我们就以user为例，主要围绕user的增删改查行为进行开发对应的rest接口。</p>","more":"<p><strong>一、新建rest接口数据封装VO类-UserVO</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.vo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlAccessType;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlAccessorType;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlElement;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.XmlRootElement;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@XmlRootElement</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserVO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6599357158756293288L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String userName;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String passWord;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String email;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String address;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassWord</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassWord</span><span class=\"params\">(String passWord)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tbuilder.append(<span class=\"string\">\"UserVO [id=\"</span>).append(id).append(<span class=\"string\">\", userName=\"</span>).append(userName).append(<span class=\"string\">\", passWord=\"</span>)</div><div class=\"line\">\t\t\t\t.append(passWord).append(<span class=\"string\">\", age=\"</span>).append(age).append(<span class=\"string\">\", email=\"</span>).append(email).append(<span class=\"string\">\", address=\"</span>)</div><div class=\"line\">\t\t\t\t.append(address).append(<span class=\"string\">\"]\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>二、新建rest接口服务类-UserController</strong></p>\n<p><strong>1. 【GET】创建返回json类型的rest接口方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取单个用户数据的rest接口，并且返回数据格式为json类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/json\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(<span class=\"string\">\"application/json\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserVO <span class=\"title\">info</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> user;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取用户列表数据的rest接口，并且返回数据格式为json类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/json/list\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title\">infoList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tList&lt;UserVO&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;UserVO&gt;();</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user2 = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser2.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser2.setUserName(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">\t\tuser2.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser2.setPassWord(<span class=\"string\">\"111111\"</span>);</div><div class=\"line\">\t\tuser2.setEmail(<span class=\"string\">\"wedaf@199ta.com\"</span>);</div><div class=\"line\">\t\tuser2.setAddress(<span class=\"string\">\"宋城路\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tuserList.add(user);</div><div class=\"line\">\t\tuserList.add(user2);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userList;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>启动tomcat，访问rest接口</em></p>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/json\">http://localhost:8080/jersey/user/info/json</a></p>\n</blockquote>\n<p>返回json对象类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">\tuserName: <span class=\"string\">\"zhansan\"</span>,</div><div class=\"line\">\tpassWord: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\temail: <span class=\"string\">\"asfdsa@199ta.com\"</span>,</div><div class=\"line\">\taddress: <span class=\"string\">\"大山中\"</span>,</div><div class=\"line\">\tuserId: <span class=\"string\">\"1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/json/list\">http://localhost:8080/jersey/user/info/json/list</a></p>\n</blockquote>\n<p>返回json数组类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tuserName: <span class=\"string\">\"zhansan\"</span>,</div><div class=\"line\">\t\tpassWord: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">\t\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\t\temail: <span class=\"string\">\"asfdsa@199ta.com\"</span>,</div><div class=\"line\">\t\taddress: <span class=\"string\">\"大山中\"</span>,</div><div class=\"line\">\t\tuserId: <span class=\"string\">\"1\"</span></div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tuserName: <span class=\"string\">\"李四\"</span>,</div><div class=\"line\">\t\tpassWord: <span class=\"string\">\"111111\"</span>,</div><div class=\"line\">\t\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\t\temail: <span class=\"string\">\"wedaf@199ta.com\"</span>,</div><div class=\"line\">\t\taddress: <span class=\"string\">\"宋城路\"</span>,</div><div class=\"line\">\t\tuserId: <span class=\"string\">\"1\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t]</div></pre></td></tr></table></figure>\n<p><strong>2. 【GET】创建返回xml类型的rest接口方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取单个用户对象数据的rest接口，并且返回数据格式为xml类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/xml\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(<span class=\"string\">\"application/xml\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserVO <span class=\"title\">infoXml</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取用户列表rest接口，并且返回数据格式为xml类型</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/info/xml/list\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(<span class=\"string\">\"application/xml\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title\">infoXmlList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tList&lt;UserVO&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;UserVO&gt;();</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大山中\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user2 = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser2.setId(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\t\tuser2.setUserName(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">\t\tuser2.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser2.setPassWord(<span class=\"string\">\"111111\"</span>);</div><div class=\"line\">\t\tuser2.setEmail(<span class=\"string\">\"wedaf@199ta.com\"</span>);</div><div class=\"line\">\t\tuser2.setAddress(<span class=\"string\">\"宋城路\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tuserList.add(user);</div><div class=\"line\">\t\tuserList.add(user2);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userList;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/xml\">http://localhost:8080/jersey/user/info/xml</a></p>\n</blockquote>\n<p>返回xml对象类型的数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\">&lt;userVO&gt;</div><div class=\"line\">\t&lt;userId&gt;1&lt;/userId&gt;</div><div class=\"line\">\t&lt;userName&gt;zhansan&lt;/userName&gt;</div><div class=\"line\">\t&lt;passWord&gt;123456&lt;/passWord&gt;</div><div class=\"line\">\t&lt;age&gt;25&lt;/age&gt;</div><div class=\"line\">\t&lt;email&gt;asfdsa@199ta.com&lt;/email&gt;</div><div class=\"line\">\t&lt;address&gt;大山中&lt;/address&gt;</div><div class=\"line\">&lt;/userVO&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/info/xml/list\">http://localhost:8080/jersey/user/info/xml/list</a></p>\n</blockquote>\n<p>返回xml集合类型的数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\">&lt;userVOes&gt;</div><div class=\"line\">\t&lt;userVO&gt;</div><div class=\"line\">\t\t&lt;userId&gt;1&lt;/userId&gt;</div><div class=\"line\">\t\t&lt;userName&gt;zhansan&lt;/userName&gt;</div><div class=\"line\">\t\t&lt;passWord&gt;123456&lt;/passWord&gt;</div><div class=\"line\">\t\t&lt;age&gt;25&lt;/age&gt;</div><div class=\"line\">\t\t&lt;email&gt;asfdsa@199ta.com&lt;/email&gt;</div><div class=\"line\">\t\t&lt;address&gt;大山中&lt;/address&gt;</div><div class=\"line\">\t&lt;/userVO&gt;</div><div class=\"line\">\t&lt;userVO&gt;</div><div class=\"line\">\t\t&lt;userId&gt;1&lt;/userId&gt;</div><div class=\"line\">\t\t&lt;userName&gt;李四&lt;/userName&gt;</div><div class=\"line\">\t\t&lt;passWord&gt;111111&lt;/passWord&gt;</div><div class=\"line\">\t\t&lt;age&gt;25&lt;/age&gt;</div><div class=\"line\">\t\t&lt;email&gt;wedaf@199ta.com&lt;/email&gt;</div><div class=\"line\">\t\t&lt;address&gt;宋城路&lt;/address&gt;</div><div class=\"line\">\t&lt;/userVO&gt;</div><div class=\"line\">&lt;/userVOes&gt;</div></pre></td></tr></table></figure>\n<p><strong>3. 【GET】动态url请求rest接口-动态传参</strong></p>\n<p>在请求url中动态传参</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在请求url路径中动态传递参数</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span>\t</div><div class=\"line\">\t<span class=\"meta\">@GET</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/path/&#123;id&#125;\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserVO <span class=\"title\">pathJson</span><span class=\"params\">(@PathParam(<span class=\"string\">\"id\"</span>)</span> String id)</span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tUserVO user = <span class=\"keyword\">new</span> UserVO();</div><div class=\"line\">\t\tuser.setId(id);</div><div class=\"line\">\t\tuser.setUserName(<span class=\"string\">\"zhansan\"</span>);</div><div class=\"line\">\t\tuser.setAge(<span class=\"number\">25</span>);</div><div class=\"line\">\t\tuser.setPassWord(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">\t\tuser.setEmail(<span class=\"string\">\"asfdsa@199ta.com\"</span>);</div><div class=\"line\">\t\tuser.setAddress(<span class=\"string\">\"大中华\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://localhost:8080/jersey/user/path/path中动态传参\">http://localhost:8080/jersey/user/path/path中动态传参</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">\tuserName: <span class=\"string\">\"zhansan\"</span>,</div><div class=\"line\">\tpassWord: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">\tage: <span class=\"number\">25</span>,</div><div class=\"line\">\temail: <span class=\"string\">\"asfdsa@199ta.com\"</span>,</div><div class=\"line\">\taddress: <span class=\"string\">\"大中华\"</span>,</div><div class=\"line\">\tuserId: <span class=\"string\">\"path中动态传参\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4. 【POST】创建post类型，并且只接受json格式数据体的rest方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String,UserVO&gt; mapTemp = <span class=\"keyword\">new</span> HashMap&lt;String, UserVO&gt;();</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 添加用户的rest接口，</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> user json数据格式的user对象参数</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@POST</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/addUser\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Consumes</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title\">addUser</span><span class=\"params\">(UserVO user)</span></span>&#123;</div><div class=\"line\">\t\tuserListTemp.add(user);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userListTemp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通过rest接口工具调用</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/restinvokepost.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/restinvokepostresponse.png\" alt=\"Alt text\"></p>\n<p><strong>5. 【POST】创建post类型，并且只接受json格式数据体的rest方法,同时需要在header中传递校验码参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String,UserVO&gt; mapTemp = <span class=\"keyword\">new</span> HashMap&lt;String, UserVO&gt;();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 添加用户的rest接口，并且header中需要传递对应的md5校验值</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> user json数据格式的use对象参数</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> md5val  在请求的header中传递的校验码</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@POST</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/addUser/headCheck\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Consumes</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(&#123;<span class=\"string\">\"application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,UserVO&gt; <span class=\"title\">addUser</span><span class=\"params\">(UserVO user,@HeaderParam(<span class=\"string\">\"md5val\"</span>)</span> String md5val)</span>&#123;</div><div class=\"line\">\t\tmapTemp.put(md5val, user);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mapTemp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通过rest接口工具调用</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/restpostheader.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/restpostheaderresult.png\" alt=\"Alt text\"></p>\n<p><strong>5. 【DELETE】创建delete类型的rest方法，删除用户操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DELETE;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.HeaderParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 通过动态传参的方式，创建一个delete方法类型删除用户的rest接口，返回一个字符串状态</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@DELETE</span></div><div class=\"line\">\t<span class=\"meta\">@Path</span>(<span class=\"string\">\"/delete/&#123;id&#125;\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Produces</span>(MediaType.TEXT_PLAIN)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteUser</span><span class=\"params\">(@PathParam(<span class=\"string\">\"id\"</span>)</span> String id)</span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"DELETE  -- deleteUser by \"</span>+id);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通过rest接口工具调用</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/deleteinvoke.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/deleteresult.png\" alt=\"Alt text\"></p>\n<p>截止目前我们已经把我们常规的rest接口的开发方式都实现了，在实现过程中也看到了我们都是用注解去处理的，那么下面我们大概讲述一下每一个rest接口对应的不同的注解的作用。</p>\n<p><strong>二、注解描述</strong></p>\n<blockquote>\n<p><strong>请求方式 @GET @POST @DELETE</strong></p>\n<ul>\n<li>在上面的REST接口对应的方法中都有对应的方法类型(rest接口的请求方式)，添加对应的注解，该rest接口就需要用什么类型的方式进行请求</li>\n</ul>\n<p><strong>接口地址 @Path</strong></p>\n<ul>\n<li>该注解就如同springmvc中的@RequestMapping注解一样的作用，主要用来指定该方法对应的rest接口的访问地址是什么</li>\n</ul>\n<p><strong>动态传参 @PathParam(“id”)</strong></p>\n<ul>\n<li>这个注解一般配合注解@Path一起使用，当在@Path注解中指定对应的动态参数，然后在方法参数中使用注解@PathParam进行绑定，该参数相当于springmvc中的@PathVariable(“id”)注解的作用</li>\n</ul>\n<p><strong>请求参数类型(接受的参数类型) @Consumes(“application/json”)</strong></p>\n<ul>\n<li>我们不管使用get请求rest接口，或者使用post请求rest接口，一般都需要传参，该注解就是用来限制对应的rest方法中所要接受的对应参数类型的，上面的例子我们指定对应的rest接口只接受对应的json类型的参数；当然该注解其实可以使用对应的枚举赋值，后续开发中最好使用枚举进行复制-@Consumes({MediaType.TEXT_PLAIN})，下面看看对应的枚举支持的类型：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaType</span> </span>&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">private</span> String type;</div><div class=\"line\">    <span class=\"keyword\">private</span> String subtype;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_XML = <span class=\"string\">\"application/xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/atom+xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_ATOM_XML = <span class=\"string\">\"application/atom+xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/xhtml+xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_XHTML_XML = <span class=\"string\">\"application/xhtml+xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/svg+xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_SVG_XML = <span class=\"string\">\"application/svg+xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/json\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_JSON = <span class=\"string\">\"application/json\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"multipart/form-data\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String MULTIPART_FORM_DATA = <span class=\"string\">\"multipart/form-data\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"application/octet-stream\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String APPLICATION_OCTET_STREAM = <span class=\"string\">\"application/octet-stream\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"text/plain\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TEXT_PLAIN = <span class=\"string\">\"text/plain\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"text/xml\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TEXT_XML = <span class=\"string\">\"text/xml\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** \"text/html\" */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TEXT_HTML = <span class=\"string\">\"text/html\"</span>;\t</div><div class=\"line\"></div><div class=\"line\">\t.......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>响应数据类型 @Produces({“application/json”})</strong></p>\n<ul>\n<li>该注解就是用来限定对应的rest接口的返回值类型，相似与springmvc中的@ResponseBody注解的作用，当然该传参形式也可以使用枚举类型，同上面的@Consumes注解使用的枚举传参方式一样</li>\n</ul>\n<p><strong>响应类型为xml格式的数据封装 @XmlRootElement</strong></p>\n<ul>\n<li>可以看到在我们刚开始定义rest接口数据封装VO类时，在UserVO类上面使用了该注解定义，该注解主要的作用就是制定当rest接口中的响应数据类型为xml格式的UserVO数据时，使用UserVO类名作为根节点，当返回的xml数据集为多条(集合)时，则根节点为类名+es（UserVOes），具体可以看上面的示例；不过我们可以通过其他注解进行具体个性化指定，以后再具体讲解。</li>\n</ul>\n<p><strong>请求头(header)中传递参数 @HeaderParam(“md5val”)</strong></p>\n<ul>\n<li>该注解主要用来封装在调用rest接口时，需要在请求头(header)中传递参数的作用，一般当对应的rest接口需要进行一些认证校验处理时，一般都把对应的校验参数通过header传递，该注解等同于springmvc中的@RequestHeader(“md5val”)的作用。</li>\n</ul>\n</blockquote>\n<p>到目前为止，对应的常规的rest接口的开发就写完了，然后针对开发过程中用到的注解及使用场景进行了具体描述。</p>"},{"title":"jersey-3--轻量级Rest接口服务开发之入参","date":"2017-07-14T07:48:18.000Z","_content":"\n本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，基本的入参操作，主要包括入参类型的全局设定和方法级别设定、参数的默认值等等。\n\n<!--more-->\n\n\n**一、全局入参设定**\n\n通过在类上面添加注解 *@Consumes(MediaType.类型)* 即可限定全局入参类型的设置，比如 *@Consumes(MediaType.TEXT_PLAIN)*\n\n> 新建控制器类\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DefaultValue;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.QueryParam;\n\timport javax.ws.rs.core.MediaType;\n\t\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"param\")\n\t@Consumes(MediaType.TEXT_PLAIN)\n\tpublic class ParameterController {\n\t\n\t\t\n\t}\n\n```\n\n上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 */param*\n\n\n**1. 新建一个方法，方法层级上面不加 *@Consumes* 注解**\n\n```java\n\n\t/**\n\t * 不设置方法的入参类型，则默认为类级别所注解的@Consumes类型,\n\t * 并且方法中的入参没有 @QueryParam\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramForClassNoparam\")\n\tpublic String paramForClassNoparam(String userId){\n\t\treturn userId;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramForClassNoparam，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码。\n\n----------\n\n> 访问 http://servername/param/paramForClassNoparam?userId=zhangsan，通过方法代码我们可以看到方法有一个String类型的入参userId，所以我们请求该rest接口时，在url中传递这个参数值；请求这个rest接口地址后，方法中的业务代码可以正常运行，但是传递的参数值是无法获取到的，这是因为我们在方法入参中没有通过 *@QueryParam* 指定具体的入参；所以我们上面的rest方法等同于无参数的方法，其实我们可以认为方法中的userId入参是多余的。\n\n小结：在开发rest接口中，如果方法层级上面没有声明注解Consumes，将默认采用全局(类注解)入参注解类型；如果在对应的方法中没有使用注解QueryParam声明具体的参数，那么该参数是毫无意义的，因为请求该接口时将无法获取到对应的传递的参数值。\n\n**2. 新建一个方法，入参前面添加 *@QueryParam***\n\n```java\n\n\t/**\n\t * 不设置方法的入参类型，则默认为类级别所注解的@Consumes类型\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramForClass\")\n\tpublic String paramForClass(@QueryParam(\"userId\") String userId){\n\t\treturn userId;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramForClass，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,但是由于我们没有传递对应的userId参数，所以rest接口将不会有任何内容输出，并且响应状态码为204\n\n![Alt text](http://soujava.com/images/paramForClass.png)\n\n----------\n\n> 访问 http://servername/param/paramForClass?userId=zhangsan，该rest接口的请求将会到达对应的方法体中，并且可以正常执行方法体中的业务代码，并且将会输出对应的入参userId传递的具体值。\n\n![Alt text](http://soujava.com/images/paramForClass2.png)\n\n小结：我们在对应的rest接口方法中，通过注解QueryParam指定具体的参数后，如果在请求该rest接口时，不传递对应的参数，那么方法体中获取到的该参数默认为null；如果在请求rest接口时，传递了具体声明的参数，那么方法体中就可以正常获取到该参数的值\n\n**3. 新建一个方法，方法层级声明 *@Consumes* 注解为json类型，入参声明 *@QueryParam***\n\t\n```java\n\n\t/**\n\t * 设置入参类型为字符串类型，在方法上面的注解@Consumes将覆盖掉类级别的注解@Consumes\n\t * 比如类级别的入参类型为字符串类型，而方法级别的入参类型为json类型，所以该方法的入参类型为json类型\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramForMethod\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramForMethod(@QueryParam(\"userId\") String userId){\n\t\treturn userId; \n\t}\n\n```\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://servername/param/paramForMethod?userId=zhangsanfeng，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\n\n小结：我们在方法层级上面使用了注解Consumes指定了入参类型为json，其实该rest方法应该接受json类型的入参才对吧？实际上我们仍然可以正常传递字符串类型的参数userId，所以可以判定通过Consumes注解指定的入参类型并不是必须条件。\n\n**4. 新建一个方法，方法层级声明 *@Consumes* 注解为xml类型，入参声明 *@QueryParam***\n\n```java\n\n\t@GET\n\t@Path(\"/paramForMethodXml\")\n\t@Consumes(MediaType.APPLICATION_XML)\n\tpublic String paramForMethodText(@QueryParam(\"userId\") String userId){\n\t\treturn userId; \n\t}\t\n\n```\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://servername/param/paramForMethodXml?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\n\n小结：我们在方法层级上面使用了注解Consumes指定了入参类型为xml,实际上面我们仍然可以传递字符串类型的参数\n\n**5. 新建一个方法，入参通过 *@QueryParam* 注解声明参数名称**\n\n```java\n\n\t/**\n\t * 在方法的入参中设置入参名称\n\t * @param id\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramName\")\n\tpublic String paramName(@QueryParam(\"userId\") String id){\n\t\treturn id;\n\t}\n\n```\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://servername/param/paramName?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\n\n小结：这个rest接口我们通过QueryParam单独声明了入参名称，也就是说通过QueryParam注解声明的参数名称跟方法真实的入参名称是不同的，但是我们通过注解QueryParam声明以后，请求rest接口时，传递的userId参数名称的值就会自动赋值到真实的入参id上面。\n\n**6. 通过注解 *@QueryParam* *@DefaultValue* 为参数声明默认值**\n\n```java\n\n\t/**\n\t * 为入参设置默认值\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramDefultValue\")\n\tpublic String defaultParamValue(@DefaultValue(\"123456\") @QueryParam(\"userId\") String userId){\n\t\treturn userId;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramDefultValue，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,虽然由于我们没有传递对应的userId参数，但是通过注解DefaultValue设定默认值后，我们仍然可以下方法体中获取到入参userId的值为123456\n\n----------\n\n> 访问 http://servername/param/paramDefultValue?userId=zhangsan，该rest接口对应的方法体可以正常执行，响应输出zhangsan，因为我们请求rest接口时，传递了userId参数，所以方法体中我们通过注解DefaultValue设定的默认值就被覆盖了。\n\n小结：当我们使用注解DefaultValue声明入参默认值后，当我们请求rest接口时，不传递对应的参数时，方法体中获取的参数值就是我们设定的默认值。\n\n**7. 通过注解 *@QueryParam* 设定后，请求rest接口的入参类型**\n\n```java\n\n\t/**\n\t * 设置入参的类型\n\t * @param userId\n\t * @param age\n\t * @return\n\t */\n\t@GET\n\t@Path(\"paramType\")\n\tpublic String paramType(@QueryParam(\"userId\") String userId, @QueryParam(\"age\") Integer age){\n\t\treturn  userId+\" \"+age;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramType?userId=zhangsan&age=27，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,该请求响应输出zhangsan 27\n\n----------\n\n> 访问 http://servername/param/paramType?userId=zhangsan&age=strs ，报404错误，因为我们的入参age的类型参数值类型传递错误\n\n小结：我们通过 QueryParam 注解声明入参后，请求rest接口时，传递的参数类型需要满足 兼容性；否则将报404错误。\n\n**8. 通过注解 *@QueryParam* 设定后，请求rest接口的入参类型为boolean类型**\n\n```java\n\n\t@GET\n\t@Path(\"paramTypeForBool\")\n\tpublic String paramTypeForBool(@QueryParam(\"flg\") Boolean flg, @QueryParam(\"status\") boolean status){\n\t\treturn  \" \"+flg+\" \"+status;\n\t}\n\n```\n该rest接口发布后，我们分三种情况访问该rest接口\n\n> 访问 http://servername/param/paramTypeForBool，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,只是我们没有传递具体参数值，所以Boolean类型的flg就为null，boolean类型的flg就为false。\n\n----------\n\n> 访问 http://servername/param/paramTypeForBool?flg=str&status=str ，该请求响应输出为 false false。\n\n----------\n\n> 访问 http://servername/param/paramTypeForBool?flg=true&status=true ，该请求响应输出为 true true。\n\n小结：当入参类型布尔类型时，当类型是包装类-Boolean时，如果入参不传的话，接收的为null；当类型不是包装类-boolean时，如果参数不传的话，接收的值为false；当类型不是包装类-boolean时，如果传递的参数值类型为非boolan(不兼容),则方法体中的接收到的值为false。\n\n\n","source":"_posts/jersey-3-轻量级Rest接口服务开发之入参.md","raw":"---\ntitle: jersey-3--轻量级Rest接口服务开发之入参\ndate: 2017-07-14 15:48:18\ncategories: jersey\ntags: java\n---\n\n本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，基本的入参操作，主要包括入参类型的全局设定和方法级别设定、参数的默认值等等。\n\n<!--more-->\n\n\n**一、全局入参设定**\n\n通过在类上面添加注解 *@Consumes(MediaType.类型)* 即可限定全局入参类型的设置，比如 *@Consumes(MediaType.TEXT_PLAIN)*\n\n> 新建控制器类\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DefaultValue;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.QueryParam;\n\timport javax.ws.rs.core.MediaType;\n\t\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"param\")\n\t@Consumes(MediaType.TEXT_PLAIN)\n\tpublic class ParameterController {\n\t\n\t\t\n\t}\n\n```\n\n上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 */param*\n\n\n**1. 新建一个方法，方法层级上面不加 *@Consumes* 注解**\n\n```java\n\n\t/**\n\t * 不设置方法的入参类型，则默认为类级别所注解的@Consumes类型,\n\t * 并且方法中的入参没有 @QueryParam\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramForClassNoparam\")\n\tpublic String paramForClassNoparam(String userId){\n\t\treturn userId;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramForClassNoparam，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码。\n\n----------\n\n> 访问 http://servername/param/paramForClassNoparam?userId=zhangsan，通过方法代码我们可以看到方法有一个String类型的入参userId，所以我们请求该rest接口时，在url中传递这个参数值；请求这个rest接口地址后，方法中的业务代码可以正常运行，但是传递的参数值是无法获取到的，这是因为我们在方法入参中没有通过 *@QueryParam* 指定具体的入参；所以我们上面的rest方法等同于无参数的方法，其实我们可以认为方法中的userId入参是多余的。\n\n小结：在开发rest接口中，如果方法层级上面没有声明注解Consumes，将默认采用全局(类注解)入参注解类型；如果在对应的方法中没有使用注解QueryParam声明具体的参数，那么该参数是毫无意义的，因为请求该接口时将无法获取到对应的传递的参数值。\n\n**2. 新建一个方法，入参前面添加 *@QueryParam***\n\n```java\n\n\t/**\n\t * 不设置方法的入参类型，则默认为类级别所注解的@Consumes类型\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramForClass\")\n\tpublic String paramForClass(@QueryParam(\"userId\") String userId){\n\t\treturn userId;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramForClass，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,但是由于我们没有传递对应的userId参数，所以rest接口将不会有任何内容输出，并且响应状态码为204\n\n![Alt text](http://soujava.com/images/paramForClass.png)\n\n----------\n\n> 访问 http://servername/param/paramForClass?userId=zhangsan，该rest接口的请求将会到达对应的方法体中，并且可以正常执行方法体中的业务代码，并且将会输出对应的入参userId传递的具体值。\n\n![Alt text](http://soujava.com/images/paramForClass2.png)\n\n小结：我们在对应的rest接口方法中，通过注解QueryParam指定具体的参数后，如果在请求该rest接口时，不传递对应的参数，那么方法体中获取到的该参数默认为null；如果在请求rest接口时，传递了具体声明的参数，那么方法体中就可以正常获取到该参数的值\n\n**3. 新建一个方法，方法层级声明 *@Consumes* 注解为json类型，入参声明 *@QueryParam***\n\t\n```java\n\n\t/**\n\t * 设置入参类型为字符串类型，在方法上面的注解@Consumes将覆盖掉类级别的注解@Consumes\n\t * 比如类级别的入参类型为字符串类型，而方法级别的入参类型为json类型，所以该方法的入参类型为json类型\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramForMethod\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramForMethod(@QueryParam(\"userId\") String userId){\n\t\treturn userId; \n\t}\n\n```\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://servername/param/paramForMethod?userId=zhangsanfeng，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\n\n小结：我们在方法层级上面使用了注解Consumes指定了入参类型为json，其实该rest方法应该接受json类型的入参才对吧？实际上我们仍然可以正常传递字符串类型的参数userId，所以可以判定通过Consumes注解指定的入参类型并不是必须条件。\n\n**4. 新建一个方法，方法层级声明 *@Consumes* 注解为xml类型，入参声明 *@QueryParam***\n\n```java\n\n\t@GET\n\t@Path(\"/paramForMethodXml\")\n\t@Consumes(MediaType.APPLICATION_XML)\n\tpublic String paramForMethodText(@QueryParam(\"userId\") String userId){\n\t\treturn userId; \n\t}\t\n\n```\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://servername/param/paramForMethodXml?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\n\n小结：我们在方法层级上面使用了注解Consumes指定了入参类型为xml,实际上面我们仍然可以传递字符串类型的参数\n\n**5. 新建一个方法，入参通过 *@QueryParam* 注解声明参数名称**\n\n```java\n\n\t/**\n\t * 在方法的入参中设置入参名称\n\t * @param id\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramName\")\n\tpublic String paramName(@QueryParam(\"userId\") String id){\n\t\treturn id;\n\t}\n\n```\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://servername/param/paramName?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\n\n小结：这个rest接口我们通过QueryParam单独声明了入参名称，也就是说通过QueryParam注解声明的参数名称跟方法真实的入参名称是不同的，但是我们通过注解QueryParam声明以后，请求rest接口时，传递的userId参数名称的值就会自动赋值到真实的入参id上面。\n\n**6. 通过注解 *@QueryParam* *@DefaultValue* 为参数声明默认值**\n\n```java\n\n\t/**\n\t * 为入参设置默认值\n\t * @param userId\n\t * @return\n\t */\n\t@GET\n\t@Path(\"/paramDefultValue\")\n\tpublic String defaultParamValue(@DefaultValue(\"123456\") @QueryParam(\"userId\") String userId){\n\t\treturn userId;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramDefultValue，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,虽然由于我们没有传递对应的userId参数，但是通过注解DefaultValue设定默认值后，我们仍然可以下方法体中获取到入参userId的值为123456\n\n----------\n\n> 访问 http://servername/param/paramDefultValue?userId=zhangsan，该rest接口对应的方法体可以正常执行，响应输出zhangsan，因为我们请求rest接口时，传递了userId参数，所以方法体中我们通过注解DefaultValue设定的默认值就被覆盖了。\n\n小结：当我们使用注解DefaultValue声明入参默认值后，当我们请求rest接口时，不传递对应的参数时，方法体中获取的参数值就是我们设定的默认值。\n\n**7. 通过注解 *@QueryParam* 设定后，请求rest接口的入参类型**\n\n```java\n\n\t/**\n\t * 设置入参的类型\n\t * @param userId\n\t * @param age\n\t * @return\n\t */\n\t@GET\n\t@Path(\"paramType\")\n\tpublic String paramType(@QueryParam(\"userId\") String userId, @QueryParam(\"age\") Integer age){\n\t\treturn  userId+\" \"+age;\n\t}\n\n```\n\n该rest接口发布后，我们分两种情况访问该rest接口\n\n> 访问 http://servername/param/paramType?userId=zhangsan&age=27，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,该请求响应输出zhangsan 27\n\n----------\n\n> 访问 http://servername/param/paramType?userId=zhangsan&age=strs ，报404错误，因为我们的入参age的类型参数值类型传递错误\n\n小结：我们通过 QueryParam 注解声明入参后，请求rest接口时，传递的参数类型需要满足 兼容性；否则将报404错误。\n\n**8. 通过注解 *@QueryParam* 设定后，请求rest接口的入参类型为boolean类型**\n\n```java\n\n\t@GET\n\t@Path(\"paramTypeForBool\")\n\tpublic String paramTypeForBool(@QueryParam(\"flg\") Boolean flg, @QueryParam(\"status\") boolean status){\n\t\treturn  \" \"+flg+\" \"+status;\n\t}\n\n```\n该rest接口发布后，我们分三种情况访问该rest接口\n\n> 访问 http://servername/param/paramTypeForBool，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,只是我们没有传递具体参数值，所以Boolean类型的flg就为null，boolean类型的flg就为false。\n\n----------\n\n> 访问 http://servername/param/paramTypeForBool?flg=str&status=str ，该请求响应输出为 false false。\n\n----------\n\n> 访问 http://servername/param/paramTypeForBool?flg=true&status=true ，该请求响应输出为 true true。\n\n小结：当入参类型布尔类型时，当类型是包装类-Boolean时，如果入参不传的话，接收的为null；当类型不是包装类-boolean时，如果参数不传的话，接收的值为false；当类型不是包装类-boolean时，如果传递的参数值类型为非boolan(不兼容),则方法体中的接收到的值为false。\n\n\n","slug":"jersey-3-轻量级Rest接口服务开发之入参","published":1,"updated":"2018-07-08T09:37:48.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pje003t30tzi59j2plf","content":"<p>本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，基本的入参操作，主要包括入参类型的全局设定和方法级别设定、参数的默认值等等。</p>\n<a id=\"more\"></a>\n<p><strong>一、全局入参设定</strong></p>\n<p>通过在类上面添加注解 <em>@Consumes(MediaType.类型)</em> 即可限定全局入参类型的设置，比如 <em>@Consumes(MediaType.TEXT_PLAIN)</em></p>\n<blockquote>\n<p>新建控制器类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DefaultValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.QueryParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"param\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.TEXT_PLAIN)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 <em>/param</em></p>\n<p><strong>1. 新建一个方法，方法层级上面不加 <em>@Consumes</em> 注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 不设置方法的入参类型，则默认为类级别所注解的<span class=\"doctag\">@Consumes</span>类型,</div><div class=\"line\"> * 并且方法中的入参没有 <span class=\"doctag\">@QueryParam</span></div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForClassNoparam\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForClassNoparam</span><span class=\"params\">(String userId)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClassNoparam，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码。\" target=\"_blank\" rel=\"external\">http://servername/param/paramForClassNoparam，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码。</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClassNoparam?userId=zhangsan，通过方法代码我们可以看到方法有一个String类型的入参userId，所以我们请求该rest接口时，在url中传递这个参数值；请求这个rest接口地址后，方法中的业务代码可以正常运行，但是传递的参数值是无法获取到的，这是因为我们在方法入参中没有通过\" target=\"_blank\" rel=\"external\">http://servername/param/paramForClassNoparam?userId=zhangsan，通过方法代码我们可以看到方法有一个String类型的入参userId，所以我们请求该rest接口时，在url中传递这个参数值；请求这个rest接口地址后，方法中的业务代码可以正常运行，但是传递的参数值是无法获取到的，这是因为我们在方法入参中没有通过</a> <em>@QueryParam</em> 指定具体的入参；所以我们上面的rest方法等同于无参数的方法，其实我们可以认为方法中的userId入参是多余的。</p>\n</blockquote>\n<p>小结：在开发rest接口中，如果方法层级上面没有声明注解Consumes，将默认采用全局(类注解)入参注解类型；如果在对应的方法中没有使用注解QueryParam声明具体的参数，那么该参数是毫无意义的，因为请求该接口时将无法获取到对应的传递的参数值。</p>\n<p><strong>2. 新建一个方法，入参前面添加 <em>@QueryParam</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 不设置方法的入参类型，则默认为类级别所注解的<span class=\"doctag\">@Consumes</span>类型</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForClass\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForClass</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClass，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,但是由于我们没有传递对应的userId参数，所以rest接口将不会有任何内容输出，并且响应状态码为204\" target=\"_blank\" rel=\"external\">http://servername/param/paramForClass，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,但是由于我们没有传递对应的userId参数，所以rest接口将不会有任何内容输出，并且响应状态码为204</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramForClass.png\" alt=\"Alt text\"></p>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClass?userId=zhangsan，该rest接口的请求将会到达对应的方法体中，并且可以正常执行方法体中的业务代码，并且将会输出对应的入参userId传递的具体值。\" target=\"_blank\" rel=\"external\">http://servername/param/paramForClass?userId=zhangsan，该rest接口的请求将会到达对应的方法体中，并且可以正常执行方法体中的业务代码，并且将会输出对应的入参userId传递的具体值。</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramForClass2.png\" alt=\"Alt text\"></p>\n<p>小结：我们在对应的rest接口方法中，通过注解QueryParam指定具体的参数后，如果在请求该rest接口时，不传递对应的参数，那么方法体中获取到的该参数默认为null；如果在请求rest接口时，传递了具体声明的参数，那么方法体中就可以正常获取到该参数的值</p>\n<p><strong>3. 新建一个方法，方法层级声明 <em>@Consumes</em> 注解为json类型，入参声明 <em>@QueryParam</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 设置入参类型为字符串类型，在方法上面的注解<span class=\"doctag\">@Consumes</span>将覆盖掉类级别的注解<span class=\"doctag\">@Consumes</span></div><div class=\"line\"> * 比如类级别的入参类型为字符串类型，而方法级别的入参类型为json类型，所以该方法的入参类型为json类型</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForMethod\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForMethod</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForMethod?userId=zhangsanfeng，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\" target=\"_blank\" rel=\"external\">http://servername/param/paramForMethod?userId=zhangsanfeng，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。</a></p>\n</blockquote>\n<p>小结：我们在方法层级上面使用了注解Consumes指定了入参类型为json，其实该rest方法应该接受json类型的入参才对吧？实际上我们仍然可以正常传递字符串类型的参数userId，所以可以判定通过Consumes注解指定的入参类型并不是必须条件。</p>\n<p><strong>4. 新建一个方法，方法层级声明 <em>@Consumes</em> 注解为xml类型，入参声明 <em>@QueryParam</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForMethodXml\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_XML)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForMethodText</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForMethodXml?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\" target=\"_blank\" rel=\"external\">http://servername/param/paramForMethodXml?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。</a></p>\n</blockquote>\n<p>小结：我们在方法层级上面使用了注解Consumes指定了入参类型为xml,实际上面我们仍然可以传递字符串类型的参数</p>\n<p><strong>5. 新建一个方法，入参通过 <em>@QueryParam</em> 注解声明参数名称</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 在方法的入参中设置入参名称</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramName\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramName</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String id)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramName?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\" target=\"_blank\" rel=\"external\">http://servername/param/paramName?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。</a></p>\n</blockquote>\n<p>小结：这个rest接口我们通过QueryParam单独声明了入参名称，也就是说通过QueryParam注解声明的参数名称跟方法真实的入参名称是不同的，但是我们通过注解QueryParam声明以后，请求rest接口时，传递的userId参数名称的值就会自动赋值到真实的入参id上面。</p>\n<p><strong>6. 通过注解 <em>@QueryParam</em> <em>@DefaultValue</em> 为参数声明默认值</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 为入参设置默认值</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramDefultValue\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultParamValue</span><span class=\"params\">(@DefaultValue(<span class=\"string\">\"123456\"</span>)</span> @<span class=\"title\">QueryParam</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramDefultValue，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,虽然由于我们没有传递对应的userId参数，但是通过注解DefaultValue设定默认值后，我们仍然可以下方法体中获取到入参userId的值为123456\" target=\"_blank\" rel=\"external\">http://servername/param/paramDefultValue，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,虽然由于我们没有传递对应的userId参数，但是通过注解DefaultValue设定默认值后，我们仍然可以下方法体中获取到入参userId的值为123456</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramDefultValue?userId=zhangsan，该rest接口对应的方法体可以正常执行，响应输出zhangsan，因为我们请求rest接口时，传递了userId参数，所以方法体中我们通过注解DefaultValue设定的默认值就被覆盖了。\" target=\"_blank\" rel=\"external\">http://servername/param/paramDefultValue?userId=zhangsan，该rest接口对应的方法体可以正常执行，响应输出zhangsan，因为我们请求rest接口时，传递了userId参数，所以方法体中我们通过注解DefaultValue设定的默认值就被覆盖了。</a></p>\n</blockquote>\n<p>小结：当我们使用注解DefaultValue声明入参默认值后，当我们请求rest接口时，不传递对应的参数时，方法体中获取的参数值就是我们设定的默认值。</p>\n<p><strong>7. 通过注解 <em>@QueryParam</em> 设定后，请求rest接口的入参类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 设置入参的类型</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@param</span> age</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"paramType\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramType</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId, @<span class=\"title\">QueryParam</span><span class=\"params\">(<span class=\"string\">\"age\"</span>)</span> Integer age)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  userId+<span class=\"string\">\" \"</span>+age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramType?userId=zhangsan&amp;age=27，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,该请求响应输出zhangsan\" target=\"_blank\" rel=\"external\">http://servername/param/paramType?userId=zhangsan&amp;age=27，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,该请求响应输出zhangsan</a> 27</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramType?userId=zhangsan&amp;age=strs\" target=\"_blank\" rel=\"external\">http://servername/param/paramType?userId=zhangsan&amp;age=strs</a> ，报404错误，因为我们的入参age的类型参数值类型传递错误</p>\n</blockquote>\n<p>小结：我们通过 QueryParam 注解声明入参后，请求rest接口时，传递的参数类型需要满足 兼容性；否则将报404错误。</p>\n<p><strong>8. 通过注解 <em>@QueryParam</em> 设定后，请求rest接口的入参类型为boolean类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"paramTypeForBool\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypeForBool</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"flg\"</span>)</span> Boolean flg, @<span class=\"title\">QueryParam</span><span class=\"params\">(<span class=\"string\">\"status\"</span>)</span> <span class=\"keyword\">boolean</span> status)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"string\">\" \"</span>+flg+<span class=\"string\">\" \"</span>+status;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分三种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramTypeForBool，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,只是我们没有传递具体参数值，所以Boolean类型的flg就为null，boolean类型的flg就为false。\" target=\"_blank\" rel=\"external\">http://servername/param/paramTypeForBool，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,只是我们没有传递具体参数值，所以Boolean类型的flg就为null，boolean类型的flg就为false。</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramTypeForBool?flg=str&amp;status=str\" target=\"_blank\" rel=\"external\">http://servername/param/paramTypeForBool?flg=str&amp;status=str</a> ，该请求响应输出为 false false。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramTypeForBool?flg=true&amp;status=true\" target=\"_blank\" rel=\"external\">http://servername/param/paramTypeForBool?flg=true&amp;status=true</a> ，该请求响应输出为 true true。</p>\n</blockquote>\n<p>小结：当入参类型布尔类型时，当类型是包装类-Boolean时，如果入参不传的话，接收的为null；当类型不是包装类-boolean时，如果参数不传的话，接收的值为false；当类型不是包装类-boolean时，如果传递的参数值类型为非boolan(不兼容),则方法体中的接收到的值为false。</p>\n","excerpt":"<p>本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，基本的入参操作，主要包括入参类型的全局设定和方法级别设定、参数的默认值等等。</p>","more":"<p><strong>一、全局入参设定</strong></p>\n<p>通过在类上面添加注解 <em>@Consumes(MediaType.类型)</em> 即可限定全局入参类型的设置，比如 <em>@Consumes(MediaType.TEXT_PLAIN)</em></p>\n<blockquote>\n<p>新建控制器类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DefaultValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.QueryParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"param\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.TEXT_PLAIN)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 <em>/param</em></p>\n<p><strong>1. 新建一个方法，方法层级上面不加 <em>@Consumes</em> 注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 不设置方法的入参类型，则默认为类级别所注解的<span class=\"doctag\">@Consumes</span>类型,</div><div class=\"line\"> * 并且方法中的入参没有 <span class=\"doctag\">@QueryParam</span></div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForClassNoparam\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForClassNoparam</span><span class=\"params\">(String userId)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClassNoparam，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码。\">http://servername/param/paramForClassNoparam，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码。</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClassNoparam?userId=zhangsan，通过方法代码我们可以看到方法有一个String类型的入参userId，所以我们请求该rest接口时，在url中传递这个参数值；请求这个rest接口地址后，方法中的业务代码可以正常运行，但是传递的参数值是无法获取到的，这是因为我们在方法入参中没有通过\">http://servername/param/paramForClassNoparam?userId=zhangsan，通过方法代码我们可以看到方法有一个String类型的入参userId，所以我们请求该rest接口时，在url中传递这个参数值；请求这个rest接口地址后，方法中的业务代码可以正常运行，但是传递的参数值是无法获取到的，这是因为我们在方法入参中没有通过</a> <em>@QueryParam</em> 指定具体的入参；所以我们上面的rest方法等同于无参数的方法，其实我们可以认为方法中的userId入参是多余的。</p>\n</blockquote>\n<p>小结：在开发rest接口中，如果方法层级上面没有声明注解Consumes，将默认采用全局(类注解)入参注解类型；如果在对应的方法中没有使用注解QueryParam声明具体的参数，那么该参数是毫无意义的，因为请求该接口时将无法获取到对应的传递的参数值。</p>\n<p><strong>2. 新建一个方法，入参前面添加 <em>@QueryParam</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 不设置方法的入参类型，则默认为类级别所注解的<span class=\"doctag\">@Consumes</span>类型</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForClass\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForClass</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClass，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,但是由于我们没有传递对应的userId参数，所以rest接口将不会有任何内容输出，并且响应状态码为204\">http://servername/param/paramForClass，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,但是由于我们没有传递对应的userId参数，所以rest接口将不会有任何内容输出，并且响应状态码为204</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramForClass.png\" alt=\"Alt text\"></p>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForClass?userId=zhangsan，该rest接口的请求将会到达对应的方法体中，并且可以正常执行方法体中的业务代码，并且将会输出对应的入参userId传递的具体值。\">http://servername/param/paramForClass?userId=zhangsan，该rest接口的请求将会到达对应的方法体中，并且可以正常执行方法体中的业务代码，并且将会输出对应的入参userId传递的具体值。</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramForClass2.png\" alt=\"Alt text\"></p>\n<p>小结：我们在对应的rest接口方法中，通过注解QueryParam指定具体的参数后，如果在请求该rest接口时，不传递对应的参数，那么方法体中获取到的该参数默认为null；如果在请求rest接口时，传递了具体声明的参数，那么方法体中就可以正常获取到该参数的值</p>\n<p><strong>3. 新建一个方法，方法层级声明 <em>@Consumes</em> 注解为json类型，入参声明 <em>@QueryParam</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 设置入参类型为字符串类型，在方法上面的注解<span class=\"doctag\">@Consumes</span>将覆盖掉类级别的注解<span class=\"doctag\">@Consumes</span></div><div class=\"line\"> * 比如类级别的入参类型为字符串类型，而方法级别的入参类型为json类型，所以该方法的入参类型为json类型</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForMethod\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForMethod</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForMethod?userId=zhangsanfeng，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\">http://servername/param/paramForMethod?userId=zhangsanfeng，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。</a></p>\n</blockquote>\n<p>小结：我们在方法层级上面使用了注解Consumes指定了入参类型为json，其实该rest方法应该接受json类型的入参才对吧？实际上我们仍然可以正常传递字符串类型的参数userId，所以可以判定通过Consumes注解指定的入参类型并不是必须条件。</p>\n<p><strong>4. 新建一个方法，方法层级声明 <em>@Consumes</em> 注解为xml类型，入参声明 <em>@QueryParam</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramForMethodXml\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_XML)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramForMethodText</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramForMethodXml?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\">http://servername/param/paramForMethodXml?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。</a></p>\n</blockquote>\n<p>小结：我们在方法层级上面使用了注解Consumes指定了入参类型为xml,实际上面我们仍然可以传递字符串类型的参数</p>\n<p><strong>5. 新建一个方法，入参通过 <em>@QueryParam</em> 注解声明参数名称</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 在方法的入参中设置入参名称</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramName\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramName</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String id)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramName?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。\">http://servername/param/paramName?userId=zhangsan，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且传递的userId参数值也将直接输出。</a></p>\n</blockquote>\n<p>小结：这个rest接口我们通过QueryParam单独声明了入参名称，也就是说通过QueryParam注解声明的参数名称跟方法真实的入参名称是不同的，但是我们通过注解QueryParam声明以后，请求rest接口时，传递的userId参数名称的值就会自动赋值到真实的入参id上面。</p>\n<p><strong>6. 通过注解 <em>@QueryParam</em> <em>@DefaultValue</em> 为参数声明默认值</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 为入参设置默认值</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"/paramDefultValue\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultParamValue</span><span class=\"params\">(@DefaultValue(<span class=\"string\">\"123456\"</span>)</span> @<span class=\"title\">QueryParam</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> userId;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramDefultValue，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,虽然由于我们没有传递对应的userId参数，但是通过注解DefaultValue设定默认值后，我们仍然可以下方法体中获取到入参userId的值为123456\">http://servername/param/paramDefultValue，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,虽然由于我们没有传递对应的userId参数，但是通过注解DefaultValue设定默认值后，我们仍然可以下方法体中获取到入参userId的值为123456</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramDefultValue?userId=zhangsan，该rest接口对应的方法体可以正常执行，响应输出zhangsan，因为我们请求rest接口时，传递了userId参数，所以方法体中我们通过注解DefaultValue设定的默认值就被覆盖了。\">http://servername/param/paramDefultValue?userId=zhangsan，该rest接口对应的方法体可以正常执行，响应输出zhangsan，因为我们请求rest接口时，传递了userId参数，所以方法体中我们通过注解DefaultValue设定的默认值就被覆盖了。</a></p>\n</blockquote>\n<p>小结：当我们使用注解DefaultValue声明入参默认值后，当我们请求rest接口时，不传递对应的参数时，方法体中获取的参数值就是我们设定的默认值。</p>\n<p><strong>7. 通过注解 <em>@QueryParam</em> 设定后，请求rest接口的入参类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 设置入参的类型</div><div class=\"line\"> * <span class=\"doctag\">@param</span> userId</div><div class=\"line\"> * <span class=\"doctag\">@param</span> age</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"paramType\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramType</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"userId\"</span>)</span> String userId, @<span class=\"title\">QueryParam</span><span class=\"params\">(<span class=\"string\">\"age\"</span>)</span> Integer age)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  userId+<span class=\"string\">\" \"</span>+age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分两种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramType?userId=zhangsan&amp;age=27，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,该请求响应输出zhangsan\">http://servername/param/paramType?userId=zhangsan&amp;age=27，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,该请求响应输出zhangsan</a> 27</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramType?userId=zhangsan&amp;age=strs\">http://servername/param/paramType?userId=zhangsan&amp;age=strs</a> ，报404错误，因为我们的入参age的类型参数值类型传递错误</p>\n</blockquote>\n<p>小结：我们通过 QueryParam 注解声明入参后，请求rest接口时，传递的参数类型需要满足 兼容性；否则将报404错误。</p>\n<p><strong>8. 通过注解 <em>@QueryParam</em> 设定后，请求rest接口的入参类型为boolean类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@GET</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"paramTypeForBool\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypeForBool</span><span class=\"params\">(@QueryParam(<span class=\"string\">\"flg\"</span>)</span> Boolean flg, @<span class=\"title\">QueryParam</span><span class=\"params\">(<span class=\"string\">\"status\"</span>)</span> <span class=\"keyword\">boolean</span> status)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"string\">\" \"</span>+flg+<span class=\"string\">\" \"</span>+status;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该rest接口发布后，我们分三种情况访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramTypeForBool，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,只是我们没有传递具体参数值，所以Boolean类型的flg就为null，boolean类型的flg就为false。\">http://servername/param/paramTypeForBool，该rest接口的请求将会到达对应方法体中，并且可以正常执行方法中的业务代码,只是我们没有传递具体参数值，所以Boolean类型的flg就为null，boolean类型的flg就为false。</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramTypeForBool?flg=str&amp;status=str\">http://servername/param/paramTypeForBool?flg=str&amp;status=str</a> ，该请求响应输出为 false false。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>访问 <a href=\"http://servername/param/paramTypeForBool?flg=true&amp;status=true\">http://servername/param/paramTypeForBool?flg=true&amp;status=true</a> ，该请求响应输出为 true true。</p>\n</blockquote>\n<p>小结：当入参类型布尔类型时，当类型是包装类-Boolean时，如果入参不传的话，接收的为null；当类型不是包装类-boolean时，如果参数不传的话，接收的值为false；当类型不是包装类-boolean时，如果传递的参数值类型为非boolan(不兼容),则方法体中的接收到的值为false。</p>"},{"title":"oracle11G导出数据时空表无法导出","date":"2016-07-06T00:49:02.000Z","_content":"  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是\n  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。\n\n> 注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。\n  \n\n**解决方法：**\n\n        1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n        2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n        3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n        4）下面我们通过select 来生成修改语句：\n            select 'alter table '||table_name||' allocate extent;' from user_tables where num_rows=0\n             后复制生成的修改语句执行，问题解决！\n\n**总结：解决方法共3个途径：**\n\n\t1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n    2：修改系统参数\n\t\t  alter system set deferred_segment_creation=false;\n         （对以后新增的表系统会分配 segment），重启数据库。\n    3：批量对现有的空表分配空间\n         select 'alter table ' || table_name ||  ' allocate extent;' as sql from all_tables where num_rows = 0 and OWNER=username ;\n\n\n","source":"_posts/oracle11G导出数据时空表无法导出.md","raw":"---\ntitle: oracle11G导出数据时空表无法导出\ndate: 2016-07-06 08:49:02\ncategories: oracle\ntags: oracle导出空表\n---\n  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是\n  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。\n\n> 注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。\n  \n\n**解决方法：**\n\n        1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n        2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n        3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n        4）下面我们通过select 来生成修改语句：\n            select 'alter table '||table_name||' allocate extent;' from user_tables where num_rows=0\n             后复制生成的修改语句执行，问题解决！\n\n**总结：解决方法共3个途径：**\n\n\t1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n    2：修改系统参数\n\t\t  alter system set deferred_segment_creation=false;\n         （对以后新增的表系统会分配 segment），重启数据库。\n    3：批量对现有的空表分配空间\n         select 'alter table ' || table_name ||  ' allocate extent;' as sql from all_tables where num_rows = 0 and OWNER=username ;\n\n\n","slug":"oracle11G导出数据时空表无法导出","published":1,"updated":"2018-07-08T09:37:48.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjg003x30tz42muvwl1","content":"<p>  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是<br>  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。</p>\n<blockquote>\n<p>注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。</p>\n</blockquote>\n<p><strong>解决方法：</strong></p>\n<pre><code>1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n4）下面我们通过select 来生成修改语句：\n    select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; from user_tables where num_rows=0\n     后复制生成的修改语句执行，问题解决！\n</code></pre><p><strong>总结：解决方法共3个途径：</strong></p>\n<pre><code>1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n2：修改系统参数\n      alter system set deferred_segment_creation=false;\n     （对以后新增的表系统会分配 segment），重启数据库。\n3：批量对现有的空表分配空间\n     select &apos;alter table &apos; || table_name ||  &apos; allocate extent;&apos; as sql from all_tables where num_rows = 0 and OWNER=username ;\n</code></pre>","excerpt":"","more":"<p>  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是<br>  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。</p>\n<blockquote>\n<p>注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。</p>\n</blockquote>\n<p><strong>解决方法：</strong></p>\n<pre><code>1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;\n2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出\n3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;\n4）下面我们通过select 来生成修改语句：\n    select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; from user_tables where num_rows=0\n     后复制生成的修改语句执行，问题解决！\n</code></pre><p><strong>总结：解决方法共3个途径：</strong></p>\n<pre><code>1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。\n2：修改系统参数\n      alter system set deferred_segment_creation=false;\n     （对以后新增的表系统会分配 segment），重启数据库。\n3：批量对现有的空表分配空间\n     select &apos;alter table &apos; || table_name ||  &apos; allocate extent;&apos; as sql from all_tables where num_rows = 0 and OWNER=username ;\n</code></pre>"},{"title":"jquery获取单选按钮值的诡异之处","date":"2016-08-21T04:17:10.000Z","_content":"最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name='types']这种方式获取选中的值时是没有问题的，但是当你使用[type='radio'][name='language']这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：\n\n表单元素如下：\n```java\n\t<input type=\"radio\" name=\"language\"  value=\"php\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"mysql\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"java\"/>\n```\n\n**一、方式一 [checked] (正确)**\n\n通过使用`[checked]`获取选中的单选按钮的值，类型选择器使用的`:radio`\n\n    $('input:radio[name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio2.png \"可以获取单选值\")\n\n*注：这种方式`可以`获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。*\n\n\n**二、方式二 [checked] (错误)**\n\n通过使用`[checked]`获取选中的单选按钮的值，，类型选择器使用的`[type=\"radio\"]`\n\n    $('input[type=\"radio\"][name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio1.png \"不可以获取单选值\")\n\n*注：这种方式`不可以`获取选中的单选按钮的值，获取的值始终为undefined。*\n\n\n**三、小结 **\n\n上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=\"radio\")、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：\n\n![Alt text](http://soujava.com/images/jqueryRadio3.png \"官方文档\")\n\n官网文档中关于选择器的描述大致这样说：$(\":radio\")和$(\"[type=radio]\")是等价的,在效率方面还更倾向使用标准的类型选择器\n\n\n**四、方式三 :checked (没有任何问题)**\n\n使用`[type=\"radio\"]`类型选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n使用`:radio`伪类选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio4.png \"获取值\")\n\n*注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！*\n\n**五、总结**\n\n获取单选按钮元素选中的值时，统一采用`:checked`这种方式获取，不要再使用`[checked]`或者`[checked=\"checked\"]`这种方式。","source":"_posts/jquery获取单选按钮值的诡异之处.md","raw":"---\ntitle: jquery获取单选按钮值的诡异之处\ndate: 2016-08-21 12:17:10\ncategories: javascript\ntags: jquery\n---\n最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name='types']这种方式获取选中的值时是没有问题的，但是当你使用[type='radio'][name='language']这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：\n\n表单元素如下：\n```java\n\t<input type=\"radio\" name=\"language\"  value=\"php\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"mysql\"/>\n\t<input type=\"radio\" name=\"language\"  value=\"java\"/>\n```\n\n**一、方式一 [checked] (正确)**\n\n通过使用`[checked]`获取选中的单选按钮的值，类型选择器使用的`:radio`\n\n    $('input:radio[name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio2.png \"可以获取单选值\")\n\n*注：这种方式`可以`获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。*\n\n\n**二、方式二 [checked] (错误)**\n\n通过使用`[checked]`获取选中的单选按钮的值，，类型选择器使用的`[type=\"radio\"]`\n\n    $('input[type=\"radio\"][name=\"language\"][checked]').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio1.png \"不可以获取单选值\")\n\n*注：这种方式`不可以`获取选中的单选按钮的值，获取的值始终为undefined。*\n\n\n**三、小结 **\n\n上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=\"radio\")、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：\n\n![Alt text](http://soujava.com/images/jqueryRadio3.png \"官方文档\")\n\n官网文档中关于选择器的描述大致这样说：$(\":radio\")和$(\"[type=radio]\")是等价的,在效率方面还更倾向使用标准的类型选择器\n\n\n**四、方式三 :checked (没有任何问题)**\n\n使用`[type=\"radio\"]`类型选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n使用`:radio`伪类选择器：\n\n    $('input[type=\"radio\"][name=\"language\"]:checked').val()；\n\n![Alt text](http://soujava.com/images/jqueryRadio4.png \"获取值\")\n\n*注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！*\n\n**五、总结**\n\n获取单选按钮元素选中的值时，统一采用`:checked`这种方式获取，不要再使用`[checked]`或者`[checked=\"checked\"]`这种方式。","slug":"jquery获取单选按钮值的诡异之处","published":1,"updated":"2018-07-08T09:37:48.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pji004130tzmatw9og0","content":"<p>最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name=’types’]这种方式获取选中的值时是没有问题的，但是当你使用[type=’radio’][name=’language’]这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：</p>\n<p>表单元素如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"php\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"mysql\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"java\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>一、方式一 [checked] (正确)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，类型选择器使用的<code>:radio</code></p>\n<pre><code>$(&apos;input:radio[name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio2.png\" alt=\"Alt text\" title=\"可以获取单选值\"></p>\n<p><em>注：这种方式<code>可以</code>获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。</em></p>\n<p><strong>二、方式二 [checked] (错误)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，，类型选择器使用的<code>[type=&quot;radio&quot;]</code></p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio1.png\" alt=\"Alt text\" title=\"不可以获取单选值\"></p>\n<p><em>注：这种方式<code>不可以</code>获取选中的单选按钮的值，获取的值始终为undefined。</em></p>\n<p><strong>三、小结 </strong></p>\n<p>上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=”radio”)、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：</p>\n<p><img src=\"http://soujava.com/images/jqueryRadio3.png\" alt=\"Alt text\" title=\"官方文档\"></p>\n<p>官网文档中关于选择器的描述大致这样说：$(“:radio”)和$(“[type=radio]”)是等价的,在效率方面还更倾向使用标准的类型选择器</p>\n<p><strong>四、方式三 :checked (没有任何问题)</strong></p>\n<p>使用<code>[type=&quot;radio&quot;]</code>类型选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p>使用<code>:radio</code>伪类选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio4.png\" alt=\"Alt text\" title=\"获取值\"></p>\n<p><em>注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！</em></p>\n<p><strong>五、总结</strong></p>\n<p>获取单选按钮元素选中的值时，统一采用<code>:checked</code>这种方式获取，不要再使用<code>[checked]</code>或者<code>[checked=&quot;checked&quot;]</code>这种方式。</p>\n","excerpt":"","more":"<p>最近在使用jquery获取表单中选中的单选按钮的值时，发现了一个诡异的问题，那就是当你使用[checked]这个方式获取选中的单选按钮值时，能不能获取选中的值跟你前面用的选择器方式有关系，当你使用:radio[name=’types’]这种方式获取选中的值时是没有问题的，但是当你使用[type=’radio’][name=’language’]这种方式获取选中的值时是有问题的（如果单选按钮组中有默认选中的按钮，那么这种方式一直获取的都是默认选中的按钮；如果单选按钮组中没有默认选中的按钮，那么这种方式获取不到选中的单选按钮的值）。举例如下：</p>\n<p>表单元素如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"php\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"mysql\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"language\"</span>  value=<span class=\"string\">\"java\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>一、方式一 [checked] (正确)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，类型选择器使用的<code>:radio</code></p>\n<pre><code>$(&apos;input:radio[name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio2.png\" alt=\"Alt text\" title=\"可以获取单选值\"></p>\n<p><em>注：这种方式<code>可以</code>获取选中的单选按钮的值，如果没有选择任何单选按钮，则获取的值为undefined。</em></p>\n<p><strong>二、方式二 [checked] (错误)</strong></p>\n<p>通过使用<code>[checked]</code>获取选中的单选按钮的值，，类型选择器使用的<code>[type=&quot;radio&quot;]</code></p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;][checked]&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio1.png\" alt=\"Alt text\" title=\"不可以获取单选值\"></p>\n<p><em>注：这种方式<code>不可以</code>获取选中的单选按钮的值，获取的值始终为undefined。</em></p>\n<p><strong>三、小结 </strong></p>\n<p>上面两种获取单选按钮选择中的方式中唯一差别的地方就是类型选择器的方式一种是标准的类型选择器(type=”radio”)、一种是伪类选择器(:radio);然后到jquery官方网站查看官网文档可以看到：</p>\n<p><img src=\"http://soujava.com/images/jqueryRadio3.png\" alt=\"Alt text\" title=\"官方文档\"></p>\n<p>官网文档中关于选择器的描述大致这样说：$(“:radio”)和$(“[type=radio]”)是等价的,在效率方面还更倾向使用标准的类型选择器</p>\n<p><strong>四、方式三 :checked (没有任何问题)</strong></p>\n<p>使用<code>[type=&quot;radio&quot;]</code>类型选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p>使用<code>:radio</code>伪类选择器：</p>\n<pre><code>$(&apos;input[type=&quot;radio&quot;][name=&quot;language&quot;]:checked&apos;).val()；\n</code></pre><p><img src=\"http://soujava.com/images/jqueryRadio4.png\" alt=\"Alt text\" title=\"获取值\"></p>\n<p><em>注：方式三种中在使用:checked方式的前提下，不管使用类型选择器还是使用伪类选择器都是可以获取选中的单选按钮的值的！</em></p>\n<p><strong>五、总结</strong></p>\n<p>获取单选按钮元素选中的值时，统一采用<code>:checked</code>这种方式获取，不要再使用<code>[checked]</code>或者<code>[checked=&quot;checked&quot;]</code>这种方式。</p>\n"},{"title":"jersey-4--轻量级Rest接口服务开发之对象入参","date":"2017-08-11T02:35:29.000Z","_content":"\n本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，复杂一点的入参操作，主要包括对象入参、集合入参等等\n\n<!--more-->\n\n**一、新建一个控制器类**\n\n\n> ParameterController\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DefaultValue;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.QueryParam;\n\timport javax.ws.rs.core.MediaType;\n\t\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"param\")\n\t@Consumes(MediaType.TEXT_PLAIN)\n\tpublic class ParameterController {\n\t\n\t\t\n\t}\n\n```\n\n上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 */param*\n\n\n**2. 新建一个封装入参的bean-UserVO**\n\n```java\n\n\tpackage com.maps.vo;\n\n\timport java.io.Serializable;\n\t\n\t/**\n\t * 用于封装入参数据的业务bean类，覆写了tostring方法\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class UserVO implements Serializable{\n\t\n\t\tprivate static final long serialVersionUID = 6599357158756293288L;\n\t\t\n\t\tprivate String id;\n\t\tprivate String userName;\n\t\tprivate String passWord;\n\t\tprivate int age;\n\t\tprivate String email;\n\t\tprivate String address;\n\t\t\n\t\t\n\t\tpublic String getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\t\tpublic String getPassWord() {\n\t\t\treturn passWord;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic String getEmail() {\n\t\t\treturn email;\n\t\t}\n\t\tpublic String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic void setId(String id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\t\tpublic void setPassWord(String passWord) {\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic void setEmail(String email) {\n\t\t\tthis.email = email;\n\t\t}\n\t\tpublic void setAddress(String address) {\n\t\t\tthis.address = address;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(\"UserVO {id=\").append(id).append(\", userName=\").append(userName).append(\", passWord=\")\n\t\t\t\t\t.append(passWord).append(\", age=\").append(age).append(\", email=\").append(email).append(\", address=\")\n\t\t\t\t\t.append(address).append(\"}\");\n\t\t\treturn builder.toString();\n\t\t}\n\t}\n\n```\n\n\n**2. 新建一个添加单个用户的rest接口方法-Json对象**\n\n```java\n\n\t/**\n\t * 该rest接口方法方法接受UserVO的json对象格式的参数数据\n\t * @param user\n\t * @return\n\t */\n\t@POST\n\t@Path(\"addUser\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramTypForJson(UserVO user){\n\n\t\treturn user.toString();\n\n\t}\n\n```\n\n*注：该rest接口方法为POST类型，接受的参数类型为json，响应为入参的对象的json字符串格式值*\n\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://localhost:8080/jersey/param/addUser\n\n该rest接口的json对象请求数据将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且把传递的json对象参数映射到UserVO对象上面并直接输出。\n\n*注：因为我们该rest方法需要接收json类型的参数，所以需要在调用时header中限定Content-Type: application/json*\n\n![Alt text](http://soujava.com/images/paramjsontype.png)\n\n![Alt text](http://soujava.com/images/paramjsontype3.png)\n\n\n**2. 新建一个添加批量用户的rest接口方法-List类型**\n\n```java\n\n\t/**\n\t * 该rest接口方法方法接受集合形式UserVO的json数组格式的参数数据\n\t * @param user\n\t * @return\n\t */\n\t@POST\n\t@Path(\"addUserList\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramTypForJson(List<UserVO> userList){\n\t\tStringBuilder sf = new StringBuilder();\n\t\tfor(UserVO user:userList){\n\t\t\tsf.append(user.toString()).append(\" \\n\");\n\t\t}\n\t\treturn sf.toString();\n\t}\n\n```\n\n*注：该rest接口方法为POST类型，接受的参数类型为json数组，响应为入参的集合中对象的json字符串格式值*\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://localhost:8080/jersey/param/addUserList\n\n![Alt text](http://soujava.com/images/paramjsontype4.png)\n\n![Alt text](http://soujava.com/images/paramjsontype5.png)\n\n\n\n**2. 新建一个添加用户的rest接口方法-Map类型**\n\n```java\n\n\t/**\n\t * 该rest接口方法方法接受Map形式UserVO的json数组格式的参数数据\n\t * @param user\n\t * @return\n\t */\n\t@POST\n\t@Path(\"addUserMap\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramTypForJson(Map<String,Object> map){\n\t\tStringBuilder sf = new StringBuilder();\n\n\t\tfor(Map.Entry<String, Object> entry:map.entrySet()){\n\t\t\tString val = entry.getValue()+\":\"+entry.getValue();\n\t\t\tsf.append(val).append(\"  \");\n\t\t}\n\n\t\treturn sf.toString();\n\t}\n\n```\n\n*注：上面的rest接口方法中，我们的入参是Map类型的，所以我们可以换一种思路理解，Map本来就是一定意义上的Json对象*\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://localhost:8080/jersey/param/addUserMap\n\n![Alt text](http://soujava.com/images/paramjsontype6.png)\n\n![Alt text](http://soujava.com/images/paramjsontype7.png)\n\n","source":"_posts/jersey-4-轻量级Rest接口服务开发之对象入参.md","raw":"---\ntitle: jersey-4--轻量级Rest接口服务开发之对象入参\ndate: 2017-08-11 10:35:29\ncategories: jersey\ntags: java\n---\n\n本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，复杂一点的入参操作，主要包括对象入参、集合入参等等\n\n<!--more-->\n\n**一、新建一个控制器类**\n\n\n> ParameterController\n\n```java\n\n\tpackage com.maps.rest;\n\n\timport javax.ws.rs.Consumes;\n\timport javax.ws.rs.DefaultValue;\n\timport javax.ws.rs.GET;\n\timport javax.ws.rs.POST;\n\timport javax.ws.rs.Path;\n\timport javax.ws.rs.Produces;\n\timport javax.ws.rs.QueryParam;\n\timport javax.ws.rs.core.MediaType;\n\t\n\timport com.maps.vo.UserVO;\n\t\n\t@Path(\"param\")\n\t@Consumes(MediaType.TEXT_PLAIN)\n\tpublic class ParameterController {\n\t\n\t\t\n\t}\n\n```\n\n上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 */param*\n\n\n**2. 新建一个封装入参的bean-UserVO**\n\n```java\n\n\tpackage com.maps.vo;\n\n\timport java.io.Serializable;\n\t\n\t/**\n\t * 用于封装入参数据的业务bean类，覆写了tostring方法\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class UserVO implements Serializable{\n\t\n\t\tprivate static final long serialVersionUID = 6599357158756293288L;\n\t\t\n\t\tprivate String id;\n\t\tprivate String userName;\n\t\tprivate String passWord;\n\t\tprivate int age;\n\t\tprivate String email;\n\t\tprivate String address;\n\t\t\n\t\t\n\t\tpublic String getId() {\n\t\t\treturn id;\n\t\t}\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\t\tpublic String getPassWord() {\n\t\t\treturn passWord;\n\t\t}\n\t\tpublic int getAge() {\n\t\t\treturn age;\n\t\t}\n\t\tpublic String getEmail() {\n\t\t\treturn email;\n\t\t}\n\t\tpublic String getAddress() {\n\t\t\treturn address;\n\t\t}\n\t\tpublic void setId(String id) {\n\t\t\tthis.id = id;\n\t\t}\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\t\tpublic void setPassWord(String passWord) {\n\t\t\tthis.passWord = passWord;\n\t\t}\n\t\tpublic void setAge(int age) {\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic void setEmail(String email) {\n\t\t\tthis.email = email;\n\t\t}\n\t\tpublic void setAddress(String address) {\n\t\t\tthis.address = address;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(\"UserVO {id=\").append(id).append(\", userName=\").append(userName).append(\", passWord=\")\n\t\t\t\t\t.append(passWord).append(\", age=\").append(age).append(\", email=\").append(email).append(\", address=\")\n\t\t\t\t\t.append(address).append(\"}\");\n\t\t\treturn builder.toString();\n\t\t}\n\t}\n\n```\n\n\n**2. 新建一个添加单个用户的rest接口方法-Json对象**\n\n```java\n\n\t/**\n\t * 该rest接口方法方法接受UserVO的json对象格式的参数数据\n\t * @param user\n\t * @return\n\t */\n\t@POST\n\t@Path(\"addUser\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramTypForJson(UserVO user){\n\n\t\treturn user.toString();\n\n\t}\n\n```\n\n*注：该rest接口方法为POST类型，接受的参数类型为json，响应为入参的对象的json字符串格式值*\n\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://localhost:8080/jersey/param/addUser\n\n该rest接口的json对象请求数据将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且把传递的json对象参数映射到UserVO对象上面并直接输出。\n\n*注：因为我们该rest方法需要接收json类型的参数，所以需要在调用时header中限定Content-Type: application/json*\n\n![Alt text](http://soujava.com/images/paramjsontype.png)\n\n![Alt text](http://soujava.com/images/paramjsontype3.png)\n\n\n**2. 新建一个添加批量用户的rest接口方法-List类型**\n\n```java\n\n\t/**\n\t * 该rest接口方法方法接受集合形式UserVO的json数组格式的参数数据\n\t * @param user\n\t * @return\n\t */\n\t@POST\n\t@Path(\"addUserList\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramTypForJson(List<UserVO> userList){\n\t\tStringBuilder sf = new StringBuilder();\n\t\tfor(UserVO user:userList){\n\t\t\tsf.append(user.toString()).append(\" \\n\");\n\t\t}\n\t\treturn sf.toString();\n\t}\n\n```\n\n*注：该rest接口方法为POST类型，接受的参数类型为json数组，响应为入参的集合中对象的json字符串格式值*\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://localhost:8080/jersey/param/addUserList\n\n![Alt text](http://soujava.com/images/paramjsontype4.png)\n\n![Alt text](http://soujava.com/images/paramjsontype5.png)\n\n\n\n**2. 新建一个添加用户的rest接口方法-Map类型**\n\n```java\n\n\t/**\n\t * 该rest接口方法方法接受Map形式UserVO的json数组格式的参数数据\n\t * @param user\n\t * @return\n\t */\n\t@POST\n\t@Path(\"addUserMap\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic String paramTypForJson(Map<String,Object> map){\n\t\tStringBuilder sf = new StringBuilder();\n\n\t\tfor(Map.Entry<String, Object> entry:map.entrySet()){\n\t\t\tString val = entry.getValue()+\":\"+entry.getValue();\n\t\t\tsf.append(val).append(\"  \");\n\t\t}\n\n\t\treturn sf.toString();\n\t}\n\n```\n\n*注：上面的rest接口方法中，我们的入参是Map类型的，所以我们可以换一种思路理解，Map本来就是一定意义上的Json对象*\n\n该rest接口发布后，我们访问该rest接口\n\n> 访问 http://localhost:8080/jersey/param/addUserMap\n\n![Alt text](http://soujava.com/images/paramjsontype6.png)\n\n![Alt text](http://soujava.com/images/paramjsontype7.png)\n\n","slug":"jersey-4-轻量级Rest接口服务开发之对象入参","published":1,"updated":"2018-07-08T09:37:48.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjk004530tzp692bggl","content":"<p>本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，复杂一点的入参操作，主要包括对象入参、集合入参等等</p>\n<a id=\"more\"></a>\n<p><strong>一、新建一个控制器类</strong></p>\n<blockquote>\n<p>ParameterController</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DefaultValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.QueryParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"param\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.TEXT_PLAIN)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 <em>/param</em></p>\n<p><strong>2. 新建一个封装入参的bean-UserVO</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.vo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用于封装入参数据的业务bean类，覆写了tostring方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserVO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6599357158756293288L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String userName;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String passWord;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String email;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String address;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassWord</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassWord</span><span class=\"params\">(String passWord)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tbuilder.append(<span class=\"string\">\"UserVO &#123;id=\"</span>).append(id).append(<span class=\"string\">\", userName=\"</span>).append(userName).append(<span class=\"string\">\", passWord=\"</span>)</div><div class=\"line\">\t\t\t\t.append(passWord).append(<span class=\"string\">\", age=\"</span>).append(age).append(<span class=\"string\">\", email=\"</span>).append(email).append(<span class=\"string\">\", address=\"</span>)</div><div class=\"line\">\t\t\t\t.append(address).append(<span class=\"string\">\"&#125;\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 新建一个添加单个用户的rest接口方法-Json对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 该rest接口方法方法接受UserVO的json对象格式的参数数据</div><div class=\"line\"> * <span class=\"doctag\">@param</span> user</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@POST</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"addUser\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypForJson</span><span class=\"params\">(UserVO user)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> user.toString();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注：该rest接口方法为POST类型，接受的参数类型为json，响应为入参的对象的json字符串格式值</em></p>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://localhost:8080/jersey/param/addUser\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/param/addUser</a></p>\n</blockquote>\n<p>该rest接口的json对象请求数据将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且把传递的json对象参数映射到UserVO对象上面并直接输出。</p>\n<p><em>注：因为我们该rest方法需要接收json类型的参数，所以需要在调用时header中限定Content-Type: application/json</em></p>\n<p><img src=\"http://soujava.com/images/paramjsontype.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/paramjsontype3.png\" alt=\"Alt text\"></p>\n<p><strong>2. 新建一个添加批量用户的rest接口方法-List类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 该rest接口方法方法接受集合形式UserVO的json数组格式的参数数据</div><div class=\"line\"> * <span class=\"doctag\">@param</span> user</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@POST</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"addUserList\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypForJson</span><span class=\"params\">(List&lt;UserVO&gt; userList)</span></span>&#123;</div><div class=\"line\">\tStringBuilder sf = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(UserVO user:userList)&#123;</div><div class=\"line\">\t\tsf.append(user.toString()).append(<span class=\"string\">\" \\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sf.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注：该rest接口方法为POST类型，接受的参数类型为json数组，响应为入参的集合中对象的json字符串格式值</em></p>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://localhost:8080/jersey/param/addUserList\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/param/addUserList</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramjsontype4.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/paramjsontype5.png\" alt=\"Alt text\"></p>\n<p><strong>2. 新建一个添加用户的rest接口方法-Map类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 该rest接口方法方法接受Map形式UserVO的json数组格式的参数数据</div><div class=\"line\"> * <span class=\"doctag\">@param</span> user</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@POST</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"addUserMap\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypForJson</span><span class=\"params\">(Map&lt;String,Object&gt; map)</span></span>&#123;</div><div class=\"line\">\tStringBuilder sf = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span>(Map.Entry&lt;String, Object&gt; entry:map.entrySet())&#123;</div><div class=\"line\">\t\tString val = entry.getValue()+<span class=\"string\">\":\"</span>+entry.getValue();</div><div class=\"line\">\t\tsf.append(val).append(<span class=\"string\">\"  \"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> sf.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注：上面的rest接口方法中，我们的入参是Map类型的，所以我们可以换一种思路理解，Map本来就是一定意义上的Json对象</em></p>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://localhost:8080/jersey/param/addUserMap\" target=\"_blank\" rel=\"external\">http://localhost:8080/jersey/param/addUserMap</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramjsontype6.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/paramjsontype7.png\" alt=\"Alt text\"></p>\n","excerpt":"<p>本篇文章我主要描述一下通过javax.ws框架开发rest服务接口时，复杂一点的入参操作，主要包括对象入参、集合入参等等</p>","more":"<p><strong>一、新建一个控制器类</strong></p>\n<blockquote>\n<p>ParameterController</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Consumes;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.DefaultValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.POST;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.QueryParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.maps.vo.UserVO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"param\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.TEXT_PLAIN)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的控制器将是我们下面要开发的rest接口服务类，rest接口访问入口为 <em>/param</em></p>\n<p><strong>2. 新建一个封装入参的bean-UserVO</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.maps.vo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用于封装入参数据的业务bean类，覆写了tostring方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserVO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6599357158756293288L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String userName;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String passWord;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String email;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String address;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassWord</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.userName = userName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassWord</span><span class=\"params\">(String passWord)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.passWord = passWord;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tbuilder.append(<span class=\"string\">\"UserVO &#123;id=\"</span>).append(id).append(<span class=\"string\">\", userName=\"</span>).append(userName).append(<span class=\"string\">\", passWord=\"</span>)</div><div class=\"line\">\t\t\t\t.append(passWord).append(<span class=\"string\">\", age=\"</span>).append(age).append(<span class=\"string\">\", email=\"</span>).append(email).append(<span class=\"string\">\", address=\"</span>)</div><div class=\"line\">\t\t\t\t.append(address).append(<span class=\"string\">\"&#125;\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 新建一个添加单个用户的rest接口方法-Json对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 该rest接口方法方法接受UserVO的json对象格式的参数数据</div><div class=\"line\"> * <span class=\"doctag\">@param</span> user</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@POST</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"addUser\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypForJson</span><span class=\"params\">(UserVO user)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> user.toString();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注：该rest接口方法为POST类型，接受的参数类型为json，响应为入参的对象的json字符串格式值</em></p>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://localhost:8080/jersey/param/addUser\">http://localhost:8080/jersey/param/addUser</a></p>\n</blockquote>\n<p>该rest接口的json对象请求数据将会到达对应方法体中，并且可以正常执行方法中的业务代码,并且把传递的json对象参数映射到UserVO对象上面并直接输出。</p>\n<p><em>注：因为我们该rest方法需要接收json类型的参数，所以需要在调用时header中限定Content-Type: application/json</em></p>\n<p><img src=\"http://soujava.com/images/paramjsontype.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/paramjsontype3.png\" alt=\"Alt text\"></p>\n<p><strong>2. 新建一个添加批量用户的rest接口方法-List类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 该rest接口方法方法接受集合形式UserVO的json数组格式的参数数据</div><div class=\"line\"> * <span class=\"doctag\">@param</span> user</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@POST</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"addUserList\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypForJson</span><span class=\"params\">(List&lt;UserVO&gt; userList)</span></span>&#123;</div><div class=\"line\">\tStringBuilder sf = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(UserVO user:userList)&#123;</div><div class=\"line\">\t\tsf.append(user.toString()).append(<span class=\"string\">\" \\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sf.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注：该rest接口方法为POST类型，接受的参数类型为json数组，响应为入参的集合中对象的json字符串格式值</em></p>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://localhost:8080/jersey/param/addUserList\">http://localhost:8080/jersey/param/addUserList</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramjsontype4.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/paramjsontype5.png\" alt=\"Alt text\"></p>\n<p><strong>2. 新建一个添加用户的rest接口方法-Map类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 该rest接口方法方法接受Map形式UserVO的json数组格式的参数数据</div><div class=\"line\"> * <span class=\"doctag\">@param</span> user</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@POST</span></div><div class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"addUserMap\"</span>)</div><div class=\"line\"><span class=\"meta\">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">paramTypForJson</span><span class=\"params\">(Map&lt;String,Object&gt; map)</span></span>&#123;</div><div class=\"line\">\tStringBuilder sf = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span>(Map.Entry&lt;String, Object&gt; entry:map.entrySet())&#123;</div><div class=\"line\">\t\tString val = entry.getValue()+<span class=\"string\">\":\"</span>+entry.getValue();</div><div class=\"line\">\t\tsf.append(val).append(<span class=\"string\">\"  \"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> sf.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注：上面的rest接口方法中，我们的入参是Map类型的，所以我们可以换一种思路理解，Map本来就是一定意义上的Json对象</em></p>\n<p>该rest接口发布后，我们访问该rest接口</p>\n<blockquote>\n<p>访问 <a href=\"http://localhost:8080/jersey/param/addUserMap\">http://localhost:8080/jersey/param/addUserMap</a></p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/paramjsontype6.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/paramjsontype7.png\" alt=\"Alt text\"></p>"},{"title":"spring3.1.1入门讲解一(非注解篇)","date":"2016-09-12T05:43:45.000Z","_content":"在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！\n\n### 一、准备\n\n1、spring版本：spring-framework-3.1.1.RELEASE\n\n2、jar包：spring包下面的dist文件夹下的所有jar包\n\n![](http://soujava.com/images/spring1.jpg)\n\n3、第三方jar包：\n\tjsp标签包：jstl-api-1.2.jar、standard.jar\n\n\t日志包：commons-logging-1.0.4.jar\n\n### 二、环境搭建\n\n1、新建Dynamic Web Project项目：spring\n\n![](http://soujava.com/images/spring2.png)\n\t\n2、在web.xml文件中添加如下配置\n```java\n\t <servlet>  \n      <servlet-name>spring</servlet-name>  \n      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  \n      <init-param>  \n\t  \t<description>加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件</description>  \n\t  \t<param-name>contextConfigLocation</param-name>  \n\t  \t<param-value>/WEB-INF/spring-mvc*.xml</param-value>  \n\t  </init-param>  \n      \t<!-- load-on-startup：表示启动容器时初始化该Servlet -->  \n      \t<load-on-startup>1</load-on-startup>  \n  \t</servlet>  \n  \t<servlet-mapping>  \n      <servlet-name>spring</servlet-name>  \n      <!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 -->  \n      <url-pattern>*.action</url-pattern>  \n  \t</servlet-mapping>  \n```\n3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n\t    xmlns:context=\"http://www.springframework.org/schema/context\"  \n\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  \n\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  \n\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\">  \n   \n    \t<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" />  \n  \n\t    <!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。-->  \n\t    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" />  \n\t      \n\t     <!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  \n\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  \n\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； -->\n\t\t <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">  \n\t        <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />  \n\t        <property name=\"prefix\" value=\"/view/\" />  \n\t        <property name=\"suffix\" value=\".jsp\" />  \n\t    </bean>\n\n\t\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>  \n\t\t<!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --> \n  \n</beans>  \n```\n\n4、在src下面添加controller类：HelloWorldController.java\n```java\n\tpackage com.spring.mvc;  \n  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport javax.servlet.http.HttpServletResponse;  \n\t  \n\timport org.springframework.web.context.request.RequestContextHolder;  \n\timport org.springframework.web.context.request.ServletRequestAttributes;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\timport org.springframework.web.servlet.mvc.Controller;  \n\t  \n\t  \n\tpublic class HelloWorldController implements Controller {  \n       \n\t    public ModelAndView handleRequest(HttpServletRequest arg0, HttpServletResponse arg1) throws Exception {  \n\t          \n\t       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  \n\t\n\t        ModelAndView mv = new ModelAndView();  \n\t        // 添加模型数据，可以是任意的POJO对象  \n\t        mv.addObject(\"message\", \"Hello World!\");  \n\t        // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  \n\t        mv.setViewName(\"hello\");  \n\t        return mv;  \n\t    }\n  }\n```\n\n4、在WebContent/view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>\n```\n5、启动tomcat服务器，访问一下\n\n![](http://soujava.com/images/spring3.jpg)\n\n注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）","source":"_posts/spring3-1-1入门讲解一-非注解篇.md","raw":"---\ntitle: spring3.1.1入门讲解一(非注解篇)\ndate: 2016-09-12 13:43:45\ncategories: spring\ntags: spring\n---\n在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！\n\n### 一、准备\n\n1、spring版本：spring-framework-3.1.1.RELEASE\n\n2、jar包：spring包下面的dist文件夹下的所有jar包\n\n![](http://soujava.com/images/spring1.jpg)\n\n3、第三方jar包：\n\tjsp标签包：jstl-api-1.2.jar、standard.jar\n\n\t日志包：commons-logging-1.0.4.jar\n\n### 二、环境搭建\n\n1、新建Dynamic Web Project项目：spring\n\n![](http://soujava.com/images/spring2.png)\n\t\n2、在web.xml文件中添加如下配置\n```java\n\t <servlet>  \n      <servlet-name>spring</servlet-name>  \n      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  \n      <init-param>  \n\t  \t<description>加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件</description>  \n\t  \t<param-name>contextConfigLocation</param-name>  \n\t  \t<param-value>/WEB-INF/spring-mvc*.xml</param-value>  \n\t  </init-param>  \n      \t<!-- load-on-startup：表示启动容器时初始化该Servlet -->  \n      \t<load-on-startup>1</load-on-startup>  \n  \t</servlet>  \n  \t<servlet-mapping>  \n      <servlet-name>spring</servlet-name>  \n      <!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 -->  \n      <url-pattern>*.action</url-pattern>  \n  \t</servlet-mapping>  \n```\n3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n\t    xmlns:context=\"http://www.springframework.org/schema/context\"  \n\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  \n\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  \n\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\">  \n   \n    \t<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" />  \n  \n\t    <!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。-->  \n\t    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" />  \n\t      \n\t     <!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  \n\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  \n\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； -->\n\t\t <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">  \n\t        <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />  \n\t        <property name=\"prefix\" value=\"/view/\" />  \n\t        <property name=\"suffix\" value=\".jsp\" />  \n\t    </bean>\n\n\t\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>  \n\t\t<!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --> \n  \n</beans>  \n```\n\n4、在src下面添加controller类：HelloWorldController.java\n```java\n\tpackage com.spring.mvc;  \n  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport javax.servlet.http.HttpServletResponse;  \n\t  \n\timport org.springframework.web.context.request.RequestContextHolder;  \n\timport org.springframework.web.context.request.ServletRequestAttributes;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\timport org.springframework.web.servlet.mvc.Controller;  \n\t  \n\t  \n\tpublic class HelloWorldController implements Controller {  \n       \n\t    public ModelAndView handleRequest(HttpServletRequest arg0, HttpServletResponse arg1) throws Exception {  \n\t          \n\t       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  \n\t\n\t        ModelAndView mv = new ModelAndView();  \n\t        // 添加模型数据，可以是任意的POJO对象  \n\t        mv.addObject(\"message\", \"Hello World!\");  \n\t        // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  \n\t        mv.setViewName(\"hello\");  \n\t        return mv;  \n\t    }\n  }\n```\n\n4、在WebContent/view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>\n```\n5、启动tomcat服务器，访问一下\n\n![](http://soujava.com/images/spring3.jpg)\n\n注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）","slug":"spring3-1-1入门讲解一-非注解篇","published":1,"updated":"2018-07-08T09:37:48.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjl004930tzwjwjb9rt","content":"<p>在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！</p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>1、spring版本：spring-framework-3.1.1.RELEASE</p>\n<p>2、jar包：spring包下面的dist文件夹下的所有jar包</p>\n<p><img src=\"http://soujava.com/images/spring1.jpg\" alt=\"\"></p>\n<p>3、第三方jar包：<br>    jsp标签包：jstl-api-1.2.jar、standard.jar</p>\n<pre><code>日志包：commons-logging-1.0.4.jar\n</code></pre><h3 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h3><p>1、新建Dynamic Web Project项目：spring</p>\n<p><img src=\"http://soujava.com/images/spring2.png\" alt=\"\"></p>\n<p>2、在web.xml文件中添加如下配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  </div><div class=\"line\">    &lt;init-param&gt;  </div><div class=\"line\"> \t&lt;description&gt;加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件&lt;/description&gt;  </div><div class=\"line\"> \t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </div><div class=\"line\"> \t&lt;param-value&gt;/WEB-INF/spring-mvc*.xml&lt;/param-value&gt;  </div><div class=\"line\"> &lt;/init-param&gt;  </div><div class=\"line\">    \t&lt;!-- load-on-startup：表示启动容器时初始化该Servlet --&gt;  </div><div class=\"line\">    \t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class=\"line\">\t&lt;/servlet&gt;  </div><div class=\"line\">\t&lt;servlet-mapping&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 --&gt;  </div><div class=\"line\">    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;  </div><div class=\"line\">\t&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>\n<p>3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">\t&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"  </div><div class=\"line\">\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  </div><div class=\"line\">\t    xmlns:context=\"http://www.springframework.org/schema/context\"  </div><div class=\"line\">\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  </div><div class=\"line\">\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\"&gt;  </div><div class=\"line\">   </div><div class=\"line\">    \t&lt;bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" /&gt;  </div><div class=\"line\">  </div><div class=\"line\">\t    &lt;!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。--&gt;  </div><div class=\"line\">\t    &lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" /&gt;  </div><div class=\"line\">\t      </div><div class=\"line\">\t     &lt;!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  </div><div class=\"line\">\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  </div><div class=\"line\">\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； --&gt;</div><div class=\"line\">\t\t &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;  </div><div class=\"line\">\t        &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"prefix\" value=\"/view/\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"suffix\" value=\".jsp\" /&gt;  </div><div class=\"line\">\t    &lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t\t&lt;bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/&gt;  </div><div class=\"line\">\t\t&lt;!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --&gt; </div><div class=\"line\">  </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4、在src下面添加controller类：HelloWorldController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.Controller;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest arg0, HttpServletResponse arg1)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  </div><div class=\"line\"></div><div class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">        <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">        mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">        <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  </span></div><div class=\"line\">        mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> mv;  </div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>4、在WebContent/view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、启动tomcat服务器，访问一下</p>\n<p><img src=\"http://soujava.com/images/spring3.jpg\" alt=\"\"></p>\n<p>注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）</p>\n","excerpt":"","more":"<p>在qq群里面有很多童鞋经常提出一些问题，我搭建的spring框架示例怎么启动不起来？spring入门示例谁有？等等问题。所以就写了这篇文章，绝对手把手讲解啊！</p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>1、spring版本：spring-framework-3.1.1.RELEASE</p>\n<p>2、jar包：spring包下面的dist文件夹下的所有jar包</p>\n<p><img src=\"http://soujava.com/images/spring1.jpg\" alt=\"\"></p>\n<p>3、第三方jar包：<br>    jsp标签包：jstl-api-1.2.jar、standard.jar</p>\n<pre><code>日志包：commons-logging-1.0.4.jar\n</code></pre><h3 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h3><p>1、新建Dynamic Web Project项目：spring</p>\n<p><img src=\"http://soujava.com/images/spring2.png\" alt=\"\"></p>\n<p>2、在web.xml文件中添加如下配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  </div><div class=\"line\">    &lt;init-param&gt;  </div><div class=\"line\"> \t&lt;description&gt;加载/WEB-INF/spring-mvc/目录下的所有XML作为Spring MVC的配置文件&lt;/description&gt;  </div><div class=\"line\"> \t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </div><div class=\"line\"> \t&lt;param-value&gt;/WEB-INF/spring-mvc*.xml&lt;/param-value&gt;  </div><div class=\"line\"> &lt;/init-param&gt;  </div><div class=\"line\">    \t&lt;!-- load-on-startup：表示启动容器时初始化该Servlet --&gt;  </div><div class=\"line\">    \t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class=\"line\">\t&lt;/servlet&gt;  </div><div class=\"line\">\t&lt;servlet-mapping&gt;  </div><div class=\"line\">    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;  </div><div class=\"line\">    &lt;!-- url-pattern：表示哪些请求交给Spring Web MVC处理， \"/\"是用来定义默认servlet映射的。也可以如\"*.action\"表示拦截所有以action为扩展名的请求。 --&gt;  </div><div class=\"line\">    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;  </div><div class=\"line\">\t&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>\n<p>3、在WEB-INF目录下面创建spring-mvc.xml文件：（这里的文件需要在web.xml文件中进行配置的，详见第2步）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">\t&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"  </div><div class=\"line\">\t    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  </div><div class=\"line\">\t    xmlns:context=\"http://www.springframework.org/schema/context\"  </div><div class=\"line\">\t    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  </div><div class=\"line\">\t    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </div><div class=\"line\">\t        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\"&gt;  </div><div class=\"line\">   </div><div class=\"line\">    \t&lt;bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" /&gt;  </div><div class=\"line\">  </div><div class=\"line\">\t    &lt;!-- 表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。--&gt;  </div><div class=\"line\">\t    &lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\" /&gt;  </div><div class=\"line\">\t      </div><div class=\"line\">\t     &lt;!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析；  </div><div class=\"line\">\t         viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；  </div><div class=\"line\">\t         prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“view/hello.jsp”； --&gt;</div><div class=\"line\">\t\t &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;  </div><div class=\"line\">\t        &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"prefix\" value=\"/view/\" /&gt;  </div><div class=\"line\">\t        &lt;property name=\"suffix\" value=\".jsp\" /&gt;  </div><div class=\"line\">\t    &lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t\t&lt;bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/&gt;  </div><div class=\"line\">\t\t&lt;!--注意这里的类路径不要错了，如果不用注解的话，那么每当新建一个controller类就需要在这里配置一下 --&gt; </div><div class=\"line\">  </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4、在src下面添加controller类：HelloWorldController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.Controller;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest arg0, HttpServletResponse arg1)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">       HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  </div><div class=\"line\"></div><div class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">        <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">        mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">        <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面,即WebContent/view/hello.jsp  </span></div><div class=\"line\">        mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> mv;  </div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>4、在WebContent/view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、启动tomcat服务器，访问一下</p>\n<p><img src=\"http://soujava.com/images/spring3.jpg\" alt=\"\"></p>\n<p>注：我们的访问url中包括了/hello.action；当以.action为后缀的访问路径都将被DispatcherServlet拦截过滤（web.xml文件中已经配置），然后/hello前缀将被映射到HelloWorldController控制器处理（spring-mvc.xml文件中已经配置）</p>\n"},{"title":"spring3.1.1入门讲解二(注解篇)","date":"2016-09-12T06:00:34.000Z","_content":"在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！\n\n### 一、准备篇-jar包的准备\n\n这里就不详细说明了详见上一篇博客--spring3.1.1入门讲解一（非注解篇）中的准备篇讲解\n\n<!--more-->\n\n### 二、环境搭建篇\n\n1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 \n\n2、配置spring-mvc.xml，重点就在这里，重点配置如下：\n\n\t1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>\n\n\t2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n\t<!-- 在com.spring.mvc包下寻找控制器组件 -->      \n\t<context:component-scan base-package=\"com.spring.mvc\"></context:component-scan>\n\n上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。\n\n3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java\n```java\n\tpackage com.spring.mvc;  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport org.springframework.stereotype.Controller;  \n\timport org.springframework.web.bind.annotation.RequestMapping;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\t  \n\t/** \n\t * 页面控制器 \n\t *  \n\t * @version 1.0 2015-02-11 下午05:39:25 \n\t */  \n\t//使用注解@Controller声明该类是一个控制器       \n\t@Controller  \n\t@RequestMapping(value=\"helloWorldAnnocationController\")  \n\tpublic class HelloWorldAnnocationController{  \n\t     //使用注解@RequestMapping声明这个控制器处理index.html的请求       \n\t      @RequestMapping(\"/hello\")  \n\t      public ModelAndView helloAnotherWorld( final HttpServletRequest request){     \n\t          ModelAndView mv = new ModelAndView();  \n\t            // 添加模型数据，可以是任意的POJO对象  \n\t            mv.addObject(\"message\", \"Hello World!\");  \n\t            // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  \n\t            mv.setViewName(\"hello\");  \n\t        //将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       \n\t        return mv;      \n\t      }  \n\t}  \n\n```\n\n4、在view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>  \n```\n5、访问注解版的controller控制器","source":"_posts/spring3-1-1入门讲解二-注解篇.md","raw":"---\ntitle: spring3.1.1入门讲解二(注解篇)\ndate: 2016-09-12 14:00:34\ncategories: spring\ntags: spring\n---\n在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！\n\n### 一、准备篇-jar包的准备\n\n这里就不详细说明了详见上一篇博客--spring3.1.1入门讲解一（非注解篇）中的准备篇讲解\n\n<!--more-->\n\n### 二、环境搭建篇\n\n1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 \n\n2、配置spring-mvc.xml，重点就在这里，重点配置如下：\n\n\t1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n\t<bean name=\"/hello\" class=\"com.spring.mvc.HelloWorldController\"/>\n\n\t2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n\t<!-- 在com.spring.mvc包下寻找控制器组件 -->      \n\t<context:component-scan base-package=\"com.spring.mvc\"></context:component-scan>\n\n上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。\n\n3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java\n```java\n\tpackage com.spring.mvc;  \n\timport javax.servlet.http.HttpServletRequest;  \n\timport org.springframework.stereotype.Controller;  \n\timport org.springframework.web.bind.annotation.RequestMapping;  \n\timport org.springframework.web.servlet.ModelAndView;  \n\t  \n\t/** \n\t * 页面控制器 \n\t *  \n\t * @version 1.0 2015-02-11 下午05:39:25 \n\t */  \n\t//使用注解@Controller声明该类是一个控制器       \n\t@Controller  \n\t@RequestMapping(value=\"helloWorldAnnocationController\")  \n\tpublic class HelloWorldAnnocationController{  \n\t     //使用注解@RequestMapping声明这个控制器处理index.html的请求       \n\t      @RequestMapping(\"/hello\")  \n\t      public ModelAndView helloAnotherWorld( final HttpServletRequest request){     \n\t          ModelAndView mv = new ModelAndView();  \n\t            // 添加模型数据，可以是任意的POJO对象  \n\t            mv.addObject(\"message\", \"Hello World!\");  \n\t            // 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  \n\t            mv.setViewName(\"hello\");  \n\t        //将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       \n\t        return mv;      \n\t      }  \n\t}  \n\n```\n\n4、在view/目录下面添加hello.jsp页面\n```java\n\t<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  \n    pageEncoding=\"utf-8\"%>  \n\t<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>  \n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">  \n\t<html>  \n\t    <head>  \n\t        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">  \n\t        <title>Insert title here</title>  \n\t    </head>  \n\t    <body>  \n\t        ${message}  \n\t    </body>  \n\t</html>  \n```\n5、访问注解版的controller控制器","slug":"spring3-1-1入门讲解二-注解篇","published":1,"updated":"2018-07-08T09:37:48.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjn004d30tz3y17l3uu","content":"<p>在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！</p>\n<h3 id=\"一、准备篇-jar包的准备\"><a href=\"#一、准备篇-jar包的准备\" class=\"headerlink\" title=\"一、准备篇-jar包的准备\"></a>一、准备篇-jar包的准备</h3><p>这里就不详细说明了详见上一篇博客–spring3.1.1入门讲解一（非注解篇）中的准备篇讲解</p>\n<a id=\"more\"></a>\n<h3 id=\"二、环境搭建篇\"><a href=\"#二、环境搭建篇\" class=\"headerlink\" title=\"二、环境搭建篇\"></a>二、环境搭建篇</h3><p>1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 </p>\n<p>2、配置spring-mvc.xml，重点就在这里，重点配置如下：</p>\n<pre><code>1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n&lt;bean name=&quot;/hello&quot; class=&quot;com.spring.mvc.HelloWorldController&quot;/&gt;\n\n2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n&lt;!-- 在com.spring.mvc包下寻找控制器组件 --&gt;      \n&lt;context:component-scan base-package=&quot;com.spring.mvc&quot;&gt;&lt;/context:component-scan&gt;\n</code></pre><p>上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。</p>\n<p>3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * 页面控制器 </div><div class=\"line\"> *  </div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0 2015-02-11 下午05:39:25 </div><div class=\"line\"> */  </div><div class=\"line\"><span class=\"comment\">//使用注解@Controller声明该类是一个控制器       </span></div><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"helloWorldAnnocationController\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldAnnocationController</span></span>&#123;  </div><div class=\"line\">     <span class=\"comment\">//使用注解@RequestMapping声明这个控制器处理index.html的请求       </span></div><div class=\"line\">      <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)  </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">helloAnotherWorld</span><span class=\"params\">( <span class=\"keyword\">final</span> HttpServletRequest request)</span></span>&#123;     </div><div class=\"line\">          ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">            <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">            mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">            <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  </span></div><div class=\"line\">            mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       </span></div><div class=\"line\">        <span class=\"keyword\">return</span> mv;      </div><div class=\"line\">      &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、在view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、访问注解版的controller控制器</p>\n","excerpt":"<p>在第一篇博客中主要讲解了如何搭建spring框架和运行示例项目，在搭建框架环境的时候，我们需要配置很文件信息；在本篇文章中主要讲解如何采用注解的方式简化开发！</p>\n<h3 id=\"一、准备篇-jar包的准备\"><a href=\"#一、准备篇-jar包的准备\" class=\"headerlink\" title=\"一、准备篇-jar包的准备\"></a>一、准备篇-jar包的准备</h3><p>这里就不详细说明了详见上一篇博客–spring3.1.1入门讲解一（非注解篇）中的准备篇讲解</p>","more":"<h3 id=\"二、环境搭建篇\"><a href=\"#二、环境搭建篇\" class=\"headerlink\" title=\"二、环境搭建篇\"></a>二、环境搭建篇</h3><p>1、在web.xml文件中添加的配置跟上一篇的配置代码一样，直接复制过去就行了。 </p>\n<p>2、配置spring-mvc.xml，重点就在这里，重点配置如下：</p>\n<pre><code>1）如果像我们采用非注解的方式去创建和访问controller控制器时，我们都需要在spring-mvc.xml文件中添加如下配置\n&lt;bean name=&quot;/hello&quot; class=&quot;com.spring.mvc.HelloWorldController&quot;/&gt;\n\n2）、那么我们如果采用注解的方式创建和访问controller控制器时，我们就不需要在spring-mvc.xml中配置bean啦；但是需要在spring-mvc.xml添加如下配置：\n&lt;!-- 在com.spring.mvc包下寻找控制器组件 --&gt;      \n&lt;context:component-scan base-package=&quot;com.spring.mvc&quot;&gt;&lt;/context:component-scan&gt;\n</code></pre><p>上面配置的作用就是让spring自动去扫描com.spring.mvc包下面的controller类（当然我们当创建controller后还需要添加@Controller注解来标示）。</p>\n<p>3、在src下面创建com.spring.mvc包，然后添加controller类：HelloWorldAnnocationController.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.mvc;  </div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\"> * 页面控制器 </div><div class=\"line\"> *  </div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0 2015-02-11 下午05:39:25 </div><div class=\"line\"> */</span>  </div><div class=\"line\"><span class=\"comment\">//使用注解@Controller声明该类是一个控制器       </span></div><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"helloWorldAnnocationController\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldAnnocationController</span></span>&#123;  </div><div class=\"line\">     <span class=\"comment\">//使用注解@RequestMapping声明这个控制器处理index.html的请求       </span></div><div class=\"line\">      <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)  </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">helloAnotherWorld</span><span class=\"params\">( <span class=\"keyword\">final</span> HttpServletRequest request)</span></span>&#123;     </div><div class=\"line\">          ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();  </div><div class=\"line\">            <span class=\"comment\">// 添加模型数据，可以是任意的POJO对象  </span></div><div class=\"line\">            mv.addObject(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Hello World!\"</span>);  </div><div class=\"line\">            <span class=\"comment\">// 设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面，然后就自动从WebContent/view/下面查找hello.jsp视图页面  </span></div><div class=\"line\">            mv.setViewName(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//将model的数据交给文件名为helloSpringMVC，后缀名为vm（在applicationContext.xml里面设置）的文件显示       </span></div><div class=\"line\">        <span class=\"keyword\">return</span> mv;      </div><div class=\"line\">      &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、在view/目录下面添加hello.jsp页面<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\"  </div><div class=\"line\">   pageEncoding=\"utf-8\"%&gt;  </div><div class=\"line\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;  </div><div class=\"line\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;  </div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">    &lt;head&gt;  </div><div class=\"line\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  </div><div class=\"line\">        &lt;title&gt;Insert title here&lt;/title&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">    &lt;body&gt;  </div><div class=\"line\">        $&#123;message&#125;  </div><div class=\"line\">    &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>5、访问注解版的controller控制器</p>"},{"title":"thymeleaf教程2-后台数据封装与页面渲染","date":"2016-08-23T08:32:50.000Z","_content":"我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。\n\n**一、添加一个表单页面--登陆操作**\n![](http://soujava.com/images/thy6.png)\n\n**二、新建业务控制器(doLogin)--获取登陆表单中提交的数据**\n```java\n\t\tString username = request.getParameter(\"username\");\n    \tString password = request.getParameter(\"password\");\n    \t//实例化一个thymeleaf文本上下文\n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n\t\t//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中\n        ctx.setVariable(\"username\", username);\n        ctx.setVariable(\"password\", password);\n        //调用模板引擎转向到对应的模板页面--desc模板页面\n        templateEngine.process(\"desc\", ctx, response.getWriter());\n```\n**三、新建模板页面(desc)--显示doLogin控制器中封装的数据**\n\n![](http://soujava.com/images/thy7.png)\n\n*注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=\"${XX}\"这种形式。*\n\n\n**四、编译工程项目--启动web服务器测试**\n\n1、在登陆表单中输入对应的用户名和密码，点击提交按钮\n![](http://soujava.com/images/thy1.png)\n\n1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。\n![](http://soujava.com/images/thy2.png)\n\n\n**五、在控制器doLogin中封装一些稍微复杂的数据集-数组**\n\n1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中\n```java\n\tString[] types = {\"足球\",\"篮球\",\"羽毛球\"};\n    ctx.setVariable(\"types\", types);\n```\n\n2、在desc模板页面中遍历显示封装好的集合数据\n\n```java\n\t<p th:each=\"type : ${types}\">\n    \t<span th:text=\"${type}\"></span>\n    </p>\n```\n*注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。*\n\n3、针对刚刚封装好的集合数据到页面测试一下\n\n![](http://soujava.com/images/thy3.png)\n\n![](http://soujava.com/images/thy4.png)\n\n\n**六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean**\n\n1、我们新建一个User的Bean实体\n```java\n\tpublic class User {\n\t \tprivate String firstName = null;\n\t    private String lastName = null;\n\t    private String nationality = null;\n\t    private Integer age = null；\n\t    \n\t    public User(final String firstName, final String lastName, \n\t            final String nationality, final Integer age) {\n\t        super();\n\t        this.firstName = firstName;\n\t        this.lastName = lastName;\n\t        this.nationality = nationality;\n\t        this.age = age;\n\t    }\n\t}\n```\n\n2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中\n\n```java\n\t\tUser user = new User(\"zhang\",\"san\",\"china\",25);\n        ctx.setVariable(\"user\", user);\n```\n\n3、在desc模板页面中显示封装好的User实体bean数据\n```java\n\n\t<p th:text=\"${user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age}\"></p>\n```\n注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。\n\n**六、总结**\n\n1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等\n2、通过thymeleaf模板引擎转向到对应的模板页面\n3、用thymeleaf提供的方法渲染后台封装的数据到页面中","source":"_posts/thymeleaf教程2-后台数据封装与页面渲染.md","raw":"---\ntitle: thymeleaf教程2-后台数据封装与页面渲染\ndate: 2016-08-23 16:32:50\ncategories: thymeleaf\ntags: thymeleaf\n---\n我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。\n\n**一、添加一个表单页面--登陆操作**\n![](http://soujava.com/images/thy6.png)\n\n**二、新建业务控制器(doLogin)--获取登陆表单中提交的数据**\n```java\n\t\tString username = request.getParameter(\"username\");\n    \tString password = request.getParameter(\"password\");\n    \t//实例化一个thymeleaf文本上下文\n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n\t\t//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中\n        ctx.setVariable(\"username\", username);\n        ctx.setVariable(\"password\", password);\n        //调用模板引擎转向到对应的模板页面--desc模板页面\n        templateEngine.process(\"desc\", ctx, response.getWriter());\n```\n**三、新建模板页面(desc)--显示doLogin控制器中封装的数据**\n\n![](http://soujava.com/images/thy7.png)\n\n*注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=\"${XX}\"这种形式。*\n\n\n**四、编译工程项目--启动web服务器测试**\n\n1、在登陆表单中输入对应的用户名和密码，点击提交按钮\n![](http://soujava.com/images/thy1.png)\n\n1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。\n![](http://soujava.com/images/thy2.png)\n\n\n**五、在控制器doLogin中封装一些稍微复杂的数据集-数组**\n\n1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中\n```java\n\tString[] types = {\"足球\",\"篮球\",\"羽毛球\"};\n    ctx.setVariable(\"types\", types);\n```\n\n2、在desc模板页面中遍历显示封装好的集合数据\n\n```java\n\t<p th:each=\"type : ${types}\">\n    \t<span th:text=\"${type}\"></span>\n    </p>\n```\n*注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。*\n\n3、针对刚刚封装好的集合数据到页面测试一下\n\n![](http://soujava.com/images/thy3.png)\n\n![](http://soujava.com/images/thy4.png)\n\n\n**六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean**\n\n1、我们新建一个User的Bean实体\n```java\n\tpublic class User {\n\t \tprivate String firstName = null;\n\t    private String lastName = null;\n\t    private String nationality = null;\n\t    private Integer age = null；\n\t    \n\t    public User(final String firstName, final String lastName, \n\t            final String nationality, final Integer age) {\n\t        super();\n\t        this.firstName = firstName;\n\t        this.lastName = lastName;\n\t        this.nationality = nationality;\n\t        this.age = age;\n\t    }\n\t}\n```\n\n2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中\n\n```java\n\t\tUser user = new User(\"zhang\",\"san\",\"china\",25);\n        ctx.setVariable(\"user\", user);\n```\n\n3、在desc模板页面中显示封装好的User实体bean数据\n```java\n\n\t<p th:text=\"${user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age}\"></p>\n```\n注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。\n\n**六、总结**\n\n1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等\n2、通过thymeleaf模板引擎转向到对应的模板页面\n3、用thymeleaf提供的方法渲染后台封装的数据到页面中","slug":"thymeleaf教程2-后台数据封装与页面渲染","published":1,"updated":"2018-07-08T09:37:48.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjp004h30tzfe8mq6x5","content":"<p>我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。</p>\n<p><strong>一、添加一个表单页面–登陆操作</strong><br><img src=\"http://soujava.com/images/thy6.png\" alt=\"\"></p>\n<p><strong>二、新建业务控制器(doLogin)–获取登陆表单中提交的数据</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String username = request.getParameter(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">  \tString password = request.getParameter(<span class=\"string\">\"password\"</span>);</div><div class=\"line\">  \t<span class=\"comment\">//实例化一个thymeleaf文本上下文</span></div><div class=\"line\">      WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\"><span class=\"comment\">//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中</span></div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">      <span class=\"comment\">//调用模板引擎转向到对应的模板页面--desc模板页面</span></div><div class=\"line\">      templateEngine.process(<span class=\"string\">\"desc\"</span>, ctx, response.getWriter());</div></pre></td></tr></table></figure></p>\n<p><strong>三、新建模板页面(desc)–显示doLogin控制器中封装的数据</strong></p>\n<p><img src=\"http://soujava.com/images/thy7.png\" alt=\"\"></p>\n<p><em>注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=”${XX}”这种形式。</em></p>\n<p><strong>四、编译工程项目–启动web服务器测试</strong></p>\n<p>1、在登陆表单中输入对应的用户名和密码，点击提交按钮<br><img src=\"http://soujava.com/images/thy1.png\" alt=\"\"></p>\n<p>1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。<br><img src=\"http://soujava.com/images/thy2.png\" alt=\"\"></p>\n<p><strong>五、在控制器doLogin中封装一些稍微复杂的数据集-数组</strong></p>\n<p>1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] types = &#123;<span class=\"string\">\"足球\"</span>,<span class=\"string\">\"篮球\"</span>,<span class=\"string\">\"羽毛球\"</span>&#125;;</div><div class=\"line\">   ctx.setVariable(<span class=\"string\">\"types\"</span>, types);</div></pre></td></tr></table></figure></p>\n<p>2、在desc模板页面中遍历显示封装好的集合数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p th:each=\"type : $&#123;types&#125;\"&gt;</div><div class=\"line\">   \t&lt;span th:text=\"$&#123;type&#125;\"&gt;&lt;/span&gt;</div><div class=\"line\">   &lt;/p&gt;</div></pre></td></tr></table></figure>\n<p><em>注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。</em></p>\n<p>3、针对刚刚封装好的集合数据到页面测试一下</p>\n<p><img src=\"http://soujava.com/images/thy3.png\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/thy4.png\" alt=\"\"></p>\n<p><strong>六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean</strong></p>\n<p>1、我们新建一个User的Bean实体<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"> \t<span class=\"keyword\">private</span> String firstName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String lastName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nationality = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer age = <span class=\"keyword\">null</span>；</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">final</span> String firstName, <span class=\"keyword\">final</span> String lastName, </span></span></div><div class=\"line\">            <span class=\"keyword\">final</span> String nationality, <span class=\"keyword\">final</span> Integer age) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.nationality = nationality;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"zhang\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"china\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"user\"</span>, user);</div></pre></td></tr></table></figure>\n<p>3、在desc模板页面中显示封装好的User实体bean数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;p th:text=\"$&#123;user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age&#125;\"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。</p>\n<p><strong>六、总结</strong></p>\n<p>1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等<br>2、通过thymeleaf模板引擎转向到对应的模板页面<br>3、用thymeleaf提供的方法渲染后台封装的数据到页面中</p>\n","excerpt":"","more":"<p>我们使用模板引擎的过程中，页面上面的数据肯定需要从后台传递过来，然后把数据装载到页面对应区域中，所以我们来看看如果把后台的数据在前端页面渲染。</p>\n<p><strong>一、添加一个表单页面–登陆操作</strong><br><img src=\"http://soujava.com/images/thy6.png\" alt=\"\"></p>\n<p><strong>二、新建业务控制器(doLogin)–获取登陆表单中提交的数据</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String username = request.getParameter(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">  \tString password = request.getParameter(<span class=\"string\">\"password\"</span>);</div><div class=\"line\">  \t<span class=\"comment\">//实例化一个thymeleaf文本上下文</span></div><div class=\"line\">      WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\"><span class=\"comment\">//将前端登陆表单页面提交过来的数据封装到thymeleaf上下文中</span></div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">      <span class=\"comment\">//调用模板引擎转向到对应的模板页面--desc模板页面</span></div><div class=\"line\">      templateEngine.process(<span class=\"string\">\"desc\"</span>, ctx, response.getWriter());</div></pre></td></tr></table></figure></p>\n<p><strong>三、新建模板页面(desc)–显示doLogin控制器中封装的数据</strong></p>\n<p><img src=\"http://soujava.com/images/thy7.png\" alt=\"\"></p>\n<p><em>注：读取数据使用${XX}这种形式，是不是感觉很熟悉，EL表达式；而向页面html元素中渲染数据使用thymeleaf提供的标签th:text=”${XX}”这种形式。</em></p>\n<p><strong>四、编译工程项目–启动web服务器测试</strong></p>\n<p>1、在登陆表单中输入对应的用户名和密码，点击提交按钮<br><img src=\"http://soujava.com/images/thy1.png\" alt=\"\"></p>\n<p>1、可以看到提交表单后进入到doLogin控制器中，控制器获取数据并封装数据，然后转向到模板页面中渲染数据。<br><img src=\"http://soujava.com/images/thy2.png\" alt=\"\"></p>\n<p><strong>五、在控制器doLogin中封装一些稍微复杂的数据集-数组</strong></p>\n<p>1、我们声明一个类型数组，然后把数组封装到thymeleaf上下文中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] types = &#123;<span class=\"string\">\"足球\"</span>,<span class=\"string\">\"篮球\"</span>,<span class=\"string\">\"羽毛球\"</span>&#125;;</div><div class=\"line\">   ctx.setVariable(<span class=\"string\">\"types\"</span>, types);</div></pre></td></tr></table></figure></p>\n<p>2、在desc模板页面中遍历显示封装好的集合数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p th:each=\"type : $&#123;types&#125;\"&gt;</div><div class=\"line\">   \t&lt;span th:text=\"$&#123;type&#125;\"&gt;&lt;/span&gt;</div><div class=\"line\">   &lt;/p&gt;</div></pre></td></tr></table></figure>\n<p><em>注：上面渲染集合数据到模板页面的代码中我们采用了th:each的方法遍历数据，这是thymeleaf提供的，其实thymeleaf提供了非常多并且非常强大的方法，后续再一一说明。</em></p>\n<p>3、针对刚刚封装好的集合数据到页面测试一下</p>\n<p><img src=\"http://soujava.com/images/thy3.png\" alt=\"\"></p>\n<p><img src=\"http://soujava.com/images/thy4.png\" alt=\"\"></p>\n<p><strong>六、在控制器doLogin中封装一些稍微复杂的数据集-实体Bean</strong></p>\n<p>1、我们新建一个User的Bean实体<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"> \t<span class=\"keyword\">private</span> String firstName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String lastName = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nationality = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer age = <span class=\"keyword\">null</span>；</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">final</span> String firstName, <span class=\"keyword\">final</span> String lastName, </div><div class=\"line\">            <span class=\"keyword\">final</span> String nationality, <span class=\"keyword\">final</span> Integer age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.nationality = nationality;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2、在我们的doLogin业务控制器中实例化该User实体bean，并且把bean数据实体封装到thymeleaf上下文中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"zhang\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"china\"</span>,<span class=\"number\">25</span>);</div><div class=\"line\">      ctx.setVariable(<span class=\"string\">\"user\"</span>, user);</div></pre></td></tr></table></figure>\n<p>3、在desc模板页面中显示封装好的User实体bean数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;p th:text=\"$&#123;user.firstName+':'+user.lastName+':'+user.nationality+':'+user.age&#125;\"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>注：我们在获取bean中的属性数据时，仍然采用EL表达式${user.firstName}的方式；然后将获取的数据显示到html元素中用th:text方法；只不过我们使用th:text时在中间使用了字符串拼接将多个属性拼接显示。</p>\n<p><strong>六、总结</strong></p>\n<p>1、我们在执行业务操作的时候，需要把后台的数据集封装到thymeleaf上下文中，我们可以封装组合各种我们需要的数据，如：字符串、集合、实体bean等等<br>2、通过thymeleaf模板引擎转向到对应的模板页面<br>3、用thymeleaf提供的方法渲染后台封装的数据到页面中</p>\n"},{"title":"springBoot编写不同风格的restAPI接口","date":"2016-08-31T11:38:46.000Z","_content":"平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明\n\n### 一、静态url+动态参数(param)形式的api ###\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/info?id=123\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"/api\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@RequestParam(value = \"id\") String id）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的\n2、@RequestMapping  其提供路由信息，它告诉Spring任何来自\"/\"路径的HTTP请求都应该被映射到该Controller入口中\n3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法\n3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=\"id\") String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起\n\n\n### 二、动态url+动态参数(param)形式的api ###\n\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/{id}/info?status=1\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"user/{id}/info\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@PathVariable(value = \"id\") String id,\n\t\t\t\t\t\t @RequestParam(value = \"status\") String status）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面\n\n\n### 三、总结 ###\n\n1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)\n\n2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)","source":"_posts/springBoot编写不同风格的restAPI接口.md","raw":"---\ntitle: springBoot编写不同风格的restAPI接口\ndate: 2016-08-31 19:38:46\ncategories: spring\ntags: springBoot\n---\n平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明\n\n### 一、静态url+动态参数(param)形式的api ###\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/info?id=123\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"/api\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@RequestParam(value = \"id\") String id）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的\n2、@RequestMapping  其提供路由信息，它告诉Spring任何来自\"/\"路径的HTTP请求都应该被映射到该Controller入口中\n3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法\n3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=\"id\") String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起\n\n\n### 二、动态url+动态参数(param)形式的api ###\n\n接口形式：\n\n```java\n\thttp://localhost:8080/api/user/{id}/info?status=1\n```\n\napi代码：\n\n```java\n\t@RestController\n\t@RequestMapping(\"user/{id}/info\")\n\tpublic class userApiController {\n\t\t\n\t\t@Autowired\n\t\tprivate UserService userService;\n\n\t\t/**\n\t\t  * 根据用户id获取用户信息的api\n\t\t  * @param id 用户id\n\t\t  */\n\t\t@RequestMapping(value = \"user/info\")\n\t\tpublic void user(@PathVariable(value = \"id\") String id,\n\t\t\t\t\t\t @RequestParam(value = \"status\") String status）{\n\t\t\t\t方法体\n\t\t}\n\t}\n```\n\n上面的例子中使用了如下个注解：\n1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面\n\n\n### 三、总结 ###\n\n1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)\n\n2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)","slug":"springBoot编写不同风格的restAPI接口","published":1,"updated":"2018-07-08T09:37:48.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjq004l30tz7cjz3d48","content":"<p>平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明</p>\n<h3 id=\"一、静态url-动态参数-param-形式的api\"><a href=\"#一、静态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"一、静态url+动态参数(param)形式的api\"></a>一、静态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/info?id=123</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"id\"</span>)</span> String id）</span>&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的<br>2、@RequestMapping  其提供路由信息，它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到该Controller入口中<br>3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法<br>3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=”id”) String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起</p>\n<h3 id=\"二、动态url-动态参数-param-形式的api\"><a href=\"#二、动态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"二、动态url+动态参数(param)形式的api\"></a>二、动态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/&#123;id&#125;/info?status=1</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"user/&#123;id&#125;/info\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@PathVariable(value = <span class=\"string\">\"id\"</span>)</span> String id,</span></div><div class=\"line\">\t\t\t\t\t @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"status\"</span>)</span> String status）&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面</p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)</p>\n<p>2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)</p>\n","excerpt":"","more":"<p>平时使用springboot开发后台功能模块，并且开发对外提供的restfulApi接口时也同样使用springBoot开发，目前主要用到两种方式的的restfulApi;下面分两点说明</p>\n<h3 id=\"一、静态url-动态参数-param-形式的api\"><a href=\"#一、静态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"一、静态url+动态参数(param)形式的api\"></a>一、静态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/info?id=123</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"id\"</span>)</span> String id）</span>&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@RestController  用来标记这是一个支持REST的控制器，其实其是@Controller扩展来的<br>2、@RequestMapping  其提供路由信息，它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到该Controller入口中<br>3、@Autowired  对类成员变量、方法及构造函数进行注解，完成自动装配的工作。 用来消除set ，get方法<br>3、@RequestParam 将请求参数区数据映射到功能处理方法的参数上，比如我们的@RequestParam(value=”id”) String userId这样，我们对外公开的参数名称为id，而我们业务方法体用的参数名称为userId，该注解就是将两个参数绑定在一起</p>\n<h3 id=\"二、动态url-动态参数-param-形式的api\"><a href=\"#二、动态url-动态参数-param-形式的api\" class=\"headerlink\" title=\"二、动态url+动态参数(param)形式的api\"></a>二、动态url+动态参数(param)形式的api</h3><p>接口形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//localhost:8080/api/user/&#123;id&#125;/info?status=1</span></div></pre></td></tr></table></figure>\n<p>api代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"user/&#123;id&#125;/info\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">userApiController</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t  * 根据用户id获取用户信息的api</div><div class=\"line\">\t  * <span class=\"doctag\">@param</span> id 用户id</div><div class=\"line\">\t  */</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"user/info\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">user</span><span class=\"params\">(@PathVariable(value = <span class=\"string\">\"id\"</span>)</span> String id,</div><div class=\"line\">\t\t\t\t\t @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"status\"</span>)</span> String status）</span>&#123;</div><div class=\"line\">\t\t\t方法体</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中使用了如下个注解：<br>1、@PathVariable 将方法中的参数绑定到请求url中(path)中的动态变量，比如上面例子中将path中的{id}绑定到user方法中的String id参数上面</p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>1、如果参数不在path路径中动态传递(所有参数在?后面以键值对传递)，那么方法体中使用@RequestParam进行参数绑定(如果传递的参数名称跟方法中传递的参数名称一致的话可以不用改注解)</p>\n<p>2、如果参数在path路径中动态传递(在?前面的path路径中使用{id}这种方式传递参数，那么方法体中必须使用@PathVariable进行参数绑定)</p>\n"},{"title":"thymeleaf教程1-环境搭建","date":"2016-08-08T07:16:41.000Z","_content":"一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：\n1. 在你的springboot项目工程中添加thymeleaf的依赖配置\n\n```java\n\t compile(\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\");\n```\n2. 编写一个测试页面(html),对thymeleaf进行使用\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\">\n\t<head>\n\t</head>\n\t<body>\n\t\thello thymeleaf!\n\t</body>\n```\n> 我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用**<th:XX **这样的标签把数据渲染到html模板中了；\n\n由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是<th:XX 标签被忽略的效果！\n\n**二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含**\n\n1. eclipse新建maven工程\n\t![](http://soujava.com/images/newmavenproject.png)\n\t![](http://soujava.com/images/newmaven1.png)\n\t![](http://soujava.com/images/newmaven2.png)\n\t![](http://soujava.com/images/newmaven3.png)\n2. 在pom.xml配置对Thymeleaf的依赖\n```python\n\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  \t<modelVersion>4.0.0</modelVersion>\n  \t<groupId>com.maps</groupId>\n  \t<artifactId>theymeleaf</artifactId>\n  \t<packaging>war</packaging>\n  \t<version>0.0.1-SNAPSHOT</version>\n  \t<name>theymeleaf Maven Webapp</name>\n  \t<url>http://maven.apache.org</url>\n  \n    <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n    </repository>\n    </repositories>\n  \n  \n    <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n     <dependency>\n      <groupId>org.thymeleaf</groupId>\n      <artifactId>thymeleaf</artifactId>\n      <version>3.0.1.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n        \n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.15</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>com.sun.jdmk</groupId>\n          <artifactId>jmxtools</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.sun.jmx</groupId>\n          <artifactId>jmxri</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>javax.jms</groupId>\n          <artifactId>jms</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  \t</dependencies>\n  \n  \n  \t<build>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n      </resource>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.properties</include>\n          <include>**/*.xml</include>\n          <include>**/*.html</include>\n        </includes>\n      </resource>\n    </resources>\n        \n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.2</version>\n        <configuration>\n          <source>1.5</source>\n          <target>1.5</target>\n        </configuration>\n      </plugin>\n      \n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>2.7</version>\n        <configuration>\n          <encoding>ISO-8859-1</encoding>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  \t</build>\n\t</project>\t\n```\n\n3. 中断一下，先讲解一下该demo的执行流程\n\t![模板引擎执行流程](http://soujava.com/images/thymeleafFollow.png)\n\n4. MyApplication--应用装载器\n```java\n\tpackage application;\n\n\timport java.util.HashMap;\n\timport java.util.Map;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.TemplateEngine;\n\timport org.thymeleaf.templatemode.TemplateMode;\n\timport org.thymeleaf.templateresolver.ServletContextTemplateResolver;\n\n\timport controller.HomeController;\n\timport controller.Controller;\n\n\tpublic class MyApplication {\n\n   \t \tprivate TemplateEngine templateEngine;\n   \t \tprivate Map<String, Controller> controllersByURL;\n    \n    \tpublic MyApplication(final ServletContext servletContext) {\n        \tsuper();\n\t        /*1、实例化模板解析器，并配置相关选项*/\n\t        ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(servletContext);\n\t        /*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/ \n\t        templateResolver.setTemplateMode(TemplateMode.HTML);\n\t        /*1.2、设置模板引擎的默认加载路径*/\n\t        templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\t        /*1.3、设置模板引擎的文件后缀*/\n\t        templateResolver.setSuffix(\".html\");\n\t        /*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/\n\t        templateResolver.setCacheTTLMs(Long.valueOf(3600000L));\n\t        /*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/\n\t        templateResolver.setCacheable(false);\n\n\t        /*2、实例化模板引擎*/\n\t        this.templateEngine = new TemplateEngine();\n\t        /*3、将模板解析器装载到模板引擎中*/\n\t        this.templateEngine.setTemplateResolver(templateResolver);\n\t        \n\t        /*4、针对不同的url实例化不同的业务控制器*/\n\t        this.controllersByURL = new HashMap<String, Controller>();\n\t        this.controllersByURL.put(\"/\", new HomeController());\n    \t}\n    \n    \tpublic Controller resolveControllerForRequest(final HttpServletRequest request) {\n       \t \tfinal String path = getRequestPath(request);\n        \treturn this.controllersByURL.get(path);\n    \t}\n    \n    \n\t    public ITemplateEngine getTemplateEngine() {\n\t        return this.templateEngine;\n\t    }\n\n    \n\t    private static String getRequestPath(final HttpServletRequest request) {\n\t        String requestURI = request.getRequestURI();\n\t        final String contextPath = request.getContextPath();\n\t        \n\t        final int fragmentIndex = requestURI.indexOf(';'); \n\t        if (fragmentIndex != -1) {\n\t            requestURI = requestURI.substring(0, fragmentIndex);\n\t        }\n\t        \n\t        if (requestURI.startsWith(contextPath)) {\n\t            return requestURI.substring(contextPath.length());\n\t        }\n\t        return requestURI;\n\t    }\n}\t\n```\n5. Controller--控制器接口\n```java\n\tpackage controller;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\tpublic interface Controller {\n\t\tpublic void process(\n            HttpServletRequest request, HttpServletResponse response,\n            ServletContext servletContext, ITemplateEngine templateEngine)\n            throws Exception;\n\t}\n```\n6. HomeController--首页控制器业务类,实现controller接口\n```java\n\tpackage controller;\n\n\timport java.util.Calendar;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.context.WebContext;\n\n\tpublic class HomeController implements Controller{\n\t \n\t    public HomeController() {\n\t        super();\n\t    }\n    \n    \tpublic void process(\n            final HttpServletRequest request, final HttpServletResponse response,\n            final ServletContext servletContext, final ITemplateEngine templateEngine)\n            throws Exception {\n        \n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n        ctx.setVariable(\"today\", Calendar.getInstance());//thymeleaf的上下文中设置变量数据\n        \n        templateEngine.process(\"home\", ctx, response.getWriter());//模板引擎转向到对应的模板页面\n   \t\t}\n\t}\n\n```\n7. MyFilter--过滤器类\n```java\n\tpackage filter;\n\n\timport java.io.IOException;\n\n\timport javax.servlet.Filter;\n\timport javax.servlet.FilterChain;\n\timport javax.servlet.FilterConfig;\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.ServletRequest;\n\timport javax.servlet.ServletResponse;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\timport application.MyApplication;\n\timport controller.Controller;\n\timport entity.User;\n\t\n\tpublic class MyFilter implements Filter{\n\t\tprivate ServletContext servletContext;\n    \tprivate MyApplication application;\n    \n    \tpublic MyFilter() {\n    \t    super();\n    \t}\n  \n\n    \tpublic void init(final FilterConfig filterConfig) throws ServletException {\n        \tthis.servletContext = filterConfig.getServletContext();\n        \tthis.application = new MyApplication(this.servletContext);\n    \t}\n\n    \tpublic void doFilter(final ServletRequest request, final ServletResponse response,\n            final FilterChain chain) throws IOException, ServletException {\n        \n        \tif (!process((HttpServletRequest)request, (HttpServletResponse)response)) {\n            \tchain.doFilter(request, response);\n        \t}\n    \t}\n\n    \tpublic void destroy() {}\n\n    \tprivate boolean process(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException {\n        \ttry {\n            \t//针对资源请求url进行排除\n           \t if (request.getRequestURI().startsWith(\"/css\") ||\n                    request.getRequestURI().startsWith(\"/images\") ||\n                    request.getRequestURI().startsWith(\"/favicon\")) {\n                return false;\n           \t }\n            \n            /*\n             * 根据URL映射，获得处理该请求的控制器。\n             */\n            Controller controller = this.application.resolveControllerForRequest(request);\n            if (controller == null) {\n                return false;\n            }\n\n            /*\n             * 获取TemplateEngine(模板引擎)实例\n             */\n            ITemplateEngine templateEngine = this.application.getTemplateEngine();\n\n            /*\n             * 写入响应头部信息\n             */\n            response.setContentType(\"text/html;charset=UTF-8\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setDateHeader(\"Expires\", 0);\n\n            /*\n             * 执行控制器，并转向到对应的模板视图\n             */\n            controller.process(request, response, this.servletContext, templateEngine);\n            return true;\n       \t } catch (Exception e) {\n            try {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            } catch (final IOException ignored) {\n            }\n            throw new ServletException(e);\n        }\n    }\t\n}\n\n```\n8. web.xml配置\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<web-app id=\"gtvg\"\n         version=\"3.1\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">\n\n    <display-name>thymeleafexamples-gtvg</display-name>\n\n    <session-config>\n        <session-timeout>60</session-timeout>\n    </session-config>\n\n    <filter>\n        <filter-name>gtvgfilter</filter-name>\n        <filter-class>filter.MyFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>gtvgfilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    \n</web-app>\n```\n9. 在webapp/WEB-INF目录下面新建templates(模板目录)\n\n<p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。\n\t\n\t>/*1.2、设置模板引擎的默认加载路径*/\n\t templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\n10. 在templates目录下面新建home.html模板文件\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\">\n\t  <head>\n\t    <title>Good Thymes Virtual Grocery</title>\n\t    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n\t  </head>\n\t  <body>\n\t    <p>hello <span th:text=\"'Thymeleaf'\">word!</span>.</p>\n\t  </body>\n\t</html>\n```\n<p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中\n\n11. 运行pom.xml编译构建完成后，启动tomcat服务器预览测试\n\n\t![显示页面](http://soujava.com/images/thyemleafshow.png)\n\n<p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!\n\n\n\n<p><code>该demo已经上传至github上面，https://github.com/mapingsheng/theymeleaf\n","source":"_posts/thymeleaf教程1-环境搭建.md","raw":"---\ntitle: thymeleaf教程1-环境搭建\ndate: 2016-08-08 15:16:41\ncategories: thymeleaf\ntags: thymeleaf\n---\n一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：\n1. 在你的springboot项目工程中添加thymeleaf的依赖配置\n\n```java\n\t compile(\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\");\n```\n2. 编写一个测试页面(html),对thymeleaf进行使用\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\">\n\t<head>\n\t</head>\n\t<body>\n\t\thello thymeleaf!\n\t</body>\n```\n> 我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用**<th:XX **这样的标签把数据渲染到html模板中了；\n\n由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是<th:XX 标签被忽略的效果！\n\n**二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含**\n\n1. eclipse新建maven工程\n\t![](http://soujava.com/images/newmavenproject.png)\n\t![](http://soujava.com/images/newmaven1.png)\n\t![](http://soujava.com/images/newmaven2.png)\n\t![](http://soujava.com/images/newmaven3.png)\n2. 在pom.xml配置对Thymeleaf的依赖\n```python\n\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  \t<modelVersion>4.0.0</modelVersion>\n  \t<groupId>com.maps</groupId>\n  \t<artifactId>theymeleaf</artifactId>\n  \t<packaging>war</packaging>\n  \t<version>0.0.1-SNAPSHOT</version>\n  \t<name>theymeleaf Maven Webapp</name>\n  \t<url>http://maven.apache.org</url>\n  \n    <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n    </repository>\n    </repositories>\n  \n  \n    <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n     <dependency>\n      <groupId>org.thymeleaf</groupId>\n      <artifactId>thymeleaf</artifactId>\n      <version>3.0.1.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n        \n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>1.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.15</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>com.sun.jdmk</groupId>\n          <artifactId>jmxtools</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.sun.jmx</groupId>\n          <artifactId>jmxri</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>javax.jms</groupId>\n          <artifactId>jms</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  \t</dependencies>\n  \n  \n  \t<build>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n      </resource>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.properties</include>\n          <include>**/*.xml</include>\n          <include>**/*.html</include>\n        </includes>\n      </resource>\n    </resources>\n        \n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.2</version>\n        <configuration>\n          <source>1.5</source>\n          <target>1.5</target>\n        </configuration>\n      </plugin>\n      \n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>2.7</version>\n        <configuration>\n          <encoding>ISO-8859-1</encoding>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  \t</build>\n\t</project>\t\n```\n\n3. 中断一下，先讲解一下该demo的执行流程\n\t![模板引擎执行流程](http://soujava.com/images/thymeleafFollow.png)\n\n4. MyApplication--应用装载器\n```java\n\tpackage application;\n\n\timport java.util.HashMap;\n\timport java.util.Map;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.TemplateEngine;\n\timport org.thymeleaf.templatemode.TemplateMode;\n\timport org.thymeleaf.templateresolver.ServletContextTemplateResolver;\n\n\timport controller.HomeController;\n\timport controller.Controller;\n\n\tpublic class MyApplication {\n\n   \t \tprivate TemplateEngine templateEngine;\n   \t \tprivate Map<String, Controller> controllersByURL;\n    \n    \tpublic MyApplication(final ServletContext servletContext) {\n        \tsuper();\n\t        /*1、实例化模板解析器，并配置相关选项*/\n\t        ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(servletContext);\n\t        /*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/ \n\t        templateResolver.setTemplateMode(TemplateMode.HTML);\n\t        /*1.2、设置模板引擎的默认加载路径*/\n\t        templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\t        /*1.3、设置模板引擎的文件后缀*/\n\t        templateResolver.setSuffix(\".html\");\n\t        /*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/\n\t        templateResolver.setCacheTTLMs(Long.valueOf(3600000L));\n\t        /*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/\n\t        templateResolver.setCacheable(false);\n\n\t        /*2、实例化模板引擎*/\n\t        this.templateEngine = new TemplateEngine();\n\t        /*3、将模板解析器装载到模板引擎中*/\n\t        this.templateEngine.setTemplateResolver(templateResolver);\n\t        \n\t        /*4、针对不同的url实例化不同的业务控制器*/\n\t        this.controllersByURL = new HashMap<String, Controller>();\n\t        this.controllersByURL.put(\"/\", new HomeController());\n    \t}\n    \n    \tpublic Controller resolveControllerForRequest(final HttpServletRequest request) {\n       \t \tfinal String path = getRequestPath(request);\n        \treturn this.controllersByURL.get(path);\n    \t}\n    \n    \n\t    public ITemplateEngine getTemplateEngine() {\n\t        return this.templateEngine;\n\t    }\n\n    \n\t    private static String getRequestPath(final HttpServletRequest request) {\n\t        String requestURI = request.getRequestURI();\n\t        final String contextPath = request.getContextPath();\n\t        \n\t        final int fragmentIndex = requestURI.indexOf(';'); \n\t        if (fragmentIndex != -1) {\n\t            requestURI = requestURI.substring(0, fragmentIndex);\n\t        }\n\t        \n\t        if (requestURI.startsWith(contextPath)) {\n\t            return requestURI.substring(contextPath.length());\n\t        }\n\t        return requestURI;\n\t    }\n}\t\n```\n5. Controller--控制器接口\n```java\n\tpackage controller;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\tpublic interface Controller {\n\t\tpublic void process(\n            HttpServletRequest request, HttpServletResponse response,\n            ServletContext servletContext, ITemplateEngine templateEngine)\n            throws Exception;\n\t}\n```\n6. HomeController--首页控制器业务类,实现controller接口\n```java\n\tpackage controller;\n\n\timport java.util.Calendar;\n\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\timport org.thymeleaf.context.WebContext;\n\n\tpublic class HomeController implements Controller{\n\t \n\t    public HomeController() {\n\t        super();\n\t    }\n    \n    \tpublic void process(\n            final HttpServletRequest request, final HttpServletResponse response,\n            final ServletContext servletContext, final ITemplateEngine templateEngine)\n            throws Exception {\n        \n        WebContext ctx = new WebContext(request, response, servletContext, request.getLocale());\n        ctx.setVariable(\"today\", Calendar.getInstance());//thymeleaf的上下文中设置变量数据\n        \n        templateEngine.process(\"home\", ctx, response.getWriter());//模板引擎转向到对应的模板页面\n   \t\t}\n\t}\n\n```\n7. MyFilter--过滤器类\n```java\n\tpackage filter;\n\n\timport java.io.IOException;\n\n\timport javax.servlet.Filter;\n\timport javax.servlet.FilterChain;\n\timport javax.servlet.FilterConfig;\n\timport javax.servlet.ServletContext;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.ServletRequest;\n\timport javax.servlet.ServletResponse;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\timport org.thymeleaf.ITemplateEngine;\n\n\timport application.MyApplication;\n\timport controller.Controller;\n\timport entity.User;\n\t\n\tpublic class MyFilter implements Filter{\n\t\tprivate ServletContext servletContext;\n    \tprivate MyApplication application;\n    \n    \tpublic MyFilter() {\n    \t    super();\n    \t}\n  \n\n    \tpublic void init(final FilterConfig filterConfig) throws ServletException {\n        \tthis.servletContext = filterConfig.getServletContext();\n        \tthis.application = new MyApplication(this.servletContext);\n    \t}\n\n    \tpublic void doFilter(final ServletRequest request, final ServletResponse response,\n            final FilterChain chain) throws IOException, ServletException {\n        \n        \tif (!process((HttpServletRequest)request, (HttpServletResponse)response)) {\n            \tchain.doFilter(request, response);\n        \t}\n    \t}\n\n    \tpublic void destroy() {}\n\n    \tprivate boolean process(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException {\n        \ttry {\n            \t//针对资源请求url进行排除\n           \t if (request.getRequestURI().startsWith(\"/css\") ||\n                    request.getRequestURI().startsWith(\"/images\") ||\n                    request.getRequestURI().startsWith(\"/favicon\")) {\n                return false;\n           \t }\n            \n            /*\n             * 根据URL映射，获得处理该请求的控制器。\n             */\n            Controller controller = this.application.resolveControllerForRequest(request);\n            if (controller == null) {\n                return false;\n            }\n\n            /*\n             * 获取TemplateEngine(模板引擎)实例\n             */\n            ITemplateEngine templateEngine = this.application.getTemplateEngine();\n\n            /*\n             * 写入响应头部信息\n             */\n            response.setContentType(\"text/html;charset=UTF-8\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setDateHeader(\"Expires\", 0);\n\n            /*\n             * 执行控制器，并转向到对应的模板视图\n             */\n            controller.process(request, response, this.servletContext, templateEngine);\n            return true;\n       \t } catch (Exception e) {\n            try {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            } catch (final IOException ignored) {\n            }\n            throw new ServletException(e);\n        }\n    }\t\n}\n\n```\n8. web.xml配置\n```java\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<web-app id=\"gtvg\"\n         version=\"3.1\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">\n\n    <display-name>thymeleafexamples-gtvg</display-name>\n\n    <session-config>\n        <session-timeout>60</session-timeout>\n    </session-config>\n\n    <filter>\n        <filter-name>gtvgfilter</filter-name>\n        <filter-class>filter.MyFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>gtvgfilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    \n</web-app>\n```\n9. 在webapp/WEB-INF目录下面新建templates(模板目录)\n\n<p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。\n\t\n\t>/*1.2、设置模板引擎的默认加载路径*/\n\t templateResolver.setPrefix(\"/WEB-INF/templates/\");\n\n10. 在templates目录下面新建home.html模板文件\n```java\n\t<!DOCTYPE html>\n\t<html xmlns:th=\"http://www.thymeleaf.org\">\n\t  <head>\n\t    <title>Good Thymes Virtual Grocery</title>\n\t    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n\t  </head>\n\t  <body>\n\t    <p>hello <span th:text=\"'Thymeleaf'\">word!</span>.</p>\n\t  </body>\n\t</html>\n```\n<p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中\n\n11. 运行pom.xml编译构建完成后，启动tomcat服务器预览测试\n\n\t![显示页面](http://soujava.com/images/thyemleafshow.png)\n\n<p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!\n\n\n\n<p><code>该demo已经上传至github上面，https://github.com/mapingsheng/theymeleaf\n","slug":"thymeleaf教程1-环境搭建","published":1,"updated":"2018-07-08T09:37:48.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjs004p30tzbypvo541","content":"<p>一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：</p>\n<ol>\n<li>在你的springboot项目工程中添加thymeleaf的依赖配置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile(<span class=\"string\">\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\"</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>编写一个测试页面(html),对thymeleaf进行使用<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"</div><div class=\"line\">     xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\thello thymeleaf!</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用<strong>&lt;th:XX </strong>这样的标签把数据渲染到html模板中了；</html></p>\n</blockquote>\n<p>由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是&lt;th:XX 标签被忽略的效果！</p>\n<p><strong>二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含</strong></p>\n<ol>\n<li>eclipse新建maven工程<br> <img src=\"http://soujava.com/images/newmavenproject.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven1.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven2.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven3.png\" alt=\"\"></li>\n<li><p>在pom.xml配置对Thymeleaf的依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\"> \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\"> \t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"> \t&lt;groupId&gt;com.maps&lt;/groupId&gt;</div><div class=\"line\"> \t&lt;artifactId&gt;theymeleaf&lt;/artifactId&gt;</div><div class=\"line\"> \t&lt;packaging&gt;war&lt;/packaging&gt;</div><div class=\"line\"> \t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class=\"line\"> \t&lt;name&gt;theymeleaf Maven Webapp&lt;/name&gt;</div><div class=\"line\"> \t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class=\"line\"> </div><div class=\"line\">   &lt;repositories&gt;</div><div class=\"line\">   &lt;repository&gt;</div><div class=\"line\">     &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;</div><div class=\"line\">     &lt;name&gt;Sonatype Nexus Snapshots&lt;/name&gt;</div><div class=\"line\">     &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</div><div class=\"line\">     &lt;snapshots&gt;</div><div class=\"line\">       &lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">     &lt;/snapshots&gt;</div><div class=\"line\">   &lt;/repository&gt;</div><div class=\"line\">   &lt;/repositories&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">   &lt;dependencies&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.8.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   </div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.1.0&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;provided&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.2.15&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">     &lt;exclusions&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jdmk&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxtools&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jmx&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxri&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;javax.jms&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jms&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">     &lt;/exclusions&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"> \t&lt;/dependencies&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> \t&lt;build&gt;</div><div class=\"line\">   &lt;resources&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/resources&lt;/directory&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class=\"line\">       &lt;includes&gt;</div><div class=\"line\">         &lt;include&gt;**/*.properties&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.xml&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.html&lt;/include&gt;</div><div class=\"line\">       &lt;/includes&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">   &lt;/resources&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;plugins&gt;</div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;3.2&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;source&gt;1.5&lt;/source&gt;</div><div class=\"line\">         &lt;target&gt;1.5&lt;/target&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">     </div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.7&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2&lt;/version&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">   &lt;/plugins&gt;</div><div class=\"line\"> \t&lt;/build&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>中断一下，先讲解一下该demo的执行流程<br> <img src=\"http://soujava.com/images/thymeleafFollow.png\" alt=\"模板引擎执行流程\"></p>\n</li>\n<li><p>MyApplication–应用装载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> application;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.TemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templatemode.TemplateMode;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.HomeController;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> TemplateEngine templateEngine;</div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> Map&lt;String, Controller&gt; controllersByURL;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyApplication</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletContext servletContext)</span> </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t        <span class=\"comment\">/*1、实例化模板解析器，并配置相关选项*/</span></div><div class=\"line\">\t        ServletContextTemplateResolver templateResolver = <span class=\"keyword\">new</span> ServletContextTemplateResolver(servletContext);</div><div class=\"line\">\t        <span class=\"comment\">/*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/</span> </div><div class=\"line\">\t        templateResolver.setTemplateMode(TemplateMode.HTML);</div><div class=\"line\">\t        <span class=\"comment\">/*1.2、设置模板引擎的默认加载路径*/</span></div><div class=\"line\">\t        templateResolver.setPrefix(<span class=\"string\">\"/WEB-INF/templates/\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.3、设置模板引擎的文件后缀*/</span></div><div class=\"line\">\t        templateResolver.setSuffix(<span class=\"string\">\".html\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/</span></div><div class=\"line\">\t        templateResolver.setCacheTTLMs(Long.valueOf(<span class=\"number\">3600000L</span>));</div><div class=\"line\">\t        <span class=\"comment\">/*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/</span></div><div class=\"line\">\t        templateResolver.setCacheable(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"comment\">/*2、实例化模板引擎*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine = <span class=\"keyword\">new</span> TemplateEngine();</div><div class=\"line\">\t        <span class=\"comment\">/*3、将模板解析器装载到模板引擎中*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine.setTemplateResolver(templateResolver);</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"comment\">/*4、针对不同的url实例化不同的业务控制器*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL = <span class=\"keyword\">new</span> HashMap&lt;String, Controller&gt;();</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL.put(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">new</span> HomeController());</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> Controller <span class=\"title\">resolveControllerForRequest</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">       \t \t<span class=\"keyword\">final</span> String path = getRequestPath(request);</div><div class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.controllersByURL.get(path);</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> ITemplateEngine <span class=\"title\">getTemplateEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.templateEngine;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRequestPath</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t        String requestURI = request.getRequestURI();</div><div class=\"line\">\t        <span class=\"keyword\">final</span> String contextPath = request.getContextPath();</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fragmentIndex = requestURI.indexOf(<span class=\"string\">';'</span>); </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (fragmentIndex != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t            requestURI = requestURI.substring(<span class=\"number\">0</span>, fragmentIndex);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (requestURI.startsWith(contextPath)) &#123;</div><div class=\"line\">\t            <span class=\"keyword\">return</span> requestURI.substring(contextPath.length());</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> requestURI;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Controller–控制器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</span></span></div><div class=\"line\">           HttpServletRequest request, HttpServletResponse response,</div><div class=\"line\">           ServletContext servletContext, ITemplateEngine templateEngine)</div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>HomeController–首页控制器业务类,实现controller接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.context.WebContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span></span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</span></span></div><div class=\"line\">           <span class=\"keyword\">final</span> HttpServletRequest request, <span class=\"keyword\">final</span> HttpServletResponse response,</div><div class=\"line\">           <span class=\"keyword\">final</span> ServletContext servletContext, <span class=\"keyword\">final</span> ITemplateEngine templateEngine)</div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">       </div><div class=\"line\">       WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\">       ctx.setVariable(<span class=\"string\">\"today\"</span>, Calendar.getInstance());<span class=\"comment\">//thymeleaf的上下文中设置变量数据</span></div><div class=\"line\">       </div><div class=\"line\">       templateEngine.process(<span class=\"string\">\"home\"</span>, ctx, response.getWriter());<span class=\"comment\">//模板引擎转向到对应的模板页面</span></div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>MyFilter–过滤器类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> filter;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.Filter;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterChain;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterConfig;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> application.MyApplication;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\">\t<span class=\"keyword\">import</span> entity.User;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> ServletContext servletContext;</div><div class=\"line\">    \t<span class=\"keyword\">private</span> MyApplication application;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t    <span class=\"keyword\">super</span>();</div><div class=\"line\">    \t&#125;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">final</span> FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.servletContext = filterConfig.getServletContext();</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.application = <span class=\"keyword\">new</span> MyApplication(<span class=\"keyword\">this</span>.servletContext);</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response,</span></span></div><div class=\"line\">            <span class=\"keyword\">final</span> FilterChain chain) <span class=\"keyword\">throws</span> IOException, ServletException &#123;</div><div class=\"line\">        </div><div class=\"line\">        \t<span class=\"keyword\">if</span> (!process((HttpServletRequest)request, (HttpServletResponse)response)) &#123;</div><div class=\"line\">            \tchain.doFilter(request, response);</div><div class=\"line\">        \t&#125;</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException &#123;</div><div class=\"line\">        \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            \t<span class=\"comment\">//针对资源请求url进行排除</span></div><div class=\"line\">           \t <span class=\"keyword\">if</span> (request.getRequestURI().startsWith(<span class=\"string\">\"/css\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/images\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/favicon\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">           \t &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 根据URL映射，获得处理该请求的控制器。</div><div class=\"line\">             */</div><div class=\"line\">            Controller controller = <span class=\"keyword\">this</span>.application.resolveControllerForRequest(request);</div><div class=\"line\">            <span class=\"keyword\">if</span> (controller == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 获取TemplateEngine(模板引擎)实例</div><div class=\"line\">             */</div><div class=\"line\">            ITemplateEngine templateEngine = <span class=\"keyword\">this</span>.application.getTemplateEngine();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 写入响应头部信息</div><div class=\"line\">             */</div><div class=\"line\">            response.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * 执行控制器，并转向到对应的模板视图</div><div class=\"line\">             */</div><div class=\"line\">            controller.process(request, response, <span class=\"keyword\">this</span>.servletContext, templateEngine);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       \t &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> IOException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">\t&lt;web-app id=\"gtvg\"</div><div class=\"line\">         version=\"3.1\"</div><div class=\"line\">         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"</div><div class=\"line\">         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;display-name&gt;thymeleafexamples-gtvg&lt;/display-name&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;session-config&gt;</div><div class=\"line\">        &lt;session-timeout&gt;60&lt;/session-timeout&gt;</div><div class=\"line\">    &lt;/session-config&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;filter-class&gt;filter.MyFilter&lt;/filter-class&gt;</div><div class=\"line\">    &lt;/filter&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter-mapping&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class=\"line\">    &lt;/filter-mapping&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在webapp/WEB-INF目录下面新建templates(模板目录)</p>\n</li>\n</ol>\n<p></p><p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。</code></p>\n<pre><code>&gt;/*1.2、设置模板引擎的默认加载路径*/\n templateResolver.setPrefix(&quot;/WEB-INF/templates/&quot;);\n</code></pre><ol>\n<li>在templates目录下面新建home.html模板文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;title&gt;Good Thymes Virtual Grocery&lt;/title&gt;</div><div class=\"line\">    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;p&gt;hello &lt;span th:text=\"'Thymeleaf'\"&gt;word!&lt;/span&gt;.&lt;/p&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p></p><p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中</code></p>\n<ol>\n<li><p>运行pom.xml编译构建完成后，启动tomcat服务器预览测试</p>\n<p><img src=\"http://soujava.com/images/thyemleafshow.png\" alt=\"显示页面\"></p>\n</li>\n</ol>\n<p></p><p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!</code></p>\n<p></p><p><code>该demo已经上传至github上面，<a href=\"https://github.com/mapingsheng/theymeleaf\" target=\"_blank\" rel=\"external\">https://github.com/mapingsheng/theymeleaf</a></code></p>\n","excerpt":"","more":"<p>一、由于springboot这一强大的框架的发布，更由于其采用thymeleaf作为其官方的推荐模板引擎，所以决定学习一下thymeleaf这个模板引擎，当然是通过springboot才了解到的thymeleaf；所以试用也是基于springboot来进行；而springboot采用gradle工具依赖管理，所以要想使用thymeleaf，必须进行如下操作：</p>\n<ol>\n<li>在你的springboot项目工程中添加thymeleaf的依赖配置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile(<span class=\"string\">\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE\"</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>编写一个测试页面(html),对thymeleaf进行使用<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"</div><div class=\"line\">     xmlns:layout=\"http://www.ultraq.net.nz/web/thymeleaf/layout\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\thello thymeleaf!</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>我们可以看到这就是一个普普通通的html模板页面，唯一不同的地方就是在<html>标签中添加了一些配置；这就是thymeleaf的标签；这里配置完以后，在下面我们就可以用<strong>&lt;th:XX </strong>这样的标签把数据渲染到html模板中了；</p>\n</blockquote>\n<p>由于该html是模板页面，所以我们不能在浏览器中直接打开浏览thymeleaf渲染数据的效果，需要借助于类似tomcat的web服务器浏览才行！如果仍然直接在浏览器中浏览的话，那么我们看到的效果是&lt;th:XX 标签被忽略的效果！</p>\n<p><strong>二、暂且抛弃springboot，仅仅采用原生态的方式试用thymeleaf，即除了thymeleaf，其它都不包含</strong></p>\n<ol>\n<li>eclipse新建maven工程<br> <img src=\"http://soujava.com/images/newmavenproject.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven1.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven2.png\" alt=\"\"><br> <img src=\"http://soujava.com/images/newmaven3.png\" alt=\"\"></li>\n<li><p>在pom.xml配置对Thymeleaf的依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\"> \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\"> \t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"> \t&lt;groupId&gt;com.maps&lt;/groupId&gt;</div><div class=\"line\"> \t&lt;artifactId&gt;theymeleaf&lt;/artifactId&gt;</div><div class=\"line\"> \t&lt;packaging&gt;war&lt;/packaging&gt;</div><div class=\"line\"> \t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class=\"line\"> \t&lt;name&gt;theymeleaf Maven Webapp&lt;/name&gt;</div><div class=\"line\"> \t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class=\"line\"> </div><div class=\"line\">   &lt;repositories&gt;</div><div class=\"line\">   &lt;repository&gt;</div><div class=\"line\">     &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;</div><div class=\"line\">     &lt;name&gt;Sonatype Nexus Snapshots&lt;/name&gt;</div><div class=\"line\">     &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</div><div class=\"line\">     &lt;snapshots&gt;</div><div class=\"line\">       &lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">     &lt;/snapshots&gt;</div><div class=\"line\">   &lt;/repository&gt;</div><div class=\"line\">   &lt;/repositories&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">   &lt;dependencies&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.8.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   </div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;3.1.0&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;provided&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.6.1&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.2.15&lt;/version&gt;</div><div class=\"line\">     &lt;scope&gt;compile&lt;/scope&gt;</div><div class=\"line\">     &lt;exclusions&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jdmk&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxtools&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;com.sun.jmx&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jmxri&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">       &lt;exclusion&gt;</div><div class=\"line\">         &lt;groupId&gt;javax.jms&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;jms&lt;/artifactId&gt;</div><div class=\"line\">       &lt;/exclusion&gt;</div><div class=\"line\">     &lt;/exclusions&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\"> \t&lt;/dependencies&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> \t&lt;build&gt;</div><div class=\"line\">   &lt;resources&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/resources&lt;/directory&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">     &lt;resource&gt;</div><div class=\"line\">       &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class=\"line\">       &lt;includes&gt;</div><div class=\"line\">         &lt;include&gt;**/*.properties&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.xml&lt;/include&gt;</div><div class=\"line\">         &lt;include&gt;**/*.html&lt;/include&gt;</div><div class=\"line\">       &lt;/includes&gt;</div><div class=\"line\">     &lt;/resource&gt;</div><div class=\"line\">   &lt;/resources&gt;</div><div class=\"line\">       </div><div class=\"line\">   &lt;plugins&gt;</div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;3.2&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;source&gt;1.5&lt;/source&gt;</div><div class=\"line\">         &lt;target&gt;1.5&lt;/target&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">     </div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.7&lt;/version&gt;</div><div class=\"line\">       &lt;configuration&gt;</div><div class=\"line\">         &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;</div><div class=\"line\">       &lt;/configuration&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;plugin&gt;</div><div class=\"line\">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2&lt;/version&gt;</div><div class=\"line\">     &lt;/plugin&gt;</div><div class=\"line\">   &lt;/plugins&gt;</div><div class=\"line\"> \t&lt;/build&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>中断一下，先讲解一下该demo的执行流程<br> <img src=\"http://soujava.com/images/thymeleafFollow.png\" alt=\"模板引擎执行流程\"></p>\n</li>\n<li><p>MyApplication–应用装载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> application;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\">\t<span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.TemplateEngine;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templatemode.TemplateMode;</div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.HomeController;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> TemplateEngine templateEngine;</div><div class=\"line\">   \t \t<span class=\"keyword\">private</span> Map&lt;String, Controller&gt; controllersByURL;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyApplication</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletContext servletContext)</span> </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t        <span class=\"comment\">/*1、实例化模板解析器，并配置相关选项*/</span></div><div class=\"line\">\t        ServletContextTemplateResolver templateResolver = <span class=\"keyword\">new</span> ServletContextTemplateResolver(servletContext);</div><div class=\"line\">\t        <span class=\"comment\">/*1.1、其实thymeleaf模板引擎的默认模式是HTML，在这里再次设置只是为了更好理解*/</span> </div><div class=\"line\">\t        templateResolver.setTemplateMode(TemplateMode.HTML);</div><div class=\"line\">\t        <span class=\"comment\">/*1.2、设置模板引擎的默认加载路径*/</span></div><div class=\"line\">\t        templateResolver.setPrefix(<span class=\"string\">\"/WEB-INF/templates/\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.3、设置模板引擎的文件后缀*/</span></div><div class=\"line\">\t        templateResolver.setSuffix(<span class=\"string\">\".html\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">/*1.4、设置模板缓存时间为1小时，如果不设置，模板将一直在缓存中*/</span></div><div class=\"line\">\t        templateResolver.setCacheTTLMs(Long.valueOf(<span class=\"number\">3600000L</span>));</div><div class=\"line\">\t        <span class=\"comment\">/*1.5、模板引擎的默认缓存是开启的，这里设置true是为了更好理解； 其实如果这里设置false的话，当你修改模板后，你就可以在浏览器中实时查看到修改后的模板内容*/</span></div><div class=\"line\">\t        templateResolver.setCacheable(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"comment\">/*2、实例化模板引擎*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine = <span class=\"keyword\">new</span> TemplateEngine();</div><div class=\"line\">\t        <span class=\"comment\">/*3、将模板解析器装载到模板引擎中*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.templateEngine.setTemplateResolver(templateResolver);</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"comment\">/*4、针对不同的url实例化不同的业务控制器*/</span></div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL = <span class=\"keyword\">new</span> HashMap&lt;String, Controller&gt;();</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.controllersByURL.put(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">new</span> HomeController());</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> Controller <span class=\"title\">resolveControllerForRequest</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">       \t \t<span class=\"keyword\">final</span> String path = getRequestPath(request);</div><div class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.controllersByURL.get(path);</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> ITemplateEngine <span class=\"title\">getTemplateEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.templateEngine;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRequestPath</span><span class=\"params\">(<span class=\"keyword\">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t        String requestURI = request.getRequestURI();</div><div class=\"line\">\t        <span class=\"keyword\">final</span> String contextPath = request.getContextPath();</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fragmentIndex = requestURI.indexOf(<span class=\"string\">';'</span>); </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (fragmentIndex != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t            requestURI = requestURI.substring(<span class=\"number\">0</span>, fragmentIndex);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        </div><div class=\"line\">\t        <span class=\"keyword\">if</span> (requestURI.startsWith(contextPath)) &#123;</div><div class=\"line\">\t            <span class=\"keyword\">return</span> requestURI.substring(contextPath.length());</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">return</span> requestURI;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Controller–控制器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</div><div class=\"line\">           HttpServletRequest request, HttpServletResponse response,</div><div class=\"line\">           ServletContext servletContext, ITemplateEngine templateEngine)</span></div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>HomeController–首页控制器业务类,实现controller接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"><span class=\"keyword\">import</span> org.thymeleaf.context.WebContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span></span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(</div><div class=\"line\">           <span class=\"keyword\">final</span> HttpServletRequest request, <span class=\"keyword\">final</span> HttpServletResponse response,</div><div class=\"line\">           <span class=\"keyword\">final</span> ServletContext servletContext, <span class=\"keyword\">final</span> ITemplateEngine templateEngine)</span></div><div class=\"line\">           <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">       WebContext ctx = <span class=\"keyword\">new</span> WebContext(request, response, servletContext, request.getLocale());</div><div class=\"line\">       ctx.setVariable(<span class=\"string\">\"today\"</span>, Calendar.getInstance());<span class=\"comment\">//thymeleaf的上下文中设置变量数据</span></div><div class=\"line\">       </div><div class=\"line\">       templateEngine.process(<span class=\"string\">\"home\"</span>, ctx, response.getWriter());<span class=\"comment\">//模板引擎转向到对应的模板页面</span></div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>MyFilter–过滤器类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">package</span> filter;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.Filter;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterChain;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.FilterConfig;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletContext;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\">\t<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> org.thymeleaf.ITemplateEngine;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">import</span> application.MyApplication;</div><div class=\"line\">\t<span class=\"keyword\">import</span> controller.Controller;</div><div class=\"line\">\t<span class=\"keyword\">import</span> entity.User;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> ServletContext servletContext;</div><div class=\"line\">    \t<span class=\"keyword\">private</span> MyApplication application;</div><div class=\"line\">    </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t    <span class=\"keyword\">super</span>();</div><div class=\"line\">    \t&#125;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">final</span> FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.servletContext = filterConfig.getServletContext();</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.application = <span class=\"keyword\">new</span> MyApplication(<span class=\"keyword\">this</span>.servletContext);</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response,</div><div class=\"line\">            <span class=\"keyword\">final</span> FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        \t<span class=\"keyword\">if</span> (!process((HttpServletRequest)request, (HttpServletResponse)response)) &#123;</div><div class=\"line\">            \tchain.doFilter(request, response);</div><div class=\"line\">        \t&#125;</div><div class=\"line\">    \t&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            \t<span class=\"comment\">//针对资源请求url进行排除</span></div><div class=\"line\">           \t <span class=\"keyword\">if</span> (request.getRequestURI().startsWith(<span class=\"string\">\"/css\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/images\"</span>) ||</div><div class=\"line\">                    request.getRequestURI().startsWith(<span class=\"string\">\"/favicon\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">           \t &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 根据URL映射，获得处理该请求的控制器。</div><div class=\"line\">             */</span></div><div class=\"line\">            Controller controller = <span class=\"keyword\">this</span>.application.resolveControllerForRequest(request);</div><div class=\"line\">            <span class=\"keyword\">if</span> (controller == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 获取TemplateEngine(模板引擎)实例</div><div class=\"line\">             */</span></div><div class=\"line\">            ITemplateEngine templateEngine = <span class=\"keyword\">this</span>.application.getTemplateEngine();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 写入响应头部信息</div><div class=\"line\">             */</span></div><div class=\"line\">            response.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">            response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * 执行控制器，并转向到对应的模板视图</div><div class=\"line\">             */</span></div><div class=\"line\">            controller.process(request, response, <span class=\"keyword\">this</span>.servletContext, templateEngine);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       \t &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> IOException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">\t&lt;web-app id=\"gtvg\"</div><div class=\"line\">         version=\"3.1\"</div><div class=\"line\">         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"</div><div class=\"line\">         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;display-name&gt;thymeleafexamples-gtvg&lt;/display-name&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;session-config&gt;</div><div class=\"line\">        &lt;session-timeout&gt;60&lt;/session-timeout&gt;</div><div class=\"line\">    &lt;/session-config&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;filter-class&gt;filter.MyFilter&lt;/filter-class&gt;</div><div class=\"line\">    &lt;/filter&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;filter-mapping&gt;</div><div class=\"line\">        &lt;filter-name&gt;gtvgfilter&lt;/filter-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class=\"line\">    &lt;/filter-mapping&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在webapp/WEB-INF目录下面新建templates(模板目录)</p>\n</li>\n</ol>\n<p><p><code>因为在MyApplication应用装载器中，我们在初始化模板引擎解析器时，设置了模板的目录选项。</p>\n<pre><code>&gt;/*1.2、设置模板引擎的默认加载路径*/\n templateResolver.setPrefix(&quot;/WEB-INF/templates/&quot;);\n</code></pre><ol>\n<li>在templates目录下面新建home.html模板文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;title&gt;Good Thymes Virtual Grocery&lt;/title&gt;</div><div class=\"line\">    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;p&gt;hello &lt;span th:text=\"'Thymeleaf'\"&gt;word!&lt;/span&gt;.&lt;/p&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><p><code>在该模板页面中，我们可以看到使用了 th:text标签显示内容到p标签中</p>\n<ol>\n<li><p>运行pom.xml编译构建完成后，启动tomcat服务器预览测试</p>\n<p><img src=\"http://soujava.com/images/thyemleafshow.png\" alt=\"显示页面\"></p>\n</li>\n</ol>\n<p><p><code>根据浏览效果我们可以看到th:text中的内容替换了p标签原有的内容word!</p>\n<p><p><code>该demo已经上传至github上面，<a href=\"https://github.com/mapingsheng/theymeleaf\">https://github.com/mapingsheng/theymeleaf</a></p>\n"},{"title":"thymeleaf教程3--with定义变量使用","date":"2016-09-28T08:11:44.000Z","_content":"在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。\n\n<!--more-->\n\n### th:with用法\n\n1、用来定义局部变量，用法如下：\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。\n\n通过上面的例子可以看出来用法规则为--th:with=\"key=value\"这种格式定义局部变量\n\n2、用来定义多个局部变量，用法如下：\n\n```java\n\t<div th:with=\"name=zhangsan,age=25\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。\n\n\n### th:with范围\n\n1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p id=\"inner\">hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n\t<p id=\"outer\">hello <span th:text=\"${name}\"></span>.</p>  \n```\n\n上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量\n\nname的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围\n\n### th:with定义对象\n\n我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，\n\n```java\n\t<div th:with=\"user=${userList[0]}\">  \n    \t<p>The name of the first person is <span th:text=\"${user.userName}\">Julius Caesar</span>.</p>  \n\t</div>  \n```\n\n我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。\n\n\n### th:with定义的变量在js中如何使用\n\n```java\n\t<head th:with=\"name=zhangsan\"> \n\t\t<script type=\"text/javascript\" th:inline=\"javascript\">\n\t\t\tvar name = [[${columnListJson}]];\n\t\t</script>\n\n\t</head>\n\t\n```\n上面的例子中有三个地方需要注意：\n\n1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题\n\n2、如果在js中使用那么需要在<script>标签中添加 th:inline=\"javascript\"\n\n3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用\n\n\n\n\n\n\n","source":"_posts/thymeleaf教程3-with定义变量使用.md","raw":"---\ntitle: thymeleaf教程3--with定义变量使用\ndate: 2016-09-28 16:11:44\ncategories: thymeleaf\ntags: thymeleaf\n---\n在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。\n\n<!--more-->\n\n### th:with用法\n\n1、用来定义局部变量，用法如下：\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。\n\n通过上面的例子可以看出来用法规则为--th:with=\"key=value\"这种格式定义局部变量\n\n2、用来定义多个局部变量，用法如下：\n\n```java\n\t<div th:with=\"name=zhangsan,age=25\">  \n    \t<p>hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n```\n\n上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。\n\n\n### th:with范围\n\n1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用\n```java\n\t<div th:with=\"name=zhangsan\">  \n    \t<p id=\"inner\">hello <span th:text=\"${name}\"></span>.</p>  \n\t</div> \n\t<p id=\"outer\">hello <span th:text=\"${name}\"></span>.</p>  \n```\n\n上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量\n\nname的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围\n\n### th:with定义对象\n\n我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，\n\n```java\n\t<div th:with=\"user=${userList[0]}\">  \n    \t<p>The name of the first person is <span th:text=\"${user.userName}\">Julius Caesar</span>.</p>  \n\t</div>  \n```\n\n我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。\n\n\n### th:with定义的变量在js中如何使用\n\n```java\n\t<head th:with=\"name=zhangsan\"> \n\t\t<script type=\"text/javascript\" th:inline=\"javascript\">\n\t\t\tvar name = [[${columnListJson}]];\n\t\t</script>\n\n\t</head>\n\t\n```\n上面的例子中有三个地方需要注意：\n\n1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题\n\n2、如果在js中使用那么需要在<script>标签中添加 th:inline=\"javascript\"\n\n3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用\n\n\n\n\n\n\n","slug":"thymeleaf教程3-with定义变量使用","published":1,"updated":"2018-07-08T09:37:48.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjt004t30tz9pzoahv6","content":"<p>在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。</p>\n<a id=\"more\"></a>\n<h3 id=\"th-with用法\"><a href=\"#th-with用法\" class=\"headerlink\" title=\"th:with用法\"></a>th:with用法</h3><p>1、用来定义局部变量，用法如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。</p>\n<p>通过上面的例子可以看出来用法规则为–th:with=”key=value”这种格式定义局部变量</p>\n<p>2、用来定义多个局部变量，用法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan,age=25\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。</p>\n<h3 id=\"th-with范围\"><a href=\"#th-with范围\" class=\"headerlink\" title=\"th:with范围\"></a>th:with范围</h3><p>1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p id=\"inner\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt; </div><div class=\"line\">&lt;p id=\"outer\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量</p>\n<p>name的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围</p>\n<h3 id=\"th-with定义对象\"><a href=\"#th-with定义对象\" class=\"headerlink\" title=\"th:with定义对象\"></a>th:with定义对象</h3><p>我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"user=$&#123;userList[0]&#125;\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;The name of the first person is &lt;span th:text=\"$&#123;user.userName&#125;\"&gt;Julius Caesar&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。</p>\n<h3 id=\"th-with定义的变量在js中如何使用\"><a href=\"#th-with定义的变量在js中如何使用\" class=\"headerlink\" title=\"th:with定义的变量在js中如何使用\"></a>th:with定义的变量在js中如何使用</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head th:with=\"name=zhangsan\"&gt; </div><div class=\"line\">\t&lt;script type=\"text/javascript\" th:inline=\"javascript\"&gt;</div><div class=\"line\">\t\tvar name = [[$&#123;columnListJson&#125;]];</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子中有三个地方需要注意：</p>\n<p>1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题</p>\n<p>2、如果在js中使用那么需要在<script>标签中添加 th:inline=”javascript”</p>\n<p>3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用</p>\n</script></p>","excerpt":"<p>在使用thymeleaf渲染数据的时候，我们经常会用到basepath变量（访问地址前缀），一般我们在jsp中直接request对象获取拼接而成，但是在thymeleaf中如何使用呢，可以通过th:with定义并使用。</p>","more":"<h3 id=\"th-with用法\"><a href=\"#th-with用法\" class=\"headerlink\" title=\"th:with用法\"></a>th:with用法</h3><p>1、用来定义局部变量，用法如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子定义了一个变量name，值为zhangsan，然后我们在p标签中输出定义的变量。</p>\n<p>通过上面的例子可以看出来用法规则为–th:with=”key=value”这种格式定义局部变量</p>\n<p>2、用来定义多个局部变量，用法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan,age=25\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子定义了第一个变量name，值为zhangsan;第二个变量age，值为25。</p>\n<h3 id=\"th-with范围\"><a href=\"#th-with范围\" class=\"headerlink\" title=\"th:with范围\"></a>th:with范围</h3><p>1、我们在定义变量的时候其实是存在范围限制的，我们定义的变量，只能在我们所定义的标签内部使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"name=zhangsan\"&gt;  </div><div class=\"line\">   \t&lt;p id=\"inner\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt; </div><div class=\"line\">&lt;p id=\"outer\"&gt;hello &lt;span th:text=\"$&#123;name&#125;\"&gt;&lt;/span&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的例子中我们在div标签中定义了一个name变量，然后分别在div标签内部和外部的p标签上面进行使用，其实在id为outer的p标签上面是不能取到变量</p>\n<p>name的值的。因为我们定义的变量name是在div标签上面的，所以只能在div标签内部进行使用。这就是范围</p>\n<h3 id=\"th-with定义对象\"><a href=\"#th-with定义对象\" class=\"headerlink\" title=\"th:with定义对象\"></a>th:with定义对象</h3><p>我们前面仅仅使用th:with定义简单的变量，其实也可以用来定义对象，比如我们通过后台返回的数据封装VO对象，我们就可以在这里定义，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div th:with=\"user=$&#123;userList[0]&#125;\"&gt;  </div><div class=\"line\">   \t&lt;p&gt;The name of the first person is &lt;span th:text=\"$&#123;user.userName&#125;\"&gt;Julius Caesar&lt;/span&gt;.&lt;/p&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>我们定义变量user为list中的一个索引对象，然后我们就可以使用变量中的属性了。</p>\n<h3 id=\"th-with定义的变量在js中如何使用\"><a href=\"#th-with定义的变量在js中如何使用\" class=\"headerlink\" title=\"th:with定义的变量在js中如何使用\"></a>th:with定义的变量在js中如何使用</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head th:with=\"name=zhangsan\"&gt; </div><div class=\"line\">\t&lt;script type=\"text/javascript\" th:inline=\"javascript\"&gt;</div><div class=\"line\">\t\tvar name = [[$&#123;columnListJson&#125;]];</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>上面的例子中有三个地方需要注意：</p>\n<p>1、如果在js中需要使用变量，那么就要考虑前面提到的使用范围问题</p>\n<p>2、如果在js中使用那么需要在<script>标签中添加 th:inline=”javascript”</p>\n<p>3、在js标签中获取变量时，需要采用[[$变量名称]]的方式获取使用</p>"},{"title":"使用spring的RestTemplate调用REST接口","date":"2017-12-18T10:18:39.000Z","_content":"\n开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；具体使用如下：\n\n\n一、RestTemplate源码中的常用API\n\n```java\n\n\t// GET\n\n\t@Override\n\tpublic <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T getForObject(String url, Class<T> responseType, Map<String, ?> urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... urlVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> urlVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException {}\n\n>\n\n\t// POST\n\n\t@Override\n\tpublic <T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> T postForObject(URI url, Object request, Class<T> responseType) throws RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> postForEntity(URI url, Object request, Class<T> responseType) throws RestClientException {}\n\n>\n\n\t// PUT\n\n\t@Override\n\tpublic void put(String url, Object request, Object... urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic void put(String url, Object request, Map<String, ?> urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic void put(URI url, Object request) throws RestClientException {}\n\n>\n\n\t// DELETE\n\n\t@Override\n\tpublic void delete(String url, Object... urlVariables) throws RestClientException {\n\t\texecute(url, HttpMethod.DELETE, null, null, urlVariables);\n\t}\n\n\t@Override\n\tpublic void delete(String url, Map<String, ?> urlVariables) throws RestClientException {\n\t\texecute(url, HttpMethod.DELETE, null, null, urlVariables);\n\t}\n\n\t@Override\n\tpublic void delete(URI url) throws RestClientException {\n\n>\n\n\t// general execution\n\n\t@Override\n\tpublic <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor, Object... urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor) throws RestClientException {}\n\n>\n\n\t/**\n     * 以上所有的get、post等等方法底层都是调用的该方法执行的rest接口请求\n     */\n\tprotected <T> T doExecute(URI url, HttpMethod method, \n\t\tRequestCallback requestCallback,ResponseExtractor<T> responseExtractor) throws RestClientException {}\n\n```\n\n>其实针对上面的GET*、POST*、DELETE*等等rest接口请求方法中，整个调用底层都是调用的doExecute()方法\n\n![Alt text](http://soujava.com/images/restTemplate.png)\n\n\n二、**RestTemplate调用接口示例**\n\n>1.GET-直接实例化RestTemplate对象并采用GET方法调用对应的rest接口，并返回对应的响应值字符串\n\n```java\n\n\tRestTemplate restClient = new RestTemplate();\n\tString url = \"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\";\n\tString result = restClient.getForObject(new URI(url), String.class);\n\n```\n\n>2.GET-调用对应的REST接口，并用响应结果对象示例接收封装对应的结果集\n\n```java\n\t\n\t/**\n     * rest接口响应值的数据封装类\n     */\n\tclass ResponseResult{\n\t\tpublic ResponseResult(){}\n\t\t\n\t\tprivate boolean rlt;\n\t\tprivate String msg;\n\t\tprivate String code;\n\t\tprivate String time;\n\t\tprivate String data;\n\t\t\n\t\t//get、set方法省略\n\t}\n\n```\n\n\n```java\n\n\t/**\n     * 设置数据传递的超时时间、建立连接的超时时间\n     */\n    SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();\n\trequestFactory.setReadTimeout(READTIMEOUT);\n    requestFactory.setConnectTimeout(CONNECTTIMEOUT);\n\t\n\t/**\n     * 实例化一个RestTemplate对象\n     */\n\tRestTemplate restClient = new RestTemplate();\n\trestClient.setRequestFactory(requestFactory);\n\n\t/**\n     * 用ResponseResult对象封装响应结果\n     */\n\tString url = \"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\";\n\tResponseResult result = restClient.getForObject(new URI(url), ResponseResult.class);\n\tSystem.out.println(result.getMsg());\n\n```\n\n>3.GET-调用对应的REST接口，在rest接口PATH路径中传递参数\n\n```java\n\t\n\t/**\n     * 请求参数在对应的请求path地址中\n     */\n\tString URI = \"http://localhost:8080/user/info/{id}/v5.6.5\";\n    RestTemplate restTemplate = new RestTemplate();\n    ResponseResult result = restTemplate.getForObject(URI, ResponseResult.class, \"3f62fca0123\");//把请求接口中的{id}参数值放入最后一个入参中，最后一个参数是一个可变长(数组)类型的入参\n\tSystem.out.println(result.getMsg());\n\n```\n\n>4.POST-调用对应的REST接口，设置header参数\n\n```java\n\t\n\t/**\n     * 设置header入参对象\n     */\n\tHttpHeaders headers = new HttpHeaders();\n    headers.set(\"area\", \"010\");\n    headers.set(\"token\", \"71aee1b842cc49f69d26b4bd980c9b8d\"); \n\theaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); \n\t\n\t/**\n     * 把对应的header对象通过HttpEntity进行封装处理\n     */\n\tRestTemplate restClient = new RestTemplate();\n\tHttpEntity<String> httpEntity = new HttpEntity<String>(headers);\n\t\n\tString postUrl = \"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\";\n\tResponseEntity<ResponseResult> result = restClient.postForEntity(postUrl, httpEntity, ResponseResult.class);\n\n\tSystem.out.println(result.getBody().getMsg());\n\n```\n\n>5.POST-调用rest接口时，传递json参数\n\n*因为一般rest接口都是提供给其他系统调用的，如果一个rest接口的入参数量很多的时候，往往调用比较麻烦，并且容易出错；并且接口提供方一般在对应的rest接口入参中使用对象传参，方便后期接口扩展；所以针对接口调用方来讲，只需要按照入参的对象的属性名称封装一个json格式的数据串即可成功调用，这样一来兼容性会比较好*\n\n```java\n\t\n\t/**\n     * 设置header入参对象\n     */\n\tHttpHeaders headers = new HttpHeaders();\n    headers.set(\"token\", \"71aee1b842cc49f69d26b4bd980c9b8d\"); \n\theaders.setContentType(MediaType.APPLICATION_JSON);\n\t\n\tString postUrl = \"http://localhost:8080/user/add/v5.6.5\";\t\n\tString requestJson = \"{\\\"name\\\":\\\"张三\\\",\\\"age\\\":25}\";//这里可以用JSONObject处理json格式的入参，避免拼接字符串\n\t\n\t/**\n     * 把请求入参和对应的header入参封装到HttpEntity对象中\n     */\n\tHttpEntity<String> httpEntity = new HttpEntity<String>(requestJson,headers);\n\t\n\t/**\n     * 请求对应的rest接口添加用户操作\n     */\n\tRestTemplate restClient = new RestTemplate();\n\tString result = restClient.postForObject(postUrl, httpEntity, String.class);\n\n```\n\n","source":"_posts/使用spring的RestTemplate调用REST接口.md","raw":"---\ntitle: 使用spring的RestTemplate调用REST接口\ndate: 2017-12-18 18:18:39\ncategories: spring\ntags: spring\n---\n\n开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；具体使用如下：\n\n\n一、RestTemplate源码中的常用API\n\n```java\n\n\t// GET\n\n\t@Override\n\tpublic <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T getForObject(String url, Class<T> responseType, Map<String, ?> urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... urlVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> urlVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException {}\n\n>\n\n\t// POST\n\n\t@Override\n\tpublic <T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> T postForObject(URI url, Object request, Class<T> responseType) throws RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException {}\n\n\t@Override\n\tpublic <T> ResponseEntity<T> postForEntity(URI url, Object request, Class<T> responseType) throws RestClientException {}\n\n>\n\n\t// PUT\n\n\t@Override\n\tpublic void put(String url, Object request, Object... urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic void put(String url, Object request, Map<String, ?> urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic void put(URI url, Object request) throws RestClientException {}\n\n>\n\n\t// DELETE\n\n\t@Override\n\tpublic void delete(String url, Object... urlVariables) throws RestClientException {\n\t\texecute(url, HttpMethod.DELETE, null, null, urlVariables);\n\t}\n\n\t@Override\n\tpublic void delete(String url, Map<String, ?> urlVariables) throws RestClientException {\n\t\texecute(url, HttpMethod.DELETE, null, null, urlVariables);\n\t}\n\n\t@Override\n\tpublic void delete(URI url) throws RestClientException {\n\n>\n\n\t// general execution\n\n\t@Override\n\tpublic <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor, Object... urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) throws RestClientException {}\n\n\t@Override\n\tpublic <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor) throws RestClientException {}\n\n>\n\n\t/**\n     * 以上所有的get、post等等方法底层都是调用的该方法执行的rest接口请求\n     */\n\tprotected <T> T doExecute(URI url, HttpMethod method, \n\t\tRequestCallback requestCallback,ResponseExtractor<T> responseExtractor) throws RestClientException {}\n\n```\n\n>其实针对上面的GET*、POST*、DELETE*等等rest接口请求方法中，整个调用底层都是调用的doExecute()方法\n\n![Alt text](http://soujava.com/images/restTemplate.png)\n\n\n二、**RestTemplate调用接口示例**\n\n>1.GET-直接实例化RestTemplate对象并采用GET方法调用对应的rest接口，并返回对应的响应值字符串\n\n```java\n\n\tRestTemplate restClient = new RestTemplate();\n\tString url = \"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\";\n\tString result = restClient.getForObject(new URI(url), String.class);\n\n```\n\n>2.GET-调用对应的REST接口，并用响应结果对象示例接收封装对应的结果集\n\n```java\n\t\n\t/**\n     * rest接口响应值的数据封装类\n     */\n\tclass ResponseResult{\n\t\tpublic ResponseResult(){}\n\t\t\n\t\tprivate boolean rlt;\n\t\tprivate String msg;\n\t\tprivate String code;\n\t\tprivate String time;\n\t\tprivate String data;\n\t\t\n\t\t//get、set方法省略\n\t}\n\n```\n\n\n```java\n\n\t/**\n     * 设置数据传递的超时时间、建立连接的超时时间\n     */\n    SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();\n\trequestFactory.setReadTimeout(READTIMEOUT);\n    requestFactory.setConnectTimeout(CONNECTTIMEOUT);\n\t\n\t/**\n     * 实例化一个RestTemplate对象\n     */\n\tRestTemplate restClient = new RestTemplate();\n\trestClient.setRequestFactory(requestFactory);\n\n\t/**\n     * 用ResponseResult对象封装响应结果\n     */\n\tString url = \"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\";\n\tResponseResult result = restClient.getForObject(new URI(url), ResponseResult.class);\n\tSystem.out.println(result.getMsg());\n\n```\n\n>3.GET-调用对应的REST接口，在rest接口PATH路径中传递参数\n\n```java\n\t\n\t/**\n     * 请求参数在对应的请求path地址中\n     */\n\tString URI = \"http://localhost:8080/user/info/{id}/v5.6.5\";\n    RestTemplate restTemplate = new RestTemplate();\n    ResponseResult result = restTemplate.getForObject(URI, ResponseResult.class, \"3f62fca0123\");//把请求接口中的{id}参数值放入最后一个入参中，最后一个参数是一个可变长(数组)类型的入参\n\tSystem.out.println(result.getMsg());\n\n```\n\n>4.POST-调用对应的REST接口，设置header参数\n\n```java\n\t\n\t/**\n     * 设置header入参对象\n     */\n\tHttpHeaders headers = new HttpHeaders();\n    headers.set(\"area\", \"010\");\n    headers.set(\"token\", \"71aee1b842cc49f69d26b4bd980c9b8d\"); \n\theaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); \n\t\n\t/**\n     * 把对应的header对象通过HttpEntity进行封装处理\n     */\n\tRestTemplate restClient = new RestTemplate();\n\tHttpEntity<String> httpEntity = new HttpEntity<String>(headers);\n\t\n\tString postUrl = \"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\";\n\tResponseEntity<ResponseResult> result = restClient.postForEntity(postUrl, httpEntity, ResponseResult.class);\n\n\tSystem.out.println(result.getBody().getMsg());\n\n```\n\n>5.POST-调用rest接口时，传递json参数\n\n*因为一般rest接口都是提供给其他系统调用的，如果一个rest接口的入参数量很多的时候，往往调用比较麻烦，并且容易出错；并且接口提供方一般在对应的rest接口入参中使用对象传参，方便后期接口扩展；所以针对接口调用方来讲，只需要按照入参的对象的属性名称封装一个json格式的数据串即可成功调用，这样一来兼容性会比较好*\n\n```java\n\t\n\t/**\n     * 设置header入参对象\n     */\n\tHttpHeaders headers = new HttpHeaders();\n    headers.set(\"token\", \"71aee1b842cc49f69d26b4bd980c9b8d\"); \n\theaders.setContentType(MediaType.APPLICATION_JSON);\n\t\n\tString postUrl = \"http://localhost:8080/user/add/v5.6.5\";\t\n\tString requestJson = \"{\\\"name\\\":\\\"张三\\\",\\\"age\\\":25}\";//这里可以用JSONObject处理json格式的入参，避免拼接字符串\n\t\n\t/**\n     * 把请求入参和对应的header入参封装到HttpEntity对象中\n     */\n\tHttpEntity<String> httpEntity = new HttpEntity<String>(requestJson,headers);\n\t\n\t/**\n     * 请求对应的rest接口添加用户操作\n     */\n\tRestTemplate restClient = new RestTemplate();\n\tString result = restClient.postForObject(postUrl, httpEntity, String.class);\n\n```\n\n","slug":"使用spring的RestTemplate调用REST接口","published":1,"updated":"2018-07-08T09:37:48.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pju004w30tzfma3p0gt","content":"<p>开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；具体使用如下：</p>\n<p>一、RestTemplate源码中的常用API</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// GET</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... urlVariables)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; urlVariables)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// POST</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(URI url, Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(URI url, Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// PUT</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String url, Object request, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String url, Object request, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(URI url, Object request)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// DELETE</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String url, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</div><div class=\"line\">\t\texecute(url, HttpMethod.DELETE, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, urlVariables);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String url, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</div><div class=\"line\">\t\texecute(url, HttpMethod.DELETE, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, urlVariables);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(URI url)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// general execution</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(String url, HttpMethod method, RequestCallback requestCallback,</span></span></div><div class=\"line\">\t\t\tResponseExtractor&lt;T&gt; responseExtractor, Object... urlVariables) <span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(String url, HttpMethod method, RequestCallback requestCallback,</span></span></div><div class=\"line\">\t\t\tResponseExtractor&lt;T&gt; responseExtractor, Map&lt;String, ?&gt; urlVariables) <span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(URI url, HttpMethod method, RequestCallback requestCallback,</span></span></div><div class=\"line\">\t\t\tResponseExtractor&lt;T&gt; responseExtractor) <span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">     * 以上所有的get、post等等方法底层都是调用的该方法执行的rest接口请求</div><div class=\"line\">     */</div><div class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doExecute</span><span class=\"params\">(URI url, HttpMethod method, </span></span></div><div class=\"line\">\t\tRequestCallback requestCallback,ResponseExtractor&lt;T&gt; responseExtractor) <span class=\"keyword\">throws</span> RestClientException &#123;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其实针对上面的GET<em>、POST</em>、DELETE*等等rest接口请求方法中，整个调用底层都是调用的doExecute()方法</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/restTemplate.png\" alt=\"Alt text\"></p>\n<p>二、<strong>RestTemplate调用接口示例</strong></p>\n<blockquote>\n<p>1.GET-直接实例化RestTemplate对象并采用GET方法调用对应的rest接口，并返回对应的响应值字符串</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">String url = <span class=\"string\">\"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\"</span>;</div><div class=\"line\">String result = restClient.getForObject(<span class=\"keyword\">new</span> URI(url), String.class);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.GET-调用对应的REST接口，并用响应结果对象示例接收封装对应的结果集</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * rest接口响应值的数据封装类</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseResult</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResponseResult</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> rlt;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String code;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String time;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String data;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//get、set方法省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 设置数据传递的超时时间、建立连接的超时时间</div><div class=\"line\">    */</div><div class=\"line\">   SimpleClientHttpRequestFactory requestFactory = <span class=\"keyword\">new</span> SimpleClientHttpRequestFactory();</div><div class=\"line\">requestFactory.setReadTimeout(READTIMEOUT);</div><div class=\"line\">   requestFactory.setConnectTimeout(CONNECTTIMEOUT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 实例化一个RestTemplate对象</div><div class=\"line\">    */</div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">restClient.setRequestFactory(requestFactory);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 用ResponseResult对象封装响应结果</div><div class=\"line\">    */</div><div class=\"line\">String url = <span class=\"string\">\"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\"</span>;</div><div class=\"line\">ResponseResult result = restClient.getForObject(<span class=\"keyword\">new</span> URI(url), ResponseResult.class);</div><div class=\"line\">System.out.println(result.getMsg());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>3.GET-调用对应的REST接口，在rest接口PATH路径中传递参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 请求参数在对应的请求path地址中</div><div class=\"line\">    */</div><div class=\"line\">String URI = <span class=\"string\">\"http://localhost:8080/user/info/&#123;id&#125;/v5.6.5\"</span>;</div><div class=\"line\">   RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">   ResponseResult result = restTemplate.getForObject(URI, ResponseResult.class, <span class=\"string\">\"3f62fca0123\"</span>);<span class=\"comment\">//把请求接口中的&#123;id&#125;参数值放入最后一个入参中，最后一个参数是一个可变长(数组)类型的入参</span></div><div class=\"line\">System.out.println(result.getMsg());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>4.POST-调用对应的REST接口，设置header参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 设置header入参对象</div><div class=\"line\">    */</div><div class=\"line\">HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</div><div class=\"line\">   headers.set(<span class=\"string\">\"area\"</span>, <span class=\"string\">\"010\"</span>);</div><div class=\"line\">   headers.set(<span class=\"string\">\"token\"</span>, <span class=\"string\">\"71aee1b842cc49f69d26b4bd980c9b8d\"</span>); </div><div class=\"line\">headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 把对应的header对象通过HttpEntity进行封装处理</div><div class=\"line\">    */</div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(headers);</div><div class=\"line\"></div><div class=\"line\">String postUrl = <span class=\"string\">\"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\"</span>;</div><div class=\"line\">ResponseEntity&lt;ResponseResult&gt; result = restClient.postForEntity(postUrl, httpEntity, ResponseResult.class);</div><div class=\"line\"></div><div class=\"line\">System.out.println(result.getBody().getMsg());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>5.POST-调用rest接口时，传递json参数</p>\n</blockquote>\n<p><em>因为一般rest接口都是提供给其他系统调用的，如果一个rest接口的入参数量很多的时候，往往调用比较麻烦，并且容易出错；并且接口提供方一般在对应的rest接口入参中使用对象传参，方便后期接口扩展；所以针对接口调用方来讲，只需要按照入参的对象的属性名称封装一个json格式的数据串即可成功调用，这样一来兼容性会比较好</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 设置header入参对象</div><div class=\"line\">    */</div><div class=\"line\">HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</div><div class=\"line\">   headers.set(<span class=\"string\">\"token\"</span>, <span class=\"string\">\"71aee1b842cc49f69d26b4bd980c9b8d\"</span>); </div><div class=\"line\">headers.setContentType(MediaType.APPLICATION_JSON);</div><div class=\"line\"></div><div class=\"line\">String postUrl = <span class=\"string\">\"http://localhost:8080/user/add/v5.6.5\"</span>;\t</div><div class=\"line\">String requestJson = <span class=\"string\">\"&#123;\\\"name\\\":\\\"张三\\\",\\\"age\\\":25&#125;\"</span>;<span class=\"comment\">//这里可以用JSONObject处理json格式的入参，避免拼接字符串</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 把请求入参和对应的header入参封装到HttpEntity对象中</div><div class=\"line\">    */</div><div class=\"line\">HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(requestJson,headers);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 请求对应的rest接口添加用户操作</div><div class=\"line\">    */</div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">String result = restClient.postForObject(postUrl, httpEntity, String.class);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；具体使用如下：</p>\n<p>一、RestTemplate源码中的常用API</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// GET</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... urlVariables)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; urlVariables)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// POST</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(URI url, Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(URI url, Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// PUT</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String url, Object request, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String url, Object request, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(URI url, Object request)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// DELETE</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String url, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</div><div class=\"line\">\t\texecute(url, HttpMethod.DELETE, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, urlVariables);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String url, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</div><div class=\"line\">\t\texecute(url, HttpMethod.DELETE, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, urlVariables);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(URI url)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// general execution</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(String url, HttpMethod method, RequestCallback requestCallback,</div><div class=\"line\">\t\t\tResponseExtractor&lt;T&gt; responseExtractor, Object... urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(String url, HttpMethod method, RequestCallback requestCallback,</div><div class=\"line\">\t\t\tResponseExtractor&lt;T&gt; responseExtractor, Map&lt;String, ?&gt; urlVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(URI url, HttpMethod method, RequestCallback requestCallback,</div><div class=\"line\">\t\t\tResponseExtractor&lt;T&gt; responseExtractor)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">     * 以上所有的get、post等等方法底层都是调用的该方法执行的rest接口请求</div><div class=\"line\">     */</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doExecute</span><span class=\"params\">(URI url, HttpMethod method, </div><div class=\"line\">\t\tRequestCallback requestCallback,ResponseExtractor&lt;T&gt; responseExtractor)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其实针对上面的GET<em>、POST</em>、DELETE*等等rest接口请求方法中，整个调用底层都是调用的doExecute()方法</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/restTemplate.png\" alt=\"Alt text\"></p>\n<p>二、<strong>RestTemplate调用接口示例</strong></p>\n<blockquote>\n<p>1.GET-直接实例化RestTemplate对象并采用GET方法调用对应的rest接口，并返回对应的响应值字符串</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">String url = <span class=\"string\">\"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\"</span>;</div><div class=\"line\">String result = restClient.getForObject(<span class=\"keyword\">new</span> URI(url), String.class);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.GET-调用对应的REST接口，并用响应结果对象示例接收封装对应的结果集</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * rest接口响应值的数据封装类</div><div class=\"line\">    */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseResult</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResponseResult</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> rlt;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String code;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String time;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String data;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//get、set方法省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 设置数据传递的超时时间、建立连接的超时时间</div><div class=\"line\">    */</span></div><div class=\"line\">   SimpleClientHttpRequestFactory requestFactory = <span class=\"keyword\">new</span> SimpleClientHttpRequestFactory();</div><div class=\"line\">requestFactory.setReadTimeout(READTIMEOUT);</div><div class=\"line\">   requestFactory.setConnectTimeout(CONNECTTIMEOUT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 实例化一个RestTemplate对象</div><div class=\"line\">    */</span></div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">restClient.setRequestFactory(requestFactory);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 用ResponseResult对象封装响应结果</div><div class=\"line\">    */</span></div><div class=\"line\">String url = <span class=\"string\">\"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\"</span>;</div><div class=\"line\">ResponseResult result = restClient.getForObject(<span class=\"keyword\">new</span> URI(url), ResponseResult.class);</div><div class=\"line\">System.out.println(result.getMsg());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>3.GET-调用对应的REST接口，在rest接口PATH路径中传递参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 请求参数在对应的请求path地址中</div><div class=\"line\">    */</span></div><div class=\"line\">String URI = <span class=\"string\">\"http://localhost:8080/user/info/&#123;id&#125;/v5.6.5\"</span>;</div><div class=\"line\">   RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">   ResponseResult result = restTemplate.getForObject(URI, ResponseResult.class, <span class=\"string\">\"3f62fca0123\"</span>);<span class=\"comment\">//把请求接口中的&#123;id&#125;参数值放入最后一个入参中，最后一个参数是一个可变长(数组)类型的入参</span></div><div class=\"line\">System.out.println(result.getMsg());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>4.POST-调用对应的REST接口，设置header参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 设置header入参对象</div><div class=\"line\">    */</span></div><div class=\"line\">HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</div><div class=\"line\">   headers.set(<span class=\"string\">\"area\"</span>, <span class=\"string\">\"010\"</span>);</div><div class=\"line\">   headers.set(<span class=\"string\">\"token\"</span>, <span class=\"string\">\"71aee1b842cc49f69d26b4bd980c9b8d\"</span>); </div><div class=\"line\">headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 把对应的header对象通过HttpEntity进行封装处理</div><div class=\"line\">    */</span></div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(headers);</div><div class=\"line\"></div><div class=\"line\">String postUrl = <span class=\"string\">\"http://localhost:8080/user/info/v5.6.5?id=3f62fca0123\"</span>;</div><div class=\"line\">ResponseEntity&lt;ResponseResult&gt; result = restClient.postForEntity(postUrl, httpEntity, ResponseResult.class);</div><div class=\"line\"></div><div class=\"line\">System.out.println(result.getBody().getMsg());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>5.POST-调用rest接口时，传递json参数</p>\n</blockquote>\n<p><em>因为一般rest接口都是提供给其他系统调用的，如果一个rest接口的入参数量很多的时候，往往调用比较麻烦，并且容易出错；并且接口提供方一般在对应的rest接口入参中使用对象传参，方便后期接口扩展；所以针对接口调用方来讲，只需要按照入参的对象的属性名称封装一个json格式的数据串即可成功调用，这样一来兼容性会比较好</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 设置header入参对象</div><div class=\"line\">    */</span></div><div class=\"line\">HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</div><div class=\"line\">   headers.set(<span class=\"string\">\"token\"</span>, <span class=\"string\">\"71aee1b842cc49f69d26b4bd980c9b8d\"</span>); </div><div class=\"line\">headers.setContentType(MediaType.APPLICATION_JSON);</div><div class=\"line\"></div><div class=\"line\">String postUrl = <span class=\"string\">\"http://localhost:8080/user/add/v5.6.5\"</span>;\t</div><div class=\"line\">String requestJson = <span class=\"string\">\"&#123;\\\"name\\\":\\\"张三\\\",\\\"age\\\":25&#125;\"</span>;<span class=\"comment\">//这里可以用JSONObject处理json格式的入参，避免拼接字符串</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 把请求入参和对应的header入参封装到HttpEntity对象中</div><div class=\"line\">    */</span></div><div class=\"line\">HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(requestJson,headers);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 请求对应的rest接口添加用户操作</div><div class=\"line\">    */</span></div><div class=\"line\">RestTemplate restClient = <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">String result = restClient.postForObject(postUrl, httpEntity, String.class);</div></pre></td></tr></table></figure>\n"},{"title":"前台向后台上传文件报net::ERR_CONNECTION_RESET问题入坑","date":"2017-12-11T14:23:33.000Z","_content":"近期接手了一个备课系统的项目，该项目的特点是前后端分离的架构；前端(nodejs)->后台(java);今天在扩展新功能时，前端上传调用后台的rest接口上传文件时，有一个很诡异的问题，当上传的文件小于30M时，可以正常上传；当上传的文件大于30M时，在浏览器下面(F12)就会报出了net::ERR_CONNECTION_RESET的错误，错误信息如下图：\n\n![Alt text](http://soujava.com/images/bk.png)\n\n<!--more-->\n\n说实在话，这种错误还是第一次见到；当时一头雾水，然后开始排查后台代码，新添加了添加了大量的log调试信息，发现前台上传文件调用后台接口时，响应压根没有到达方法层级上面；然后继续排查是否有拦截器、过滤器等等做了前置处理；后来发现并没有的。\n\n然后就想到应该是网关的限制问题，后来联系运维说明下相关的情况，让他们排查；没想到果然就是这个问题，是因为他们在NGINX的配置文件中设置了 **client_max_body_size** 参数值;后来运维把对应的大小调整了以后，就正常了！\n\n>这是逼着走超级全栈路线的节凑啊\n\n\n\n\n","source":"_posts/前台向后台上传文件报net-ERR-CONNECTION-RESET问题入坑.md","raw":"---\ntitle: '前台向后台上传文件报net::ERR_CONNECTION_RESET问题入坑'\ndate: 2017-12-11 22:23:33\ncategories: java\ntags: java\n---\n近期接手了一个备课系统的项目，该项目的特点是前后端分离的架构；前端(nodejs)->后台(java);今天在扩展新功能时，前端上传调用后台的rest接口上传文件时，有一个很诡异的问题，当上传的文件小于30M时，可以正常上传；当上传的文件大于30M时，在浏览器下面(F12)就会报出了net::ERR_CONNECTION_RESET的错误，错误信息如下图：\n\n![Alt text](http://soujava.com/images/bk.png)\n\n<!--more-->\n\n说实在话，这种错误还是第一次见到；当时一头雾水，然后开始排查后台代码，新添加了添加了大量的log调试信息，发现前台上传文件调用后台接口时，响应压根没有到达方法层级上面；然后继续排查是否有拦截器、过滤器等等做了前置处理；后来发现并没有的。\n\n然后就想到应该是网关的限制问题，后来联系运维说明下相关的情况，让他们排查；没想到果然就是这个问题，是因为他们在NGINX的配置文件中设置了 **client_max_body_size** 参数值;后来运维把对应的大小调整了以后，就正常了！\n\n>这是逼着走超级全栈路线的节凑啊\n\n\n\n\n","slug":"前台向后台上传文件报net-ERR-CONNECTION-RESET问题入坑","published":1,"updated":"2018-07-08T09:37:48.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjw005030tzaq3zwf3q","content":"<p>近期接手了一个备课系统的项目，该项目的特点是前后端分离的架构；前端(nodejs)-&gt;后台(java);今天在扩展新功能时，前端上传调用后台的rest接口上传文件时，有一个很诡异的问题，当上传的文件小于30M时，可以正常上传；当上传的文件大于30M时，在浏览器下面(F12)就会报出了net::ERR_CONNECTION_RESET的错误，错误信息如下图：</p>\n<p><img src=\"http://soujava.com/images/bk.png\" alt=\"Alt text\"></p>\n<a id=\"more\"></a>\n<p>说实在话，这种错误还是第一次见到；当时一头雾水，然后开始排查后台代码，新添加了添加了大量的log调试信息，发现前台上传文件调用后台接口时，响应压根没有到达方法层级上面；然后继续排查是否有拦截器、过滤器等等做了前置处理；后来发现并没有的。</p>\n<p>然后就想到应该是网关的限制问题，后来联系运维说明下相关的情况，让他们排查；没想到果然就是这个问题，是因为他们在NGINX的配置文件中设置了 <strong>client_max_body_size</strong> 参数值;后来运维把对应的大小调整了以后，就正常了！</p>\n<blockquote>\n<p>这是逼着走超级全栈路线的节凑啊</p>\n</blockquote>\n","excerpt":"<p>近期接手了一个备课系统的项目，该项目的特点是前后端分离的架构；前端(nodejs)-&gt;后台(java);今天在扩展新功能时，前端上传调用后台的rest接口上传文件时，有一个很诡异的问题，当上传的文件小于30M时，可以正常上传；当上传的文件大于30M时，在浏览器下面(F12)就会报出了net::ERR_CONNECTION_RESET的错误，错误信息如下图：</p>\n<p><img src=\"http://soujava.com/images/bk.png\" alt=\"Alt text\"></p>","more":"<p>说实在话，这种错误还是第一次见到；当时一头雾水，然后开始排查后台代码，新添加了添加了大量的log调试信息，发现前台上传文件调用后台接口时，响应压根没有到达方法层级上面；然后继续排查是否有拦截器、过滤器等等做了前置处理；后来发现并没有的。</p>\n<p>然后就想到应该是网关的限制问题，后来联系运维说明下相关的情况，让他们排查；没想到果然就是这个问题，是因为他们在NGINX的配置文件中设置了 <strong>client_max_body_size</strong> 参数值;后来运维把对应的大小调整了以后，就正常了！</p>\n<blockquote>\n<p>这是逼着走超级全栈路线的节凑啊</p>\n</blockquote>"},{"title":"使用spring的RestTemplate调用REST接口时出现线程阻塞","date":"2017-12-18T08:32:12.000Z","_content":"\n由于需要给APP端提供相关的数据服务，所以在后台也少不了调用第三方平台的服务接口，所以开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；最近开发时，由于使用了MappingJackson2HttpMessageConverter转换器，所以导致接口性能压测时，出现了大量的线程BLOCKED：\n\n![Alt text](http://soujava.com/images/threadBlcked.png)\n\n\n然后通过jstack命令把接口调用过程的线程情况进行了输出，然后根据输出的线程调用栈情况，逐级找到了最终的阻塞原因，整个过程如下：\n\n>1.使用jstack命令输出java的堆栈信息如下：\n\n![Alt text](http://soujava.com/images/dump.png)\n\n\n\n>2.根据堆栈信息，逐级进入代码分析步骤如下：\n\n![Alt text](http://soujava.com/images/threaddump.png)\n\n\n\n- MappingJackson2HttpMessageConverter类的构造器方法如下\n\n```java\n\t\n\tpublic MappingJackson2HttpMessageConverter() {\n\t\tthis(Jackson2ObjectMapperBuilder.json().build());\n\t}\n\n```\n\n- 点击build()方法如下\n\n```java\n\n\tpublic <T extends ObjectMapper> T build() {\n\t\tObjectMapper mapper;\n\t\tif (this.createXmlMapper) {\n\t\t\tmapper = (this.defaultUseWrapper == null ? new XmlObjectMapperInitializer().create()\n\t\t\t\t\t: new XmlObjectMapperInitializer().create(this.defaultUseWrapper));\n\t\t}\n\t\telse {\n\t\t\tmapper = new ObjectMapper();\n\t\t}\n\t\tconfigure(mapper); //继续点击分析\n\t\treturn (T) mapper;\n\t}\n\n\n```\n\n- 点击configure()方法如下\n\n```java\n\n\tpublic void configure(ObjectMapper objectMapper) {\n\t\tAssert.notNull(objectMapper, \"ObjectMapper must not be null\");\n\n\t\tif (this.findModulesViaServiceLoader) {\n\t\t\t// Jackson 2.2+\n\t\t\tobjectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));\n\t\t}\n\t\telse if (this.findWellKnownModules) {\n\t\t\tregisterWellKnownModulesIfAvailable(objectMapper); //继续点击深入分析\n\t\t}\n\n\t\tif (this.modules != null) {\n\t\t\tfor (Module module : this.modules) {\n\t\t\t\t// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules\n\t\t\t\tobjectMapper.registerModule(module);\n\t\t\t}\n\t\t}\n\n\t\t....后半部分方法代码省略\n\n```\n\n- 点击进入registerWellKnownModulesIfAvailable()方法如下\n\n```java\n\n\tprivate void registerWellKnownModulesIfAvailable(ObjectMapper objectMapper) {\n\n\t\t  ....前半部分代码省略\n\n\t\t// Joda-Time present?\n\t\tif (ClassUtils.isPresent(\"org.joda.time.LocalDate\", this.moduleClassLoader)) {\n\t\t\ttry {\n\n\t\t\t\t/**\n\t\t\t\t * 文件的根源就在这个ClassUtils.forName()方法底层中\n\t\t\t\t */\n\t\t\t\tClass<? extends Module> jodaModule = (Class<? extends Module>)\n\t\t\t\t\t\tClassUtils.forName(\"com.fasterxml.jackson.datatype.joda.JodaModule\", this.moduleClassLoader);\n\t\t\t\tobjectMapper.registerModule(BeanUtils.instantiate(jodaModule));\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t// jackson-datatype-joda not available\n\t\t\t}\n\t\t}\n\n\t\t....后半部分代码省略\n\t}\n\n```\n\n\n>3.再继续按照整个堆栈信息，逐级向上找到最终的一个spring的java类中【ClassUtils.java:250】\n\n![Alt text](http://soujava.com/images/dumpfenxi.png)\n\n>4.然后进入org.springframework.util.ClassUtils.java类中的第250行\n\n![Alt text](http://soujava.com/images/loadclass.png)\n\n>5.我们点击loadClass()方法，进入到java.lang.ClassLoader.java\n\n```java\n\n\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n        return loadClass(name, false); //该方法是另一个loadClass方法的重载\n    }\n\n```\n\n>6.我们继续点击ClassLoader类中的loadClass()方法，进入到最底层的loadClass方法\n\n![Alt text](http://soujava.com/images/loadclasslock.png)\n\n通过方法我们可以看到该方法中以下两个导致线程阻塞的问题\n\n- 方法中有一个synchronized同步方法\n- 同步方法中的getClassLoadingLock方法内部还有一个lock锁\n\n通过排查分析发现，就是上面的问题导致线程BLOCKED；后来去除了MappingJackson2HttpMessageConverter的注册，再次压测时，线程阻塞问题得以解决。\n\n\n","source":"_posts/使用spring的RestTemplate调用REST接口时出现线程阻塞.md","raw":"---\ntitle: 使用spring的RestTemplate调用REST接口时出现线程阻塞\ndate: 2017-12-18 16:32:12\ncategories: spring\ntags: spring\n---\n\n由于需要给APP端提供相关的数据服务，所以在后台也少不了调用第三方平台的服务接口，所以开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；最近开发时，由于使用了MappingJackson2HttpMessageConverter转换器，所以导致接口性能压测时，出现了大量的线程BLOCKED：\n\n![Alt text](http://soujava.com/images/threadBlcked.png)\n\n\n然后通过jstack命令把接口调用过程的线程情况进行了输出，然后根据输出的线程调用栈情况，逐级找到了最终的阻塞原因，整个过程如下：\n\n>1.使用jstack命令输出java的堆栈信息如下：\n\n![Alt text](http://soujava.com/images/dump.png)\n\n\n\n>2.根据堆栈信息，逐级进入代码分析步骤如下：\n\n![Alt text](http://soujava.com/images/threaddump.png)\n\n\n\n- MappingJackson2HttpMessageConverter类的构造器方法如下\n\n```java\n\t\n\tpublic MappingJackson2HttpMessageConverter() {\n\t\tthis(Jackson2ObjectMapperBuilder.json().build());\n\t}\n\n```\n\n- 点击build()方法如下\n\n```java\n\n\tpublic <T extends ObjectMapper> T build() {\n\t\tObjectMapper mapper;\n\t\tif (this.createXmlMapper) {\n\t\t\tmapper = (this.defaultUseWrapper == null ? new XmlObjectMapperInitializer().create()\n\t\t\t\t\t: new XmlObjectMapperInitializer().create(this.defaultUseWrapper));\n\t\t}\n\t\telse {\n\t\t\tmapper = new ObjectMapper();\n\t\t}\n\t\tconfigure(mapper); //继续点击分析\n\t\treturn (T) mapper;\n\t}\n\n\n```\n\n- 点击configure()方法如下\n\n```java\n\n\tpublic void configure(ObjectMapper objectMapper) {\n\t\tAssert.notNull(objectMapper, \"ObjectMapper must not be null\");\n\n\t\tif (this.findModulesViaServiceLoader) {\n\t\t\t// Jackson 2.2+\n\t\t\tobjectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));\n\t\t}\n\t\telse if (this.findWellKnownModules) {\n\t\t\tregisterWellKnownModulesIfAvailable(objectMapper); //继续点击深入分析\n\t\t}\n\n\t\tif (this.modules != null) {\n\t\t\tfor (Module module : this.modules) {\n\t\t\t\t// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules\n\t\t\t\tobjectMapper.registerModule(module);\n\t\t\t}\n\t\t}\n\n\t\t....后半部分方法代码省略\n\n```\n\n- 点击进入registerWellKnownModulesIfAvailable()方法如下\n\n```java\n\n\tprivate void registerWellKnownModulesIfAvailable(ObjectMapper objectMapper) {\n\n\t\t  ....前半部分代码省略\n\n\t\t// Joda-Time present?\n\t\tif (ClassUtils.isPresent(\"org.joda.time.LocalDate\", this.moduleClassLoader)) {\n\t\t\ttry {\n\n\t\t\t\t/**\n\t\t\t\t * 文件的根源就在这个ClassUtils.forName()方法底层中\n\t\t\t\t */\n\t\t\t\tClass<? extends Module> jodaModule = (Class<? extends Module>)\n\t\t\t\t\t\tClassUtils.forName(\"com.fasterxml.jackson.datatype.joda.JodaModule\", this.moduleClassLoader);\n\t\t\t\tobjectMapper.registerModule(BeanUtils.instantiate(jodaModule));\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t// jackson-datatype-joda not available\n\t\t\t}\n\t\t}\n\n\t\t....后半部分代码省略\n\t}\n\n```\n\n\n>3.再继续按照整个堆栈信息，逐级向上找到最终的一个spring的java类中【ClassUtils.java:250】\n\n![Alt text](http://soujava.com/images/dumpfenxi.png)\n\n>4.然后进入org.springframework.util.ClassUtils.java类中的第250行\n\n![Alt text](http://soujava.com/images/loadclass.png)\n\n>5.我们点击loadClass()方法，进入到java.lang.ClassLoader.java\n\n```java\n\n\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n        return loadClass(name, false); //该方法是另一个loadClass方法的重载\n    }\n\n```\n\n>6.我们继续点击ClassLoader类中的loadClass()方法，进入到最底层的loadClass方法\n\n![Alt text](http://soujava.com/images/loadclasslock.png)\n\n通过方法我们可以看到该方法中以下两个导致线程阻塞的问题\n\n- 方法中有一个synchronized同步方法\n- 同步方法中的getClassLoadingLock方法内部还有一个lock锁\n\n通过排查分析发现，就是上面的问题导致线程BLOCKED；后来去除了MappingJackson2HttpMessageConverter的注册，再次压测时，线程阻塞问题得以解决。\n\n\n","slug":"使用spring的RestTemplate调用REST接口时出现线程阻塞","published":1,"updated":"2018-07-08T09:37:48.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjx005230tzuj6xn0d0","content":"<p>由于需要给APP端提供相关的数据服务，所以在后台也少不了调用第三方平台的服务接口，所以开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；最近开发时，由于使用了MappingJackson2HttpMessageConverter转换器，所以导致接口性能压测时，出现了大量的线程BLOCKED：</p>\n<p><img src=\"http://soujava.com/images/threadBlcked.png\" alt=\"Alt text\"></p>\n<p>然后通过jstack命令把接口调用过程的线程情况进行了输出，然后根据输出的线程调用栈情况，逐级找到了最终的阻塞原因，整个过程如下：</p>\n<blockquote>\n<p>1.使用jstack命令输出java的堆栈信息如下：</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/dump.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>2.根据堆栈信息，逐级进入代码分析步骤如下：</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/threaddump.png\" alt=\"Alt text\"></p>\n<ul>\n<li>MappingJackson2HttpMessageConverter类的构造器方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MappingJackson2HttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>(Jackson2ObjectMapperBuilder.json().build());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>点击build()方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T extends ObjectMapper&gt; <span class=\"function\">T <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tObjectMapper mapper;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.createXmlMapper) &#123;</div><div class=\"line\">\t\tmapper = (<span class=\"keyword\">this</span>.defaultUseWrapper == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> XmlObjectMapperInitializer().create()</div><div class=\"line\">\t\t\t\t: <span class=\"keyword\">new</span> XmlObjectMapperInitializer().create(<span class=\"keyword\">this</span>.defaultUseWrapper));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tmapper = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tconfigure(mapper); <span class=\"comment\">//继续点击分析</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> (T) mapper;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>点击configure()方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ObjectMapper objectMapper)</span> </span>&#123;</div><div class=\"line\">\tAssert.notNull(objectMapper, <span class=\"string\">\"ObjectMapper must not be null\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findModulesViaServiceLoader) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Jackson 2.2+</span></div><div class=\"line\">\t\tobjectMapper.registerModules(ObjectMapper.findModules(<span class=\"keyword\">this</span>.moduleClassLoader));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findWellKnownModules) &#123;</div><div class=\"line\">\t\tregisterWellKnownModulesIfAvailable(objectMapper); <span class=\"comment\">//继续点击深入分析</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.modules != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Module <span class=\"keyword\">module</span> : <span class=\"keyword\">this</span>.modules) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules</span></div><div class=\"line\">\t\t\tobjectMapper.registerModule(<span class=\"keyword\">module</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t....后半部分方法代码省略</div></pre></td></tr></table></figure>\n<ul>\n<li>点击进入registerWellKnownModulesIfAvailable()方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">registerWellKnownModulesIfAvailable</span><span class=\"params\">(ObjectMapper objectMapper)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t  ....前半部分代码省略</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Joda-Time present?</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ClassUtils.isPresent(<span class=\"string\">\"org.joda.time.LocalDate\"</span>, <span class=\"keyword\">this</span>.moduleClassLoader)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t\t * 文件的根源就在这个ClassUtils.forName()方法底层中</div><div class=\"line\">\t\t\t */</div><div class=\"line\">\t\t\tClass&lt;? extends Module&gt; jodaModule = (Class&lt;? extends Module&gt;)</div><div class=\"line\">\t\t\t\t\tClassUtils.forName(<span class=\"string\">\"com.fasterxml.jackson.datatype.joda.JodaModule\"</span>, <span class=\"keyword\">this</span>.moduleClassLoader);</div><div class=\"line\">\t\t\tobjectMapper.registerModule(BeanUtils.instantiate(jodaModule));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// jackson-datatype-joda not available</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t....后半部分代码省略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>3.再继续按照整个堆栈信息，逐级向上找到最终的一个spring的java类中【ClassUtils.java:250】</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/dumpfenxi.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>4.然后进入org.springframework.util.ClassUtils.java类中的第250行</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/loadclass.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>5.我们点击loadClass()方法，进入到java.lang.ClassLoader.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> loadClass(name, <span class=\"keyword\">false</span>); <span class=\"comment\">//该方法是另一个loadClass方法的重载</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>6.我们继续点击ClassLoader类中的loadClass()方法，进入到最底层的loadClass方法</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/loadclasslock.png\" alt=\"Alt text\"></p>\n<p>通过方法我们可以看到该方法中以下两个导致线程阻塞的问题</p>\n<ul>\n<li>方法中有一个synchronized同步方法</li>\n<li>同步方法中的getClassLoadingLock方法内部还有一个lock锁</li>\n</ul>\n<p>通过排查分析发现，就是上面的问题导致线程BLOCKED；后来去除了MappingJackson2HttpMessageConverter的注册，再次压测时，线程阻塞问题得以解决。</p>\n","excerpt":"","more":"<p>由于需要给APP端提供相关的数据服务，所以在后台也少不了调用第三方平台的服务接口，所以开发接口调用时，我们后台一般使用spring的RestTemplate调用对应的REST接口获取数据；最近开发时，由于使用了MappingJackson2HttpMessageConverter转换器，所以导致接口性能压测时，出现了大量的线程BLOCKED：</p>\n<p><img src=\"http://soujava.com/images/threadBlcked.png\" alt=\"Alt text\"></p>\n<p>然后通过jstack命令把接口调用过程的线程情况进行了输出，然后根据输出的线程调用栈情况，逐级找到了最终的阻塞原因，整个过程如下：</p>\n<blockquote>\n<p>1.使用jstack命令输出java的堆栈信息如下：</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/dump.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>2.根据堆栈信息，逐级进入代码分析步骤如下：</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/threaddump.png\" alt=\"Alt text\"></p>\n<ul>\n<li>MappingJackson2HttpMessageConverter类的构造器方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MappingJackson2HttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>(Jackson2ObjectMapperBuilder.json().build());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>点击build()方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T extends ObjectMapper&gt; <span class=\"function\">T <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tObjectMapper mapper;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.createXmlMapper) &#123;</div><div class=\"line\">\t\tmapper = (<span class=\"keyword\">this</span>.defaultUseWrapper == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> XmlObjectMapperInitializer().create()</div><div class=\"line\">\t\t\t\t: <span class=\"keyword\">new</span> XmlObjectMapperInitializer().create(<span class=\"keyword\">this</span>.defaultUseWrapper));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tmapper = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tconfigure(mapper); <span class=\"comment\">//继续点击分析</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> (T) mapper;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>点击configure()方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ObjectMapper objectMapper)</span> </span>&#123;</div><div class=\"line\">\tAssert.notNull(objectMapper, <span class=\"string\">\"ObjectMapper must not be null\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findModulesViaServiceLoader) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Jackson 2.2+</span></div><div class=\"line\">\t\tobjectMapper.registerModules(ObjectMapper.findModules(<span class=\"keyword\">this</span>.moduleClassLoader));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findWellKnownModules) &#123;</div><div class=\"line\">\t\tregisterWellKnownModulesIfAvailable(objectMapper); <span class=\"comment\">//继续点击深入分析</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.modules != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Module <span class=\"keyword\">module</span> : <span class=\"keyword\">this</span>.modules) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules</span></div><div class=\"line\">\t\t\tobjectMapper.registerModule(<span class=\"keyword\">module</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t....后半部分方法代码省略</div></pre></td></tr></table></figure>\n<ul>\n<li>点击进入registerWellKnownModulesIfAvailable()方法如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">registerWellKnownModulesIfAvailable</span><span class=\"params\">(ObjectMapper objectMapper)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t  ....前半部分代码省略</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Joda-Time present?</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ClassUtils.isPresent(<span class=\"string\">\"org.joda.time.LocalDate\"</span>, <span class=\"keyword\">this</span>.moduleClassLoader)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t\t * 文件的根源就在这个ClassUtils.forName()方法底层中</div><div class=\"line\">\t\t\t */</span></div><div class=\"line\">\t\t\tClass&lt;? extends Module&gt; jodaModule = (Class&lt;? extends Module&gt;)</div><div class=\"line\">\t\t\t\t\tClassUtils.forName(<span class=\"string\">\"com.fasterxml.jackson.datatype.joda.JodaModule\"</span>, <span class=\"keyword\">this</span>.moduleClassLoader);</div><div class=\"line\">\t\t\tobjectMapper.registerModule(BeanUtils.instantiate(jodaModule));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// jackson-datatype-joda not available</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t....后半部分代码省略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>3.再继续按照整个堆栈信息，逐级向上找到最终的一个spring的java类中【ClassUtils.java:250】</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/dumpfenxi.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>4.然后进入org.springframework.util.ClassUtils.java类中的第250行</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/loadclass.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>5.我们点击loadClass()方法，进入到java.lang.ClassLoader.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> loadClass(name, <span class=\"keyword\">false</span>); <span class=\"comment\">//该方法是另一个loadClass方法的重载</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>6.我们继续点击ClassLoader类中的loadClass()方法，进入到最底层的loadClass方法</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/loadclasslock.png\" alt=\"Alt text\"></p>\n<p>通过方法我们可以看到该方法中以下两个导致线程阻塞的问题</p>\n<ul>\n<li>方法中有一个synchronized同步方法</li>\n<li>同步方法中的getClassLoadingLock方法内部还有一个lock锁</li>\n</ul>\n<p>通过排查分析发现，就是上面的问题导致线程BLOCKED；后来去除了MappingJackson2HttpMessageConverter的注册，再次压测时，线程阻塞问题得以解决。</p>\n"},{"title":"勒索病毒-永恒之蓝防范处理","date":"2017-05-15T02:19:22.000Z","_content":"\n周末在家时看到各种新闻客户端已经被勒索病毒-永恒之蓝频繁刷屏，截止上周五该病毒已经攻击包括中国在内的至少150个国家；因为该病毒不需要任何载体，是通过window漏洞和端口进行入侵，只要你的电脑是window操作系统，并且只要你的电脑一旦开机并且一旦联网，那么就有很大的感染几率，目前该病毒以ONION和WNCRY两个家族为主，被感染者的电脑中的文件会被加密处理而无法正常打开，只有支付赎金才能解密恢复。这两类勒索病毒，勒索金额分别是5个比特币和300美元，折合人民币分别为5万多元和2000多元，一旦感染该病毒，你只有两个选择：电脑上面的所有文件被销毁、支付赎金解密处理。\n\n<!--more-->\n\n![检测工具](http://soujava.com/images/fanghuoqiang7.jpg)\n\n根据360威胁情报中心的统计，截至到5月13日20点，国内有29372家机构组织的数十万台机器感染，其中有教育科研机构4341家中招，是此次事件的重灾区。被感染的组织和机构已经覆盖了几乎所有地区，影响范围遍布高校、火车站、自助终端、邮政、加油站、医院、政府办事终端等多个领域，被感染的电脑数字还在不断增长中。受影响的地区中，江苏、浙江、广东、江西、上海、山东、北京和广西排名前八位，等到周一人们上班的时候，这个数字可能还会继续攀升，甚至会翻倍。为避免周一上班后刚开机就被病毒感染，导致硬盘所有文件被恶意加密，成都市委网信办建议公众在周一开机前先断网。\n\n以下是该病毒的时间线路图：\n\n![检测工具](http://soujava.com/images/fanghuoqiang0.png)\n\n如果你的电脑一旦感染这种病毒，那么只能支付赎金解密处理才能继续使用你的电脑，除此之外别无他法。如果你的电脑还没有感染病毒，那么你需要立刻拔掉断网，并且把电脑上面重要文件进行外部设备备份处理，并且赶紧升级你的电脑安全补丁，window也已经紧紧发布了相关的安全修复补丁。\n\n首先说一下这个“永恒之蓝”病毒的来由吧，在说该病毒之前不得介绍一下-美国国家安全局(NSA)，具体该机构是干什么的自己上网查吧，说白了就是各种监控；该病毒就是这个机构的一个攻击软件(无硝烟的武器)之一，也就是说该病毒仅仅是其网络军火库中的武器之一；该病毒据称是被黑客攻击而泄露出来的...\n\n目前该病毒已经造成加油站断网，造成大量高校科研机构网络瘫痪，也造成多家医院网络瘫痪，医生电脑无法使用，急诊患者被迫转院治疗，苏州车管所也遭受攻击而无法办理业务；同时也造成英国、俄罗斯等等电话、天然气、交通系统受到攻击，总之该病毒非常凶猛，要比之前的“熊猫烧香”病毒厉害；仅仅这一个病毒软件就造成全球这么大的影响，那么NSA是否还有更厉害的武器呢？想想都恐怖！所以大家做好防护工作，别让你辛辛苦苦加班加点做的工作被毁了；下面说一下具体的防护措施：\n\n\n**一、检测点是否已经感染**\n\n1、下载检测工具\n\n> http://dl.360safe.com/nsa/nsatool.exe\n\n2、双击运行该工具，然后自动检测\n\n![检测工具](http://soujava.com/images/jiance.png)\n\n\n**二、开启防火墙并关闭445端口**\n\n1、开启防火墙\n\n\t\n![检测工具](http://soujava.com/images/fanghuoqiang1.png)\n\n![检测工具](http://soujava.com/images/fanghuoqiang2.png)\n\n2、关闭445端口\n\n![检测工具](http://soujava.com/images/fanghuoqiang3.png)\n\n![检测工具](http://soujava.com/images/fanghuoqiang4.png)\n\t\t\n\n**三、下载系统补丁**\n\n\n>https://technet.microsoft.com/zh-cn/library/security/MS17-010#\n\n在上面地址中找到你自己电脑的系统版本号，然后下载对应的补丁。\n\n\n**四、其他详细办法页可以参照下面的内容**\n\n\n>http://ops.100tal.com/plugin/pdf/web/viewer.html?file=/upload/document/WannaCry.pdf\n\n\n**五、最后一招**\n\n*更换成linux操作系统吧*\n","source":"_posts/勒索病毒-永恒之蓝防范处理.md","raw":"---\ntitle: 勒索病毒-永恒之蓝防范处理\ndate: 2017-05-15 10:19:22\ncategories: java\ntags: java\n---\n\n周末在家时看到各种新闻客户端已经被勒索病毒-永恒之蓝频繁刷屏，截止上周五该病毒已经攻击包括中国在内的至少150个国家；因为该病毒不需要任何载体，是通过window漏洞和端口进行入侵，只要你的电脑是window操作系统，并且只要你的电脑一旦开机并且一旦联网，那么就有很大的感染几率，目前该病毒以ONION和WNCRY两个家族为主，被感染者的电脑中的文件会被加密处理而无法正常打开，只有支付赎金才能解密恢复。这两类勒索病毒，勒索金额分别是5个比特币和300美元，折合人民币分别为5万多元和2000多元，一旦感染该病毒，你只有两个选择：电脑上面的所有文件被销毁、支付赎金解密处理。\n\n<!--more-->\n\n![检测工具](http://soujava.com/images/fanghuoqiang7.jpg)\n\n根据360威胁情报中心的统计，截至到5月13日20点，国内有29372家机构组织的数十万台机器感染，其中有教育科研机构4341家中招，是此次事件的重灾区。被感染的组织和机构已经覆盖了几乎所有地区，影响范围遍布高校、火车站、自助终端、邮政、加油站、医院、政府办事终端等多个领域，被感染的电脑数字还在不断增长中。受影响的地区中，江苏、浙江、广东、江西、上海、山东、北京和广西排名前八位，等到周一人们上班的时候，这个数字可能还会继续攀升，甚至会翻倍。为避免周一上班后刚开机就被病毒感染，导致硬盘所有文件被恶意加密，成都市委网信办建议公众在周一开机前先断网。\n\n以下是该病毒的时间线路图：\n\n![检测工具](http://soujava.com/images/fanghuoqiang0.png)\n\n如果你的电脑一旦感染这种病毒，那么只能支付赎金解密处理才能继续使用你的电脑，除此之外别无他法。如果你的电脑还没有感染病毒，那么你需要立刻拔掉断网，并且把电脑上面重要文件进行外部设备备份处理，并且赶紧升级你的电脑安全补丁，window也已经紧紧发布了相关的安全修复补丁。\n\n首先说一下这个“永恒之蓝”病毒的来由吧，在说该病毒之前不得介绍一下-美国国家安全局(NSA)，具体该机构是干什么的自己上网查吧，说白了就是各种监控；该病毒就是这个机构的一个攻击软件(无硝烟的武器)之一，也就是说该病毒仅仅是其网络军火库中的武器之一；该病毒据称是被黑客攻击而泄露出来的...\n\n目前该病毒已经造成加油站断网，造成大量高校科研机构网络瘫痪，也造成多家医院网络瘫痪，医生电脑无法使用，急诊患者被迫转院治疗，苏州车管所也遭受攻击而无法办理业务；同时也造成英国、俄罗斯等等电话、天然气、交通系统受到攻击，总之该病毒非常凶猛，要比之前的“熊猫烧香”病毒厉害；仅仅这一个病毒软件就造成全球这么大的影响，那么NSA是否还有更厉害的武器呢？想想都恐怖！所以大家做好防护工作，别让你辛辛苦苦加班加点做的工作被毁了；下面说一下具体的防护措施：\n\n\n**一、检测点是否已经感染**\n\n1、下载检测工具\n\n> http://dl.360safe.com/nsa/nsatool.exe\n\n2、双击运行该工具，然后自动检测\n\n![检测工具](http://soujava.com/images/jiance.png)\n\n\n**二、开启防火墙并关闭445端口**\n\n1、开启防火墙\n\n\t\n![检测工具](http://soujava.com/images/fanghuoqiang1.png)\n\n![检测工具](http://soujava.com/images/fanghuoqiang2.png)\n\n2、关闭445端口\n\n![检测工具](http://soujava.com/images/fanghuoqiang3.png)\n\n![检测工具](http://soujava.com/images/fanghuoqiang4.png)\n\t\t\n\n**三、下载系统补丁**\n\n\n>https://technet.microsoft.com/zh-cn/library/security/MS17-010#\n\n在上面地址中找到你自己电脑的系统版本号，然后下载对应的补丁。\n\n\n**四、其他详细办法页可以参照下面的内容**\n\n\n>http://ops.100tal.com/plugin/pdf/web/viewer.html?file=/upload/document/WannaCry.pdf\n\n\n**五、最后一招**\n\n*更换成linux操作系统吧*\n","slug":"勒索病毒-永恒之蓝防范处理","published":1,"updated":"2018-07-08T09:37:48.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pjz005730tz9x751gtj","content":"<p>周末在家时看到各种新闻客户端已经被勒索病毒-永恒之蓝频繁刷屏，截止上周五该病毒已经攻击包括中国在内的至少150个国家；因为该病毒不需要任何载体，是通过window漏洞和端口进行入侵，只要你的电脑是window操作系统，并且只要你的电脑一旦开机并且一旦联网，那么就有很大的感染几率，目前该病毒以ONION和WNCRY两个家族为主，被感染者的电脑中的文件会被加密处理而无法正常打开，只有支付赎金才能解密恢复。这两类勒索病毒，勒索金额分别是5个比特币和300美元，折合人民币分别为5万多元和2000多元，一旦感染该病毒，你只有两个选择：电脑上面的所有文件被销毁、支付赎金解密处理。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://soujava.com/images/fanghuoqiang7.jpg\" alt=\"检测工具\"></p>\n<p>根据360威胁情报中心的统计，截至到5月13日20点，国内有29372家机构组织的数十万台机器感染，其中有教育科研机构4341家中招，是此次事件的重灾区。被感染的组织和机构已经覆盖了几乎所有地区，影响范围遍布高校、火车站、自助终端、邮政、加油站、医院、政府办事终端等多个领域，被感染的电脑数字还在不断增长中。受影响的地区中，江苏、浙江、广东、江西、上海、山东、北京和广西排名前八位，等到周一人们上班的时候，这个数字可能还会继续攀升，甚至会翻倍。为避免周一上班后刚开机就被病毒感染，导致硬盘所有文件被恶意加密，成都市委网信办建议公众在周一开机前先断网。</p>\n<p>以下是该病毒的时间线路图：</p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang0.png\" alt=\"检测工具\"></p>\n<p>如果你的电脑一旦感染这种病毒，那么只能支付赎金解密处理才能继续使用你的电脑，除此之外别无他法。如果你的电脑还没有感染病毒，那么你需要立刻拔掉断网，并且把电脑上面重要文件进行外部设备备份处理，并且赶紧升级你的电脑安全补丁，window也已经紧紧发布了相关的安全修复补丁。</p>\n<p>首先说一下这个“永恒之蓝”病毒的来由吧，在说该病毒之前不得介绍一下-美国国家安全局(NSA)，具体该机构是干什么的自己上网查吧，说白了就是各种监控；该病毒就是这个机构的一个攻击软件(无硝烟的武器)之一，也就是说该病毒仅仅是其网络军火库中的武器之一；该病毒据称是被黑客攻击而泄露出来的…</p>\n<p>目前该病毒已经造成加油站断网，造成大量高校科研机构网络瘫痪，也造成多家医院网络瘫痪，医生电脑无法使用，急诊患者被迫转院治疗，苏州车管所也遭受攻击而无法办理业务；同时也造成英国、俄罗斯等等电话、天然气、交通系统受到攻击，总之该病毒非常凶猛，要比之前的“熊猫烧香”病毒厉害；仅仅这一个病毒软件就造成全球这么大的影响，那么NSA是否还有更厉害的武器呢？想想都恐怖！所以大家做好防护工作，别让你辛辛苦苦加班加点做的工作被毁了；下面说一下具体的防护措施：</p>\n<p><strong>一、检测点是否已经感染</strong></p>\n<p>1、下载检测工具</p>\n<blockquote>\n<p><a href=\"http://dl.360safe.com/nsa/nsatool.exe\" target=\"_blank\" rel=\"external\">http://dl.360safe.com/nsa/nsatool.exe</a></p>\n</blockquote>\n<p>2、双击运行该工具，然后自动检测</p>\n<p><img src=\"http://soujava.com/images/jiance.png\" alt=\"检测工具\"></p>\n<p><strong>二、开启防火墙并关闭445端口</strong></p>\n<p>1、开启防火墙</p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang1.png\" alt=\"检测工具\"></p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang2.png\" alt=\"检测工具\"></p>\n<p>2、关闭445端口</p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang3.png\" alt=\"检测工具\"></p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang4.png\" alt=\"检测工具\"></p>\n<p><strong>三、下载系统补丁</strong></p>\n<blockquote>\n<p><a href=\"https://technet.microsoft.com/zh-cn/library/security/MS17-010#\" target=\"_blank\" rel=\"external\">https://technet.microsoft.com/zh-cn/library/security/MS17-010#</a></p>\n</blockquote>\n<p>在上面地址中找到你自己电脑的系统版本号，然后下载对应的补丁。</p>\n<p><strong>四、其他详细办法页可以参照下面的内容</strong></p>\n<blockquote>\n<p><a href=\"http://ops.100tal.com/plugin/pdf/web/viewer.html?file=/upload/document/WannaCry.pdf\" target=\"_blank\" rel=\"external\">http://ops.100tal.com/plugin/pdf/web/viewer.html?file=/upload/document/WannaCry.pdf</a></p>\n</blockquote>\n<p><strong>五、最后一招</strong></p>\n<p><em>更换成linux操作系统吧</em></p>\n","excerpt":"<p>周末在家时看到各种新闻客户端已经被勒索病毒-永恒之蓝频繁刷屏，截止上周五该病毒已经攻击包括中国在内的至少150个国家；因为该病毒不需要任何载体，是通过window漏洞和端口进行入侵，只要你的电脑是window操作系统，并且只要你的电脑一旦开机并且一旦联网，那么就有很大的感染几率，目前该病毒以ONION和WNCRY两个家族为主，被感染者的电脑中的文件会被加密处理而无法正常打开，只有支付赎金才能解密恢复。这两类勒索病毒，勒索金额分别是5个比特币和300美元，折合人民币分别为5万多元和2000多元，一旦感染该病毒，你只有两个选择：电脑上面的所有文件被销毁、支付赎金解密处理。</p>","more":"<p><img src=\"http://soujava.com/images/fanghuoqiang7.jpg\" alt=\"检测工具\"></p>\n<p>根据360威胁情报中心的统计，截至到5月13日20点，国内有29372家机构组织的数十万台机器感染，其中有教育科研机构4341家中招，是此次事件的重灾区。被感染的组织和机构已经覆盖了几乎所有地区，影响范围遍布高校、火车站、自助终端、邮政、加油站、医院、政府办事终端等多个领域，被感染的电脑数字还在不断增长中。受影响的地区中，江苏、浙江、广东、江西、上海、山东、北京和广西排名前八位，等到周一人们上班的时候，这个数字可能还会继续攀升，甚至会翻倍。为避免周一上班后刚开机就被病毒感染，导致硬盘所有文件被恶意加密，成都市委网信办建议公众在周一开机前先断网。</p>\n<p>以下是该病毒的时间线路图：</p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang0.png\" alt=\"检测工具\"></p>\n<p>如果你的电脑一旦感染这种病毒，那么只能支付赎金解密处理才能继续使用你的电脑，除此之外别无他法。如果你的电脑还没有感染病毒，那么你需要立刻拔掉断网，并且把电脑上面重要文件进行外部设备备份处理，并且赶紧升级你的电脑安全补丁，window也已经紧紧发布了相关的安全修复补丁。</p>\n<p>首先说一下这个“永恒之蓝”病毒的来由吧，在说该病毒之前不得介绍一下-美国国家安全局(NSA)，具体该机构是干什么的自己上网查吧，说白了就是各种监控；该病毒就是这个机构的一个攻击软件(无硝烟的武器)之一，也就是说该病毒仅仅是其网络军火库中的武器之一；该病毒据称是被黑客攻击而泄露出来的…</p>\n<p>目前该病毒已经造成加油站断网，造成大量高校科研机构网络瘫痪，也造成多家医院网络瘫痪，医生电脑无法使用，急诊患者被迫转院治疗，苏州车管所也遭受攻击而无法办理业务；同时也造成英国、俄罗斯等等电话、天然气、交通系统受到攻击，总之该病毒非常凶猛，要比之前的“熊猫烧香”病毒厉害；仅仅这一个病毒软件就造成全球这么大的影响，那么NSA是否还有更厉害的武器呢？想想都恐怖！所以大家做好防护工作，别让你辛辛苦苦加班加点做的工作被毁了；下面说一下具体的防护措施：</p>\n<p><strong>一、检测点是否已经感染</strong></p>\n<p>1、下载检测工具</p>\n<blockquote>\n<p><a href=\"http://dl.360safe.com/nsa/nsatool.exe\">http://dl.360safe.com/nsa/nsatool.exe</a></p>\n</blockquote>\n<p>2、双击运行该工具，然后自动检测</p>\n<p><img src=\"http://soujava.com/images/jiance.png\" alt=\"检测工具\"></p>\n<p><strong>二、开启防火墙并关闭445端口</strong></p>\n<p>1、开启防火墙</p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang1.png\" alt=\"检测工具\"></p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang2.png\" alt=\"检测工具\"></p>\n<p>2、关闭445端口</p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang3.png\" alt=\"检测工具\"></p>\n<p><img src=\"http://soujava.com/images/fanghuoqiang4.png\" alt=\"检测工具\"></p>\n<p><strong>三、下载系统补丁</strong></p>\n<blockquote>\n<p><a href=\"https://technet.microsoft.com/zh-cn/library/security/MS17-010#\">https://technet.microsoft.com/zh-cn/library/security/MS17-010#</a></p>\n</blockquote>\n<p>在上面地址中找到你自己电脑的系统版本号，然后下载对应的补丁。</p>\n<p><strong>四、其他详细办法页可以参照下面的内容</strong></p>\n<blockquote>\n<p><a href=\"http://ops.100tal.com/plugin/pdf/web/viewer.html?file=/upload/document/WannaCry.pdf\">http://ops.100tal.com/plugin/pdf/web/viewer.html?file=/upload/document/WannaCry.pdf</a></p>\n</blockquote>\n<p><strong>五、最后一招</strong></p>\n<p><em>更换成linux操作系统吧</em></p>"},{"title":"基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具","date":"2016-09-02T03:20:33.000Z","_content":"基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。\n\n#### 平时我们开发时经常出现以下问题：\n1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，\n   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。\n\n####  功能介绍： \n1、登陆功能-- 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表\n\n2、打包功能-- 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，\n    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)\n    \n3、补丁包管理-- 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯\n\n#### 项目源码地址：\n\nhttps://github.com/mapingsheng/gitlabPatchManage \n\n#### 二次开发说明： \n1、编译gitlab项目的源码包成最新的jar包()\n\n2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置\n\n3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面\n\n#### 配置说明： \n1、src\\main\\resources是所有的资源、配置文件目录\n\n2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址\n\n3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据\n\n4、context\\文件夹下面存放oracle数据库连接的配置信息\n\n#### 声明： \n本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，\n\n所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！\n\n#### 系统界面： \n![Alt text](http://soujava.com/images/git1.jpg \"登陆\")\n\n![Alt text](http://soujava.com/images/git2.jpg \"打补丁\")\n\n![Alt text](http://soujava.com/images/git3.jpg \"补丁记录\")\n\n![Alt text](http://soujava.com/images/git4.jpg \"补丁记录\")\n\n\n\n\n","source":"_posts/基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具.md","raw":"---\ntitle: 基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具\ndate: 2016-09-02 11:20:33\ncategories: git\ntags: gitlab\n---\n基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。\n\n#### 平时我们开发时经常出现以下问题：\n1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，\n   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。\n\n####  功能介绍： \n1、登陆功能-- 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表\n\n2、打包功能-- 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，\n    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)\n    \n3、补丁包管理-- 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯\n\n#### 项目源码地址：\n\nhttps://github.com/mapingsheng/gitlabPatchManage \n\n#### 二次开发说明： \n1、编译gitlab项目的源码包成最新的jar包()\n\n2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置\n\n3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面\n\n#### 配置说明： \n1、src\\main\\resources是所有的资源、配置文件目录\n\n2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址\n\n3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据\n\n4、context\\文件夹下面存放oracle数据库连接的配置信息\n\n#### 声明： \n本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，\n\n所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！\n\n#### 系统界面： \n![Alt text](http://soujava.com/images/git1.jpg \"登陆\")\n\n![Alt text](http://soujava.com/images/git2.jpg \"打补丁\")\n\n![Alt text](http://soujava.com/images/git3.jpg \"补丁记录\")\n\n![Alt text](http://soujava.com/images/git4.jpg \"补丁记录\")\n\n\n\n\n","slug":"基于gitlab开发的针对git仓库中的项目代码库进行打包、补丁包管理工具","published":1,"updated":"2018-07-08T09:37:48.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pk0005a30tzizn0lvvk","content":"<p>基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。</p>\n<h4 id=\"平时我们开发时经常出现以下问题：\"><a href=\"#平时我们开发时经常出现以下问题：\" class=\"headerlink\" title=\"平时我们开发时经常出现以下问题：\"></a>平时我们开发时经常出现以下问题：</h4><p>1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，<br>   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。</p>\n<h4 id=\"功能介绍：\"><a href=\"#功能介绍：\" class=\"headerlink\" title=\"功能介绍：\"></a>功能介绍：</h4><p>1、登陆功能– 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表</p>\n<p>2、打包功能– 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，<br>    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)</p>\n<p>3、补丁包管理– 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯</p>\n<h4 id=\"项目源码地址：\"><a href=\"#项目源码地址：\" class=\"headerlink\" title=\"项目源码地址：\"></a>项目源码地址：</h4><p><a href=\"https://github.com/mapingsheng/gitlabPatchManage\" target=\"_blank\" rel=\"external\">https://github.com/mapingsheng/gitlabPatchManage</a> </p>\n<h4 id=\"二次开发说明：\"><a href=\"#二次开发说明：\" class=\"headerlink\" title=\"二次开发说明：\"></a>二次开发说明：</h4><p>1、编译gitlab项目的源码包成最新的jar包()</p>\n<p>2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置</p>\n<p>3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面</p>\n<h4 id=\"配置说明：\"><a href=\"#配置说明：\" class=\"headerlink\" title=\"配置说明：\"></a>配置说明：</h4><p>1、src\\main\\resources是所有的资源、配置文件目录</p>\n<p>2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址</p>\n<p>3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据</p>\n<p>4、context\\文件夹下面存放oracle数据库连接的配置信息</p>\n<h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><p>本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，</p>\n<p>所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！</p>\n<h4 id=\"系统界面：\"><a href=\"#系统界面：\" class=\"headerlink\" title=\"系统界面：\"></a>系统界面：</h4><p><img src=\"http://soujava.com/images/git1.jpg\" alt=\"Alt text\" title=\"登陆\"></p>\n<p><img src=\"http://soujava.com/images/git2.jpg\" alt=\"Alt text\" title=\"打补丁\"></p>\n<p><img src=\"http://soujava.com/images/git3.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n<p><img src=\"http://soujava.com/images/git4.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n","excerpt":"","more":"<p>基于gitlab二次开发的针对git仓库中的项目代码库进行打包、补丁包管理工具，解决产品升级时发布编译的补丁包(.class、jar)繁琐问题。</p>\n<h4 id=\"平时我们开发时经常出现以下问题：\"><a href=\"#平时我们开发时经常出现以下问题：\" class=\"headerlink\" title=\"平时我们开发时经常出现以下问题：\"></a>平时我们开发时经常出现以下问题：</h4><p>1、同一个产品由N多人开发，那么比如涉及产品版本升级时，我们是基于编译过的文件(.class、jar包)进行升级操作的，<br>   所以针对这种交叉式的开发对于补丁包发布来讲是非常头疼的事情。</p>\n<h4 id=\"功能介绍：\"><a href=\"#功能介绍：\" class=\"headerlink\" title=\"功能介绍：\"></a>功能介绍：</h4><p>1、登陆功能– 根据登陆的用户信息，将获取gitlab代码服务器中的该用户具有的所有访问权限的代码仓库列表</p>\n<p>2、打包功能– 针对某一个代码仓库，输入开始提交id(commit的ID)代号、最后提交id代号，<br>    那么将针对两个提交区间id中的代码进行编译(调用maven命令)、打包(调用maven命令)、压缩操作(程序执行)</p>\n<p>3、补丁包管理– 针对每一个人每一次的打包操作都进行记录和补丁包维护操作，比如后期涉及大版本升级(多个补丁包覆盖)可以有效追溯</p>\n<h4 id=\"项目源码地址：\"><a href=\"#项目源码地址：\" class=\"headerlink\" title=\"项目源码地址：\"></a>项目源码地址：</h4><p><a href=\"https://github.com/mapingsheng/gitlabPatchManage\">https://github.com/mapingsheng/gitlabPatchManage</a> </p>\n<h4 id=\"二次开发说明：\"><a href=\"#二次开发说明：\" class=\"headerlink\" title=\"二次开发说明：\"></a>二次开发说明：</h4><p>1、编译gitlab项目的源码包成最新的jar包()</p>\n<p>2、将编译的gitlab源码包添加到项目中、当然还有其他依赖的jar包，可以查看pom.xml文件的依赖配置</p>\n<p>3、将本项目导入你的IDE中，然后编译成war包，部署到web服务器中运行即可看到系统界面</p>\n<h4 id=\"配置说明：\"><a href=\"#配置说明：\" class=\"headerlink\" title=\"配置说明：\"></a>配置说明：</h4><p>1、src\\main\\resources是所有的资源、配置文件目录</p>\n<p>2、gitInfo.xml配置本地仓库的地址和打包后的补丁包的存放地址</p>\n<p>3、sql\\文件夹下面存放数据库的相关信息表结构和初始化的数据</p>\n<p>4、context\\文件夹下面存放oracle数据库连接的配置信息</p>\n<h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><p>本项目是完全根据自己随性的一个想法自由发挥开发出来的一个工具类项目，完全从什么都不了解、一头雾水到慢慢的搜集资料慢慢的琢磨出来的，</p>\n<p>所以开发过程中系统没有经过架构和层级的设计，完全是堆代码的方式开发的，所以代码写的比较龊，后期会慢慢的重构，忘理解！</p>\n<h4 id=\"系统界面：\"><a href=\"#系统界面：\" class=\"headerlink\" title=\"系统界面：\"></a>系统界面：</h4><p><img src=\"http://soujava.com/images/git1.jpg\" alt=\"Alt text\" title=\"登陆\"></p>\n<p><img src=\"http://soujava.com/images/git2.jpg\" alt=\"Alt text\" title=\"打补丁\"></p>\n<p><img src=\"http://soujava.com/images/git3.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n<p><img src=\"http://soujava.com/images/git4.jpg\" alt=\"Alt text\" title=\"补丁记录\"></p>\n"},{"title":"带附件的enctype表单中普通属性的获取","date":"2016-09-07T01:33:04.000Z","_content":"我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式\n\n### 一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request){\n            Map returnMap = new HashMap();\n            Iterator entries = request.getParameterMap().entrySet().iterator();\n            Map.Entry entry;\n            while (entries.hasNext()) {\n                String name = \"\";\n                String value = \"\";\n                entry = (Map.Entry) entries.next();\n                name = (String) entry.getKey();\n                Object valueObj = entry.getValue();\n                if(null == valueObj){\n                    value = \"\";\n                }else if(valueObj instanceof String[]){\n                    String[] values = (String[])valueObj;\n                    for(int i=0;i<values.length;i++){\n                        value = values[i] + \",\";\n                    }\n                    value = value.substring(0, value.length()-1);\n                }else{\n                    value = valueObj.toString();\n                }\n                returnMap.put(name, value);\n            }\n        return  returnMap;\n    }\n\n```\n  \n### 一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request,String url){\n        Map returnMap = new HashMap();\n        boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n\n\t\t//如果multipart/form-data类型的表单（带附件）\n        if (isMultipart){  \n                FileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload( factory );\n                try {\n                    List<FileItem> uploadItemList = upload.parseRequest(request);\n                    for( FileItem uploadItem : uploadItemList ){\n\n\t\t\t\t\t\t//文件表单中的普通form表单域，比如username、phone等属性\n                        if( uploadItem.isFormField() ){ \n                            String fieldName = uploadItem.getFieldName();\n                            String value = uploadItem.getString();\n                            returnMap.put(fieldName,value);\n\n                        }else{  //form表单中的file文件域\n                        \t \n                            try{\n                            \t/**\n                            \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息\n                            \t */\n                            \t String fieldname = uploadItem.getFieldName();\n                                 String filename = FilenameUtils.getName(uploadItem.getName());\n                                 InputStream filecontent = uploadItem.getInputStream();\n                                 \n                                 byte[] bytes = uploadItem.get();\n                                 \t\n                                 /**\n                             \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面\n                             \t * \n                             \t * ........\n                             \t */\n                                 \n                                 returnMap.put(fieldname,filename);//此处这是例子，具体根据你自己的业务封装\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            } finally {\n                            }\n                        }\n                    }\n                } catch (FileUploadException e) {\n                    e.printStackTrace();\n                } catch (Exception e){\n                    e.printStackTrace();\n                }\n        }\n\t\treturn  returnMap;\n\t}\n```\n注：将reques对象封装成map集合工具类，主要解决如下问题：\n\n  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回\n\n  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理\n","source":"_posts/带附件的enctype表单中普通属性的获取.md","raw":"---\ntitle: 带附件的enctype表单中普通属性的获取\ndate: 2016-09-07 09:33:04\ncategories: java\ntags: 表单元素获取\n---\n我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式\n\n### 一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request){\n            Map returnMap = new HashMap();\n            Iterator entries = request.getParameterMap().entrySet().iterator();\n            Map.Entry entry;\n            while (entries.hasNext()) {\n                String name = \"\";\n                String value = \"\";\n                entry = (Map.Entry) entries.next();\n                name = (String) entry.getKey();\n                Object valueObj = entry.getValue();\n                if(null == valueObj){\n                    value = \"\";\n                }else if(valueObj instanceof String[]){\n                    String[] values = (String[])valueObj;\n                    for(int i=0;i<values.length;i++){\n                        value = values[i] + \",\";\n                    }\n                    value = value.substring(0, value.length()-1);\n                }else{\n                    value = valueObj.toString();\n                }\n                returnMap.put(name, value);\n            }\n        return  returnMap;\n    }\n\n```\n  \n### 一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\n```java\n\n\t/**\n     * 将request对象解析处理成map\n     * @param request\n     * @return\n     */\n    public static Map<String,String> transToMAP(HttpServletRequest request,String url){\n        Map returnMap = new HashMap();\n        boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n\n\t\t//如果multipart/form-data类型的表单（带附件）\n        if (isMultipart){  \n                FileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload( factory );\n                try {\n                    List<FileItem> uploadItemList = upload.parseRequest(request);\n                    for( FileItem uploadItem : uploadItemList ){\n\n\t\t\t\t\t\t//文件表单中的普通form表单域，比如username、phone等属性\n                        if( uploadItem.isFormField() ){ \n                            String fieldName = uploadItem.getFieldName();\n                            String value = uploadItem.getString();\n                            returnMap.put(fieldName,value);\n\n                        }else{  //form表单中的file文件域\n                        \t \n                            try{\n                            \t/**\n                            \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息\n                            \t */\n                            \t String fieldname = uploadItem.getFieldName();\n                                 String filename = FilenameUtils.getName(uploadItem.getName());\n                                 InputStream filecontent = uploadItem.getInputStream();\n                                 \n                                 byte[] bytes = uploadItem.get();\n                                 \t\n                                 /**\n                             \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面\n                             \t * \n                             \t * ........\n                             \t */\n                                 \n                                 returnMap.put(fieldname,filename);//此处这是例子，具体根据你自己的业务封装\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            } finally {\n                            }\n                        }\n                    }\n                } catch (FileUploadException e) {\n                    e.printStackTrace();\n                } catch (Exception e){\n                    e.printStackTrace();\n                }\n        }\n\t\treturn  returnMap;\n\t}\n```\n注：将reques对象封装成map集合工具类，主要解决如下问题：\n\n  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回\n\n  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理\n","slug":"带附件的enctype表单中普通属性的获取","published":1,"updated":"2018-07-08T09:37:48.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pk2005e30tzqkot14x0","content":"<p>我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式</p>\n<h3 id=\"一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\"><a href=\"#一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\"></a>一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">           Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">           Iterator entries = request.getParameterMap().entrySet().iterator();</div><div class=\"line\">           Map.Entry entry;</div><div class=\"line\">           <span class=\"keyword\">while</span> (entries.hasNext()) &#123;</div><div class=\"line\">               String name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               String value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               entry = (Map.Entry) entries.next();</div><div class=\"line\">               name = (String) entry.getKey();</div><div class=\"line\">               Object valueObj = entry.getValue();</div><div class=\"line\">               <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == valueObj)&#123;</div><div class=\"line\">                   value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(valueObj <span class=\"keyword\">instanceof</span> String[])&#123;</div><div class=\"line\">                   String[] values = (String[])valueObj;</div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;values.length;i++)&#123;</div><div class=\"line\">                       value = values[i] + <span class=\"string\">\",\"</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   value = value.substring(<span class=\"number\">0</span>, value.length()-<span class=\"number\">1</span>);</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                   value = valueObj.toString();</div><div class=\"line\">               &#125;</div><div class=\"line\">               returnMap.put(name, value);</div><div class=\"line\">           &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\"><a href=\"#一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\"></a>一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request,String url)</span></span>&#123;</div><div class=\"line\">       Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">       <span class=\"keyword\">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//如果multipart/form-data类型的表单（带附件）</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isMultipart)&#123;  </div><div class=\"line\">               FileItemFactory factory = <span class=\"keyword\">new</span> DiskFileItemFactory();</div><div class=\"line\">               ServletFileUpload upload = <span class=\"keyword\">new</span> ServletFileUpload( factory );</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   List&lt;FileItem&gt; uploadItemList = upload.parseRequest(request);</div><div class=\"line\">                   <span class=\"keyword\">for</span>( FileItem uploadItem : uploadItemList )&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//文件表单中的普通form表单域，比如username、phone等属性</span></div><div class=\"line\">                       <span class=\"keyword\">if</span>( uploadItem.isFormField() )&#123; </div><div class=\"line\">                           String fieldName = uploadItem.getFieldName();</div><div class=\"line\">                           String value = uploadItem.getString();</div><div class=\"line\">                           returnMap.put(fieldName,value);</div><div class=\"line\"></div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//form表单中的file文件域</span></div><div class=\"line\">                       \t </div><div class=\"line\">                           <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                           \t<span class=\"comment\">/**</span></div><div class=\"line\">                           \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息</div><div class=\"line\">                           \t */</div><div class=\"line\">                           \t String fieldname = uploadItem.getFieldName();</div><div class=\"line\">                                String filename = FilenameUtils.getName(uploadItem.getName());</div><div class=\"line\">                                InputStream filecontent = uploadItem.getInputStream();</div><div class=\"line\">                                </div><div class=\"line\">                                <span class=\"keyword\">byte</span>[] bytes = uploadItem.get();</div><div class=\"line\">                                \t</div><div class=\"line\">                                <span class=\"comment\">/**</span></div><div class=\"line\">                            \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面</div><div class=\"line\">                            \t * </div><div class=\"line\">                            \t * ........</div><div class=\"line\">                            \t */</div><div class=\"line\">                                </div><div class=\"line\">                                returnMap.put(fieldname,filename);<span class=\"comment\">//此处这是例子，具体根据你自己的业务封装</span></div><div class=\"line\">                           &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                               e.printStackTrace();</div><div class=\"line\">                           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (FileUploadException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：将reques对象封装成map集合工具类，主要解决如下问题：</p>\n<p>  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回</p>\n<p>  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理</p>\n","excerpt":"","more":"<p>我们在平时开发过程中，经常会遇到一些表单，比如用户信息修改、数据资源添加等等，并且这些表单都会带有附件：图片、其他文件；所以我们平时开发过程中经常需要处理两种表单，一种是带附件的表单，一种是不带附件的表单；因为两种表单向后台提交数据的格式不同，后者是以流的方式将表单数据提交到后台的。所以我们下面分两块描述两种获取不同表单的方式</p>\n<h3 id=\"一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\"><a href=\"#一、普通表单-不带文件域-，基于普通表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法\"></a>一、普通表单(不带文件域)，基于普通表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">           Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">           Iterator entries = request.getParameterMap().entrySet().iterator();</div><div class=\"line\">           Map.Entry entry;</div><div class=\"line\">           <span class=\"keyword\">while</span> (entries.hasNext()) &#123;</div><div class=\"line\">               String name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               String value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               entry = (Map.Entry) entries.next();</div><div class=\"line\">               name = (String) entry.getKey();</div><div class=\"line\">               Object valueObj = entry.getValue();</div><div class=\"line\">               <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == valueObj)&#123;</div><div class=\"line\">                   value = <span class=\"string\">\"\"</span>;</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(valueObj <span class=\"keyword\">instanceof</span> String[])&#123;</div><div class=\"line\">                   String[] values = (String[])valueObj;</div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;values.length;i++)&#123;</div><div class=\"line\">                       value = values[i] + <span class=\"string\">\",\"</span>;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   value = value.substring(<span class=\"number\">0</span>, value.length()-<span class=\"number\">1</span>);</div><div class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                   value = valueObj.toString();</div><div class=\"line\">               &#125;</div><div class=\"line\">               returnMap.put(name, value);</div><div class=\"line\">           &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\"><a href=\"#一、普通表单-带文件域-，基于附件表单封装成了一个通用的方法\" class=\"headerlink\" title=\"一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法\"></a>一、普通表单(带文件域)，基于附件表单封装成了一个通用的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 将request对象解析处理成map</div><div class=\"line\">    * <span class=\"doctag\">@param</span> request</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String,String&gt; <span class=\"title\">transToMAP</span><span class=\"params\">(HttpServletRequest request,String url)</span></span>&#123;</div><div class=\"line\">       Map returnMap = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">       <span class=\"keyword\">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//如果multipart/form-data类型的表单（带附件）</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (isMultipart)&#123;  </div><div class=\"line\">               FileItemFactory factory = <span class=\"keyword\">new</span> DiskFileItemFactory();</div><div class=\"line\">               ServletFileUpload upload = <span class=\"keyword\">new</span> ServletFileUpload( factory );</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   List&lt;FileItem&gt; uploadItemList = upload.parseRequest(request);</div><div class=\"line\">                   <span class=\"keyword\">for</span>( FileItem uploadItem : uploadItemList )&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//文件表单中的普通form表单域，比如username、phone等属性</span></div><div class=\"line\">                       <span class=\"keyword\">if</span>( uploadItem.isFormField() )&#123; </div><div class=\"line\">                           String fieldName = uploadItem.getFieldName();</div><div class=\"line\">                           String value = uploadItem.getString();</div><div class=\"line\">                           returnMap.put(fieldName,value);</div><div class=\"line\"></div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//form表单中的file文件域</span></div><div class=\"line\">                       \t </div><div class=\"line\">                           <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                           \t<span class=\"comment\">/**</div><div class=\"line\">                           \t * 1、从type=\"file\"文件域中获取文件流、字节数组等等信息</div><div class=\"line\">                           \t */</span></div><div class=\"line\">                           \t String fieldname = uploadItem.getFieldName();</div><div class=\"line\">                                String filename = FilenameUtils.getName(uploadItem.getName());</div><div class=\"line\">                                InputStream filecontent = uploadItem.getInputStream();</div><div class=\"line\">                                </div><div class=\"line\">                                <span class=\"keyword\">byte</span>[] bytes = uploadItem.get();</div><div class=\"line\">                                \t</div><div class=\"line\">                                <span class=\"comment\">/**</div><div class=\"line\">                            \t * 2、把对应的文件上传到文件服务器中，或者把文件写入磁盘上面</div><div class=\"line\">                            \t * </div><div class=\"line\">                            \t * ........</div><div class=\"line\">                            \t */</span></div><div class=\"line\">                                </div><div class=\"line\">                                returnMap.put(fieldname,filename);<span class=\"comment\">//此处这是例子，具体根据你自己的业务封装</span></div><div class=\"line\">                           &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                               e.printStackTrace();</div><div class=\"line\">                           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (FileUploadException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  returnMap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：将reques对象封装成map集合工具类，主要解决如下问题：</p>\n<p>  1、当仅仅处理简单的form表单时，可以通过该工具类之间获取request对象中的属性集合，并且针对一些特殊情况(为“空”的属性、编码转换)可以达到集中处理并统一返回</p>\n<p>  2、当仅仅处理带file的form表单时，提交到后台是已流的方式传输；解决通过request.getParameter不能获取属性的问题，并且可以集中统一处理</p>\n"},{"title":"我所理解的nodeJs的两个概念","date":"2017-03-06T08:22:02.000Z","_content":"仔细想了想，现将我对nodejs理解中的两个概念综述一下，以确定后续对其使用定位和深入理解。\n\n## 1、包管理器 ##\n\n其实nodejs有一个强大的包管理器支撑着nodejs的繁荣生态，提到这个包管理器就据下面几个例子：\n\n<!--more-->\n\n*用过linux操作系统的都知道：*\n\n 如果用的是Debian、Ubuntu操作系统的话，那么我们平时安装软件时会用到【*apt-get install 包名称*】去安装；\n\n 如果用的是Fedora/Redhat、CentOS操作系统的话，那么我们平时安装软件时会用到【*yum install 包名称*】去安装；\n\n 再举一个例子，就是平时开发中用maven管理依赖；一般如果工程依赖什么jar包，然后在pom.xml中配置这个依赖的jar包信息就行了；\n\n 通过上面三个例子是不是发现我们安装软件、添加依赖的jar包等操作时非常方便；可是有没有想到他们如果操作的，其实在后面有一个仓库；\n\t\n 安装软件时有一个在线软件仓库，添加jar依赖时，有一个jar包仓库(本地或远程)；当执行安装命令时，会直接从仓库中把相关软件下载下来并且自动安装，就是这么爽；\n 其实nodejs也有类似这么一个仓库(node package manage)，简称NPM\n\n 如果安装nodejs仓库中的软件(模块)，可以通过npm命令【*npm install 名称*】；当然npm命令其实在我们安装nodejs时已经自动安装了，\n 我们可以输入*npm -v*查看已经安装的npm的版本信息；当然如果没有安装npm的话，\n 可以通过命令以下进行安装：\n >curl http://npmjs.org/install.sh | sudo sh  #如果非root用户需要添加sudo sh获取管理员权限\n\n## 2、异步事件 ##\n\nnodejs是基于事件机制进行处理的，不像多线程那样；拿一个例子来讲，比如在线购物时，\"提交订单\"的操作：\n>如果用多线程方式：\n>\n>a、启动一个线程判断库存，并且减库存操作(花费200ms)\n>\n>b、启动一个线程修改订单状态操作(花费300ms)\n>\n>c、启动一个线程修改购物车中商品状态操作(花费400ms)\n \n  当然上述流程只是假设，如果针对上面三个操作不使用多线程的情况，花费的时间就是三个操作的时间总和(花费900ms)；而如果采用多线程并行处理三个操作的话，那么花费的时间仅仅是三个操作中花费时间最长的一个操作的时间(花费400ms)。\n\n>如果用nodejs方式：\n>\n>a、添加一个库存操作事件(花费50ms)\n>\n>>a.1、判断库存(花费100ms)\n>\n>>a.2、减库存操作(花费100ms)\n>\n>b、添加一个修改订单的事件(花费40ms)\n\t\t\t\t\n>>b.1、修改订单状态操作(花费100ms)\n>\n>c、添加一个修改购物车的事件(花费50ms)\n>\n>>c.1、修改购物车中商品状态操作(花费400ms)\n\n*注：上面的添加一个XX事件其实是将一个事件添加到事件管理器中，然后nodejs会自动且不间断的消费处理事件管理器中的事件。*\n\n通过看到nodejs的操作步骤场景我们发现一个重要的特征就是不停的“添加一个XX事件”；\n所以提交订单的操作时间将是(50ms+40ms+50ms=140ms)，相比多线程场景花费的时间(400ms)是不是少了很多；\n\n>但是有一点我们需要注意:\n>>1、使用nodejs的场景花费 140ms，并不是提交一个订单花费了140ms，而是用户提交一个订单收到的响应是140ms；\n>\n>>2、多线程场景虽然花费了400ms，但是提交订单这个操作全部完成了；而nodejs场景花费了140ms，但是提交订单这个操作还没有全部完成；这就是异步的概念\n>\n>>3、所以针对提交订单这个操作使用nodejs去处理貌似有点欠缺，因为提交订单操作涉及大量的“计算”，如果采用异步去处理，可能无法保证数据原子性和一致性。\n所以nodejs的使用场景更适合密集型IO，比如应对大流量的请求、磁盘io等等。\n","source":"_posts/我所理解的nodeJs的两个概念.md","raw":"---\ntitle: 我所理解的nodeJs的两个概念\ndate: 2017-03-06 16:22:02\ncategories: nodeJs\ntags: nodeJs\n---\n仔细想了想，现将我对nodejs理解中的两个概念综述一下，以确定后续对其使用定位和深入理解。\n\n## 1、包管理器 ##\n\n其实nodejs有一个强大的包管理器支撑着nodejs的繁荣生态，提到这个包管理器就据下面几个例子：\n\n<!--more-->\n\n*用过linux操作系统的都知道：*\n\n 如果用的是Debian、Ubuntu操作系统的话，那么我们平时安装软件时会用到【*apt-get install 包名称*】去安装；\n\n 如果用的是Fedora/Redhat、CentOS操作系统的话，那么我们平时安装软件时会用到【*yum install 包名称*】去安装；\n\n 再举一个例子，就是平时开发中用maven管理依赖；一般如果工程依赖什么jar包，然后在pom.xml中配置这个依赖的jar包信息就行了；\n\n 通过上面三个例子是不是发现我们安装软件、添加依赖的jar包等操作时非常方便；可是有没有想到他们如果操作的，其实在后面有一个仓库；\n\t\n 安装软件时有一个在线软件仓库，添加jar依赖时，有一个jar包仓库(本地或远程)；当执行安装命令时，会直接从仓库中把相关软件下载下来并且自动安装，就是这么爽；\n 其实nodejs也有类似这么一个仓库(node package manage)，简称NPM\n\n 如果安装nodejs仓库中的软件(模块)，可以通过npm命令【*npm install 名称*】；当然npm命令其实在我们安装nodejs时已经自动安装了，\n 我们可以输入*npm -v*查看已经安装的npm的版本信息；当然如果没有安装npm的话，\n 可以通过命令以下进行安装：\n >curl http://npmjs.org/install.sh | sudo sh  #如果非root用户需要添加sudo sh获取管理员权限\n\n## 2、异步事件 ##\n\nnodejs是基于事件机制进行处理的，不像多线程那样；拿一个例子来讲，比如在线购物时，\"提交订单\"的操作：\n>如果用多线程方式：\n>\n>a、启动一个线程判断库存，并且减库存操作(花费200ms)\n>\n>b、启动一个线程修改订单状态操作(花费300ms)\n>\n>c、启动一个线程修改购物车中商品状态操作(花费400ms)\n \n  当然上述流程只是假设，如果针对上面三个操作不使用多线程的情况，花费的时间就是三个操作的时间总和(花费900ms)；而如果采用多线程并行处理三个操作的话，那么花费的时间仅仅是三个操作中花费时间最长的一个操作的时间(花费400ms)。\n\n>如果用nodejs方式：\n>\n>a、添加一个库存操作事件(花费50ms)\n>\n>>a.1、判断库存(花费100ms)\n>\n>>a.2、减库存操作(花费100ms)\n>\n>b、添加一个修改订单的事件(花费40ms)\n\t\t\t\t\n>>b.1、修改订单状态操作(花费100ms)\n>\n>c、添加一个修改购物车的事件(花费50ms)\n>\n>>c.1、修改购物车中商品状态操作(花费400ms)\n\n*注：上面的添加一个XX事件其实是将一个事件添加到事件管理器中，然后nodejs会自动且不间断的消费处理事件管理器中的事件。*\n\n通过看到nodejs的操作步骤场景我们发现一个重要的特征就是不停的“添加一个XX事件”；\n所以提交订单的操作时间将是(50ms+40ms+50ms=140ms)，相比多线程场景花费的时间(400ms)是不是少了很多；\n\n>但是有一点我们需要注意:\n>>1、使用nodejs的场景花费 140ms，并不是提交一个订单花费了140ms，而是用户提交一个订单收到的响应是140ms；\n>\n>>2、多线程场景虽然花费了400ms，但是提交订单这个操作全部完成了；而nodejs场景花费了140ms，但是提交订单这个操作还没有全部完成；这就是异步的概念\n>\n>>3、所以针对提交订单这个操作使用nodejs去处理貌似有点欠缺，因为提交订单操作涉及大量的“计算”，如果采用异步去处理，可能无法保证数据原子性和一致性。\n所以nodejs的使用场景更适合密集型IO，比如应对大流量的请求、磁盘io等等。\n","slug":"我所理解的nodeJs的两个概念","published":1,"updated":"2018-07-08T09:37:48.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pk5005i30tziiujszxe","content":"<p>仔细想了想，现将我对nodejs理解中的两个概念综述一下，以确定后续对其使用定位和深入理解。</p>\n<h2 id=\"1、包管理器\"><a href=\"#1、包管理器\" class=\"headerlink\" title=\"1、包管理器\"></a>1、包管理器</h2><p>其实nodejs有一个强大的包管理器支撑着nodejs的繁荣生态，提到这个包管理器就据下面几个例子：</p>\n<a id=\"more\"></a>\n<p><em>用过linux操作系统的都知道：</em></p>\n<p> 如果用的是Debian、Ubuntu操作系统的话，那么我们平时安装软件时会用到【<em>apt-get install 包名称</em>】去安装；</p>\n<p> 如果用的是Fedora/Redhat、CentOS操作系统的话，那么我们平时安装软件时会用到【<em>yum install 包名称</em>】去安装；</p>\n<p> 再举一个例子，就是平时开发中用maven管理依赖；一般如果工程依赖什么jar包，然后在pom.xml中配置这个依赖的jar包信息就行了；</p>\n<p> 通过上面三个例子是不是发现我们安装软件、添加依赖的jar包等操作时非常方便；可是有没有想到他们如果操作的，其实在后面有一个仓库；</p>\n<p> 安装软件时有一个在线软件仓库，添加jar依赖时，有一个jar包仓库(本地或远程)；当执行安装命令时，会直接从仓库中把相关软件下载下来并且自动安装，就是这么爽；<br> 其实nodejs也有类似这么一个仓库(node package manage)，简称NPM</p>\n<p> 如果安装nodejs仓库中的软件(模块)，可以通过npm命令【<em>npm install 名称</em>】；当然npm命令其实在我们安装nodejs时已经自动安装了，<br> 我们可以输入<em>npm -v</em>查看已经安装的npm的版本信息；当然如果没有安装npm的话，<br> 可以通过命令以下进行安装：</p>\n<blockquote>\n<p>curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"external\">http://npmjs.org/install.sh</a> | sudo sh  #如果非root用户需要添加sudo sh获取管理员权限</p>\n</blockquote>\n<h2 id=\"2、异步事件\"><a href=\"#2、异步事件\" class=\"headerlink\" title=\"2、异步事件\"></a>2、异步事件</h2><p>nodejs是基于事件机制进行处理的，不像多线程那样；拿一个例子来讲，比如在线购物时，”提交订单”的操作：</p>\n<blockquote>\n<p>如果用多线程方式：</p>\n<p>a、启动一个线程判断库存，并且减库存操作(花费200ms)</p>\n<p>b、启动一个线程修改订单状态操作(花费300ms)</p>\n<p>c、启动一个线程修改购物车中商品状态操作(花费400ms)</p>\n</blockquote>\n<p>  当然上述流程只是假设，如果针对上面三个操作不使用多线程的情况，花费的时间就是三个操作的时间总和(花费900ms)；而如果采用多线程并行处理三个操作的话，那么花费的时间仅仅是三个操作中花费时间最长的一个操作的时间(花费400ms)。</p>\n<blockquote>\n<p>如果用nodejs方式：</p>\n<p>a、添加一个库存操作事件(花费50ms)</p>\n<blockquote>\n<p>a.1、判断库存(花费100ms)</p>\n<p>a.2、减库存操作(花费100ms)</p>\n</blockquote>\n<p>b、添加一个修改订单的事件(花费40ms)</p>\n<blockquote>\n<p>b.1、修改订单状态操作(花费100ms)</p>\n</blockquote>\n<p>c、添加一个修改购物车的事件(花费50ms)</p>\n<blockquote>\n<p>c.1、修改购物车中商品状态操作(花费400ms)</p>\n</blockquote>\n</blockquote>\n<p><em>注：上面的添加一个XX事件其实是将一个事件添加到事件管理器中，然后nodejs会自动且不间断的消费处理事件管理器中的事件。</em></p>\n<p>通过看到nodejs的操作步骤场景我们发现一个重要的特征就是不停的“添加一个XX事件”；<br>所以提交订单的操作时间将是(50ms+40ms+50ms=140ms)，相比多线程场景花费的时间(400ms)是不是少了很多；</p>\n<blockquote>\n<p>但是有一点我们需要注意:</p>\n<blockquote>\n<p>1、使用nodejs的场景花费 140ms，并不是提交一个订单花费了140ms，而是用户提交一个订单收到的响应是140ms；</p>\n<p>2、多线程场景虽然花费了400ms，但是提交订单这个操作全部完成了；而nodejs场景花费了140ms，但是提交订单这个操作还没有全部完成；这就是异步的概念</p>\n<p>3、所以针对提交订单这个操作使用nodejs去处理貌似有点欠缺，因为提交订单操作涉及大量的“计算”，如果采用异步去处理，可能无法保证数据原子性和一致性。<br>所以nodejs的使用场景更适合密集型IO，比如应对大流量的请求、磁盘io等等。</p>\n</blockquote>\n</blockquote>\n","excerpt":"<p>仔细想了想，现将我对nodejs理解中的两个概念综述一下，以确定后续对其使用定位和深入理解。</p>\n<h2 id=\"1、包管理器\"><a href=\"#1、包管理器\" class=\"headerlink\" title=\"1、包管理器\"></a>1、包管理器</h2><p>其实nodejs有一个强大的包管理器支撑着nodejs的繁荣生态，提到这个包管理器就据下面几个例子：</p>","more":"<p><em>用过linux操作系统的都知道：</em></p>\n<p> 如果用的是Debian、Ubuntu操作系统的话，那么我们平时安装软件时会用到【<em>apt-get install 包名称</em>】去安装；</p>\n<p> 如果用的是Fedora/Redhat、CentOS操作系统的话，那么我们平时安装软件时会用到【<em>yum install 包名称</em>】去安装；</p>\n<p> 再举一个例子，就是平时开发中用maven管理依赖；一般如果工程依赖什么jar包，然后在pom.xml中配置这个依赖的jar包信息就行了；</p>\n<p> 通过上面三个例子是不是发现我们安装软件、添加依赖的jar包等操作时非常方便；可是有没有想到他们如果操作的，其实在后面有一个仓库；</p>\n<p> 安装软件时有一个在线软件仓库，添加jar依赖时，有一个jar包仓库(本地或远程)；当执行安装命令时，会直接从仓库中把相关软件下载下来并且自动安装，就是这么爽；<br> 其实nodejs也有类似这么一个仓库(node package manage)，简称NPM</p>\n<p> 如果安装nodejs仓库中的软件(模块)，可以通过npm命令【<em>npm install 名称</em>】；当然npm命令其实在我们安装nodejs时已经自动安装了，<br> 我们可以输入<em>npm -v</em>查看已经安装的npm的版本信息；当然如果没有安装npm的话，<br> 可以通过命令以下进行安装：</p>\n<blockquote>\n<p>curl <a href=\"http://npmjs.org/install.sh\">http://npmjs.org/install.sh</a> | sudo sh  #如果非root用户需要添加sudo sh获取管理员权限</p>\n</blockquote>\n<h2 id=\"2、异步事件\"><a href=\"#2、异步事件\" class=\"headerlink\" title=\"2、异步事件\"></a>2、异步事件</h2><p>nodejs是基于事件机制进行处理的，不像多线程那样；拿一个例子来讲，比如在线购物时，”提交订单”的操作：</p>\n<blockquote>\n<p>如果用多线程方式：</p>\n<p>a、启动一个线程判断库存，并且减库存操作(花费200ms)</p>\n<p>b、启动一个线程修改订单状态操作(花费300ms)</p>\n<p>c、启动一个线程修改购物车中商品状态操作(花费400ms)</p>\n</blockquote>\n<p>  当然上述流程只是假设，如果针对上面三个操作不使用多线程的情况，花费的时间就是三个操作的时间总和(花费900ms)；而如果采用多线程并行处理三个操作的话，那么花费的时间仅仅是三个操作中花费时间最长的一个操作的时间(花费400ms)。</p>\n<blockquote>\n<p>如果用nodejs方式：</p>\n<p>a、添加一个库存操作事件(花费50ms)</p>\n<blockquote>\n<p>a.1、判断库存(花费100ms)</p>\n<p>a.2、减库存操作(花费100ms)</p>\n</blockquote>\n<p>b、添加一个修改订单的事件(花费40ms)</p>\n<blockquote>\n<p>b.1、修改订单状态操作(花费100ms)</p>\n</blockquote>\n<p>c、添加一个修改购物车的事件(花费50ms)</p>\n<blockquote>\n<p>c.1、修改购物车中商品状态操作(花费400ms)</p>\n</blockquote>\n</blockquote>\n<p><em>注：上面的添加一个XX事件其实是将一个事件添加到事件管理器中，然后nodejs会自动且不间断的消费处理事件管理器中的事件。</em></p>\n<p>通过看到nodejs的操作步骤场景我们发现一个重要的特征就是不停的“添加一个XX事件”；<br>所以提交订单的操作时间将是(50ms+40ms+50ms=140ms)，相比多线程场景花费的时间(400ms)是不是少了很多；</p>\n<blockquote>\n<p>但是有一点我们需要注意:</p>\n<blockquote>\n<p>1、使用nodejs的场景花费 140ms，并不是提交一个订单花费了140ms，而是用户提交一个订单收到的响应是140ms；</p>\n<p>2、多线程场景虽然花费了400ms，但是提交订单这个操作全部完成了；而nodejs场景花费了140ms，但是提交订单这个操作还没有全部完成；这就是异步的概念</p>\n<p>3、所以针对提交订单这个操作使用nodejs去处理貌似有点欠缺，因为提交订单操作涉及大量的“计算”，如果采用异步去处理，可能无法保证数据原子性和一致性。<br>所以nodejs的使用场景更适合密集型IO，比如应对大流量的请求、磁盘io等等。</p>\n</blockquote>\n</blockquote>"},{"title":"如何查看当前的linux系统是哪个发行商","date":"2016-08-03T08:06:33.000Z","_content":"我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：\n\n一、 通用方法-适用于当前市面上绝大多数linux\n\n  **lsb_release -a**\n```java\n\t[maps@iZ25017n0ruZ conf]$ lsb_release -a\n\tLSB Version:\t:core-4.1-amd64:core-4.1-noarch\n\tDistributor ID:\tCentOS\n\tDescription:\tCentOS Linux release 7.0.1406 (Core) \n\tRelease:\t7.0.1406\n\tCodename:\tCore\n```\n输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406\n\n二、 非通用-技巧\n\n1. 首先通过cat /proc/version命令查看当前linux系统内核信息\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014\n```\n通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014\n```\n通过上面输出信息我们可以看到系统为Ubuntu系列\n\n2. 然后切换到/etc/目录下面，看看是否os.release文件，然后通过\"cat os.release\"命令查看该文件内容信息\n```java\n\t[**cat /etc/redhat-release**@iZ25017n0ruZ etc]$ cat ./os-release \n\tNAME=\"CentOS Linux\"\n\tVERSION=\"7 (Core)\"\n\tID=\"centos\"\n\tID_LIKE=\"rhel fedora\"\n\tVERSION_ID=\"7\"\n\tPRETTY_NAME=\"CentOS Linux 7 (Core)\"\n\tANSI_COLOR=\"0;31\"\n\tCPE_NAME=\"cpe:/o:centos:centos:7\"\n\tHOME_URL=\"https://www.centos.org/\"\n\tBUG_REPORT_URL=\"https://bugs.centos.org/\"\n```\n通过上面的输出信息我们可以确定该系统为CentOs 7\n\n注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过**cat /etc/redhat-release**命令也可以查看系统发行商信息\n```java\n\t[maps@iZ25017n0ruZ conf]$ cat /etc/redhat-release\n\tCentOS Linux release 7.0.1406 (Core) \n```\n","source":"_posts/如何查看当前的linux系统是哪个发行商.md","raw":"---\ntitle: 如何查看当前的linux系统是哪个发行商\ndate: 2016-08-03 16:06:33\ncategories: Linux\ntags: Linux\n---\n我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：\n\n一、 通用方法-适用于当前市面上绝大多数linux\n\n  **lsb_release -a**\n```java\n\t[maps@iZ25017n0ruZ conf]$ lsb_release -a\n\tLSB Version:\t:core-4.1-amd64:core-4.1-noarch\n\tDistributor ID:\tCentOS\n\tDescription:\tCentOS Linux release 7.0.1406 (Core) \n\tRelease:\t7.0.1406\n\tCodename:\tCore\n```\n输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406\n\n二、 非通用-技巧\n\n1. 首先通过cat /proc/version命令查看当前linux系统内核信息\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014\n```\n通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列\n```java\n\t[maps@iZ25017n0ruZ etc]$ cat /proc/version \n\tLinux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014\n```\n通过上面输出信息我们可以看到系统为Ubuntu系列\n\n2. 然后切换到/etc/目录下面，看看是否os.release文件，然后通过\"cat os.release\"命令查看该文件内容信息\n```java\n\t[**cat /etc/redhat-release**@iZ25017n0ruZ etc]$ cat ./os-release \n\tNAME=\"CentOS Linux\"\n\tVERSION=\"7 (Core)\"\n\tID=\"centos\"\n\tID_LIKE=\"rhel fedora\"\n\tVERSION_ID=\"7\"\n\tPRETTY_NAME=\"CentOS Linux 7 (Core)\"\n\tANSI_COLOR=\"0;31\"\n\tCPE_NAME=\"cpe:/o:centos:centos:7\"\n\tHOME_URL=\"https://www.centos.org/\"\n\tBUG_REPORT_URL=\"https://bugs.centos.org/\"\n```\n通过上面的输出信息我们可以确定该系统为CentOs 7\n\n注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过**cat /etc/redhat-release**命令也可以查看系统发行商信息\n```java\n\t[maps@iZ25017n0ruZ conf]$ cat /etc/redhat-release\n\tCentOS Linux release 7.0.1406 (Core) \n```\n","slug":"如何查看当前的linux系统是哪个发行商","published":1,"updated":"2018-07-08T09:37:48.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pk7005l30tztkwmnmo8","content":"<p>我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：</p>\n<p>一、 通用方法-适用于当前市面上绝大多数linux</p>\n<p>  <strong>lsb_release -a</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ lsb_release -a</div><div class=\"line\">LSB Version:\t:core-<span class=\"number\">4.1</span>-amd64:core-<span class=\"number\">4.1</span>-noarch</div><div class=\"line\">Distributor ID:\tCentOS</div><div class=\"line\">Description:\tCentOS Linux release <span class=\"number\">7.0</span>.1406 (Core) </div><div class=\"line\">Release:\t<span class=\"number\">7.0</span>.1406</div><div class=\"line\">Codename:\tCore</div></pre></td></tr></table></figure></p>\n<p>输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406</p>\n<p>二、 非通用-技巧</p>\n<ol>\n<li>首先通过cat /proc/version命令查看当前linux系统内核信息<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014</div></pre></td></tr></table></figure></p>\n<p>通过上面输出信息我们可以看到系统为Ubuntu系列</p>\n<ol>\n<li>然后切换到/etc/目录下面，看看是否os.release文件，然后通过”cat os.release”命令查看该文件内容信息<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[**cat /etc/redhat-release**<span class=\"meta\">@iZ</span>25017n0ruZ etc]$ cat ./os-release </div><div class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></div><div class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></div><div class=\"line\">ID=<span class=\"string\">\"centos\"</span></div><div class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></div><div class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></div><div class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></div><div class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></div><div class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></div><div class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></div><div class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面的输出信息我们可以确定该系统为CentOs 7</p>\n<p>注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过<strong>cat /etc/redhat-release</strong>命令也可以查看系统发行商信息<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ cat /etc/redhat-release</div><div class=\"line\">CentOS Linux release <span class=\"number\">7.0</span>.1406 (Core)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>我们刚开始进入一个linux操作系统，可能只知道它是一个操作系统，但是不太清楚到底是那个发行商，比如ubuntu、Centos、Debian等等；那么当然老鸟通过查看某些目录的配置文件一眼就可以看到是什么发行商；对于新鸟来说有以下几个技巧可以查看：</p>\n<p>一、 通用方法-适用于当前市面上绝大多数linux</p>\n<p>  <strong>lsb_release -a</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ lsb_release -a</div><div class=\"line\">LSB Version:\t:core-<span class=\"number\">4.1</span>-amd64:core-<span class=\"number\">4.1</span>-noarch</div><div class=\"line\">Distributor ID:\tCentOS</div><div class=\"line\">Description:\tCentOS Linux release <span class=\"number\">7.0</span>.1406 (Core) </div><div class=\"line\">Release:\t<span class=\"number\">7.0</span>.1406</div><div class=\"line\">Codename:\tCore</div></pre></td></tr></table></figure></p>\n<p>输入以上命令后可以看到该linux操作系统是CentOs,版本是7.0.1406</p>\n<p>二、 非通用-技巧</p>\n<ol>\n<li>首先通过cat /proc/version命令查看当前linux系统内核信息<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.10.0-123.9.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) #1 SMP Thu Nov 6 15:06:03 UTC 2014</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面命令输出信息我们可以看到系统为Red Hat 4.8.2系列<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps@iZ25017n0ruZ etc]$ cat /proc/version </div><div class=\"line\">Linux version 3.13.0-32-generic (buildd@kissel) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014</div></pre></td></tr></table></figure></p>\n<p>通过上面输出信息我们可以看到系统为Ubuntu系列</p>\n<ol>\n<li>然后切换到/etc/目录下面，看看是否os.release文件，然后通过”cat os.release”命令查看该文件内容信息<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[**cat /etc/redhat-release**<span class=\"meta\">@iZ</span>25017n0ruZ etc]$ cat ./os-release </div><div class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></div><div class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></div><div class=\"line\">ID=<span class=\"string\">\"centos\"</span></div><div class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></div><div class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></div><div class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></div><div class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></div><div class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></div><div class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></div><div class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过上面的输出信息我们可以确定该系统为CentOs 7</p>\n<p>注：如果是redhat系列的linux系统，在/etc目录下面会有redhat-release文件，我们通过<strong>cat /etc/redhat-release</strong>命令也可以查看系统发行商信息<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[maps<span class=\"meta\">@iZ</span>25017n0ruZ conf]$ cat /etc/redhat-release</div><div class=\"line\">CentOS Linux release <span class=\"number\">7.0</span>.1406 (Core)</div></pre></td></tr></table></figure></p>\n"},{"title":"处理百万级以上的数据提高查询速度的方法--数据库优化篇","date":"2016-09-12T06:17:55.000Z","_content":"\n **1**.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n **2**.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n<!--more-->\n\n **3**.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num is null\n     可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\n     select id from t where num=0\n\n **4**.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num=10 or num=20\n     可以这样查询：\n     select id from t where num=10\n     union all\n     select id from t where num=20\n\n **5**.下面的查询也将导致全表扫描：(不能前置百分号)\n\n     select id from t where name like ‘%abc%’\n    若要提高效率，可以考虑全文检索。\n\n **6**.in 和 not in 也要慎用，否则会导致全表扫描，如：\n\n     select id from t where num in(1,2,3)\n     对于连续的数值，能用 between 就不要用 in 了：\n     select id from t where num between 1 and 3\n\n **7**.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\n\n     select id from t where num=@num\n     可以改为强制查询使用索引：\n     select id from t with(index(索引名)) where num=@num\n\n **8**.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where num/2=100\n     应改为:\n     select id from t where num=100*2\n\n **9**.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where substring(name,1,3)=’abc’–name以abc开头的id\n     select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n     应改为:\n     select id from t where name like ‘abc%’\n     select id from t where createdate>=’2005-11-30′ and createdate<’2005-12-1′\n\n **10**.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n **11**.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n **12**.不要写一些没有意义的查询，如需要生成一个空表结构：\n\n     select col1,col2 into #t from t where 1=0\n     这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n     create table #t(…)\n\n **13**.很多时候用 exists 代替 in 是一个好的选择：\n\n     select num from a where num in(select num from b)\n     用下面的语句替换：\n     select num from a where exists(select 1 from b where num=a.num)\n\n **14**.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n **15**.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n **16**.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n\n **17**.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n **18**.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n **19**.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n **20**.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。\n\n **21**.避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n **22**.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。\n\n **23**.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n **24**.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n **25**.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n **26**.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n **27**.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n **28**.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n\n **29**.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n\n **30**.尽量避免大事务操作，提高系统并发能力。\n\n\n\n####　一、查询速度慢的原因：\n\n1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) \n \n2、I/O吞吐量小，形成了瓶颈效应。  \n\n3、没有创建计算列导致查询不优化。 \n \n4、内存不足  \n\n5、网络速度慢  \n\n6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  \n\n7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  \n\n8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。\n  \n9、返回了不必要的行和列  \n\n10、查询语句不好，没有优化  \n\n####　可以通过如下方法来优化查询  \n\n1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  \n\n2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  \n\n3、升级硬件  \n\n4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  \n\n5、提高网速;  \n\n6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  \n\n\n\n8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   'a%'   使用索引   like   '%a'   不使用索引用   like   '%a%'   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  \n\n9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  \n\n11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：  \n    1、   查询语句的词法、语法检查          \n    2、   将语句提交给DBMS的查询优化器  \n    3、   优化器做代数优化和存取路径的优化  \n    4、   由预编译模块生成查询规划  \n    5、   然后在合适的时间提交给系统处理执行  \n    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  \n\n\n13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  \n\n\n16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  \n\n17、注意UNion和UNion   all   的区别。UNION   all好  \n\n18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  \n\n19、查询时不要返回不需要的行、列  \n\n20、用sp_configure   'query   governor   cost   limit'或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  \n\n21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  \n\n22、在SQL2000以前，一般不要用如下的字句 “IS   NULL\",   \" <> \",   \"!=\",   \"!> \",   \"! <\",   \"NOT\",   \"NOT   EXISTS\",   \"NOT   IN\",   \"NOT   LIKE\",   and   \"LIKE   '%500'\"，因为他们不走索引全是表扫描。\n也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   'm'改为WHERE   firstname   like   'm%'（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。\nNOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT\",   \"NOT   EXISTS\",   \"NOT   IN\"能优化她，而” <> ”等还是不能优化，用不到索引。  \n\n\n24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  \n\n25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  \n\n26、MIN()   和   MAX()能使用到合适的索引  \n\n\n28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  \n\n29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   *   from   chineseresume   where   title   in   ('男','女')   Select   *   from   chineseresume   where   between   '男'   and   '女'   是一样的。由于in会在比较多次，所以有时会慢些。  \n\n\n32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  \n\n34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in('JCNAD00329667','JCNAD132168','JCNAD00337748','JCNAD00338345','JCNAD00333138','JCNAD00303570',   'JCNAD00303569','JCNAD00303568','JCNAD00306698','JCNAD00231935','JCNAD00231933','JCNAD00254567',   'JCNAD00254585','JCNAD00254608','JCNAD00254607','JCNAD00258524','JCNAD00332133','JCNAD00268618',   'JCNAD00279196','JCNAD00268613')   order   by   postdate   desc  \n\n35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  \n\n36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   *   into   t_lxh   from   chineseresume   where   name   =   'XYZ'   --commit   在另一个连接中SELECT   *   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  \n\n37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  \n\n38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  \n\n39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  \n\n40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  \n\n  a、计算字段的表达是确定的  \n  b、不能用在TEXT,Ntext，Image数据类型  \n  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  \n\n\n42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  \n\n43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  \n\n\n47、分析select   emp_name   form   employee   where   salary   >   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。\n\n注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！","source":"_posts/处理百万级以上的数据提高查询速度的方法-数据库优化篇.md","raw":"---\ntitle: 处理百万级以上的数据提高查询速度的方法--数据库优化篇\ndate: 2016-09-12 14:17:55\ncategories: Mysql\ntags: Mysql\n---\n\n **1**.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n **2**.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n<!--more-->\n\n **3**.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num is null\n     可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\n     select id from t where num=0\n\n **4**.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n     select id from t where num=10 or num=20\n     可以这样查询：\n     select id from t where num=10\n     union all\n     select id from t where num=20\n\n **5**.下面的查询也将导致全表扫描：(不能前置百分号)\n\n     select id from t where name like ‘%abc%’\n    若要提高效率，可以考虑全文检索。\n\n **6**.in 和 not in 也要慎用，否则会导致全表扫描，如：\n\n     select id from t where num in(1,2,3)\n     对于连续的数值，能用 between 就不要用 in 了：\n     select id from t where num between 1 and 3\n\n **7**.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\n\n     select id from t where num=@num\n     可以改为强制查询使用索引：\n     select id from t with(index(索引名)) where num=@num\n\n **8**.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where num/2=100\n     应改为:\n     select id from t where num=100*2\n\n **9**.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n     select id from t where substring(name,1,3)=’abc’–name以abc开头的id\n     select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n     应改为:\n     select id from t where name like ‘abc%’\n     select id from t where createdate>=’2005-11-30′ and createdate<’2005-12-1′\n\n **10**.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n **11**.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n **12**.不要写一些没有意义的查询，如需要生成一个空表结构：\n\n     select col1,col2 into #t from t where 1=0\n     这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n     create table #t(…)\n\n **13**.很多时候用 exists 代替 in 是一个好的选择：\n\n     select num from a where num in(select num from b)\n     用下面的语句替换：\n     select num from a where exists(select 1 from b where num=a.num)\n\n **14**.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n **15**.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n **16**.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n\n **17**.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n **18**.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n **19**.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n **20**.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。\n\n **21**.避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n **22**.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。\n\n **23**.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n **24**.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n **25**.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n **26**.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n **27**.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n **28**.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n\n **29**.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n\n **30**.尽量避免大事务操作，提高系统并发能力。\n\n\n\n####　一、查询速度慢的原因：\n\n1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) \n \n2、I/O吞吐量小，形成了瓶颈效应。  \n\n3、没有创建计算列导致查询不优化。 \n \n4、内存不足  \n\n5、网络速度慢  \n\n6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  \n\n7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  \n\n8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。\n  \n9、返回了不必要的行和列  \n\n10、查询语句不好，没有优化  \n\n####　可以通过如下方法来优化查询  \n\n1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  \n\n2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  \n\n3、升级硬件  \n\n4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  \n\n5、提高网速;  \n\n6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  \n\n\n\n8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   'a%'   使用索引   like   '%a'   不使用索引用   like   '%a%'   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  \n\n9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  \n\n11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：  \n    1、   查询语句的词法、语法检查          \n    2、   将语句提交给DBMS的查询优化器  \n    3、   优化器做代数优化和存取路径的优化  \n    4、   由预编译模块生成查询规划  \n    5、   然后在合适的时间提交给系统处理执行  \n    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  \n\n\n13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  \n\n\n16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  \n\n17、注意UNion和UNion   all   的区别。UNION   all好  \n\n18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  \n\n19、查询时不要返回不需要的行、列  \n\n20、用sp_configure   'query   governor   cost   limit'或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  \n\n21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  \n\n22、在SQL2000以前，一般不要用如下的字句 “IS   NULL\",   \" <> \",   \"!=\",   \"!> \",   \"! <\",   \"NOT\",   \"NOT   EXISTS\",   \"NOT   IN\",   \"NOT   LIKE\",   and   \"LIKE   '%500'\"，因为他们不走索引全是表扫描。\n也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   'm'改为WHERE   firstname   like   'm%'（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。\nNOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT\",   \"NOT   EXISTS\",   \"NOT   IN\"能优化她，而” <> ”等还是不能优化，用不到索引。  \n\n\n24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  \n\n25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  \n\n26、MIN()   和   MAX()能使用到合适的索引  \n\n\n28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  \n\n29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   *   from   chineseresume   where   title   in   ('男','女')   Select   *   from   chineseresume   where   between   '男'   and   '女'   是一样的。由于in会在比较多次，所以有时会慢些。  \n\n\n32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  \n\n34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in('JCNAD00329667','JCNAD132168','JCNAD00337748','JCNAD00338345','JCNAD00333138','JCNAD00303570',   'JCNAD00303569','JCNAD00303568','JCNAD00306698','JCNAD00231935','JCNAD00231933','JCNAD00254567',   'JCNAD00254585','JCNAD00254608','JCNAD00254607','JCNAD00258524','JCNAD00332133','JCNAD00268618',   'JCNAD00279196','JCNAD00268613')   order   by   postdate   desc  \n\n35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  \n\n36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   *   into   t_lxh   from   chineseresume   where   name   =   'XYZ'   --commit   在另一个连接中SELECT   *   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  \n\n37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  \n\n38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  \n\n39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  \n\n40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  \n\n  a、计算字段的表达是确定的  \n  b、不能用在TEXT,Ntext，Image数据类型  \n  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  \n\n\n42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  \n\n43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  \n\n\n47、分析select   emp_name   form   employee   where   salary   >   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。\n\n注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！","slug":"处理百万级以上的数据提高查询速度的方法-数据库优化篇","published":1,"updated":"2018-07-08T09:37:48.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pk9005p30tzivmxwkho","content":"<p> <strong>1</strong>.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p> <strong>2</strong>.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n<a id=\"more\"></a>\n<p> <strong>3</strong>.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num is null\n可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n</code></pre><p> <strong>4</strong>.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n</code></pre><p> <strong>5</strong>.下面的查询也将导致全表扫描：(不能前置百分号)</p>\n<pre><code> select id from t where name like ‘%abc%’\n若要提高效率，可以考虑全文检索。\n</code></pre><p> <strong>6</strong>.in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n<pre><code>select id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n</code></pre><p> <strong>7</strong>.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p>\n<pre><code>select id from t where num=@num\n可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n</code></pre><p> <strong>8</strong>.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where num/2=100\n应改为:\nselect id from t where num=100*2\n</code></pre><p> <strong>9</strong>.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where substring(name,1,3)=’abc’–name以abc开头的id\nselect id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n应改为:\nselect id from t where name like ‘abc%’\nselect id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′\n</code></pre><p> <strong>10</strong>.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n<p> <strong>11</strong>.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n<p> <strong>12</strong>.不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<pre><code>select col1,col2 into #t from t where 1=0\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\ncreate table #t(…)\n</code></pre><p> <strong>13</strong>.很多时候用 exists 代替 in 是一个好的选择：</p>\n<pre><code>select num from a where num in(select num from b)\n用下面的语句替换：\nselect num from a where exists(select 1 from b where num=a.num)\n</code></pre><p> <strong>14</strong>.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n<p> <strong>15</strong>.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>\n<p> <strong>16</strong>.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>\n<p> <strong>17</strong>.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n<p> <strong>18</strong>.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n<p> <strong>19</strong>.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p>\n<p> <strong>20</strong>.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>\n<p> <strong>21</strong>.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n<p> <strong>22</strong>.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。</p>\n<p> <strong>23</strong>.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n<p> <strong>24</strong>.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n<p> <strong>25</strong>.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n<p> <strong>26</strong>.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n<p> <strong>27</strong>.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n<p> <strong>28</strong>.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>\n<p> <strong>29</strong>.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n<p> <strong>30</strong>.尽量避免大事务操作，提高系统并发能力。</p>\n<p>####　一、查询速度慢的原因：</p>\n<p>1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) </p>\n<p>2、I/O吞吐量小，形成了瓶颈效应。  </p>\n<p>3、没有创建计算列导致查询不优化。 </p>\n<p>4、内存不足  </p>\n<p>5、网络速度慢  </p>\n<p>6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  </p>\n<p>7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  </p>\n<p>8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。</p>\n<p>9、返回了不必要的行和列  </p>\n<p>10、查询语句不好，没有优化  </p>\n<p>####　可以通过如下方法来优化查询  </p>\n<p>1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  </p>\n<p>2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  </p>\n<p>3、升级硬件  </p>\n<p>4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  </p>\n<p>5、提高网速;  </p>\n<p>6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  </p>\n<p>8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   ‘a%’   使用索引   like   ‘%a’   不使用索引用   like   ‘%a%’   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  </p>\n<p>9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  </p>\n<p>11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：<br>    1、   查询语句的词法、语法检查<br>    2、   将语句提交给DBMS的查询优化器<br>    3、   优化器做代数优化和存取路径的优化<br>    4、   由预编译模块生成查询规划<br>    5、   然后在合适的时间提交给系统处理执行<br>    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  </p>\n<p>13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  </p>\n<p>16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  </p>\n<p>17、注意UNion和UNion   all   的区别。UNION   all好  </p>\n<p>18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  </p>\n<p>19、查询时不要返回不需要的行、列  </p>\n<p>20、用sp_configure   ‘query   governor   cost   limit’或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  </p>\n<p>21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  </p>\n<p>22、在SQL2000以前，一般不要用如下的字句 “IS   NULL”,   “ &lt;&gt; “,   “!=”,   “!&gt; “,   “! &lt;”,   “NOT”,   “NOT   EXISTS”,   “NOT   IN”,   “NOT   LIKE”,   and   “LIKE   ‘%500’”，因为他们不走索引全是表扫描。<br>也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   ‘m’改为WHERE   firstname   like   ‘m%’（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。<br>NOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT”,   “NOT   EXISTS”,   “NOT   IN”能优化她，而” &lt;&gt; ”等还是不能优化，用不到索引。  </p>\n<p>24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  </p>\n<p>25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  </p>\n<p>26、MIN()   和   MAX()能使用到合适的索引  </p>\n<p>28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  </p>\n<p>29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   <em>   from   chineseresume   where   title   in   (‘男’,’女’)   Select   </em>   from   chineseresume   where   between   ‘男’   and   ‘女’   是一样的。由于in会在比较多次，所以有时会慢些。  </p>\n<p>32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  </p>\n<p>34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in(‘JCNAD00329667’,’JCNAD132168’,’JCNAD00337748’,’JCNAD00338345’,’JCNAD00333138’,’JCNAD00303570’,   ‘JCNAD00303569’,’JCNAD00303568’,’JCNAD00306698’,’JCNAD00231935’,’JCNAD00231933’,’JCNAD00254567’,   ‘JCNAD00254585’,’JCNAD00254608’,’JCNAD00254607’,’JCNAD00258524’,’JCNAD00332133’,’JCNAD00268618’,   ‘JCNAD00279196’,’JCNAD00268613’)   order   by   postdate   desc  </p>\n<p>35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  </p>\n<p>36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   <em>   into   t_lxh   from   chineseresume   where   name   =   ‘XYZ’   –commit   在另一个连接中SELECT   </em>   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  </p>\n<p>37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  </p>\n<p>38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  </p>\n<p>39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  </p>\n<p>40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  </p>\n<p>  a、计算字段的表达是确定的<br>  b、不能用在TEXT,Ntext，Image数据类型<br>  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  </p>\n<p>42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  </p>\n<p>43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  </p>\n<p>47、分析select   emp_name   form   employee   where   salary   &gt;   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。</p>\n<p>注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！</p>\n","excerpt":"<p> <strong>1</strong>.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p> <strong>2</strong>.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>","more":"<p> <strong>3</strong>.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num is null\n可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n</code></pre><p> <strong>4</strong>.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<pre><code>select id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n</code></pre><p> <strong>5</strong>.下面的查询也将导致全表扫描：(不能前置百分号)</p>\n<pre><code> select id from t where name like ‘%abc%’\n若要提高效率，可以考虑全文检索。\n</code></pre><p> <strong>6</strong>.in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n<pre><code>select id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n</code></pre><p> <strong>7</strong>.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p>\n<pre><code>select id from t where num=@num\n可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n</code></pre><p> <strong>8</strong>.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where num/2=100\n应改为:\nselect id from t where num=100*2\n</code></pre><p> <strong>9</strong>.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n<pre><code>select id from t where substring(name,1,3)=’abc’–name以abc开头的id\nselect id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n应改为:\nselect id from t where name like ‘abc%’\nselect id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′\n</code></pre><p> <strong>10</strong>.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n<p> <strong>11</strong>.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n<p> <strong>12</strong>.不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<pre><code>select col1,col2 into #t from t where 1=0\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\ncreate table #t(…)\n</code></pre><p> <strong>13</strong>.很多时候用 exists 代替 in 是一个好的选择：</p>\n<pre><code>select num from a where num in(select num from b)\n用下面的语句替换：\nselect num from a where exists(select 1 from b where num=a.num)\n</code></pre><p> <strong>14</strong>.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n<p> <strong>15</strong>.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>\n<p> <strong>16</strong>.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>\n<p> <strong>17</strong>.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n<p> <strong>18</strong>.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n<p> <strong>19</strong>.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p>\n<p> <strong>20</strong>.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>\n<p> <strong>21</strong>.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n<p> <strong>22</strong>.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。</p>\n<p> <strong>23</strong>.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n<p> <strong>24</strong>.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n<p> <strong>25</strong>.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n<p> <strong>26</strong>.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n<p> <strong>27</strong>.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n<p> <strong>28</strong>.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>\n<p> <strong>29</strong>.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n<p> <strong>30</strong>.尽量避免大事务操作，提高系统并发能力。</p>\n<p>####　一、查询速度慢的原因：</p>\n<p>1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) </p>\n<p>2、I/O吞吐量小，形成了瓶颈效应。  </p>\n<p>3、没有创建计算列导致查询不优化。 </p>\n<p>4、内存不足  </p>\n<p>5、网络速度慢  </p>\n<p>6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）  </p>\n<p>7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷)  </p>\n<p>8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。</p>\n<p>9、返回了不必要的行和列  </p>\n<p>10、查询语句不好，没有优化  </p>\n<p>####　可以通过如下方法来优化查询  </p>\n<p>1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.  </p>\n<p>2、纵向、横向分割表，减少表的尺寸(sp_spaceuse)  </p>\n<p>3、升级硬件  </p>\n<p>4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段  </p>\n<p>5、提高网速;  </p>\n<p>6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。  </p>\n<p>8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   ‘a%’   使用索引   like   ‘%a’   不使用索引用   like   ‘%a%’   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。  </p>\n<p>9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离  </p>\n<p>11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：<br>    1、   查询语句的词法、语法检查<br>    2、   将语句提交给DBMS的查询优化器<br>    3、   优化器做代数优化和存取路径的优化<br>    4、   由预编译模块生成查询规划<br>    5、   然后在合适的时间提交给系统处理执行<br>    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  </p>\n<p>13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。  </p>\n<p>16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引  </p>\n<p>17、注意UNion和UNion   all   的区别。UNION   all好  </p>\n<p>18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的  </p>\n<p>19、查询时不要返回不需要的行、列  </p>\n<p>20、用sp_configure   ‘query   governor   cost   limit’或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间  </p>\n<p>21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行  </p>\n<p>22、在SQL2000以前，一般不要用如下的字句 “IS   NULL”,   “ &lt;&gt; “,   “!=”,   “!&gt; “,   “! &lt;”,   “NOT”,   “NOT   EXISTS”,   “NOT   IN”,   “NOT   LIKE”,   and   “LIKE   ‘%500’”，因为他们不走索引全是表扫描。<br>也不要在WHere字句中的列名加函数，如Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   ‘m’改为WHERE   firstname   like   ‘m%’（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。<br>NOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同的是IS   NULL，“NOT”,   “NOT   EXISTS”,   “NOT   IN”能优化她，而” &lt;&gt; ”等还是不能优化，用不到索引。  </p>\n<p>24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’)  </p>\n<p>25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。  </p>\n<p>26、MIN()   和   MAX()能使用到合适的索引  </p>\n<p>28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。  </p>\n<p>29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   <em>   from   chineseresume   where   title   in   (‘男’,’女’)   Select   </em>   from   chineseresume   where   between   ‘男’   and   ‘女’   是一样的。由于in会在比较多次，所以有时会慢些。  </p>\n<p>32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。  </p>\n<p>34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in(‘JCNAD00329667’,’JCNAD132168’,’JCNAD00337748’,’JCNAD00338345’,’JCNAD00333138’,’JCNAD00303570’,   ‘JCNAD00303569’,’JCNAD00303568’,’JCNAD00306698’,’JCNAD00231935’,’JCNAD00231933’,’JCNAD00254567’,   ‘JCNAD00254585’,’JCNAD00254608’,’JCNAD00254607’,’JCNAD00258524’,’JCNAD00332133’,’JCNAD00268618’,   ‘JCNAD00279196’,’JCNAD00268613’)   order   by   postdate   desc  </p>\n<p>35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数  </p>\n<p>36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   <em>   into   t_lxh   from   chineseresume   where   name   =   ‘XYZ’   –commit   在另一个连接中SELECT   </em>   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。  </p>\n<p>37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快  </p>\n<p>38、一次更新多条记录比分多次更新每次一条快,就是说批处理好  </p>\n<p>39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好  </p>\n<p>40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下：  </p>\n<p>  a、计算字段的表达是确定的<br>  b、不能用在TEXT,Ntext，Image数据类型<br>  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   …….  </p>\n<p>42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快  </p>\n<p>43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。  </p>\n<p>47、分析select   emp_name   form   employee   where   salary   &gt;   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。</p>\n<p>注：此篇文章为之前本地收藏转载，具体源ｕｒｌ地址找不到了！特此说明！</p>"},{"title":"整型字面值与进制运算之间的关系","date":"2016-08-20T09:19:18.000Z","_content":"何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息\n\n1. 二进制表示：int i = 0b111010110;其实0b111010110就是字面值\n2. 八进制表示：long l3 = 0123;其实0123就是字面值\n3. 十进制表示：long l2 = 225;其实225就是字面值\n4. 十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值\n\n好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。\n\n**一、十进制**\n\n地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。\n\n**二、二进制**\n\n计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；\n\n举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，\t这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：\n\n    1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n\t\t30转换成二进制数字(11110)\n    2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n\t\t实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的结果(和)逢2进1就行了。\n\n**二、八进制**\n\n除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）\n\n    8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n\t并且标示数值串中只能包含0~7之间的数字，例如：\n\tint i = 0123;\n\tint m = 01354;\n\tint n =0238;（不合格）\n\n    8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n\t我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n\t比如013=3*8的0次方+1*8的1次方=3+8=11；\n\n**三、十六进制**\n\n16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算\n\n    可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n    0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n\n\n\n***注、用二进制表示十进制***\n\n从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。\n\n比如：int x = 0b1010;\n*其实x的真实值是二进制1010运算十进制后的值10.*\n\nint u = 0B111010110;\n*其实u的真实值是二进制111010110运算十进制后的值470.*","source":"_posts/整型字面值与进制运算之间的关系.md","raw":"---\ntitle: 整型字面值与进制运算之间的关系\ndate: 2016-08-20 17:19:18\ncategories: java\ntags: 进制运算\n---\n何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息\n\n1. 二进制表示：int i = 0b111010110;其实0b111010110就是字面值\n2. 八进制表示：long l3 = 0123;其实0123就是字面值\n3. 十进制表示：long l2 = 225;其实225就是字面值\n4. 十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值\n\n好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。\n\n**一、十进制**\n\n地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。\n\n**二、二进制**\n\n计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；\n\n举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，\t这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：\n\n    1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n\t\t30转换成二进制数字(11110)\n    2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n\t\t实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的结果(和)逢2进1就行了。\n\n**二、八进制**\n\n除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）\n\n    8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n\t并且标示数值串中只能包含0~7之间的数字，例如：\n\tint i = 0123;\n\tint m = 01354;\n\tint n =0238;（不合格）\n\n    8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n\t我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n\t比如013=3*8的0次方+1*8的1次方=3+8=11；\n\n**三、十六进制**\n\n16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算\n\n    可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n    0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n\n\n\n***注、用二进制表示十进制***\n\n从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。\n\n比如：int x = 0b1010;\n*其实x的真实值是二进制1010运算十进制后的值10.*\n\nint u = 0B111010110;\n*其实u的真实值是二进制111010110运算十进制后的值470.*","slug":"整型字面值与进制运算之间的关系","published":1,"updated":"2018-07-08T09:37:48.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkc005t30tz9vbpccdi","content":"<p>何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息</p>\n<ol>\n<li>二进制表示：int i = 0b111010110;其实0b111010110就是字面值</li>\n<li>八进制表示：long l3 = 0123;其实0123就是字面值</li>\n<li>十进制表示：long l2 = 225;其实225就是字面值</li>\n<li>十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值</li>\n</ol>\n<p>好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。</p>\n<p><strong>一、十进制</strong></p>\n<p>地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。</p>\n<p><strong>二、二进制</strong></p>\n<p>计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；</p>\n<p>举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，    这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：</p>\n<pre><code>1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n    30转换成二进制数字(11110)\n2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n    实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的结果(和)逢2进1就行了。\n</code></pre><p><strong>二、八进制</strong></p>\n<p>除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）</p>\n<pre><code>8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n并且标示数值串中只能包含0~7之间的数字，例如：\nint i = 0123;\nint m = 01354;\nint n =0238;（不合格）\n\n8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n比如013=3*8的0次方+1*8的1次方=3+8=11；\n</code></pre><p><strong>三、十六进制</strong></p>\n<p>16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算</p>\n<pre><code>可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n</code></pre><p><strong><em>注、用二进制表示十进制</em></strong></p>\n<p>从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。</p>\n<p>比如：int x = 0b1010;<br><em>其实x的真实值是二进制1010运算十进制后的值10.</em></p>\n<p>int u = 0B111010110;<br><em>其实u的真实值是二进制111010110运算十进制后的值470.</em></p>\n","excerpt":"","more":"<p>何为字面值？说白了就是一眼看上去的内容值，比如下面的分别用几个不同进制(二进制、八进制、十进制、十六进制)表示法表示的自面值信息</p>\n<ol>\n<li>二进制表示：int i = 0b111010110;其实0b111010110就是字面值</li>\n<li>八进制表示：long l3 = 0123;其实0123就是字面值</li>\n<li>十进制表示：long l2 = 225;其实225就是字面值</li>\n<li>十六进制表示：long l5 = 0x12af;其实0x12af就是二进制值</li>\n</ol>\n<p>好了上面已经描述了自面值的概念，那么整型自面值就是整数类型的字面值喽(哈哈没有开玩笑)。下面说明整型字面值与不同进制之间的关系。</p>\n<p><strong>一、十进制</strong></p>\n<p>地球上被人类采用的通用的数值表示方式，比如再正常不过的0、2、5、32、100等等；我们眼睛看到的数值就是表示其真实的值，不像其它进制表示方式，我们眼睛看到的值并不一定是其真实的值，所以我们人类一般采用十进制表示方式(10进制比较诚实，人类比较懒呗)。</p>\n<p><strong>二、二进制</strong></p>\n<p>计算机唯一能识别的只有0和1，而这里的0和1就是二进制，绝对不是指数字的0和1，这也是比较容易引起混淆的地方；</p>\n<p>举个常见的例子：我们生活中常用的算账用的计算器，我们输入100+30然后按完“=”号后，计算器屏幕上面会显示两个数相加后的结果130，    这个过程我输入的数字(100、30)或者按的按钮(+、=)和最后输出的130这几个动作，都是我们人类自己能很好识别的；我们输入十进制数字。然后计算器接收后是不识别的，实际上这个过程经历了非常复杂的转换过程：</p>\n<pre><code>1)、十进制数会被转换成二进制，也就是把100转化成只有0和1组成的一串数字（1100100）；\n    30转换成二进制数字(11110)\n2)、然后计算器把转换后的两个二进制数进行相加，最终得到二进制结果：10000010(130)；\n    实际上二进制之间加法很简单，只需要把两个二进制数右对齐，然后上下两个数(0或者1)相加，相加的结果(和)逢2进1就行了。\n</code></pre><p><strong>二、八进制</strong></p>\n<p>除了人类使用的10进制、计算机使用的二进制外，其实还有八进制（以0开头，以8为基数运算）</p>\n<pre><code>8进制数字的范围是0~7,也就是说用8进制形式标示数值时，需要用0开头，\n并且标示数值串中只能包含0~7之间的数字，例如：\nint i = 0123;\nint m = 01354;\nint n =0238;（不合格）\n\n8进制表示的数值怎么计算成人类识别的10进制呢，其实非常简单，只需要按照规则来计算就行了，\n我们就拿int i = 013;这个变量定义来讲，一共三个数字(0、1、3)；那么我们从最右侧3用索引数数就是(0[2]、1[1]、3[0]),方括号中为从右侧开始计数的索引。\n\n比如013=3*8的0次方+1*8的1次方=3+8=11；\n</code></pre><p><strong>三、十六进制</strong></p>\n<p>16进制的数字范围是0~15，而阿拉伯数字只有0~9，所以分别用A~F（a~f）替代数字10~15；也就是说用16进制表示的数值串中只能包括0~9和a|A~f|F；十六进制表示方式就是以0X开头，以16为基数进行运算</p>\n<pre><code>可以参照上面的八进制计算规则，long l5 = 0x12af;定义的变量用十进制表示方法就是：\n0x12af表示的十进制数为：15*16的0次方+10*16的1次方+2*16的2次方+1*16的3次方=4783\n</code></pre><p><strong><em>注、用二进制表示十进制</em></strong></p>\n<p>从jdk7开始，我们可以直接定义变量的时候可以用二进制表示十进制字面值，不过必须使用0b或0B作为数值的前缀。</p>\n<p>比如：int x = 0b1010;<br><em>其实x的真实值是二进制1010运算十进制后的值10.</em></p>\n<p>int u = 0B111010110;<br><em>其实u的真实值是二进制111010110运算十进制后的值470.</em></p>\n"},{"title":"最近开发app后台的一些小结","date":"2017-09-23T08:31:08.000Z","_content":"\n最近负责一个app产品后台的开发，主要包括app所有rest数据接口层的开发、第三方接口数据的融合过滤、第三方应用的接入(比如IM聊天、群组、电话虚拟拨号等等)、系统后台的管理配置等等，通过这个app后台的开发，也踩过不少坑，挖过不少雷，下面主要做一下小结：\n\n<!--more-->\n\n**一、产品与技术是彼此成就**\n\n产品初期设计一个产品时一般都会描述这个产品的愿景(定位、受众、解决的痛点、达到的目标)，所以起初这些描述性概念对应开发来讲就感觉毫无意义，然而开发过程中也必然会出现很多细节问题，当然也会扯皮，比如开发会质问产品怎么会设计这么鸡肋的功能，产品也会反驳各种说辞，总之有点各不相让的势头；主要是由于彼此的关注点不同，所以考虑的问题的角度也不同；后来大家都转变了一下思路，产品描述功能时，沉下心去聆听；因为产品设计一个功能肯定是做了充分的分析的（比如竞品分析、用户习惯、功能特性等等）；并且在产品绩效考核上面也要做到目标一致，比如产品月活人数达到什么量级，绩效是什么；性能达到什么量级，绩效是什么等等；总之来讲产品和技术是彼此成就的，需要彼此摆正心态，大家拧成一股绳，荣辱与共，一起把这个产品做好，一起体现每个人不同的价值观(升职加薪、精神愉悦)；\n\n**二、设计初期UI和UE一定要思路统一**\n\n产品在设计一个app产品时一般都会画出原型(简单的界面展现+完善的交互指引)，为什么说需要完善的交互指引呢，因为后台开发可以根据每一个交互场景定义不同的数据封装基类，是使用继承还是使用组合等等都是根据交互进行定义的；项目评审会完成后，一般UI和UE就会着手开始具体的设计工作，两者一定要紧密配合，不然到后期容易出现各种细节问题，比如app中常见的图文数据列表页面，UI会设计好具体的界面，但是如果UE不及时参与的话，UI可能就会漏掉当后台接口无数据返回时的交互；当在开发阶段才发现这样问题的话，可能就会浪费时间；\n\n**三、各端的开发都要详细的参照UI进行开发**\n\n开发阶段，需要非常仔细的看看UI图，因为所有的功能点都在UI图上面体现，包括开发完成后，测试部门编写的测试用例都是基于UI图进行的；并且在看UI图的时候，需要抽取最小单元的数据集，然后定义各自的数据封装类，这些类就是rest接口的属性体现。所以在开发之前，先仔细分析UI图，可以避免大量的冗余类产生。\n\n**四、开发时多替客户端着想**\n\n我们在开发rest接口时，一定要充分的减轻客户端的工作量，要知道客户端展示不像平时开发的web界面展示那样，平时web界面展示数据时，页面中可能很多循环、逻辑判定等等；但是客户端则完全不能这么搞，不然客户端性能会非常的慢，并且代码会非常臃肿，后期难以维护，所以我们在提供rest接口时，后台能多做点事情就把它做了，比如一个app的ui上面，需要展示学生答题正确率；我们后台在提供接口时，就直接把这个正确率计算好返回到前端显示就行了，不要再给客户端返回一个分子、分母让客户端自己计算，不然客户端还要判断分母是否为0，还要处理小数点后面的位数等等；\n\n还比如一些状态标示，有些图文内容点击阅读后，可能需要显示已读、未读标示，那么后台也直接把状态值和状态值对应的title在接口中返回就行了；这样客户端拿到接口结果集时只需要直接显示即可，不会做太多的逻辑判定；这样做完一个app产品下来，客户端的小伙伴会非常愿意给你配合，因为很多事情我们后台都帮他们做了。\n\n\n**五、效率 效率 效率 -缓存**\n\napp不像web开发，打开一个浏览器如果响应慢的情况下，可以再刷新一下，或者看其他的内容，在app端完全不是这样的，app端如有打开一下页面时，如果一直loading状态，可能会跟用户的感觉就是这个卡顿了，所以体验非常不好，要么app自动接收loading(一般都有一个超时值)，并给出提示，或者迫不得已，用户自己通过杀进程的方式把app进程给kill掉。这样是体验极差的，所以当app调用rest接口向后台请求数据时，一定要非常快的把数据返回给客户端。\n\n所以后台接口层面的数据调用能从缓存中获取就从缓存中获取，尽量不要直接读库操作(不管你是mysql也好，mongodb也好)，不然会非常影响效率；当然缓存也不要单点的支撑整个系统，需要分布式的去支撑整个系统，比如采用codis等等；还有就是不可能把整个app的后台数据都存入缓存，所以把什么数据存入缓存，多长时间失效等等都需要根据不同的业务功能场景进行设定和平衡。\n\n\n**六、效率 效率 效率 -异步**\n\n同一个接口可能调用很多数据源，比如常见的app首页，这样的情况下面，效率可想而知，所以在已经使用缓存的基础上，采用异步线程机制，每个请求都采用异步加载的方式去获取数据并且更新缓存，异步加载也可以通过多线程、消息队列去实现；当然那些操作是可以采用异步，哪些操作是不能采用异步是有本质区别的，比如用户的收藏行为，这就可以在后台采用异步处理操作；登录操作肯定是不能采用异步处理的；所以我们需要区分场景和业务，并且异步也可能会出现数据丢失、数据不一致的风险。\n\n**七、DB层面的优化**\n\n之前问一个搞DBA的同学，如何才能让数据库查询跟快，他说了一句很NB的话，无论怎么优化都不如换上SSD！确实是很高端的感悟！这句话我们平时做开发的可能就不那么好理解，因为考虑问题的角度不同，比如某某单位有10个窗口，同时有100个人去排队办理业务；如果让DBA去优化可能就说再开10个窗口，而让开发去优化可能就会说将业务分类办理，一个窗口只办理同一类的业务(读写分类的概念)等等。\n\n所以回归到app后台开发上面来讲，在DB层，如果访问量很大时，一定要先做读写分离，一般是通过多数据源去实现；做完读写分离后，如果基础数据量也很大时，一定要分表操作，但是分表根据什么维度去分，比如用户类型、用户所属地区码等等因素，一定要慎重去操作，不然后期容易发生跨表查询的问题。\n\napp端的后台开发一般都是单表操作，不会太过分追求数据库设计三范式规范，所以适当的冗余设计表结构也将会带来不错的性能提升。\n\n\n**八、集群环境下的定时任务**\n\n一般服务器都是集群部署，肯定也有定时任务，所以一定要避免集群环境下面多定时任务重复执行的问题，我在这块可是栽过跟头，我们的使用场景是每天晚上10点中统计数据，然后发送IM消息到APP端，但是由于集群环境，所以到10点钟时，每台服务器上面的定时器都开始执行，所以app也就收到了多条重复数据，后来通过缓存加锁得以解决。\n\n\n**九、rest接口的版本**\n\n针对app接口的开发不可避免的就是版本问题，我们采用的策略就是通过接口path路径区分版本号，期初我们采用的是app端调用接口时，需要在header中传入版本号，但是后来发现当每一次发版，这个接口的业务都会变化的时候，简直就是一个噩梦，因为你需要在原来的接口方法中做很多适配操作，并且还要兼容老版本的app请求访问，一旦出现什么问题，排查起来将非常困难；所以后来我们就采用了path路径的方式区分适配不同版本的接口调用；一般rest层内部的service业务方法要最小粒度的实现其功能，这样的话，针对新版本的rest接口，我们只需要组合不同的service业务方法即可。\n\nrest接口的兼容性要考虑周到，在开发rest接口时要站在产品的角度去考虑这个接口能否充分满足他们的要求，比如我们开发一个图文列表数据接口，用户点击某一条图文内容后，该条图文就是已读标识，那么当这个产品上线后，产品突然发现如果用户点击某条图文后，在回到列表时，应该把用户已经看过的那条图文给不显示；所以如果当时设计后台rest接口时，入参中刚好有一个状态参数，默认查询所有的，如果此时要满足看后消失的需求时，我们只需要在后台把这个接口的入参默认值改成未读状态就行了；改完后后台发一次版就ok了，这样的功能改动对APP端是无感知的，也避免了APP端的发版升级。\n\n**十、一定要知道别人对你做了什么**\n\n平时开发中一定要多打log，多埋点；不然当出现什么问题的时候，我们压根都无从查起，非常被动，因为你不知道用户执行了什么操作，产生了什么bug，这个bug是什么操作导致的等等；如果有条件的话就把ELK搭建上。如果在高大上一点就引入第三方专业做系统监控产品的公司。\n\n\n\n\n\n\n\n","source":"_posts/最近开发app后台的一些小结.md","raw":"---\ntitle: 最近开发app后台的一些小结\ndate: 2017-09-23 16:31:08\ncategories: jersey\ntags: java\n---\n\n最近负责一个app产品后台的开发，主要包括app所有rest数据接口层的开发、第三方接口数据的融合过滤、第三方应用的接入(比如IM聊天、群组、电话虚拟拨号等等)、系统后台的管理配置等等，通过这个app后台的开发，也踩过不少坑，挖过不少雷，下面主要做一下小结：\n\n<!--more-->\n\n**一、产品与技术是彼此成就**\n\n产品初期设计一个产品时一般都会描述这个产品的愿景(定位、受众、解决的痛点、达到的目标)，所以起初这些描述性概念对应开发来讲就感觉毫无意义，然而开发过程中也必然会出现很多细节问题，当然也会扯皮，比如开发会质问产品怎么会设计这么鸡肋的功能，产品也会反驳各种说辞，总之有点各不相让的势头；主要是由于彼此的关注点不同，所以考虑的问题的角度也不同；后来大家都转变了一下思路，产品描述功能时，沉下心去聆听；因为产品设计一个功能肯定是做了充分的分析的（比如竞品分析、用户习惯、功能特性等等）；并且在产品绩效考核上面也要做到目标一致，比如产品月活人数达到什么量级，绩效是什么；性能达到什么量级，绩效是什么等等；总之来讲产品和技术是彼此成就的，需要彼此摆正心态，大家拧成一股绳，荣辱与共，一起把这个产品做好，一起体现每个人不同的价值观(升职加薪、精神愉悦)；\n\n**二、设计初期UI和UE一定要思路统一**\n\n产品在设计一个app产品时一般都会画出原型(简单的界面展现+完善的交互指引)，为什么说需要完善的交互指引呢，因为后台开发可以根据每一个交互场景定义不同的数据封装基类，是使用继承还是使用组合等等都是根据交互进行定义的；项目评审会完成后，一般UI和UE就会着手开始具体的设计工作，两者一定要紧密配合，不然到后期容易出现各种细节问题，比如app中常见的图文数据列表页面，UI会设计好具体的界面，但是如果UE不及时参与的话，UI可能就会漏掉当后台接口无数据返回时的交互；当在开发阶段才发现这样问题的话，可能就会浪费时间；\n\n**三、各端的开发都要详细的参照UI进行开发**\n\n开发阶段，需要非常仔细的看看UI图，因为所有的功能点都在UI图上面体现，包括开发完成后，测试部门编写的测试用例都是基于UI图进行的；并且在看UI图的时候，需要抽取最小单元的数据集，然后定义各自的数据封装类，这些类就是rest接口的属性体现。所以在开发之前，先仔细分析UI图，可以避免大量的冗余类产生。\n\n**四、开发时多替客户端着想**\n\n我们在开发rest接口时，一定要充分的减轻客户端的工作量，要知道客户端展示不像平时开发的web界面展示那样，平时web界面展示数据时，页面中可能很多循环、逻辑判定等等；但是客户端则完全不能这么搞，不然客户端性能会非常的慢，并且代码会非常臃肿，后期难以维护，所以我们在提供rest接口时，后台能多做点事情就把它做了，比如一个app的ui上面，需要展示学生答题正确率；我们后台在提供接口时，就直接把这个正确率计算好返回到前端显示就行了，不要再给客户端返回一个分子、分母让客户端自己计算，不然客户端还要判断分母是否为0，还要处理小数点后面的位数等等；\n\n还比如一些状态标示，有些图文内容点击阅读后，可能需要显示已读、未读标示，那么后台也直接把状态值和状态值对应的title在接口中返回就行了；这样客户端拿到接口结果集时只需要直接显示即可，不会做太多的逻辑判定；这样做完一个app产品下来，客户端的小伙伴会非常愿意给你配合，因为很多事情我们后台都帮他们做了。\n\n\n**五、效率 效率 效率 -缓存**\n\napp不像web开发，打开一个浏览器如果响应慢的情况下，可以再刷新一下，或者看其他的内容，在app端完全不是这样的，app端如有打开一下页面时，如果一直loading状态，可能会跟用户的感觉就是这个卡顿了，所以体验非常不好，要么app自动接收loading(一般都有一个超时值)，并给出提示，或者迫不得已，用户自己通过杀进程的方式把app进程给kill掉。这样是体验极差的，所以当app调用rest接口向后台请求数据时，一定要非常快的把数据返回给客户端。\n\n所以后台接口层面的数据调用能从缓存中获取就从缓存中获取，尽量不要直接读库操作(不管你是mysql也好，mongodb也好)，不然会非常影响效率；当然缓存也不要单点的支撑整个系统，需要分布式的去支撑整个系统，比如采用codis等等；还有就是不可能把整个app的后台数据都存入缓存，所以把什么数据存入缓存，多长时间失效等等都需要根据不同的业务功能场景进行设定和平衡。\n\n\n**六、效率 效率 效率 -异步**\n\n同一个接口可能调用很多数据源，比如常见的app首页，这样的情况下面，效率可想而知，所以在已经使用缓存的基础上，采用异步线程机制，每个请求都采用异步加载的方式去获取数据并且更新缓存，异步加载也可以通过多线程、消息队列去实现；当然那些操作是可以采用异步，哪些操作是不能采用异步是有本质区别的，比如用户的收藏行为，这就可以在后台采用异步处理操作；登录操作肯定是不能采用异步处理的；所以我们需要区分场景和业务，并且异步也可能会出现数据丢失、数据不一致的风险。\n\n**七、DB层面的优化**\n\n之前问一个搞DBA的同学，如何才能让数据库查询跟快，他说了一句很NB的话，无论怎么优化都不如换上SSD！确实是很高端的感悟！这句话我们平时做开发的可能就不那么好理解，因为考虑问题的角度不同，比如某某单位有10个窗口，同时有100个人去排队办理业务；如果让DBA去优化可能就说再开10个窗口，而让开发去优化可能就会说将业务分类办理，一个窗口只办理同一类的业务(读写分类的概念)等等。\n\n所以回归到app后台开发上面来讲，在DB层，如果访问量很大时，一定要先做读写分离，一般是通过多数据源去实现；做完读写分离后，如果基础数据量也很大时，一定要分表操作，但是分表根据什么维度去分，比如用户类型、用户所属地区码等等因素，一定要慎重去操作，不然后期容易发生跨表查询的问题。\n\napp端的后台开发一般都是单表操作，不会太过分追求数据库设计三范式规范，所以适当的冗余设计表结构也将会带来不错的性能提升。\n\n\n**八、集群环境下的定时任务**\n\n一般服务器都是集群部署，肯定也有定时任务，所以一定要避免集群环境下面多定时任务重复执行的问题，我在这块可是栽过跟头，我们的使用场景是每天晚上10点中统计数据，然后发送IM消息到APP端，但是由于集群环境，所以到10点钟时，每台服务器上面的定时器都开始执行，所以app也就收到了多条重复数据，后来通过缓存加锁得以解决。\n\n\n**九、rest接口的版本**\n\n针对app接口的开发不可避免的就是版本问题，我们采用的策略就是通过接口path路径区分版本号，期初我们采用的是app端调用接口时，需要在header中传入版本号，但是后来发现当每一次发版，这个接口的业务都会变化的时候，简直就是一个噩梦，因为你需要在原来的接口方法中做很多适配操作，并且还要兼容老版本的app请求访问，一旦出现什么问题，排查起来将非常困难；所以后来我们就采用了path路径的方式区分适配不同版本的接口调用；一般rest层内部的service业务方法要最小粒度的实现其功能，这样的话，针对新版本的rest接口，我们只需要组合不同的service业务方法即可。\n\nrest接口的兼容性要考虑周到，在开发rest接口时要站在产品的角度去考虑这个接口能否充分满足他们的要求，比如我们开发一个图文列表数据接口，用户点击某一条图文内容后，该条图文就是已读标识，那么当这个产品上线后，产品突然发现如果用户点击某条图文后，在回到列表时，应该把用户已经看过的那条图文给不显示；所以如果当时设计后台rest接口时，入参中刚好有一个状态参数，默认查询所有的，如果此时要满足看后消失的需求时，我们只需要在后台把这个接口的入参默认值改成未读状态就行了；改完后后台发一次版就ok了，这样的功能改动对APP端是无感知的，也避免了APP端的发版升级。\n\n**十、一定要知道别人对你做了什么**\n\n平时开发中一定要多打log，多埋点；不然当出现什么问题的时候，我们压根都无从查起，非常被动，因为你不知道用户执行了什么操作，产生了什么bug，这个bug是什么操作导致的等等；如果有条件的话就把ELK搭建上。如果在高大上一点就引入第三方专业做系统监控产品的公司。\n\n\n\n\n\n\n\n","slug":"最近开发app后台的一些小结","published":1,"updated":"2018-07-08T09:37:48.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pke005x30tz1351705g","content":"<p>最近负责一个app产品后台的开发，主要包括app所有rest数据接口层的开发、第三方接口数据的融合过滤、第三方应用的接入(比如IM聊天、群组、电话虚拟拨号等等)、系统后台的管理配置等等，通过这个app后台的开发，也踩过不少坑，挖过不少雷，下面主要做一下小结：</p>\n<a id=\"more\"></a>\n<p><strong>一、产品与技术是彼此成就</strong></p>\n<p>产品初期设计一个产品时一般都会描述这个产品的愿景(定位、受众、解决的痛点、达到的目标)，所以起初这些描述性概念对应开发来讲就感觉毫无意义，然而开发过程中也必然会出现很多细节问题，当然也会扯皮，比如开发会质问产品怎么会设计这么鸡肋的功能，产品也会反驳各种说辞，总之有点各不相让的势头；主要是由于彼此的关注点不同，所以考虑的问题的角度也不同；后来大家都转变了一下思路，产品描述功能时，沉下心去聆听；因为产品设计一个功能肯定是做了充分的分析的（比如竞品分析、用户习惯、功能特性等等）；并且在产品绩效考核上面也要做到目标一致，比如产品月活人数达到什么量级，绩效是什么；性能达到什么量级，绩效是什么等等；总之来讲产品和技术是彼此成就的，需要彼此摆正心态，大家拧成一股绳，荣辱与共，一起把这个产品做好，一起体现每个人不同的价值观(升职加薪、精神愉悦)；</p>\n<p><strong>二、设计初期UI和UE一定要思路统一</strong></p>\n<p>产品在设计一个app产品时一般都会画出原型(简单的界面展现+完善的交互指引)，为什么说需要完善的交互指引呢，因为后台开发可以根据每一个交互场景定义不同的数据封装基类，是使用继承还是使用组合等等都是根据交互进行定义的；项目评审会完成后，一般UI和UE就会着手开始具体的设计工作，两者一定要紧密配合，不然到后期容易出现各种细节问题，比如app中常见的图文数据列表页面，UI会设计好具体的界面，但是如果UE不及时参与的话，UI可能就会漏掉当后台接口无数据返回时的交互；当在开发阶段才发现这样问题的话，可能就会浪费时间；</p>\n<p><strong>三、各端的开发都要详细的参照UI进行开发</strong></p>\n<p>开发阶段，需要非常仔细的看看UI图，因为所有的功能点都在UI图上面体现，包括开发完成后，测试部门编写的测试用例都是基于UI图进行的；并且在看UI图的时候，需要抽取最小单元的数据集，然后定义各自的数据封装类，这些类就是rest接口的属性体现。所以在开发之前，先仔细分析UI图，可以避免大量的冗余类产生。</p>\n<p><strong>四、开发时多替客户端着想</strong></p>\n<p>我们在开发rest接口时，一定要充分的减轻客户端的工作量，要知道客户端展示不像平时开发的web界面展示那样，平时web界面展示数据时，页面中可能很多循环、逻辑判定等等；但是客户端则完全不能这么搞，不然客户端性能会非常的慢，并且代码会非常臃肿，后期难以维护，所以我们在提供rest接口时，后台能多做点事情就把它做了，比如一个app的ui上面，需要展示学生答题正确率；我们后台在提供接口时，就直接把这个正确率计算好返回到前端显示就行了，不要再给客户端返回一个分子、分母让客户端自己计算，不然客户端还要判断分母是否为0，还要处理小数点后面的位数等等；</p>\n<p>还比如一些状态标示，有些图文内容点击阅读后，可能需要显示已读、未读标示，那么后台也直接把状态值和状态值对应的title在接口中返回就行了；这样客户端拿到接口结果集时只需要直接显示即可，不会做太多的逻辑判定；这样做完一个app产品下来，客户端的小伙伴会非常愿意给你配合，因为很多事情我们后台都帮他们做了。</p>\n<p><strong>五、效率 效率 效率 -缓存</strong></p>\n<p>app不像web开发，打开一个浏览器如果响应慢的情况下，可以再刷新一下，或者看其他的内容，在app端完全不是这样的，app端如有打开一下页面时，如果一直loading状态，可能会跟用户的感觉就是这个卡顿了，所以体验非常不好，要么app自动接收loading(一般都有一个超时值)，并给出提示，或者迫不得已，用户自己通过杀进程的方式把app进程给kill掉。这样是体验极差的，所以当app调用rest接口向后台请求数据时，一定要非常快的把数据返回给客户端。</p>\n<p>所以后台接口层面的数据调用能从缓存中获取就从缓存中获取，尽量不要直接读库操作(不管你是mysql也好，mongodb也好)，不然会非常影响效率；当然缓存也不要单点的支撑整个系统，需要分布式的去支撑整个系统，比如采用codis等等；还有就是不可能把整个app的后台数据都存入缓存，所以把什么数据存入缓存，多长时间失效等等都需要根据不同的业务功能场景进行设定和平衡。</p>\n<p><strong>六、效率 效率 效率 -异步</strong></p>\n<p>同一个接口可能调用很多数据源，比如常见的app首页，这样的情况下面，效率可想而知，所以在已经使用缓存的基础上，采用异步线程机制，每个请求都采用异步加载的方式去获取数据并且更新缓存，异步加载也可以通过多线程、消息队列去实现；当然那些操作是可以采用异步，哪些操作是不能采用异步是有本质区别的，比如用户的收藏行为，这就可以在后台采用异步处理操作；登录操作肯定是不能采用异步处理的；所以我们需要区分场景和业务，并且异步也可能会出现数据丢失、数据不一致的风险。</p>\n<p><strong>七、DB层面的优化</strong></p>\n<p>之前问一个搞DBA的同学，如何才能让数据库查询跟快，他说了一句很NB的话，无论怎么优化都不如换上SSD！确实是很高端的感悟！这句话我们平时做开发的可能就不那么好理解，因为考虑问题的角度不同，比如某某单位有10个窗口，同时有100个人去排队办理业务；如果让DBA去优化可能就说再开10个窗口，而让开发去优化可能就会说将业务分类办理，一个窗口只办理同一类的业务(读写分类的概念)等等。</p>\n<p>所以回归到app后台开发上面来讲，在DB层，如果访问量很大时，一定要先做读写分离，一般是通过多数据源去实现；做完读写分离后，如果基础数据量也很大时，一定要分表操作，但是分表根据什么维度去分，比如用户类型、用户所属地区码等等因素，一定要慎重去操作，不然后期容易发生跨表查询的问题。</p>\n<p>app端的后台开发一般都是单表操作，不会太过分追求数据库设计三范式规范，所以适当的冗余设计表结构也将会带来不错的性能提升。</p>\n<p><strong>八、集群环境下的定时任务</strong></p>\n<p>一般服务器都是集群部署，肯定也有定时任务，所以一定要避免集群环境下面多定时任务重复执行的问题，我在这块可是栽过跟头，我们的使用场景是每天晚上10点中统计数据，然后发送IM消息到APP端，但是由于集群环境，所以到10点钟时，每台服务器上面的定时器都开始执行，所以app也就收到了多条重复数据，后来通过缓存加锁得以解决。</p>\n<p><strong>九、rest接口的版本</strong></p>\n<p>针对app接口的开发不可避免的就是版本问题，我们采用的策略就是通过接口path路径区分版本号，期初我们采用的是app端调用接口时，需要在header中传入版本号，但是后来发现当每一次发版，这个接口的业务都会变化的时候，简直就是一个噩梦，因为你需要在原来的接口方法中做很多适配操作，并且还要兼容老版本的app请求访问，一旦出现什么问题，排查起来将非常困难；所以后来我们就采用了path路径的方式区分适配不同版本的接口调用；一般rest层内部的service业务方法要最小粒度的实现其功能，这样的话，针对新版本的rest接口，我们只需要组合不同的service业务方法即可。</p>\n<p>rest接口的兼容性要考虑周到，在开发rest接口时要站在产品的角度去考虑这个接口能否充分满足他们的要求，比如我们开发一个图文列表数据接口，用户点击某一条图文内容后，该条图文就是已读标识，那么当这个产品上线后，产品突然发现如果用户点击某条图文后，在回到列表时，应该把用户已经看过的那条图文给不显示；所以如果当时设计后台rest接口时，入参中刚好有一个状态参数，默认查询所有的，如果此时要满足看后消失的需求时，我们只需要在后台把这个接口的入参默认值改成未读状态就行了；改完后后台发一次版就ok了，这样的功能改动对APP端是无感知的，也避免了APP端的发版升级。</p>\n<p><strong>十、一定要知道别人对你做了什么</strong></p>\n<p>平时开发中一定要多打log，多埋点；不然当出现什么问题的时候，我们压根都无从查起，非常被动，因为你不知道用户执行了什么操作，产生了什么bug，这个bug是什么操作导致的等等；如果有条件的话就把ELK搭建上。如果在高大上一点就引入第三方专业做系统监控产品的公司。</p>\n","excerpt":"<p>最近负责一个app产品后台的开发，主要包括app所有rest数据接口层的开发、第三方接口数据的融合过滤、第三方应用的接入(比如IM聊天、群组、电话虚拟拨号等等)、系统后台的管理配置等等，通过这个app后台的开发，也踩过不少坑，挖过不少雷，下面主要做一下小结：</p>","more":"<p><strong>一、产品与技术是彼此成就</strong></p>\n<p>产品初期设计一个产品时一般都会描述这个产品的愿景(定位、受众、解决的痛点、达到的目标)，所以起初这些描述性概念对应开发来讲就感觉毫无意义，然而开发过程中也必然会出现很多细节问题，当然也会扯皮，比如开发会质问产品怎么会设计这么鸡肋的功能，产品也会反驳各种说辞，总之有点各不相让的势头；主要是由于彼此的关注点不同，所以考虑的问题的角度也不同；后来大家都转变了一下思路，产品描述功能时，沉下心去聆听；因为产品设计一个功能肯定是做了充分的分析的（比如竞品分析、用户习惯、功能特性等等）；并且在产品绩效考核上面也要做到目标一致，比如产品月活人数达到什么量级，绩效是什么；性能达到什么量级，绩效是什么等等；总之来讲产品和技术是彼此成就的，需要彼此摆正心态，大家拧成一股绳，荣辱与共，一起把这个产品做好，一起体现每个人不同的价值观(升职加薪、精神愉悦)；</p>\n<p><strong>二、设计初期UI和UE一定要思路统一</strong></p>\n<p>产品在设计一个app产品时一般都会画出原型(简单的界面展现+完善的交互指引)，为什么说需要完善的交互指引呢，因为后台开发可以根据每一个交互场景定义不同的数据封装基类，是使用继承还是使用组合等等都是根据交互进行定义的；项目评审会完成后，一般UI和UE就会着手开始具体的设计工作，两者一定要紧密配合，不然到后期容易出现各种细节问题，比如app中常见的图文数据列表页面，UI会设计好具体的界面，但是如果UE不及时参与的话，UI可能就会漏掉当后台接口无数据返回时的交互；当在开发阶段才发现这样问题的话，可能就会浪费时间；</p>\n<p><strong>三、各端的开发都要详细的参照UI进行开发</strong></p>\n<p>开发阶段，需要非常仔细的看看UI图，因为所有的功能点都在UI图上面体现，包括开发完成后，测试部门编写的测试用例都是基于UI图进行的；并且在看UI图的时候，需要抽取最小单元的数据集，然后定义各自的数据封装类，这些类就是rest接口的属性体现。所以在开发之前，先仔细分析UI图，可以避免大量的冗余类产生。</p>\n<p><strong>四、开发时多替客户端着想</strong></p>\n<p>我们在开发rest接口时，一定要充分的减轻客户端的工作量，要知道客户端展示不像平时开发的web界面展示那样，平时web界面展示数据时，页面中可能很多循环、逻辑判定等等；但是客户端则完全不能这么搞，不然客户端性能会非常的慢，并且代码会非常臃肿，后期难以维护，所以我们在提供rest接口时，后台能多做点事情就把它做了，比如一个app的ui上面，需要展示学生答题正确率；我们后台在提供接口时，就直接把这个正确率计算好返回到前端显示就行了，不要再给客户端返回一个分子、分母让客户端自己计算，不然客户端还要判断分母是否为0，还要处理小数点后面的位数等等；</p>\n<p>还比如一些状态标示，有些图文内容点击阅读后，可能需要显示已读、未读标示，那么后台也直接把状态值和状态值对应的title在接口中返回就行了；这样客户端拿到接口结果集时只需要直接显示即可，不会做太多的逻辑判定；这样做完一个app产品下来，客户端的小伙伴会非常愿意给你配合，因为很多事情我们后台都帮他们做了。</p>\n<p><strong>五、效率 效率 效率 -缓存</strong></p>\n<p>app不像web开发，打开一个浏览器如果响应慢的情况下，可以再刷新一下，或者看其他的内容，在app端完全不是这样的，app端如有打开一下页面时，如果一直loading状态，可能会跟用户的感觉就是这个卡顿了，所以体验非常不好，要么app自动接收loading(一般都有一个超时值)，并给出提示，或者迫不得已，用户自己通过杀进程的方式把app进程给kill掉。这样是体验极差的，所以当app调用rest接口向后台请求数据时，一定要非常快的把数据返回给客户端。</p>\n<p>所以后台接口层面的数据调用能从缓存中获取就从缓存中获取，尽量不要直接读库操作(不管你是mysql也好，mongodb也好)，不然会非常影响效率；当然缓存也不要单点的支撑整个系统，需要分布式的去支撑整个系统，比如采用codis等等；还有就是不可能把整个app的后台数据都存入缓存，所以把什么数据存入缓存，多长时间失效等等都需要根据不同的业务功能场景进行设定和平衡。</p>\n<p><strong>六、效率 效率 效率 -异步</strong></p>\n<p>同一个接口可能调用很多数据源，比如常见的app首页，这样的情况下面，效率可想而知，所以在已经使用缓存的基础上，采用异步线程机制，每个请求都采用异步加载的方式去获取数据并且更新缓存，异步加载也可以通过多线程、消息队列去实现；当然那些操作是可以采用异步，哪些操作是不能采用异步是有本质区别的，比如用户的收藏行为，这就可以在后台采用异步处理操作；登录操作肯定是不能采用异步处理的；所以我们需要区分场景和业务，并且异步也可能会出现数据丢失、数据不一致的风险。</p>\n<p><strong>七、DB层面的优化</strong></p>\n<p>之前问一个搞DBA的同学，如何才能让数据库查询跟快，他说了一句很NB的话，无论怎么优化都不如换上SSD！确实是很高端的感悟！这句话我们平时做开发的可能就不那么好理解，因为考虑问题的角度不同，比如某某单位有10个窗口，同时有100个人去排队办理业务；如果让DBA去优化可能就说再开10个窗口，而让开发去优化可能就会说将业务分类办理，一个窗口只办理同一类的业务(读写分类的概念)等等。</p>\n<p>所以回归到app后台开发上面来讲，在DB层，如果访问量很大时，一定要先做读写分离，一般是通过多数据源去实现；做完读写分离后，如果基础数据量也很大时，一定要分表操作，但是分表根据什么维度去分，比如用户类型、用户所属地区码等等因素，一定要慎重去操作，不然后期容易发生跨表查询的问题。</p>\n<p>app端的后台开发一般都是单表操作，不会太过分追求数据库设计三范式规范，所以适当的冗余设计表结构也将会带来不错的性能提升。</p>\n<p><strong>八、集群环境下的定时任务</strong></p>\n<p>一般服务器都是集群部署，肯定也有定时任务，所以一定要避免集群环境下面多定时任务重复执行的问题，我在这块可是栽过跟头，我们的使用场景是每天晚上10点中统计数据，然后发送IM消息到APP端，但是由于集群环境，所以到10点钟时，每台服务器上面的定时器都开始执行，所以app也就收到了多条重复数据，后来通过缓存加锁得以解决。</p>\n<p><strong>九、rest接口的版本</strong></p>\n<p>针对app接口的开发不可避免的就是版本问题，我们采用的策略就是通过接口path路径区分版本号，期初我们采用的是app端调用接口时，需要在header中传入版本号，但是后来发现当每一次发版，这个接口的业务都会变化的时候，简直就是一个噩梦，因为你需要在原来的接口方法中做很多适配操作，并且还要兼容老版本的app请求访问，一旦出现什么问题，排查起来将非常困难；所以后来我们就采用了path路径的方式区分适配不同版本的接口调用；一般rest层内部的service业务方法要最小粒度的实现其功能，这样的话，针对新版本的rest接口，我们只需要组合不同的service业务方法即可。</p>\n<p>rest接口的兼容性要考虑周到，在开发rest接口时要站在产品的角度去考虑这个接口能否充分满足他们的要求，比如我们开发一个图文列表数据接口，用户点击某一条图文内容后，该条图文就是已读标识，那么当这个产品上线后，产品突然发现如果用户点击某条图文后，在回到列表时，应该把用户已经看过的那条图文给不显示；所以如果当时设计后台rest接口时，入参中刚好有一个状态参数，默认查询所有的，如果此时要满足看后消失的需求时，我们只需要在后台把这个接口的入参默认值改成未读状态就行了；改完后后台发一次版就ok了，这样的功能改动对APP端是无感知的，也避免了APP端的发版升级。</p>\n<p><strong>十、一定要知道别人对你做了什么</strong></p>\n<p>平时开发中一定要多打log，多埋点；不然当出现什么问题的时候，我们压根都无从查起，非常被动，因为你不知道用户执行了什么操作，产生了什么bug，这个bug是什么操作导致的等等；如果有条件的话就把ELK搭建上。如果在高大上一点就引入第三方专业做系统监控产品的公司。</p>"},{"title":"用POI3.9写一个基于office系列文档的转换系统(设计篇)","date":"2016-09-12T06:11:22.000Z","_content":"想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。\n\n### 一、需求\n\n由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：\n\n<!--more-->\n\n![](http://soujava.com/images/poi1.png)\n\n### 二、问题\n\n通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：\n1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。\n\n2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。\n\n3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。\n\n### 三、改进\n\n想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。\n\n注：因为jcob不能在linux中使用，故目前选择POI方案。\n\n### 三、疑惑\n\n1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)\n\n2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。\n\n结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。\n\n\n","source":"_posts/用POI3-9写一个基于office系列文档的转换系统-设计篇.md","raw":"---\ntitle: 用POI3.9写一个基于office系列文档的转换系统(设计篇)\ndate: 2016-09-12 14:11:22\ncategories: java\ntags: poi\n---\n想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。\n\n### 一、需求\n\n由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：\n\n<!--more-->\n\n![](http://soujava.com/images/poi1.png)\n\n### 二、问题\n\n通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：\n1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。\n\n2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。\n\n3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。\n\n### 三、改进\n\n想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。\n\n注：因为jcob不能在linux中使用，故目前选择POI方案。\n\n### 三、疑惑\n\n1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)\n\n2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。\n\n结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。\n\n\n","slug":"用POI3-9写一个基于office系列文档的转换系统-设计篇","published":1,"updated":"2018-07-08T09:37:48.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkh006130tzrtru2004","content":"<p>想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。</p>\n<h3 id=\"一、需求\"><a href=\"#一、需求\" class=\"headerlink\" title=\"一、需求\"></a>一、需求</h3><p>由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：</p>\n<a id=\"more\"></a>\n<p><img src=\"http://soujava.com/images/poi1.png\" alt=\"\"></p>\n<h3 id=\"二、问题\"><a href=\"#二、问题\" class=\"headerlink\" title=\"二、问题\"></a>二、问题</h3><p>通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：<br>1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。</p>\n<p>2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。</p>\n<p>3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。</p>\n<h3 id=\"三、改进\"><a href=\"#三、改进\" class=\"headerlink\" title=\"三、改进\"></a>三、改进</h3><p>想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。</p>\n<p>注：因为jcob不能在linux中使用，故目前选择POI方案。</p>\n<h3 id=\"三、疑惑\"><a href=\"#三、疑惑\" class=\"headerlink\" title=\"三、疑惑\"></a>三、疑惑</h3><p>1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)</p>\n<p>2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。</p>\n<p>结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。</p>\n","excerpt":"<p>想用Apache的POI3.9版本编写一套基于office系列文档的一个转换系统，比如对office文档的读写操作、其中的关键字检索操作、把文档转换为html或者支持在线预览的操作等功能。</p>\n<h3 id=\"一、需求\"><a href=\"#一、需求\" class=\"headerlink\" title=\"一、需求\"></a>一、需求</h3><p>由于前段时间已经写了一个文档在线预览功能，就是对office文档、txt、图片、pdf等文档，可以在线预览操作，也是通过搜索引擎搜索、查看一些技术文章等调研方式写出的，基本原理也就是通过几个工具转换实现的，相关原理如下图：</p>","more":"<p><img src=\"http://soujava.com/images/poi1.png\" alt=\"\"></p>\n<h3 id=\"二、问题\"><a href=\"#二、问题\" class=\"headerlink\" title=\"二、问题\"></a>二、问题</h3><p>通过上面的流程是可以实现文件转换、在线预览等功能的，但是我感觉上面的方法存在至少以下几个缺点：<br>1、安装过程过于繁琐，并且过于庞大，完成上面的操作需要安装将近200多兆的软件工具，不管从部署或者使用方面都不太好。</p>\n<p>2、转换过程中对资源的浪费(占用)严重，比如内存、硬盘等资源，内存资源：转换过程中，对内存的占用过于严重，遇到大文件时可以把cpu的使用率占满，对服务器有严重的影响；硬盘资源：一个文档实现转换或预览功能，需要在硬盘上生成pdf、png(缩略图)、swf三个文件，对资源占用严重。</p>\n<p>3、转换效率不高，对大文件转换速度比较慢，还经常出现卡死的现象；转换过程中对文档中的一些公式或者特殊字体没有很好的支持，会出现乱码或者其他不可读的字符情况。</p>\n<h3 id=\"三、改进\"><a href=\"#三、改进\" class=\"headerlink\" title=\"三、改进\"></a>三、改进</h3><p>想通过其他方式实现上述的功能，通过POI、通过jcob两种方式。</p>\n<p>注：因为jcob不能在linux中使用，故目前选择POI方案。</p>\n<h3 id=\"三、疑惑\"><a href=\"#三、疑惑\" class=\"headerlink\" title=\"三、疑惑\"></a>三、疑惑</h3><p>1、我通过简单的例子实现了word文档的操作(目前只对word文档先做测试)，我的思路是把word中的内容写入到html中，然后通过访问html实现浏览操作，但是word中的一些格式在html中无法很好的展现(我还没有研究出来)</p>\n<p>2、我的目的是把word中的内容实现在线预览操作，目前正在尝试POI操作，不知还有没有其他解决方案(最好不依赖于操作系统)。请做过或了解类似功能或者对POI熟悉的朋友们给个指引，一起探讨分享，感激不尽。</p>\n<p>结语：本篇博文的目的是：分享我之前所做的有关文件转换和预览功能原理，然后请教大家有关这个实现有没有更好的解决方案。请大家看到后给出评论，写上你们的所思所想，一方面给我一个方向，另一方面大家共同探讨。</p>"},{"title":"设计模式--单例模式","date":"2017-05-24T09:20:19.000Z","_content":"单例模式根据名字就能明白其含义了，就是只能实例化一个对象的意思；多余的话不赘述，其实单例模式在一些场景中使用可以有效的提升服务器效率节省资源利用；比如服务器资源配置文件的读取、数据库连接建立等等，像这种操作没有必要每次随着方法的调用都加载读取一次资源文件，或者重新建立一次新的连接，这样是非常耗时耗资源的操作，我们只需要在服务启动时，或者第一次方法调用时加载一次就行了，后续方法的调用直接使用对应的实例对象即可；实现一个单例模式有很多种方法，每一种方法都尤其应用场景及优缺点，所以下面就分别描述各种方法：\n\n<!--more-->\n\n**一、非单例模式场景**\n\n```java\n\n\t/**\n\t * 非单例模式场景\n\t * @author mapingsheng\n\t */\n\tpublic class UnSingleton {\n\t\t\n\t\tprivate UnSingleton(){\n\t\t\tSystem.out.println(\"私有构造器\");\n\t\t}\n\t\t\n\t\tpublic static UnSingleton getInstance(){\n\t\t\treturn new UnSingleton();\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args){\n\t\t\tUnSingleton myClass = UnSingleton.getInstance();\n\t\t\tUnSingleton myClass2 = UnSingleton.getInstance();\n\t\t\tSystem.out.println(myClass == myClass2);\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>private construct\n>\n>private construct\n>\n>false\n>\n\n可以看到上面的代码中，每调用一次*UnSingleton.getInstance()*方法就实例化一个新对象，比如我们把资源文件加载读取操作在该方法中执行，当线上有很多人访问时，就会执行很多次，会大大影响服务器的执行效率。\n\n\n**二、单例模式场景-初级(非线程安全)**\n\n```java\n\n\t/**\n * 单例模式场景\n * @author mapingsheng\n */\npublic class Singleton {\n\t/**\n\t * 初始化之前 ，先声明一个静态的类变量\n\t */\n\tprivate static Singleton unInstance;\n\t\n\tprivate Singleton(){\n\t\tSystem.out.println(\"private construct\");\n\t}\n\t\n\t/**\n\t * 在静态方法中先判断类变量是否为空，\n\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量\n\t * 然后把实例化的类变量返回\n\t * @return\n\t */\n\tpublic static Singleton getInstance(){\n\t\tif(null == unInstance){\n\t\t\tunInstance = new Singleton();\n\t\t}\n\t\treturn unInstance;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\t\t\t\n\t\tSingleton sing1 = Singleton.getInstance();\n\t\tSingleton sing2 = Singleton.getInstance();\n\t\tSystem.out.println(sing1 == sing2);\n\t}\n}\n\n```\n\n以上代码运行结果如下：\n\n>private construct\n>\n>true\n\n可以看到，虽然我们调用了*Singleton.getInstance()*两次，但是只输出了一次private construct，这说明构造方法仅仅执行了一次；主要因为我们定义了静态的类变量Singleton unInstance；当第一次调用*Singleton.getInstance()*方法时，类变量unInstance为空，所以就new了一个新的Singleton对象，并赋值给类变量unInstance；当第二次调用*Singleton.getInstance()*时，此时的类变量unInstance不为空，所以直接返回了类变量实例，也就达到了虽然多次调用*Singleton.getInstance()*，但只实例化一个Singleton对象的目的；并且最后我们通过*sing1 == sing2*结果为true发现两个分别调用两次*Singleton.getInstance()*方法产生的两个变量其实是一个对象。\n\n但是上面的例子有一个问题，那就是多线程问题，暂且不说java的指令重排序，仅仅举例说明一下多线程执行会出现实例化多个对象的问题。看getInstance方法中的一段代码\n\n```java\n\n\tpublic static Singleton getInstance(){\n\t\tif(null == unInstance){  //第1步\n\t\t\tunInstance = new Singleton();  //第2步\n\t\t}\t//第3步\n\t\treturn unInstance;  //第4步\n\t}\n```\n\n>比如我们有两个线程A、线程B同时在运行，线程A在CPU1上面运行，线程B在CPU2上面运行\n>\n>线程A执行到第2步\n>\n>线程B执行到第1步\n>\n>那么虽然线程A执行到了第2步，但是同一时刻线程B已经执行到了第1步；由于线程A在第2步还未执行完，所以线程B在第1步时的判断条件就为true，所以线程B将再次执行第2步，虽然在线程B执行到第2步时，线程A已经执行完了第2步并且已经实例化了Singleton对象，但是线程B仍然会再实例化一次Singleton对象。故就会出现多线程环境下，会实例化多个对象的问题；可以看看下面的代码：\n\n```java\n\n\tpublic static void main(String[] args){\n\t\t\n\t\tfor(int i=0;i<100;i++){\n\t\t\tRunnable runn1 = new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSingleton sing1 = Singleton.getInstance();\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tThread thread1 = new Thread(runn1);\n\t\t\tthread1.start();\n\t\t}\n\t}\n\n```\n\n运行以上main方法结果：\n\n>private construct\n>\n>private construct\n\n以上输出两次的结果不是绝对的，有可能也会出现输出一次的情况，因为是多线程的嘛（可能两个线程的先后执行的时间稍微长一些，第一个线程执行完getInstance方法后，第二个线程才进入getInstance方法，故第二个线程执行到if判断时就为false，所以就直接返回了线程1已经实例化过的类变量对象）；所以为了防止多线程问题，我们下面编写一个线程安全的单例模式代码。\n\n\n\n**三、单例模式场景-初级(线程安全)**\n\n```java\n\n\t/**\n\t * 单例模式场景-线程安全\n\t * @author mapingsheng\n\t */\n\tpublic class Singleton {\n\t\t/**\n\t\t * 初始化之前 ，先声明一个静态的类变量\n\t\t */\n\t\tprivate static Singleton unInstance;\n\t\t\n\t\tprivate Singleton(){\n\t\t\tSystem.out.println(\"private construct\");\n\t\t}\n\t\t/**\n\t\t * 在静态方法中先判断类变量是否为空，\n\t\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量\n\t\t * 然后把实例化的类变量返回\n\t\t * @return\n\t\t */\n\t\tpublic static Singleton getInstance(){\n\t\t\t//在方法中把实例化操作进行了同步处理操作\n\t\t\tsynchronized(Singleton.class){\n\t\t        \tif(null == unInstance){\n\t\t\t\t\t\tunInstance = new Singleton();\n\t\t\t\t\t}\t\t\n\t\t        return unInstance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args){\n\t\t\t//多线程调用getInstance方法\n\t\t\tfor(int i=0;i<100;i++){\n\t\t\t\tRunnable runn1 = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSingleton sing1 = Singleton.getInstance();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tThread thread1 = new Thread(runn1);\n\t\t\t\tthread1.start();\n\t\t\t}\n\t\t}\t\t\n\t}\n\n```\n\n以上代码输出如下：\n\n>private construct\n\n不管我们执行多少次，都是只输出一次，所以通过在实例化方法中加入同步处理后，多线程环境下面调用可以防止产生多个实例的问题，但是这种方式不太高效，比如一个访问量很高的网站，那么多线程在高并发运行，每一次请求产生的每一个线程每一次进入到getInstance方法中都需要等待之前的线程执行完以后才进入同步代码块中，这样造成很大的资源浪费，下面使用另一种线程安全的示例\n\n\n**三、单例模式场景-中级(线程安全)**\n\n```java\n\n\t/**\n\t * 单例模式-中级-线程安全-双重检查锁\n\t * @author mapingsheng\n\t */\n\tpublic class Singleton3 {\n\t\tprivate volatile static Singleton3 instance;\n\t\t\n\t\tprivate Singleton3(){\n\t\t\tSystem.out.println(\"private construct\");\n\t\t}\n\t\t\n\t\tprivate static Singleton3 getInstance(){\n\t\t\t if(null == instance){ //进入同步代码块之前先判断instance是否已经实例化，如果已经实例化了就直接返回\n\t\t\t\t synchronized (Singleton3.class) {\n\t\t\t\t\tif(null == instance){\n\t\t\t\t\t\tinstance  = new Singleton3();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t }\n\t\t\t return instance;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i=0;i<1000;i++){\n\t\t\t\tnew Thread(\"\"+i){\n\t\t\t\t\tpublic void run(){\n\t\t\t\t\t\tSingleton3 single1 = Singleton3.getInstance();\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n以上代码运行结果如下：\n\n>private construct\n\n以上代码在多线程环境下面一直会只输出一次，也就是只会实例化一次；因为我们使用了以下方案去处理多线程安全问题\n\n*1、使用双重检查-分别在同步代码块外、同步代码块内进行if判断*\n\n>在使用双重检查后，我们可以在多线程高并发请求环境下提高执行效率，避免过多线程等待操作\n>\n>也就是最开始的一个线程一旦实例化对象之后，后续的线程进入getInstance方法中后，先执行最外层的if判断，如果之前线程已经实例化完毕，则类变量instance就不为空，所以也就不会再进入同步代码块中，可以有效降低后续无用的进入同步代码块的次数\n>\n>在同步代码块内又添加了一个if判断操作，是因为在多线程环境下程序几乎是并行处理的，也就是说线程A、线程B都执行到最外层if判断后，然后都会返回true，然后其中一个线程A进入同步代码块中，线程B处于等待状态，等线程A执行完实例化之后，线程B会再次进入同步代码块中，所以此时我们在同步代码块中添加的if判断就起到了避免重复实例化多个对象的作用。\n>\n\n*2、使用volatile声明类变量*\n\n我们在类变量声明中指定了volatile关键字，之所以添加这个声明，是为了防止虽然我们进行了双重检查，但是java执行指令重排序后，仍然会发生不可预知的问题：\n\n在上面的例子中使用了双重检查后，看似非常完美了，但是有时候仍会出现未知的错误-有可能偶尔还会出现虽然if判断类变量instance已经不为空了，但是其实被实例化的对象中的属性并没有被初始化完毕，主要是因为java虚拟机进行了指令重排序的结果:\n\n>\n>当线程进入同步代码块中，执行instance  = new Singleton3();这一行代码时，这一句实例化代码时，其实这个实例化操作有以下几个步骤：\n>\n>\n>>线程会首先在内存中创建一个副本\n>\n>>调用构造方法，初始化类中的属性\n>\n>>在内存中为该类分配地址，并把地址存入线程自己的内存副本空间中\n>\n>>然后线程会把自己副本中的已实例化的对象的地址赋值给类变量instance，并更新主内存\n>\n>>但是通过java指令重排序以后，可能上面两步骤的顺序是相反的；也就是分配内存地址，然后把内存地址赋值给类变量，那么我们通过if判断时，由于该类在内存中已经存在，所以会错误的认为该类已经实例化完毕了，其实呢该类中的一些初始化操作还没有执行完毕(比如从配置文件中读取相关数据、类属性的赋值操作等等)；这就导致我们拿到返回的instance实例后，获取使用其中的属性仍然为空的问题；\n>\n>所以针对上面的问题，我们就在类遍历中添加了*volatile*声明，所以就可以避免上述指令出排序的问题\n\n\n\n**四、单例模式场景-中级(线程安全-静态实例)**\n\n```java\n\n\t/**\n\t * 线程安全的\n\t * @author mapingsheng\n\t */\n\tpublic class Singleton2 {\n\t\t//直接把实例化操作作为静态的类变量，也就是类变量会\n\t\tprivate static Singleton2 instance = new Singleton2();\n\t\t\n\t\tprivate Singleton2(){\n\t\t\tSystem.out.println(\"private construct\");\n\t\t}\n\t\t\n\t\tpublic static Singleton2 getInstance(){\n\t\t\treturn instance;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args){\n\t\t\tfor(int i=0;i<100;i++){\n\t\t\t\tRunnable runn1 = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSingleton2 sing1 = Singleton2.getInstance();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tThread thread1 = new Thread(runn1);\n\t\t\t\tthread1.start();\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>private construct\n\n上面的代码多线程环境下面也会仅仅输出一次，当类装载的时候就会创建类的实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要再判断，节省了运行时间；因为不是在运行时执行的实例化操作，所以是线程安全的。\n\n","source":"_posts/设计模式-单例模式.md","raw":"---\ntitle: 设计模式--单例模式\ndate: 2017-05-24 17:20:19\ncategories: 设计模式\ntags: java\n---\n单例模式根据名字就能明白其含义了，就是只能实例化一个对象的意思；多余的话不赘述，其实单例模式在一些场景中使用可以有效的提升服务器效率节省资源利用；比如服务器资源配置文件的读取、数据库连接建立等等，像这种操作没有必要每次随着方法的调用都加载读取一次资源文件，或者重新建立一次新的连接，这样是非常耗时耗资源的操作，我们只需要在服务启动时，或者第一次方法调用时加载一次就行了，后续方法的调用直接使用对应的实例对象即可；实现一个单例模式有很多种方法，每一种方法都尤其应用场景及优缺点，所以下面就分别描述各种方法：\n\n<!--more-->\n\n**一、非单例模式场景**\n\n```java\n\n\t/**\n\t * 非单例模式场景\n\t * @author mapingsheng\n\t */\n\tpublic class UnSingleton {\n\t\t\n\t\tprivate UnSingleton(){\n\t\t\tSystem.out.println(\"私有构造器\");\n\t\t}\n\t\t\n\t\tpublic static UnSingleton getInstance(){\n\t\t\treturn new UnSingleton();\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args){\n\t\t\tUnSingleton myClass = UnSingleton.getInstance();\n\t\t\tUnSingleton myClass2 = UnSingleton.getInstance();\n\t\t\tSystem.out.println(myClass == myClass2);\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>private construct\n>\n>private construct\n>\n>false\n>\n\n可以看到上面的代码中，每调用一次*UnSingleton.getInstance()*方法就实例化一个新对象，比如我们把资源文件加载读取操作在该方法中执行，当线上有很多人访问时，就会执行很多次，会大大影响服务器的执行效率。\n\n\n**二、单例模式场景-初级(非线程安全)**\n\n```java\n\n\t/**\n * 单例模式场景\n * @author mapingsheng\n */\npublic class Singleton {\n\t/**\n\t * 初始化之前 ，先声明一个静态的类变量\n\t */\n\tprivate static Singleton unInstance;\n\t\n\tprivate Singleton(){\n\t\tSystem.out.println(\"private construct\");\n\t}\n\t\n\t/**\n\t * 在静态方法中先判断类变量是否为空，\n\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量\n\t * 然后把实例化的类变量返回\n\t * @return\n\t */\n\tpublic static Singleton getInstance(){\n\t\tif(null == unInstance){\n\t\t\tunInstance = new Singleton();\n\t\t}\n\t\treturn unInstance;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\t\t\t\n\t\tSingleton sing1 = Singleton.getInstance();\n\t\tSingleton sing2 = Singleton.getInstance();\n\t\tSystem.out.println(sing1 == sing2);\n\t}\n}\n\n```\n\n以上代码运行结果如下：\n\n>private construct\n>\n>true\n\n可以看到，虽然我们调用了*Singleton.getInstance()*两次，但是只输出了一次private construct，这说明构造方法仅仅执行了一次；主要因为我们定义了静态的类变量Singleton unInstance；当第一次调用*Singleton.getInstance()*方法时，类变量unInstance为空，所以就new了一个新的Singleton对象，并赋值给类变量unInstance；当第二次调用*Singleton.getInstance()*时，此时的类变量unInstance不为空，所以直接返回了类变量实例，也就达到了虽然多次调用*Singleton.getInstance()*，但只实例化一个Singleton对象的目的；并且最后我们通过*sing1 == sing2*结果为true发现两个分别调用两次*Singleton.getInstance()*方法产生的两个变量其实是一个对象。\n\n但是上面的例子有一个问题，那就是多线程问题，暂且不说java的指令重排序，仅仅举例说明一下多线程执行会出现实例化多个对象的问题。看getInstance方法中的一段代码\n\n```java\n\n\tpublic static Singleton getInstance(){\n\t\tif(null == unInstance){  //第1步\n\t\t\tunInstance = new Singleton();  //第2步\n\t\t}\t//第3步\n\t\treturn unInstance;  //第4步\n\t}\n```\n\n>比如我们有两个线程A、线程B同时在运行，线程A在CPU1上面运行，线程B在CPU2上面运行\n>\n>线程A执行到第2步\n>\n>线程B执行到第1步\n>\n>那么虽然线程A执行到了第2步，但是同一时刻线程B已经执行到了第1步；由于线程A在第2步还未执行完，所以线程B在第1步时的判断条件就为true，所以线程B将再次执行第2步，虽然在线程B执行到第2步时，线程A已经执行完了第2步并且已经实例化了Singleton对象，但是线程B仍然会再实例化一次Singleton对象。故就会出现多线程环境下，会实例化多个对象的问题；可以看看下面的代码：\n\n```java\n\n\tpublic static void main(String[] args){\n\t\t\n\t\tfor(int i=0;i<100;i++){\n\t\t\tRunnable runn1 = new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSingleton sing1 = Singleton.getInstance();\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tThread thread1 = new Thread(runn1);\n\t\t\tthread1.start();\n\t\t}\n\t}\n\n```\n\n运行以上main方法结果：\n\n>private construct\n>\n>private construct\n\n以上输出两次的结果不是绝对的，有可能也会出现输出一次的情况，因为是多线程的嘛（可能两个线程的先后执行的时间稍微长一些，第一个线程执行完getInstance方法后，第二个线程才进入getInstance方法，故第二个线程执行到if判断时就为false，所以就直接返回了线程1已经实例化过的类变量对象）；所以为了防止多线程问题，我们下面编写一个线程安全的单例模式代码。\n\n\n\n**三、单例模式场景-初级(线程安全)**\n\n```java\n\n\t/**\n\t * 单例模式场景-线程安全\n\t * @author mapingsheng\n\t */\n\tpublic class Singleton {\n\t\t/**\n\t\t * 初始化之前 ，先声明一个静态的类变量\n\t\t */\n\t\tprivate static Singleton unInstance;\n\t\t\n\t\tprivate Singleton(){\n\t\t\tSystem.out.println(\"private construct\");\n\t\t}\n\t\t/**\n\t\t * 在静态方法中先判断类变量是否为空，\n\t\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量\n\t\t * 然后把实例化的类变量返回\n\t\t * @return\n\t\t */\n\t\tpublic static Singleton getInstance(){\n\t\t\t//在方法中把实例化操作进行了同步处理操作\n\t\t\tsynchronized(Singleton.class){\n\t\t        \tif(null == unInstance){\n\t\t\t\t\t\tunInstance = new Singleton();\n\t\t\t\t\t}\t\t\n\t\t        return unInstance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args){\n\t\t\t//多线程调用getInstance方法\n\t\t\tfor(int i=0;i<100;i++){\n\t\t\t\tRunnable runn1 = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSingleton sing1 = Singleton.getInstance();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tThread thread1 = new Thread(runn1);\n\t\t\t\tthread1.start();\n\t\t\t}\n\t\t}\t\t\n\t}\n\n```\n\n以上代码输出如下：\n\n>private construct\n\n不管我们执行多少次，都是只输出一次，所以通过在实例化方法中加入同步处理后，多线程环境下面调用可以防止产生多个实例的问题，但是这种方式不太高效，比如一个访问量很高的网站，那么多线程在高并发运行，每一次请求产生的每一个线程每一次进入到getInstance方法中都需要等待之前的线程执行完以后才进入同步代码块中，这样造成很大的资源浪费，下面使用另一种线程安全的示例\n\n\n**三、单例模式场景-中级(线程安全)**\n\n```java\n\n\t/**\n\t * 单例模式-中级-线程安全-双重检查锁\n\t * @author mapingsheng\n\t */\n\tpublic class Singleton3 {\n\t\tprivate volatile static Singleton3 instance;\n\t\t\n\t\tprivate Singleton3(){\n\t\t\tSystem.out.println(\"private construct\");\n\t\t}\n\t\t\n\t\tprivate static Singleton3 getInstance(){\n\t\t\t if(null == instance){ //进入同步代码块之前先判断instance是否已经实例化，如果已经实例化了就直接返回\n\t\t\t\t synchronized (Singleton3.class) {\n\t\t\t\t\tif(null == instance){\n\t\t\t\t\t\tinstance  = new Singleton3();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t }\n\t\t\t return instance;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args) {\n\t\t\tfor(int i=0;i<1000;i++){\n\t\t\t\tnew Thread(\"\"+i){\n\t\t\t\t\tpublic void run(){\n\t\t\t\t\t\tSingleton3 single1 = Singleton3.getInstance();\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n以上代码运行结果如下：\n\n>private construct\n\n以上代码在多线程环境下面一直会只输出一次，也就是只会实例化一次；因为我们使用了以下方案去处理多线程安全问题\n\n*1、使用双重检查-分别在同步代码块外、同步代码块内进行if判断*\n\n>在使用双重检查后，我们可以在多线程高并发请求环境下提高执行效率，避免过多线程等待操作\n>\n>也就是最开始的一个线程一旦实例化对象之后，后续的线程进入getInstance方法中后，先执行最外层的if判断，如果之前线程已经实例化完毕，则类变量instance就不为空，所以也就不会再进入同步代码块中，可以有效降低后续无用的进入同步代码块的次数\n>\n>在同步代码块内又添加了一个if判断操作，是因为在多线程环境下程序几乎是并行处理的，也就是说线程A、线程B都执行到最外层if判断后，然后都会返回true，然后其中一个线程A进入同步代码块中，线程B处于等待状态，等线程A执行完实例化之后，线程B会再次进入同步代码块中，所以此时我们在同步代码块中添加的if判断就起到了避免重复实例化多个对象的作用。\n>\n\n*2、使用volatile声明类变量*\n\n我们在类变量声明中指定了volatile关键字，之所以添加这个声明，是为了防止虽然我们进行了双重检查，但是java执行指令重排序后，仍然会发生不可预知的问题：\n\n在上面的例子中使用了双重检查后，看似非常完美了，但是有时候仍会出现未知的错误-有可能偶尔还会出现虽然if判断类变量instance已经不为空了，但是其实被实例化的对象中的属性并没有被初始化完毕，主要是因为java虚拟机进行了指令重排序的结果:\n\n>\n>当线程进入同步代码块中，执行instance  = new Singleton3();这一行代码时，这一句实例化代码时，其实这个实例化操作有以下几个步骤：\n>\n>\n>>线程会首先在内存中创建一个副本\n>\n>>调用构造方法，初始化类中的属性\n>\n>>在内存中为该类分配地址，并把地址存入线程自己的内存副本空间中\n>\n>>然后线程会把自己副本中的已实例化的对象的地址赋值给类变量instance，并更新主内存\n>\n>>但是通过java指令重排序以后，可能上面两步骤的顺序是相反的；也就是分配内存地址，然后把内存地址赋值给类变量，那么我们通过if判断时，由于该类在内存中已经存在，所以会错误的认为该类已经实例化完毕了，其实呢该类中的一些初始化操作还没有执行完毕(比如从配置文件中读取相关数据、类属性的赋值操作等等)；这就导致我们拿到返回的instance实例后，获取使用其中的属性仍然为空的问题；\n>\n>所以针对上面的问题，我们就在类遍历中添加了*volatile*声明，所以就可以避免上述指令出排序的问题\n\n\n\n**四、单例模式场景-中级(线程安全-静态实例)**\n\n```java\n\n\t/**\n\t * 线程安全的\n\t * @author mapingsheng\n\t */\n\tpublic class Singleton2 {\n\t\t//直接把实例化操作作为静态的类变量，也就是类变量会\n\t\tprivate static Singleton2 instance = new Singleton2();\n\t\t\n\t\tprivate Singleton2(){\n\t\t\tSystem.out.println(\"private construct\");\n\t\t}\n\t\t\n\t\tpublic static Singleton2 getInstance(){\n\t\t\treturn instance;\n\t\t}\n\t\t\n\t\tpublic static void main(String[] args){\n\t\t\tfor(int i=0;i<100;i++){\n\t\t\t\tRunnable runn1 = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSingleton2 sing1 = Singleton2.getInstance();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tThread thread1 = new Thread(runn1);\n\t\t\t\tthread1.start();\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>private construct\n\n上面的代码多线程环境下面也会仅仅输出一次，当类装载的时候就会创建类的实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要再判断，节省了运行时间；因为不是在运行时执行的实例化操作，所以是线程安全的。\n\n","slug":"设计模式-单例模式","published":1,"updated":"2018-07-08T09:37:48.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkj006530tzuxpbnan2","content":"<p>单例模式根据名字就能明白其含义了，就是只能实例化一个对象的意思；多余的话不赘述，其实单例模式在一些场景中使用可以有效的提升服务器效率节省资源利用；比如服务器资源配置文件的读取、数据库连接建立等等，像这种操作没有必要每次随着方法的调用都加载读取一次资源文件，或者重新建立一次新的连接，这样是非常耗时耗资源的操作，我们只需要在服务启动时，或者第一次方法调用时加载一次就行了，后续方法的调用直接使用对应的实例对象即可；实现一个单例模式有很多种方法，每一种方法都尤其应用场景及优缺点，所以下面就分别描述各种方法：</p>\n<a id=\"more\"></a>\n<p><strong>一、非单例模式场景</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 非单例模式场景</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnSingleton</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">UnSingleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"私有构造器\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UnSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnSingleton();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tUnSingleton myClass = UnSingleton.getInstance();</div><div class=\"line\">\t\tUnSingleton myClass2 = UnSingleton.getInstance();</div><div class=\"line\">\t\tSystem.out.println(myClass == myClass2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>private construct</p>\n<p>private construct</p>\n<p>false</p>\n</blockquote>\n<p>可以看到上面的代码中，每调用一次<em>UnSingleton.getInstance()</em>方法就实例化一个新对象，比如我们把资源文件加载读取操作在该方法中执行，当线上有很多人访问时，就会执行很多次，会大大影响服务器的执行效率。</p>\n<p><strong>二、单例模式场景-初级(非线程安全)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"> * 单例模式场景</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 初始化之前 ，先声明一个静态的类变量</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unInstance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在静态方法中先判断类变量是否为空，</div><div class=\"line\">\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量</div><div class=\"line\">\t * 然后把实例化的类变量返回</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == unInstance)&#123;</div><div class=\"line\">\t\t\tunInstance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> unInstance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\tSingleton sing1 = Singleton.getInstance();</div><div class=\"line\">\t\tSingleton sing2 = Singleton.getInstance();</div><div class=\"line\">\t\tSystem.out.println(sing1 == sing2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果如下：</p>\n<blockquote>\n<p>private construct</p>\n<p>true</p>\n</blockquote>\n<p>可以看到，虽然我们调用了<em>Singleton.getInstance()</em>两次，但是只输出了一次private construct，这说明构造方法仅仅执行了一次；主要因为我们定义了静态的类变量Singleton unInstance；当第一次调用<em>Singleton.getInstance()</em>方法时，类变量unInstance为空，所以就new了一个新的Singleton对象，并赋值给类变量unInstance；当第二次调用<em>Singleton.getInstance()</em>时，此时的类变量unInstance不为空，所以直接返回了类变量实例，也就达到了虽然多次调用<em>Singleton.getInstance()</em>，但只实例化一个Singleton对象的目的；并且最后我们通过<em>sing1 == sing2</em>结果为true发现两个分别调用两次<em>Singleton.getInstance()</em>方法产生的两个变量其实是一个对象。</p>\n<p>但是上面的例子有一个问题，那就是多线程问题，暂且不说java的指令重排序，仅仅举例说明一下多线程执行会出现实例化多个对象的问题。看getInstance方法中的一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == unInstance)&#123;  <span class=\"comment\">//第1步</span></div><div class=\"line\">\t\tunInstance = <span class=\"keyword\">new</span> Singleton();  <span class=\"comment\">//第2步</span></div><div class=\"line\">\t&#125;\t<span class=\"comment\">//第3步</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> unInstance;  <span class=\"comment\">//第4步</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>比如我们有两个线程A、线程B同时在运行，线程A在CPU1上面运行，线程B在CPU2上面运行</p>\n<p>线程A执行到第2步</p>\n<p>线程B执行到第1步</p>\n<p>那么虽然线程A执行到了第2步，但是同一时刻线程B已经执行到了第1步；由于线程A在第2步还未执行完，所以线程B在第1步时的判断条件就为true，所以线程B将再次执行第2步，虽然在线程B执行到第2步时，线程A已经执行完了第2步并且已经实例化了Singleton对象，但是线程B仍然会再实例化一次Singleton对象。故就会出现多线程环境下，会实例化多个对象的问题；可以看看下面的代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</div><div class=\"line\">\t\tRunnable runn1 = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSingleton sing1 = Singleton.getInstance();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(runn1);</div><div class=\"line\">\t\tthread1.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行以上main方法结果：</p>\n<blockquote>\n<p>private construct</p>\n<p>private construct</p>\n</blockquote>\n<p>以上输出两次的结果不是绝对的，有可能也会出现输出一次的情况，因为是多线程的嘛（可能两个线程的先后执行的时间稍微长一些，第一个线程执行完getInstance方法后，第二个线程才进入getInstance方法，故第二个线程执行到if判断时就为false，所以就直接返回了线程1已经实例化过的类变量对象）；所以为了防止多线程问题，我们下面编写一个线程安全的单例模式代码。</p>\n<p><strong>三、单例模式场景-初级(线程安全)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 单例模式场景-线程安全</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 初始化之前 ，先声明一个静态的类变量</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unInstance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在静态方法中先判断类变量是否为空，</div><div class=\"line\">\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量</div><div class=\"line\">\t * 然后把实例化的类变量返回</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//在方法中把实例化操作进行了同步处理操作</span></div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</div><div class=\"line\">\t        \t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == unInstance)&#123;</div><div class=\"line\">\t\t\t\t\tunInstance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">\t\t\t\t&#125;\t\t</div><div class=\"line\">\t        <span class=\"keyword\">return</span> unInstance;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//多线程调用getInstance方法</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</div><div class=\"line\">\t\t\tRunnable runn1 = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tSingleton sing1 = Singleton.getInstance();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(runn1);</div><div class=\"line\">\t\t\tthread1.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;\t\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出如下：</p>\n<blockquote>\n<p>private construct</p>\n</blockquote>\n<p>不管我们执行多少次，都是只输出一次，所以通过在实例化方法中加入同步处理后，多线程环境下面调用可以防止产生多个实例的问题，但是这种方式不太高效，比如一个访问量很高的网站，那么多线程在高并发运行，每一次请求产生的每一个线程每一次进入到getInstance方法中都需要等待之前的线程执行完以后才进入同步代码块中，这样造成很大的资源浪费，下面使用另一种线程安全的示例</p>\n<p><strong>三、单例模式场景-中级(线程安全)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 单例模式-中级-线程安全-双重检查锁</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton3 instance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == instance)&#123; <span class=\"comment\">//进入同步代码块之前先判断instance是否已经实例化，如果已经实例化了就直接返回</span></div><div class=\"line\">\t\t\t <span class=\"keyword\">synchronized</span> (Singleton3.class) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == instance)&#123;</div><div class=\"line\">\t\t\t\t\tinstance  = <span class=\"keyword\">new</span> Singleton3();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t\t <span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"\"</span>+i)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t\t\t\tSingleton3 single1 = Singleton3.getInstance();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果如下：</p>\n<blockquote>\n<p>private construct</p>\n</blockquote>\n<p>以上代码在多线程环境下面一直会只输出一次，也就是只会实例化一次；因为我们使用了以下方案去处理多线程安全问题</p>\n<p><em>1、使用双重检查-分别在同步代码块外、同步代码块内进行if判断</em></p>\n<blockquote>\n<p>在使用双重检查后，我们可以在多线程高并发请求环境下提高执行效率，避免过多线程等待操作</p>\n<p>也就是最开始的一个线程一旦实例化对象之后，后续的线程进入getInstance方法中后，先执行最外层的if判断，如果之前线程已经实例化完毕，则类变量instance就不为空，所以也就不会再进入同步代码块中，可以有效降低后续无用的进入同步代码块的次数</p>\n<p>在同步代码块内又添加了一个if判断操作，是因为在多线程环境下程序几乎是并行处理的，也就是说线程A、线程B都执行到最外层if判断后，然后都会返回true，然后其中一个线程A进入同步代码块中，线程B处于等待状态，等线程A执行完实例化之后，线程B会再次进入同步代码块中，所以此时我们在同步代码块中添加的if判断就起到了避免重复实例化多个对象的作用。</p>\n</blockquote>\n<p><em>2、使用volatile声明类变量</em></p>\n<p>我们在类变量声明中指定了volatile关键字，之所以添加这个声明，是为了防止虽然我们进行了双重检查，但是java执行指令重排序后，仍然会发生不可预知的问题：</p>\n<p>在上面的例子中使用了双重检查后，看似非常完美了，但是有时候仍会出现未知的错误-有可能偶尔还会出现虽然if判断类变量instance已经不为空了，但是其实被实例化的对象中的属性并没有被初始化完毕，主要是因为java虚拟机进行了指令重排序的结果:</p>\n<p>&gt;</p>\n<blockquote>\n<p>当线程进入同步代码块中，执行instance  = new Singleton3();这一行代码时，这一句实例化代码时，其实这个实例化操作有以下几个步骤：</p>\n<blockquote>\n<p>线程会首先在内存中创建一个副本</p>\n<p>调用构造方法，初始化类中的属性</p>\n<p>在内存中为该类分配地址，并把地址存入线程自己的内存副本空间中</p>\n<p>然后线程会把自己副本中的已实例化的对象的地址赋值给类变量instance，并更新主内存</p>\n<p>但是通过java指令重排序以后，可能上面两步骤的顺序是相反的；也就是分配内存地址，然后把内存地址赋值给类变量，那么我们通过if判断时，由于该类在内存中已经存在，所以会错误的认为该类已经实例化完毕了，其实呢该类中的一些初始化操作还没有执行完毕(比如从配置文件中读取相关数据、类属性的赋值操作等等)；这就导致我们拿到返回的instance实例后，获取使用其中的属性仍然为空的问题；</p>\n</blockquote>\n<p>所以针对上面的问题，我们就在类遍历中添加了<em>volatile</em>声明，所以就可以避免上述指令出排序的问题</p>\n</blockquote>\n<p><strong>四、单例模式场景-中级(线程安全-静态实例)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 线程安全的</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//直接把实例化操作作为静态的类变量，也就是类变量会</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">new</span> Singleton2();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</div><div class=\"line\">\t\t\tRunnable runn1 = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tSingleton2 sing1 = Singleton2.getInstance();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(runn1);</div><div class=\"line\">\t\t\tthread1.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>private construct</p>\n</blockquote>\n<p>上面的代码多线程环境下面也会仅仅输出一次，当类装载的时候就会创建类的实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要再判断，节省了运行时间；因为不是在运行时执行的实例化操作，所以是线程安全的。</p>\n","excerpt":"<p>单例模式根据名字就能明白其含义了，就是只能实例化一个对象的意思；多余的话不赘述，其实单例模式在一些场景中使用可以有效的提升服务器效率节省资源利用；比如服务器资源配置文件的读取、数据库连接建立等等，像这种操作没有必要每次随着方法的调用都加载读取一次资源文件，或者重新建立一次新的连接，这样是非常耗时耗资源的操作，我们只需要在服务启动时，或者第一次方法调用时加载一次就行了，后续方法的调用直接使用对应的实例对象即可；实现一个单例模式有很多种方法，每一种方法都尤其应用场景及优缺点，所以下面就分别描述各种方法：</p>","more":"<p><strong>一、非单例模式场景</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 非单例模式场景</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnSingleton</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">UnSingleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"私有构造器\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UnSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnSingleton();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tUnSingleton myClass = UnSingleton.getInstance();</div><div class=\"line\">\t\tUnSingleton myClass2 = UnSingleton.getInstance();</div><div class=\"line\">\t\tSystem.out.println(myClass == myClass2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>private construct</p>\n<p>private construct</p>\n<p>false</p>\n</blockquote>\n<p>可以看到上面的代码中，每调用一次<em>UnSingleton.getInstance()</em>方法就实例化一个新对象，比如我们把资源文件加载读取操作在该方法中执行，当线上有很多人访问时，就会执行很多次，会大大影响服务器的执行效率。</p>\n<p><strong>二、单例模式场景-初级(非线程安全)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\"> * 单例模式场景</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 初始化之前 ，先声明一个静态的类变量</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unInstance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在静态方法中先判断类变量是否为空，</div><div class=\"line\">\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量</div><div class=\"line\">\t * 然后把实例化的类变量返回</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == unInstance)&#123;</div><div class=\"line\">\t\t\tunInstance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> unInstance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\tSingleton sing1 = Singleton.getInstance();</div><div class=\"line\">\t\tSingleton sing2 = Singleton.getInstance();</div><div class=\"line\">\t\tSystem.out.println(sing1 == sing2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果如下：</p>\n<blockquote>\n<p>private construct</p>\n<p>true</p>\n</blockquote>\n<p>可以看到，虽然我们调用了<em>Singleton.getInstance()</em>两次，但是只输出了一次private construct，这说明构造方法仅仅执行了一次；主要因为我们定义了静态的类变量Singleton unInstance；当第一次调用<em>Singleton.getInstance()</em>方法时，类变量unInstance为空，所以就new了一个新的Singleton对象，并赋值给类变量unInstance；当第二次调用<em>Singleton.getInstance()</em>时，此时的类变量unInstance不为空，所以直接返回了类变量实例，也就达到了虽然多次调用<em>Singleton.getInstance()</em>，但只实例化一个Singleton对象的目的；并且最后我们通过<em>sing1 == sing2</em>结果为true发现两个分别调用两次<em>Singleton.getInstance()</em>方法产生的两个变量其实是一个对象。</p>\n<p>但是上面的例子有一个问题，那就是多线程问题，暂且不说java的指令重排序，仅仅举例说明一下多线程执行会出现实例化多个对象的问题。看getInstance方法中的一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == unInstance)&#123;  <span class=\"comment\">//第1步</span></div><div class=\"line\">\t\tunInstance = <span class=\"keyword\">new</span> Singleton();  <span class=\"comment\">//第2步</span></div><div class=\"line\">\t&#125;\t<span class=\"comment\">//第3步</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> unInstance;  <span class=\"comment\">//第4步</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>比如我们有两个线程A、线程B同时在运行，线程A在CPU1上面运行，线程B在CPU2上面运行</p>\n<p>线程A执行到第2步</p>\n<p>线程B执行到第1步</p>\n<p>那么虽然线程A执行到了第2步，但是同一时刻线程B已经执行到了第1步；由于线程A在第2步还未执行完，所以线程B在第1步时的判断条件就为true，所以线程B将再次执行第2步，虽然在线程B执行到第2步时，线程A已经执行完了第2步并且已经实例化了Singleton对象，但是线程B仍然会再实例化一次Singleton对象。故就会出现多线程环境下，会实例化多个对象的问题；可以看看下面的代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</div><div class=\"line\">\t\tRunnable runn1 = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSingleton sing1 = Singleton.getInstance();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(runn1);</div><div class=\"line\">\t\tthread1.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行以上main方法结果：</p>\n<blockquote>\n<p>private construct</p>\n<p>private construct</p>\n</blockquote>\n<p>以上输出两次的结果不是绝对的，有可能也会出现输出一次的情况，因为是多线程的嘛（可能两个线程的先后执行的时间稍微长一些，第一个线程执行完getInstance方法后，第二个线程才进入getInstance方法，故第二个线程执行到if判断时就为false，所以就直接返回了线程1已经实例化过的类变量对象）；所以为了防止多线程问题，我们下面编写一个线程安全的单例模式代码。</p>\n<p><strong>三、单例模式场景-初级(线程安全)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 单例模式场景-线程安全</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 初始化之前 ，先声明一个静态的类变量</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unInstance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在静态方法中先判断类变量是否为空，</div><div class=\"line\">\t * 如果为空就实例化一个新的Singleton对象并赋值给类变量</div><div class=\"line\">\t * 然后把实例化的类变量返回</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//在方法中把实例化操作进行了同步处理操作</span></div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</div><div class=\"line\">\t        \t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == unInstance)&#123;</div><div class=\"line\">\t\t\t\t\tunInstance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">\t\t\t\t&#125;\t\t</div><div class=\"line\">\t        <span class=\"keyword\">return</span> unInstance;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//多线程调用getInstance方法</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</div><div class=\"line\">\t\t\tRunnable runn1 = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tSingleton sing1 = Singleton.getInstance();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(runn1);</div><div class=\"line\">\t\t\tthread1.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;\t\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码输出如下：</p>\n<blockquote>\n<p>private construct</p>\n</blockquote>\n<p>不管我们执行多少次，都是只输出一次，所以通过在实例化方法中加入同步处理后，多线程环境下面调用可以防止产生多个实例的问题，但是这种方式不太高效，比如一个访问量很高的网站，那么多线程在高并发运行，每一次请求产生的每一个线程每一次进入到getInstance方法中都需要等待之前的线程执行完以后才进入同步代码块中，这样造成很大的资源浪费，下面使用另一种线程安全的示例</p>\n<p><strong>三、单例模式场景-中级(线程安全)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 单例模式-中级-线程安全-双重检查锁</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton3 instance;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == instance)&#123; <span class=\"comment\">//进入同步代码块之前先判断instance是否已经实例化，如果已经实例化了就直接返回</span></div><div class=\"line\">\t\t\t <span class=\"keyword\">synchronized</span> (Singleton3.class) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == instance)&#123;</div><div class=\"line\">\t\t\t\t\tinstance  = <span class=\"keyword\">new</span> Singleton3();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t\t <span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"\"</span>+i)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t\t\t\tSingleton3 single1 = Singleton3.getInstance();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果如下：</p>\n<blockquote>\n<p>private construct</p>\n</blockquote>\n<p>以上代码在多线程环境下面一直会只输出一次，也就是只会实例化一次；因为我们使用了以下方案去处理多线程安全问题</p>\n<p><em>1、使用双重检查-分别在同步代码块外、同步代码块内进行if判断</em></p>\n<blockquote>\n<p>在使用双重检查后，我们可以在多线程高并发请求环境下提高执行效率，避免过多线程等待操作</p>\n<p>也就是最开始的一个线程一旦实例化对象之后，后续的线程进入getInstance方法中后，先执行最外层的if判断，如果之前线程已经实例化完毕，则类变量instance就不为空，所以也就不会再进入同步代码块中，可以有效降低后续无用的进入同步代码块的次数</p>\n<p>在同步代码块内又添加了一个if判断操作，是因为在多线程环境下程序几乎是并行处理的，也就是说线程A、线程B都执行到最外层if判断后，然后都会返回true，然后其中一个线程A进入同步代码块中，线程B处于等待状态，等线程A执行完实例化之后，线程B会再次进入同步代码块中，所以此时我们在同步代码块中添加的if判断就起到了避免重复实例化多个对象的作用。</p>\n</blockquote>\n<p><em>2、使用volatile声明类变量</em></p>\n<p>我们在类变量声明中指定了volatile关键字，之所以添加这个声明，是为了防止虽然我们进行了双重检查，但是java执行指令重排序后，仍然会发生不可预知的问题：</p>\n<p>在上面的例子中使用了双重检查后，看似非常完美了，但是有时候仍会出现未知的错误-有可能偶尔还会出现虽然if判断类变量instance已经不为空了，但是其实被实例化的对象中的属性并没有被初始化完毕，主要是因为java虚拟机进行了指令重排序的结果:</p>\n<p>&gt;</p>\n<blockquote>\n<p>当线程进入同步代码块中，执行instance  = new Singleton3();这一行代码时，这一句实例化代码时，其实这个实例化操作有以下几个步骤：</p>\n<blockquote>\n<p>线程会首先在内存中创建一个副本</p>\n<p>调用构造方法，初始化类中的属性</p>\n<p>在内存中为该类分配地址，并把地址存入线程自己的内存副本空间中</p>\n<p>然后线程会把自己副本中的已实例化的对象的地址赋值给类变量instance，并更新主内存</p>\n<p>但是通过java指令重排序以后，可能上面两步骤的顺序是相反的；也就是分配内存地址，然后把内存地址赋值给类变量，那么我们通过if判断时，由于该类在内存中已经存在，所以会错误的认为该类已经实例化完毕了，其实呢该类中的一些初始化操作还没有执行完毕(比如从配置文件中读取相关数据、类属性的赋值操作等等)；这就导致我们拿到返回的instance实例后，获取使用其中的属性仍然为空的问题；</p>\n</blockquote>\n<p>所以针对上面的问题，我们就在类遍历中添加了<em>volatile</em>声明，所以就可以避免上述指令出排序的问题</p>\n</blockquote>\n<p><strong>四、单例模式场景-中级(线程安全-静态实例)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 线程安全的</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//直接把实例化操作作为静态的类变量，也就是类变量会</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">new</span> Singleton2();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"private construct\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</div><div class=\"line\">\t\t\tRunnable runn1 = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tSingleton2 sing1 = Singleton2.getInstance();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(runn1);</div><div class=\"line\">\t\t\tthread1.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>private construct</p>\n</blockquote>\n<p>上面的代码多线程环境下面也会仅仅输出一次，当类装载的时候就会创建类的实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要再判断，节省了运行时间；因为不是在运行时执行的实例化操作，所以是线程安全的。</p>"},{"title":"设计模式--工厂方法模式","date":"2017-05-18T05:57:28.000Z","_content":"\n说到工厂方法模式不得不围绕车去说明了，因为它太通俗了，不需要过多去解释，满大街都是的；就拿宝马来讲，这是德国的一个品牌，虽然不算太好，但也还可以，记得当初宝马在德国慕尼黑新建第一家工厂的时候，组织架构还是非常简单的，分为设计部、生产部、装配部、测试部、订单部这几个部门，所以通过这几个部门也大致可以了解到一辆BMW的生产流程时设计-生产-装配-测试；然后有人下订单后就把车送过去了。\n\n\n<!--more-->\n\n首先建造一个汽车工厂首先得知道你生产什么东西吧，也就是说你得提前设计你的汽车吧，所以我们需要定义一个BMW接口，用来统一定义BMW汽车共性的东西（打开车门、启动、开走），这三部曲是必须要做的。\n\n**1、新建一个BMW接口**\n\n通过一个接口及行为可以大致描述你的车时什么样子的，打开车门表示车肯定要有门，启动则表示需要有一个发动机，开走则表示车需要有轮子；暂且这么想吧。\n\n```java\n\n\t/**\n\t * 通用的BMW汽车接口\n\t * @author mapingsheng\n\t */\n\tpublic interface BMW {\n\t\t/**\n\t\t * 打开车门\n\t\t */\n\t\tpublic void open();\n\t\t/**\n\t\t * 启动\n\t\t */\n\t\tpublic void start();\n\t\t\n\t\t/**\n\t\t * 开走\n\t\t */\n\t\tpublic void go();\n\t}\n\n```\n\n**2、新建一个具体的BMW车-BMWx6**\n\n```java\n\n\t/**\n\t * BMWx6系列汽车\n\t * @author mapingsheng\n\t */\n\tpublic class BMWx6 implements BMW{\n\t\n\t\tBMWx6(){\n\t\t\tSystem.out.println(\"--------BMWx6---------\");\n\t\t\topen();\n\t\t\tstart();\n\t\t\tgo();\n\t\t\tSystem.out.println(\"--------BMWx6---------\");\n\t\t}\n\t\t/**\n\t\t * 重写具体的打开方式\n\t\t */\n\t\tpublic void open(){\n\t\t\tSystem.out.println(\"手动打开车门\");\n\t\t}\n\t\t/**\n\t\t * 重写具体的启动方式\n\t\t */\n\t\tpublic void start(){\n\t\t\tSystem.out.println(\"拧钥匙启动\");\n\t\t}\n\t\t/**\n\t\t * 重写具体的开走方式\n\t\t */\n\t\tpublic void go(){\n\t\t\tSystem.out.println(\"平稳的开走了\");\n\t\t}\n\t}\n\n```\n\n**3、新建一个具体的BMW车-BMWm5**\n\n```java\n\n\t/**\n\t * BMWm5系列汽车\n\t * @author mapingsheng\n\t */\n\tpublic class BMWm5 implements BMW{\n\t\t\n\t\tBMWm5(){\n\t\t\tSystem.out.println(\"--------BMWm5---------\");\n\t\t\topen();\n\t\t\tstart();\n\t\t\tgo();\n\t\t\tSystem.out.println(\"--------BMWm5---------\");\n\t\t}\n\t\t\n\t\tpublic void open(){\n\t\t\tSystem.out.println(\"自动打开车门\");\n\t\t}\n\t\t\n\t\tpublic void start(){\n\t\t\tSystem.out.println(\"一键启动\");\n\t\t}\n\t\t\n\t\tpublic void go(){\n\t\t\tSystem.out.println(\"嗖的一下开走了\");\n\t\t}\n\t}\n\n```\n\n**4、建造BMW汽车工厂**\n\n我们在上面几步骤中已经初步知道我们制造的汽车的样子了，那下面就赶紧造一个汽车工厂开始生产吧。\n\n```java\n\n\t/**\n\t * 汽车工厂\n\t * @author mapingsheng\n\t */\n\tpublic class BMWFactory {\n\t\tstatic BMW bmw;\n\t\t\n\t\t/**\n\t\t * 订单方法，根据用户选择的汽车型号生产对应型号的汽车\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tpublic static BMW orderBMW(String type){\n\t\t\treturn createBMW(type);\n\t\t}\n\t\t\n\t\t/**\n\t\t * 生产方法，根据订单提供的型号生产对应的型号的汽车\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tprivate static BMW createBMW(String type){\n\t\t\tif(\"x6\".equals(type)){\n\t\t\t\tbmw = new BMWx6();\n\t\t\t}else if(\"m5\".equals(type)){\n\t\t\t\tbmw = new BMWm5();\n\t\t\t}\n\t\t\treturn bmw;\n\t\t}\n\t}\n\n```\n\n上面的汽车工厂提供订单方法和生产方法，生产方法为私有，订单方法为共有，因为客户只需要通过订单系统下订单就行了，具体生产是不需要关注的。\n\n**5、测试**\n\n```java\n\n\tpublic class Test {\n\n\t\tpublic static void main(String[] args) {\n\t\t\t/**\n\t\t\t * 下一个型号为x6的汽车订单,然后下完订单后就获得了对应型号的汽车\n\t\t\t */\n\t\t\tBMW x6 = BMWFactory.orderBMW(\"x6\");\n\t\t\t\n\t\t\tSystem.out.println(\"--------BMWx6---------\");\n\t\t\tx6.open();\n\t\t\tx6.start();\n\t\t\tx6.go();\n\t\t\t\n\t\t\t/**\n\t\t\t * 下一个型号为m6的汽车订单,然后下完订单后就获得了对应型号的汽车\n\t\t\t */\n\t\t\tBMW m5 = BMWFactory.orderBMW(\"m5\");\n\t\t\tSystem.out.println(\"--------BMWm5---------\");\n\t\t\tm5.open();\n\t\t\tm5.start();\n\t\t\tm5.go();\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n\n>--------BMWx6---------\n>\n>>手动打开车门\n>\n>>拧钥匙启动\n>\n>>平稳的开走了\n>\n>--------BMWm5---------\n>\n>>自动打开车门\n>\n>>一键启动\n>\n>>嗖的一下开走了\n\n\n**6、小结**\n\n截止目前，通过上面的例子，我们已经实现了一个工厂方法的设计模式，说白了就是定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类。\n\n上面的简单的设计模式看似还可以，简单易懂，并且目前项目中也有地方用到，主要是因为他简单，把复杂的容易变化的部分封装起来，甚至抽象出来，对外提供不变化的部分；但是这个模式也有很多问题，比如下面几个问题：\n\n- 后期陆续会推出很多型号的汽车，那么每当有新型号的汽车推出时都需要更改工厂类中的生产方法(添加if分支)\n- 目前仅仅在德国慕尼黑开了一家工厂，主要在慕尼黑生产、销售汽车；下一步需要在中国也开一家工厂，并且中国客户也可以通过订单方法向中国的工厂下订单\n- 中国工厂生产出来的汽车需要跟德国工厂生成的汽车不太一样，比如排量标准、长度等等\n\n\n上述描述的几个问题貌似通过上面的工厂方法无法很好的解决，需要另一个设计模式-抽象工厂设计模式去解决这些难题。","source":"_posts/设计模式-工厂方法模式.md","raw":"---\ntitle: 设计模式--工厂方法模式\ndate: 2017-05-18 13:57:28\ncategories: 设计模式\ntags: java\n---\n\n说到工厂方法模式不得不围绕车去说明了，因为它太通俗了，不需要过多去解释，满大街都是的；就拿宝马来讲，这是德国的一个品牌，虽然不算太好，但也还可以，记得当初宝马在德国慕尼黑新建第一家工厂的时候，组织架构还是非常简单的，分为设计部、生产部、装配部、测试部、订单部这几个部门，所以通过这几个部门也大致可以了解到一辆BMW的生产流程时设计-生产-装配-测试；然后有人下订单后就把车送过去了。\n\n\n<!--more-->\n\n首先建造一个汽车工厂首先得知道你生产什么东西吧，也就是说你得提前设计你的汽车吧，所以我们需要定义一个BMW接口，用来统一定义BMW汽车共性的东西（打开车门、启动、开走），这三部曲是必须要做的。\n\n**1、新建一个BMW接口**\n\n通过一个接口及行为可以大致描述你的车时什么样子的，打开车门表示车肯定要有门，启动则表示需要有一个发动机，开走则表示车需要有轮子；暂且这么想吧。\n\n```java\n\n\t/**\n\t * 通用的BMW汽车接口\n\t * @author mapingsheng\n\t */\n\tpublic interface BMW {\n\t\t/**\n\t\t * 打开车门\n\t\t */\n\t\tpublic void open();\n\t\t/**\n\t\t * 启动\n\t\t */\n\t\tpublic void start();\n\t\t\n\t\t/**\n\t\t * 开走\n\t\t */\n\t\tpublic void go();\n\t}\n\n```\n\n**2、新建一个具体的BMW车-BMWx6**\n\n```java\n\n\t/**\n\t * BMWx6系列汽车\n\t * @author mapingsheng\n\t */\n\tpublic class BMWx6 implements BMW{\n\t\n\t\tBMWx6(){\n\t\t\tSystem.out.println(\"--------BMWx6---------\");\n\t\t\topen();\n\t\t\tstart();\n\t\t\tgo();\n\t\t\tSystem.out.println(\"--------BMWx6---------\");\n\t\t}\n\t\t/**\n\t\t * 重写具体的打开方式\n\t\t */\n\t\tpublic void open(){\n\t\t\tSystem.out.println(\"手动打开车门\");\n\t\t}\n\t\t/**\n\t\t * 重写具体的启动方式\n\t\t */\n\t\tpublic void start(){\n\t\t\tSystem.out.println(\"拧钥匙启动\");\n\t\t}\n\t\t/**\n\t\t * 重写具体的开走方式\n\t\t */\n\t\tpublic void go(){\n\t\t\tSystem.out.println(\"平稳的开走了\");\n\t\t}\n\t}\n\n```\n\n**3、新建一个具体的BMW车-BMWm5**\n\n```java\n\n\t/**\n\t * BMWm5系列汽车\n\t * @author mapingsheng\n\t */\n\tpublic class BMWm5 implements BMW{\n\t\t\n\t\tBMWm5(){\n\t\t\tSystem.out.println(\"--------BMWm5---------\");\n\t\t\topen();\n\t\t\tstart();\n\t\t\tgo();\n\t\t\tSystem.out.println(\"--------BMWm5---------\");\n\t\t}\n\t\t\n\t\tpublic void open(){\n\t\t\tSystem.out.println(\"自动打开车门\");\n\t\t}\n\t\t\n\t\tpublic void start(){\n\t\t\tSystem.out.println(\"一键启动\");\n\t\t}\n\t\t\n\t\tpublic void go(){\n\t\t\tSystem.out.println(\"嗖的一下开走了\");\n\t\t}\n\t}\n\n```\n\n**4、建造BMW汽车工厂**\n\n我们在上面几步骤中已经初步知道我们制造的汽车的样子了，那下面就赶紧造一个汽车工厂开始生产吧。\n\n```java\n\n\t/**\n\t * 汽车工厂\n\t * @author mapingsheng\n\t */\n\tpublic class BMWFactory {\n\t\tstatic BMW bmw;\n\t\t\n\t\t/**\n\t\t * 订单方法，根据用户选择的汽车型号生产对应型号的汽车\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tpublic static BMW orderBMW(String type){\n\t\t\treturn createBMW(type);\n\t\t}\n\t\t\n\t\t/**\n\t\t * 生产方法，根据订单提供的型号生产对应的型号的汽车\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tprivate static BMW createBMW(String type){\n\t\t\tif(\"x6\".equals(type)){\n\t\t\t\tbmw = new BMWx6();\n\t\t\t}else if(\"m5\".equals(type)){\n\t\t\t\tbmw = new BMWm5();\n\t\t\t}\n\t\t\treturn bmw;\n\t\t}\n\t}\n\n```\n\n上面的汽车工厂提供订单方法和生产方法，生产方法为私有，订单方法为共有，因为客户只需要通过订单系统下订单就行了，具体生产是不需要关注的。\n\n**5、测试**\n\n```java\n\n\tpublic class Test {\n\n\t\tpublic static void main(String[] args) {\n\t\t\t/**\n\t\t\t * 下一个型号为x6的汽车订单,然后下完订单后就获得了对应型号的汽车\n\t\t\t */\n\t\t\tBMW x6 = BMWFactory.orderBMW(\"x6\");\n\t\t\t\n\t\t\tSystem.out.println(\"--------BMWx6---------\");\n\t\t\tx6.open();\n\t\t\tx6.start();\n\t\t\tx6.go();\n\t\t\t\n\t\t\t/**\n\t\t\t * 下一个型号为m6的汽车订单,然后下完订单后就获得了对应型号的汽车\n\t\t\t */\n\t\t\tBMW m5 = BMWFactory.orderBMW(\"m5\");\n\t\t\tSystem.out.println(\"--------BMWm5---------\");\n\t\t\tm5.open();\n\t\t\tm5.start();\n\t\t\tm5.go();\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n\n>--------BMWx6---------\n>\n>>手动打开车门\n>\n>>拧钥匙启动\n>\n>>平稳的开走了\n>\n>--------BMWm5---------\n>\n>>自动打开车门\n>\n>>一键启动\n>\n>>嗖的一下开走了\n\n\n**6、小结**\n\n截止目前，通过上面的例子，我们已经实现了一个工厂方法的设计模式，说白了就是定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类。\n\n上面的简单的设计模式看似还可以，简单易懂，并且目前项目中也有地方用到，主要是因为他简单，把复杂的容易变化的部分封装起来，甚至抽象出来，对外提供不变化的部分；但是这个模式也有很多问题，比如下面几个问题：\n\n- 后期陆续会推出很多型号的汽车，那么每当有新型号的汽车推出时都需要更改工厂类中的生产方法(添加if分支)\n- 目前仅仅在德国慕尼黑开了一家工厂，主要在慕尼黑生产、销售汽车；下一步需要在中国也开一家工厂，并且中国客户也可以通过订单方法向中国的工厂下订单\n- 中国工厂生产出来的汽车需要跟德国工厂生成的汽车不太一样，比如排量标准、长度等等\n\n\n上述描述的几个问题貌似通过上面的工厂方法无法很好的解决，需要另一个设计模式-抽象工厂设计模式去解决这些难题。","slug":"设计模式-工厂方法模式","published":1,"updated":"2018-07-08T09:37:48.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkk006830tzutmmq8ju","content":"<p>说到工厂方法模式不得不围绕车去说明了，因为它太通俗了，不需要过多去解释，满大街都是的；就拿宝马来讲，这是德国的一个品牌，虽然不算太好，但也还可以，记得当初宝马在德国慕尼黑新建第一家工厂的时候，组织架构还是非常简单的，分为设计部、生产部、装配部、测试部、订单部这几个部门，所以通过这几个部门也大致可以了解到一辆BMW的生产流程时设计-生产-装配-测试；然后有人下订单后就把车送过去了。</p>\n<a id=\"more\"></a>\n<p>首先建造一个汽车工厂首先得知道你生产什么东西吧，也就是说你得提前设计你的汽车吧，所以我们需要定义一个BMW接口，用来统一定义BMW汽车共性的东西（打开车门、启动、开走），这三部曲是必须要做的。</p>\n<p><strong>1、新建一个BMW接口</strong></p>\n<p>通过一个接口及行为可以大致描述你的车时什么样子的，打开车门表示车肯定要有门，启动则表示需要有一个发动机，开走则表示车需要有轮子；暂且这么想吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通用的BMW汽车接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 打开车门</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 启动</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 开走</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2、新建一个具体的BMW车-BMWx6</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * BMWx6系列汽车</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx6</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMWx6()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWx6---------\"</span>);</div><div class=\"line\">\t\topen();</div><div class=\"line\">\t\tstart();</div><div class=\"line\">\t\tgo();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWx6---------\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 重写具体的打开方式</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"手动打开车门\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 重写具体的启动方式</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拧钥匙启动\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 重写具体的开走方式</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"平稳的开走了\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3、新建一个具体的BMW车-BMWm5</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * BMWm5系列汽车</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWm5</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tBMWm5()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWm5---------\"</span>);</div><div class=\"line\">\t\topen();</div><div class=\"line\">\t\tstart();</div><div class=\"line\">\t\tgo();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWm5---------\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"自动打开车门\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"一键启动\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"嗖的一下开走了\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4、建造BMW汽车工厂</strong></p>\n<p>我们在上面几步骤中已经初步知道我们制造的汽车的样子了，那下面就赶紧造一个汽车工厂开始生产吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 汽车工厂</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> BMW bmw;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订单方法，根据用户选择的汽车型号生产对应型号的汽车</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BMW <span class=\"title\">orderBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> createBMW(type);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 生产方法，根据订单提供的型号生产对应的型号的汽车</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BMW <span class=\"title\">createBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"x6\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWx6();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"m5\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWm5();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的汽车工厂提供订单方法和生产方法，生产方法为私有，订单方法为共有，因为客户只需要通过订单系统下订单就行了，具体生产是不需要关注的。</p>\n<p><strong>5、测试</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t * 下一个型号为x6的汽车订单,然后下完订单后就获得了对应型号的汽车</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tBMW x6 = BMWFactory.orderBMW(<span class=\"string\">\"x6\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWx6---------\"</span>);</div><div class=\"line\">\t\tx6.open();</div><div class=\"line\">\t\tx6.start();</div><div class=\"line\">\t\tx6.go();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t * 下一个型号为m6的汽车订单,然后下完订单后就获得了对应型号的汽车</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tBMW m5 = BMWFactory.orderBMW(<span class=\"string\">\"m5\"</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWm5---------\"</span>);</div><div class=\"line\">\t\tm5.open();</div><div class=\"line\">\t\tm5.start();</div><div class=\"line\">\t\tm5.go();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>——–BMWx6———</p>\n<blockquote>\n<p>手动打开车门</p>\n<p>拧钥匙启动</p>\n<p>平稳的开走了</p>\n</blockquote>\n<p>——–BMWm5———</p>\n<blockquote>\n<p>自动打开车门</p>\n<p>一键启动</p>\n<p>嗖的一下开走了</p>\n</blockquote>\n</blockquote>\n<p><strong>6、小结</strong></p>\n<p>截止目前，通过上面的例子，我们已经实现了一个工厂方法的设计模式，说白了就是定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类。</p>\n<p>上面的简单的设计模式看似还可以，简单易懂，并且目前项目中也有地方用到，主要是因为他简单，把复杂的容易变化的部分封装起来，甚至抽象出来，对外提供不变化的部分；但是这个模式也有很多问题，比如下面几个问题：</p>\n<ul>\n<li>后期陆续会推出很多型号的汽车，那么每当有新型号的汽车推出时都需要更改工厂类中的生产方法(添加if分支)</li>\n<li>目前仅仅在德国慕尼黑开了一家工厂，主要在慕尼黑生产、销售汽车；下一步需要在中国也开一家工厂，并且中国客户也可以通过订单方法向中国的工厂下订单</li>\n<li>中国工厂生产出来的汽车需要跟德国工厂生成的汽车不太一样，比如排量标准、长度等等</li>\n</ul>\n<p>上述描述的几个问题貌似通过上面的工厂方法无法很好的解决，需要另一个设计模式-抽象工厂设计模式去解决这些难题。</p>\n","excerpt":"<p>说到工厂方法模式不得不围绕车去说明了，因为它太通俗了，不需要过多去解释，满大街都是的；就拿宝马来讲，这是德国的一个品牌，虽然不算太好，但也还可以，记得当初宝马在德国慕尼黑新建第一家工厂的时候，组织架构还是非常简单的，分为设计部、生产部、装配部、测试部、订单部这几个部门，所以通过这几个部门也大致可以了解到一辆BMW的生产流程时设计-生产-装配-测试；然后有人下订单后就把车送过去了。</p>","more":"<p>首先建造一个汽车工厂首先得知道你生产什么东西吧，也就是说你得提前设计你的汽车吧，所以我们需要定义一个BMW接口，用来统一定义BMW汽车共性的东西（打开车门、启动、开走），这三部曲是必须要做的。</p>\n<p><strong>1、新建一个BMW接口</strong></p>\n<p>通过一个接口及行为可以大致描述你的车时什么样子的，打开车门表示车肯定要有门，启动则表示需要有一个发动机，开走则表示车需要有轮子；暂且这么想吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通用的BMW汽车接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 打开车门</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 启动</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 开走</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2、新建一个具体的BMW车-BMWx6</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * BMWx6系列汽车</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx6</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMWx6()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWx6---------\"</span>);</div><div class=\"line\">\t\topen();</div><div class=\"line\">\t\tstart();</div><div class=\"line\">\t\tgo();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWx6---------\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 重写具体的打开方式</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"手动打开车门\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 重写具体的启动方式</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拧钥匙启动\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 重写具体的开走方式</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"平稳的开走了\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3、新建一个具体的BMW车-BMWm5</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * BMWm5系列汽车</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWm5</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tBMWm5()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWm5---------\"</span>);</div><div class=\"line\">\t\topen();</div><div class=\"line\">\t\tstart();</div><div class=\"line\">\t\tgo();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWm5---------\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"自动打开车门\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"一键启动\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"嗖的一下开走了\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4、建造BMW汽车工厂</strong></p>\n<p>我们在上面几步骤中已经初步知道我们制造的汽车的样子了，那下面就赶紧造一个汽车工厂开始生产吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 汽车工厂</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> BMW bmw;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订单方法，根据用户选择的汽车型号生产对应型号的汽车</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BMW <span class=\"title\">orderBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> createBMW(type);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 生产方法，根据订单提供的型号生产对应的型号的汽车</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BMW <span class=\"title\">createBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"x6\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWx6();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"m5\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWm5();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的汽车工厂提供订单方法和生产方法，生产方法为私有，订单方法为共有，因为客户只需要通过订单系统下订单就行了，具体生产是不需要关注的。</p>\n<p><strong>5、测试</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t * 下一个型号为x6的汽车订单,然后下完订单后就获得了对应型号的汽车</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\tBMW x6 = BMWFactory.orderBMW(<span class=\"string\">\"x6\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWx6---------\"</span>);</div><div class=\"line\">\t\tx6.open();</div><div class=\"line\">\t\tx6.start();</div><div class=\"line\">\t\tx6.go();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t * 下一个型号为m6的汽车订单,然后下完订单后就获得了对应型号的汽车</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\tBMW m5 = BMWFactory.orderBMW(<span class=\"string\">\"m5\"</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------BMWm5---------\"</span>);</div><div class=\"line\">\t\tm5.open();</div><div class=\"line\">\t\tm5.start();</div><div class=\"line\">\t\tm5.go();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>——–BMWx6———</p>\n<blockquote>\n<p>手动打开车门</p>\n<p>拧钥匙启动</p>\n<p>平稳的开走了</p>\n</blockquote>\n<p>——–BMWm5———</p>\n<blockquote>\n<p>自动打开车门</p>\n<p>一键启动</p>\n<p>嗖的一下开走了</p>\n</blockquote>\n</blockquote>\n<p><strong>6、小结</strong></p>\n<p>截止目前，通过上面的例子，我们已经实现了一个工厂方法的设计模式，说白了就是定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类。</p>\n<p>上面的简单的设计模式看似还可以，简单易懂，并且目前项目中也有地方用到，主要是因为他简单，把复杂的容易变化的部分封装起来，甚至抽象出来，对外提供不变化的部分；但是这个模式也有很多问题，比如下面几个问题：</p>\n<ul>\n<li>后期陆续会推出很多型号的汽车，那么每当有新型号的汽车推出时都需要更改工厂类中的生产方法(添加if分支)</li>\n<li>目前仅仅在德国慕尼黑开了一家工厂，主要在慕尼黑生产、销售汽车；下一步需要在中国也开一家工厂，并且中国客户也可以通过订单方法向中国的工厂下订单</li>\n<li>中国工厂生产出来的汽车需要跟德国工厂生成的汽车不太一样，比如排量标准、长度等等</li>\n</ul>\n<p>上述描述的几个问题貌似通过上面的工厂方法无法很好的解决，需要另一个设计模式-抽象工厂设计模式去解决这些难题。</p>"},{"title":"设计模式--引入模式雏形","date":"2017-05-01T08:21:27.000Z","_content":"接着上一篇文章中遗留的问题，接着探索一下设计模式的强大力量。\n首先在上一篇文章中进行简单的回顾：\n\n>1、我们声明了一个Duck抽象类，并定义了相关的公共方法(quack、swim、fly)，并且都进行了默认的实现；但是把display外观方法定义成了抽象方法，以达到不同类型的Duck可以具有自己独特外观的目的。\n\n>2、然后定义具体的业务类(绿头鸭、大黄鸭、红头鸭)，该业务类要继承抽象类-Duck,并且覆写display方法，定义自己独特的外观。\n\n<!--more-->\n\n那么针对上面的实现，通过分析具有下面的一系列问题：\n\n>1、比如再新加一个“跳舞鸭”业务类时，该鸭子的跳舞行为难道也要在超类Duck中定义吗？这样会导致超类很臃肿\n>\n>2、如果对某个行为进行动态扩展怎么办？比如有些飞行行为是用翅膀飞行，有些飞行行为是用火箭动力飞行等等，难道我们要把那些需要火箭动力飞行的所有业务类中的fly方法都要一个一个的重新改一遍吗？\n\n针对以上问题我们慢慢进行设计一下吧。\n\n\n**一、第三代鸭子--把不同的行为进行独立定义(把变化的和不变化的分开)**\n\n其实做法就是“把会变化的部分取出并封装起来，以便以后可以轻易的改动或扩展此部分，而不影响不需要变化的其它部分”，那么下面我们这么设计，把飞行的行为fly、叫的行为quack单独抽取出来，定义成为不同的业务类，这样的话以后我们基于这些行为类扩展出不同的具体行为，比如我们可以扩展fly行为(用翅膀飞行、用火箭动力飞行、静止)。\n\n在前几代鸭子产品开发中，我们一直使用的是定义父类的方式来约束对应的行为方法，然后子类通过继承父类，即可拥有父类的方法；但是如果子类有差异化的行为时，就需要覆写父类的默认方法了；但是还有一种情况，就是子类如果定义自己独特的行为方法时，那么就只能在自己内部进行定义和实现了，因为java单重继承关系的约束 ，所以为以后扩展或者行为复用造成了麻烦。\n\n下面我们将采用采用接口进行定义不同的行为，然后其它因为类实现具体的接口即可获得其需要的行为；归结来讲就是：“针对接口编程，而不是针对实现编程”。\n\n1、独立定义飞行的行为接口-FlyInterface\n\n```java\n\n\t/**\n\t * 独立出来的飞行的业务接口\n\t * @author maps\n\t */\n\tpublic interface FlyInterface {\n\t\t\n\t\t/**\n\t\t * 定义一个飞行方法\n\t\t */\n\t\tpublic void fly();\n\t}\n\n```\n\n1.1、定义用翅膀飞行的业务类-FlyWithWings\n\n```java\n\n\t/**\n\t * 定义用翅膀飞行的具体类,实现飞行方法\n\t * @author maps\n\t */\n\tpublic class FlyWithWings implements FlyInterface {\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tSystem.out.println(\"用翅膀飞行\");\n\t\t}\n\t}\n\n```\n\n1.2、定义用火箭动力飞行的业务类-FlyRocketPowered\n\n```java\n\n\t/**\n\t * 定义用火箭动力飞行的具体类,实现飞行接口\n\t * @author maps\n\t */\n\tpublic class FlyRocketPowered implements FlyInterface {\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tSystem.out.println(\"利用火箭动力飞行\");\n\t\t}\n\t}\n\n```\n\n1.3、定义不会飞行的业务类-FlyNoWay\n\n```java\n\t\n\t/**\n\t * 定义用不会飞行的具体类，虽然实现了飞行的接口\n\t * @author maps\n\t */\n\tpublic class FlyNoWay implements FlyInterface {\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tSystem.out.println(\"不会飞行！\");\n\t\t}\n\t}\n\n```\n\n到目前为止，我们已经把飞行行为fly进行了独立定义，并且定义了不同的具体飞行行为业务类；下面我们开始独立定义另一个叫的行为quack。\n\n2、独立定义叫的行为接口-QuackInterface\n\n```java\n\n\t/**\n\t * 独立出来的叫的行为接口\n\t * @author maps\n\t */\n\tpublic interface QuackInterface {\n\t\t/**\n\t\t * 定义一个叫的方法\n\t\t */\n\t\tpublic void quack();\n\t}\n\n```\n\n2.1、定义一个呱呱叫的行为类-QuackGuagua\n\n```java\n\t\n\t/**\n\t * 定义一个呱呱叫的具体类，实现呱呱叫行为接口\n\t * @author maps\n\t */\n\tpublic class QuackGuagua implements QuackInterface{\n\t\t@Override\n\t\tpublic void quack() {\n\t\t\tSystem.out.println(\"呱呱叫\");\n\t\t}\n\t}\n\n```\n\n2.2、定义一个不会叫的业务类-QuackNoWay\n\n```java\n\n\t/**\n\t * 定义一个不会叫的业务类\n\t * @author maps\n\t */\n\tpublic class QuackNoWay implements QuackInterface {\n\t\t@Override\n\t\tpublic void quack() {\n\t\t\tSystem.out.println(\"不会叫\");\n\t\t}\n\t}\n\n```\n\n2.3、定义一个吱吱叫的业务类-QuackZhiZhi\n\n```java\n\n\t/**\n\t * 定义一个吱吱叫的业务类，实现独立叫的行为接口\n\t * @author maps\n\t */\n\tpublic class QuackZhiZhi implements QuackInterface {\n\t\t@Override\n\t\tpublic void quack() {\n\t\t\tSystem.out.println(\"吱吱叫\");\n\t\t}\n\t}\n\n```\n\n到目前为止，我们已经把叫的行为quack进行了独立定义，并且定义了不同的具体叫的行为业务类；其实已经可以观察到，我们把飞行fly和叫quack行为定义成独立的行为，可以让飞行和叫的动作被其他的对象复用，因为这些行为已经与具体的鸭子类无关了，而我们也可以后期新增一些行为，不会影响到既有的行为类，也不会影响“使用”到飞行行为的鸭子类。\n\n\n2、重构定义鸭子业务类-Duck\n\n```java\n\t\n\t/**\n\t * 定义一个鸭子的业务类，并且声明已经独立定义的飞行、叫的行为接口\n\t * @author maps\n\t */\n\tpublic class Duck {\n\t\tFlyInterface flyInterface;\n\t\tQuackInterface quackInterface;\n\t\t\n\t\tDuck(){}\n\t\t\n\t\t/**\n\t\t * 将“叫”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类\n\t\t */\n\t\tpublic void quack(){\n\t\t\tquackInterface.quack();\n\t\t}\n\t\t/**\n\t\t * 将“飞行”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类\n\t\t */\n\t\tpublic void fly(){\n\t\t\tflyInterface.fly();\n\t\t}\n\t}\n\n```\n\n在我们定义Duck类中，把已经定义好的两个独立行为接口作为变量引入到了类中，这样的话，接下来我们在新建Duck类的具体子类时就可以拥有父类Duck声明的接口变量，并且可以动态实例化父类Duck中的接口变量为不同的行为接口实例。\n\n2.1、重构定义绿头鸭业务类-GreenDuck\n\n```java\n\n\t/**\n\t * 绿头鸭业务类\n\t * @author maps\n\t */\n\tpublic class GreenDuck extends Duck {\n\t\t/**\n\t\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)\n\t\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：\n\t\t *    1)、把飞行接口变量初始化成“用翅膀飞行”的具体行为\n\t\t *    2)、把叫的接口变量初始化成“呱呱叫”具体行为\n\t\t */\n\t\tpublic GreenDuck(){\n\t\t\tflyInterface = new FlyWithWings();\n\t\t\tquackInterface = new QuackGuagua();\n\t\t}\n\t}\n\n```\n\n可以看到上面我们定义的绿头鸭业务类中分别把父类中的flyInterface接口变量实例化为用翅膀飞行的具体行为类、把父类中的接口变量quackInterface实例化为呱呱叫具体行为类。\n\n2.2、重构定义绿头鸭业务类-RedDuck\n\n```java\n\n\t/**\n\t * 红头鸭业务类\n\t * @author maps\n\t */\n\tpublic class RedDuck extends Duck {\n\t\t/**\n\t\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)\n\t\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：\n\t\t *    1)、把飞行接口变量初始化成用“火箭动力”飞行的具体行为\n\t\t *    2)、把叫的接口变量初始化成“吱吱叫”具体行为\n\t\t */\n\t\tRedDuck(){\n\t\t\tflyInterface = new FlyRocketPowered();\n\t\t\tquackInterface = new QuackZhiZhi();\n\t\t}\n\t}\n\n```\n\n3、定义一个测试类，在测试方法中测试绿头鸭和红头鸭的飞行和叫的行为\n\n```java\n\n\tpublic static void main(String[] args) {\n\t\tDuck greenDuck = new GreenDuck();\n\t\tgreenDuck.quack();\n\t\tgreenDuck.fly();\n\t\tSystem.out.println(\"-----------------------------\");\n\t\tDuck redDuck = new RedDuck();\n\t\tredDuck.quack();\n\t\tredDuck.fly();\n\t}\n\n```\n\n上面测试代码输出如下：\n\n>呱呱叫\n>\n>用翅膀飞行\n\n----------\n\n>吱吱叫\n>\n>利用火箭动力飞行\n>\n\n通过上面的测试代码输出可以看出我们不同的Duck子类中，实例化了不同的接口行为变量，然后他们便具有了不同的行为操作。\n\n思考一个问题，比如后续再添加其他行为时怎么办，比如添加一个“跳跃”行为时，并且有单腿跳跃和双腿跳跃具体行为，我们可以如下扩展：\n\n>定义一个“跳跃”的接口\n> \n>定义一个具体的“单腿跳跃”行为类，该类实现上面定义的“跳跃”接口\n>\n>定义一个具体的“双腿跳跃”行为类，该类实现上面定义的“跳跃”接口\n>\n>在Duck这个父类中，添加一个“跳跃”接口类型的变量\n>\n>在Duck这个父类中，再新定义一个“跳跃”的行为的方法，并且在方法中调用“跳跃”接口变量中的跳跃方法\n>\n>如果我们只需要为“红头鸭”添加其中的“单腿跳跃”行为时，则只需要在红头鸭中构造方中实例化父类的跳跃接口变量为具体的单腿跳跃行为类即可\n\n\n通过对前两代鸭子工程的重构和扩展，发现系统扩展性更好了！这就是设计模式的魅力所在！！后续将继续深入探索并运用他。","source":"_posts/设计模式-引入模式雏形.md","raw":"---\ntitle: 设计模式--引入模式雏形\ndate: 2017-05-01 16:21:27\ncategories: 设计模式\ntags: java\n---\n接着上一篇文章中遗留的问题，接着探索一下设计模式的强大力量。\n首先在上一篇文章中进行简单的回顾：\n\n>1、我们声明了一个Duck抽象类，并定义了相关的公共方法(quack、swim、fly)，并且都进行了默认的实现；但是把display外观方法定义成了抽象方法，以达到不同类型的Duck可以具有自己独特外观的目的。\n\n>2、然后定义具体的业务类(绿头鸭、大黄鸭、红头鸭)，该业务类要继承抽象类-Duck,并且覆写display方法，定义自己独特的外观。\n\n<!--more-->\n\n那么针对上面的实现，通过分析具有下面的一系列问题：\n\n>1、比如再新加一个“跳舞鸭”业务类时，该鸭子的跳舞行为难道也要在超类Duck中定义吗？这样会导致超类很臃肿\n>\n>2、如果对某个行为进行动态扩展怎么办？比如有些飞行行为是用翅膀飞行，有些飞行行为是用火箭动力飞行等等，难道我们要把那些需要火箭动力飞行的所有业务类中的fly方法都要一个一个的重新改一遍吗？\n\n针对以上问题我们慢慢进行设计一下吧。\n\n\n**一、第三代鸭子--把不同的行为进行独立定义(把变化的和不变化的分开)**\n\n其实做法就是“把会变化的部分取出并封装起来，以便以后可以轻易的改动或扩展此部分，而不影响不需要变化的其它部分”，那么下面我们这么设计，把飞行的行为fly、叫的行为quack单独抽取出来，定义成为不同的业务类，这样的话以后我们基于这些行为类扩展出不同的具体行为，比如我们可以扩展fly行为(用翅膀飞行、用火箭动力飞行、静止)。\n\n在前几代鸭子产品开发中，我们一直使用的是定义父类的方式来约束对应的行为方法，然后子类通过继承父类，即可拥有父类的方法；但是如果子类有差异化的行为时，就需要覆写父类的默认方法了；但是还有一种情况，就是子类如果定义自己独特的行为方法时，那么就只能在自己内部进行定义和实现了，因为java单重继承关系的约束 ，所以为以后扩展或者行为复用造成了麻烦。\n\n下面我们将采用采用接口进行定义不同的行为，然后其它因为类实现具体的接口即可获得其需要的行为；归结来讲就是：“针对接口编程，而不是针对实现编程”。\n\n1、独立定义飞行的行为接口-FlyInterface\n\n```java\n\n\t/**\n\t * 独立出来的飞行的业务接口\n\t * @author maps\n\t */\n\tpublic interface FlyInterface {\n\t\t\n\t\t/**\n\t\t * 定义一个飞行方法\n\t\t */\n\t\tpublic void fly();\n\t}\n\n```\n\n1.1、定义用翅膀飞行的业务类-FlyWithWings\n\n```java\n\n\t/**\n\t * 定义用翅膀飞行的具体类,实现飞行方法\n\t * @author maps\n\t */\n\tpublic class FlyWithWings implements FlyInterface {\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tSystem.out.println(\"用翅膀飞行\");\n\t\t}\n\t}\n\n```\n\n1.2、定义用火箭动力飞行的业务类-FlyRocketPowered\n\n```java\n\n\t/**\n\t * 定义用火箭动力飞行的具体类,实现飞行接口\n\t * @author maps\n\t */\n\tpublic class FlyRocketPowered implements FlyInterface {\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tSystem.out.println(\"利用火箭动力飞行\");\n\t\t}\n\t}\n\n```\n\n1.3、定义不会飞行的业务类-FlyNoWay\n\n```java\n\t\n\t/**\n\t * 定义用不会飞行的具体类，虽然实现了飞行的接口\n\t * @author maps\n\t */\n\tpublic class FlyNoWay implements FlyInterface {\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tSystem.out.println(\"不会飞行！\");\n\t\t}\n\t}\n\n```\n\n到目前为止，我们已经把飞行行为fly进行了独立定义，并且定义了不同的具体飞行行为业务类；下面我们开始独立定义另一个叫的行为quack。\n\n2、独立定义叫的行为接口-QuackInterface\n\n```java\n\n\t/**\n\t * 独立出来的叫的行为接口\n\t * @author maps\n\t */\n\tpublic interface QuackInterface {\n\t\t/**\n\t\t * 定义一个叫的方法\n\t\t */\n\t\tpublic void quack();\n\t}\n\n```\n\n2.1、定义一个呱呱叫的行为类-QuackGuagua\n\n```java\n\t\n\t/**\n\t * 定义一个呱呱叫的具体类，实现呱呱叫行为接口\n\t * @author maps\n\t */\n\tpublic class QuackGuagua implements QuackInterface{\n\t\t@Override\n\t\tpublic void quack() {\n\t\t\tSystem.out.println(\"呱呱叫\");\n\t\t}\n\t}\n\n```\n\n2.2、定义一个不会叫的业务类-QuackNoWay\n\n```java\n\n\t/**\n\t * 定义一个不会叫的业务类\n\t * @author maps\n\t */\n\tpublic class QuackNoWay implements QuackInterface {\n\t\t@Override\n\t\tpublic void quack() {\n\t\t\tSystem.out.println(\"不会叫\");\n\t\t}\n\t}\n\n```\n\n2.3、定义一个吱吱叫的业务类-QuackZhiZhi\n\n```java\n\n\t/**\n\t * 定义一个吱吱叫的业务类，实现独立叫的行为接口\n\t * @author maps\n\t */\n\tpublic class QuackZhiZhi implements QuackInterface {\n\t\t@Override\n\t\tpublic void quack() {\n\t\t\tSystem.out.println(\"吱吱叫\");\n\t\t}\n\t}\n\n```\n\n到目前为止，我们已经把叫的行为quack进行了独立定义，并且定义了不同的具体叫的行为业务类；其实已经可以观察到，我们把飞行fly和叫quack行为定义成独立的行为，可以让飞行和叫的动作被其他的对象复用，因为这些行为已经与具体的鸭子类无关了，而我们也可以后期新增一些行为，不会影响到既有的行为类，也不会影响“使用”到飞行行为的鸭子类。\n\n\n2、重构定义鸭子业务类-Duck\n\n```java\n\t\n\t/**\n\t * 定义一个鸭子的业务类，并且声明已经独立定义的飞行、叫的行为接口\n\t * @author maps\n\t */\n\tpublic class Duck {\n\t\tFlyInterface flyInterface;\n\t\tQuackInterface quackInterface;\n\t\t\n\t\tDuck(){}\n\t\t\n\t\t/**\n\t\t * 将“叫”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类\n\t\t */\n\t\tpublic void quack(){\n\t\t\tquackInterface.quack();\n\t\t}\n\t\t/**\n\t\t * 将“飞行”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类\n\t\t */\n\t\tpublic void fly(){\n\t\t\tflyInterface.fly();\n\t\t}\n\t}\n\n```\n\n在我们定义Duck类中，把已经定义好的两个独立行为接口作为变量引入到了类中，这样的话，接下来我们在新建Duck类的具体子类时就可以拥有父类Duck声明的接口变量，并且可以动态实例化父类Duck中的接口变量为不同的行为接口实例。\n\n2.1、重构定义绿头鸭业务类-GreenDuck\n\n```java\n\n\t/**\n\t * 绿头鸭业务类\n\t * @author maps\n\t */\n\tpublic class GreenDuck extends Duck {\n\t\t/**\n\t\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)\n\t\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：\n\t\t *    1)、把飞行接口变量初始化成“用翅膀飞行”的具体行为\n\t\t *    2)、把叫的接口变量初始化成“呱呱叫”具体行为\n\t\t */\n\t\tpublic GreenDuck(){\n\t\t\tflyInterface = new FlyWithWings();\n\t\t\tquackInterface = new QuackGuagua();\n\t\t}\n\t}\n\n```\n\n可以看到上面我们定义的绿头鸭业务类中分别把父类中的flyInterface接口变量实例化为用翅膀飞行的具体行为类、把父类中的接口变量quackInterface实例化为呱呱叫具体行为类。\n\n2.2、重构定义绿头鸭业务类-RedDuck\n\n```java\n\n\t/**\n\t * 红头鸭业务类\n\t * @author maps\n\t */\n\tpublic class RedDuck extends Duck {\n\t\t/**\n\t\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)\n\t\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：\n\t\t *    1)、把飞行接口变量初始化成用“火箭动力”飞行的具体行为\n\t\t *    2)、把叫的接口变量初始化成“吱吱叫”具体行为\n\t\t */\n\t\tRedDuck(){\n\t\t\tflyInterface = new FlyRocketPowered();\n\t\t\tquackInterface = new QuackZhiZhi();\n\t\t}\n\t}\n\n```\n\n3、定义一个测试类，在测试方法中测试绿头鸭和红头鸭的飞行和叫的行为\n\n```java\n\n\tpublic static void main(String[] args) {\n\t\tDuck greenDuck = new GreenDuck();\n\t\tgreenDuck.quack();\n\t\tgreenDuck.fly();\n\t\tSystem.out.println(\"-----------------------------\");\n\t\tDuck redDuck = new RedDuck();\n\t\tredDuck.quack();\n\t\tredDuck.fly();\n\t}\n\n```\n\n上面测试代码输出如下：\n\n>呱呱叫\n>\n>用翅膀飞行\n\n----------\n\n>吱吱叫\n>\n>利用火箭动力飞行\n>\n\n通过上面的测试代码输出可以看出我们不同的Duck子类中，实例化了不同的接口行为变量，然后他们便具有了不同的行为操作。\n\n思考一个问题，比如后续再添加其他行为时怎么办，比如添加一个“跳跃”行为时，并且有单腿跳跃和双腿跳跃具体行为，我们可以如下扩展：\n\n>定义一个“跳跃”的接口\n> \n>定义一个具体的“单腿跳跃”行为类，该类实现上面定义的“跳跃”接口\n>\n>定义一个具体的“双腿跳跃”行为类，该类实现上面定义的“跳跃”接口\n>\n>在Duck这个父类中，添加一个“跳跃”接口类型的变量\n>\n>在Duck这个父类中，再新定义一个“跳跃”的行为的方法，并且在方法中调用“跳跃”接口变量中的跳跃方法\n>\n>如果我们只需要为“红头鸭”添加其中的“单腿跳跃”行为时，则只需要在红头鸭中构造方中实例化父类的跳跃接口变量为具体的单腿跳跃行为类即可\n\n\n通过对前两代鸭子工程的重构和扩展，发现系统扩展性更好了！这就是设计模式的魅力所在！！后续将继续深入探索并运用他。","slug":"设计模式-引入模式雏形","published":1,"updated":"2018-07-08T09:37:48.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkm006d30tz0fg7ixs7","content":"<p>接着上一篇文章中遗留的问题，接着探索一下设计模式的强大力量。<br>首先在上一篇文章中进行简单的回顾：</p>\n<blockquote>\n<p>1、我们声明了一个Duck抽象类，并定义了相关的公共方法(quack、swim、fly)，并且都进行了默认的实现；但是把display外观方法定义成了抽象方法，以达到不同类型的Duck可以具有自己独特外观的目的。</p>\n<p>2、然后定义具体的业务类(绿头鸭、大黄鸭、红头鸭)，该业务类要继承抽象类-Duck,并且覆写display方法，定义自己独特的外观。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>那么针对上面的实现，通过分析具有下面的一系列问题：</p>\n<blockquote>\n<p>1、比如再新加一个“跳舞鸭”业务类时，该鸭子的跳舞行为难道也要在超类Duck中定义吗？这样会导致超类很臃肿</p>\n<p>2、如果对某个行为进行动态扩展怎么办？比如有些飞行行为是用翅膀飞行，有些飞行行为是用火箭动力飞行等等，难道我们要把那些需要火箭动力飞行的所有业务类中的fly方法都要一个一个的重新改一遍吗？</p>\n</blockquote>\n<p>针对以上问题我们慢慢进行设计一下吧。</p>\n<p><strong>一、第三代鸭子–把不同的行为进行独立定义(把变化的和不变化的分开)</strong></p>\n<p>其实做法就是“把会变化的部分取出并封装起来，以便以后可以轻易的改动或扩展此部分，而不影响不需要变化的其它部分”，那么下面我们这么设计，把飞行的行为fly、叫的行为quack单独抽取出来，定义成为不同的业务类，这样的话以后我们基于这些行为类扩展出不同的具体行为，比如我们可以扩展fly行为(用翅膀飞行、用火箭动力飞行、静止)。</p>\n<p>在前几代鸭子产品开发中，我们一直使用的是定义父类的方式来约束对应的行为方法，然后子类通过继承父类，即可拥有父类的方法；但是如果子类有差异化的行为时，就需要覆写父类的默认方法了；但是还有一种情况，就是子类如果定义自己独特的行为方法时，那么就只能在自己内部进行定义和实现了，因为java单重继承关系的约束 ，所以为以后扩展或者行为复用造成了麻烦。</p>\n<p>下面我们将采用采用接口进行定义不同的行为，然后其它因为类实现具体的接口即可获得其需要的行为；归结来讲就是：“针对接口编程，而不是针对实现编程”。</p>\n<p>1、独立定义飞行的行为接口-FlyInterface</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 独立出来的飞行的业务接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 定义一个飞行方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.1、定义用翅膀飞行的业务类-FlyWithWings</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义用翅膀飞行的具体类,实现飞行方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyWithWings</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"用翅膀飞行\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.2、定义用火箭动力飞行的业务类-FlyRocketPowered</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义用火箭动力飞行的具体类,实现飞行接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyRocketPowered</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"利用火箭动力飞行\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.3、定义不会飞行的业务类-FlyNoWay</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义用不会飞行的具体类，虽然实现了飞行的接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"不会飞行！\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经把飞行行为fly进行了独立定义，并且定义了不同的具体飞行行为业务类；下面我们开始独立定义另一个叫的行为quack。</p>\n<p>2、独立定义叫的行为接口-QuackInterface</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 独立出来的叫的行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QuackInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 定义一个叫的方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.1、定义一个呱呱叫的行为类-QuackGuagua</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义一个呱呱叫的具体类，实现呱呱叫行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuackGuagua</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackInterface</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呱呱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.2、定义一个不会叫的业务类-QuackNoWay</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义一个不会叫的业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuackNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"不会叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.3、定义一个吱吱叫的业务类-QuackZhiZhi</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义一个吱吱叫的业务类，实现独立叫的行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuackZhiZhi</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"吱吱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经把叫的行为quack进行了独立定义，并且定义了不同的具体叫的行为业务类；其实已经可以观察到，我们把飞行fly和叫quack行为定义成独立的行为，可以让飞行和叫的动作被其他的对象复用，因为这些行为已经与具体的鸭子类无关了，而我们也可以后期新增一些行为，不会影响到既有的行为类，也不会影响“使用”到飞行行为的鸭子类。</p>\n<p>2、重构定义鸭子业务类-Duck</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义一个鸭子的业务类，并且声明已经独立定义的飞行、叫的行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\tFlyInterface flyInterface;</div><div class=\"line\">\tQuackInterface quackInterface;</div><div class=\"line\">\t</div><div class=\"line\">\tDuck()&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 将“叫”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tquackInterface.quack();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 将“飞行”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tflyInterface.fly();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在我们定义Duck类中，把已经定义好的两个独立行为接口作为变量引入到了类中，这样的话，接下来我们在新建Duck类的具体子类时就可以拥有父类Duck声明的接口变量，并且可以动态实例化父类Duck中的接口变量为不同的行为接口实例。</p>\n<p>2.1、重构定义绿头鸭业务类-GreenDuck</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 绿头鸭业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)</div><div class=\"line\">\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：</div><div class=\"line\">\t *    1)、把飞行接口变量初始化成“用翅膀飞行”的具体行为</div><div class=\"line\">\t *    2)、把叫的接口变量初始化成“呱呱叫”具体行为</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GreenDuck</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tflyInterface = <span class=\"keyword\">new</span> FlyWithWings();</div><div class=\"line\">\t\tquackInterface = <span class=\"keyword\">new</span> QuackGuagua();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到上面我们定义的绿头鸭业务类中分别把父类中的flyInterface接口变量实例化为用翅膀飞行的具体行为类、把父类中的接口变量quackInterface实例化为呱呱叫具体行为类。</p>\n<p>2.2、重构定义绿头鸭业务类-RedDuck</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 红头鸭业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)</div><div class=\"line\">\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：</div><div class=\"line\">\t *    1)、把飞行接口变量初始化成用“火箭动力”飞行的具体行为</div><div class=\"line\">\t *    2)、把叫的接口变量初始化成“吱吱叫”具体行为</div><div class=\"line\">\t */</div><div class=\"line\">\tRedDuck()&#123;</div><div class=\"line\">\t\tflyInterface = <span class=\"keyword\">new</span> FlyRocketPowered();</div><div class=\"line\">\t\tquackInterface = <span class=\"keyword\">new</span> QuackZhiZhi();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、定义一个测试类，在测试方法中测试绿头鸭和红头鸭的飞行和叫的行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\tDuck greenDuck = <span class=\"keyword\">new</span> GreenDuck();</div><div class=\"line\">\tgreenDuck.quack();</div><div class=\"line\">\tgreenDuck.fly();</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"-----------------------------\"</span>);</div><div class=\"line\">\tDuck redDuck = <span class=\"keyword\">new</span> RedDuck();</div><div class=\"line\">\tredDuck.quack();</div><div class=\"line\">\tredDuck.fly();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面测试代码输出如下：</p>\n<blockquote>\n<p>呱呱叫</p>\n<p>用翅膀飞行</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>吱吱叫</p>\n<p>利用火箭动力飞行</p>\n</blockquote>\n<p>通过上面的测试代码输出可以看出我们不同的Duck子类中，实例化了不同的接口行为变量，然后他们便具有了不同的行为操作。</p>\n<p>思考一个问题，比如后续再添加其他行为时怎么办，比如添加一个“跳跃”行为时，并且有单腿跳跃和双腿跳跃具体行为，我们可以如下扩展：</p>\n<blockquote>\n<p>定义一个“跳跃”的接口</p>\n<p>定义一个具体的“单腿跳跃”行为类，该类实现上面定义的“跳跃”接口</p>\n<p>定义一个具体的“双腿跳跃”行为类，该类实现上面定义的“跳跃”接口</p>\n<p>在Duck这个父类中，添加一个“跳跃”接口类型的变量</p>\n<p>在Duck这个父类中，再新定义一个“跳跃”的行为的方法，并且在方法中调用“跳跃”接口变量中的跳跃方法</p>\n<p>如果我们只需要为“红头鸭”添加其中的“单腿跳跃”行为时，则只需要在红头鸭中构造方中实例化父类的跳跃接口变量为具体的单腿跳跃行为类即可</p>\n</blockquote>\n<p>通过对前两代鸭子工程的重构和扩展，发现系统扩展性更好了！这就是设计模式的魅力所在！！后续将继续深入探索并运用他。</p>\n","excerpt":"<p>接着上一篇文章中遗留的问题，接着探索一下设计模式的强大力量。<br>首先在上一篇文章中进行简单的回顾：</p>\n<blockquote>\n<p>1、我们声明了一个Duck抽象类，并定义了相关的公共方法(quack、swim、fly)，并且都进行了默认的实现；但是把display外观方法定义成了抽象方法，以达到不同类型的Duck可以具有自己独特外观的目的。</p>\n<p>2、然后定义具体的业务类(绿头鸭、大黄鸭、红头鸭)，该业务类要继承抽象类-Duck,并且覆写display方法，定义自己独特的外观。</p>\n</blockquote>","more":"<p>那么针对上面的实现，通过分析具有下面的一系列问题：</p>\n<blockquote>\n<p>1、比如再新加一个“跳舞鸭”业务类时，该鸭子的跳舞行为难道也要在超类Duck中定义吗？这样会导致超类很臃肿</p>\n<p>2、如果对某个行为进行动态扩展怎么办？比如有些飞行行为是用翅膀飞行，有些飞行行为是用火箭动力飞行等等，难道我们要把那些需要火箭动力飞行的所有业务类中的fly方法都要一个一个的重新改一遍吗？</p>\n</blockquote>\n<p>针对以上问题我们慢慢进行设计一下吧。</p>\n<p><strong>一、第三代鸭子–把不同的行为进行独立定义(把变化的和不变化的分开)</strong></p>\n<p>其实做法就是“把会变化的部分取出并封装起来，以便以后可以轻易的改动或扩展此部分，而不影响不需要变化的其它部分”，那么下面我们这么设计，把飞行的行为fly、叫的行为quack单独抽取出来，定义成为不同的业务类，这样的话以后我们基于这些行为类扩展出不同的具体行为，比如我们可以扩展fly行为(用翅膀飞行、用火箭动力飞行、静止)。</p>\n<p>在前几代鸭子产品开发中，我们一直使用的是定义父类的方式来约束对应的行为方法，然后子类通过继承父类，即可拥有父类的方法；但是如果子类有差异化的行为时，就需要覆写父类的默认方法了；但是还有一种情况，就是子类如果定义自己独特的行为方法时，那么就只能在自己内部进行定义和实现了，因为java单重继承关系的约束 ，所以为以后扩展或者行为复用造成了麻烦。</p>\n<p>下面我们将采用采用接口进行定义不同的行为，然后其它因为类实现具体的接口即可获得其需要的行为；归结来讲就是：“针对接口编程，而不是针对实现编程”。</p>\n<p>1、独立定义飞行的行为接口-FlyInterface</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 独立出来的飞行的业务接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 定义一个飞行方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.1、定义用翅膀飞行的业务类-FlyWithWings</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义用翅膀飞行的具体类,实现飞行方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyWithWings</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"用翅膀飞行\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.2、定义用火箭动力飞行的业务类-FlyRocketPowered</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义用火箭动力飞行的具体类,实现飞行接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyRocketPowered</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"利用火箭动力飞行\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.3、定义不会飞行的业务类-FlyNoWay</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义用不会飞行的具体类，虽然实现了飞行的接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title\">FlyInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"不会飞行！\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经把飞行行为fly进行了独立定义，并且定义了不同的具体飞行行为业务类；下面我们开始独立定义另一个叫的行为quack。</p>\n<p>2、独立定义叫的行为接口-QuackInterface</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 独立出来的叫的行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QuackInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 定义一个叫的方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.1、定义一个呱呱叫的行为类-QuackGuagua</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义一个呱呱叫的具体类，实现呱呱叫行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuackGuagua</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackInterface</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呱呱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.2、定义一个不会叫的业务类-QuackNoWay</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义一个不会叫的业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuackNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"不会叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.3、定义一个吱吱叫的业务类-QuackZhiZhi</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义一个吱吱叫的业务类，实现独立叫的行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuackZhiZhi</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuackInterface</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"吱吱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经把叫的行为quack进行了独立定义，并且定义了不同的具体叫的行为业务类；其实已经可以观察到，我们把飞行fly和叫quack行为定义成独立的行为，可以让飞行和叫的动作被其他的对象复用，因为这些行为已经与具体的鸭子类无关了，而我们也可以后期新增一些行为，不会影响到既有的行为类，也不会影响“使用”到飞行行为的鸭子类。</p>\n<p>2、重构定义鸭子业务类-Duck</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定义一个鸭子的业务类，并且声明已经独立定义的飞行、叫的行为接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\tFlyInterface flyInterface;</div><div class=\"line\">\tQuackInterface quackInterface;</div><div class=\"line\">\t</div><div class=\"line\">\tDuck()&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 将“叫”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tquackInterface.quack();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 将“飞行”的行为委托给接口行为类，这样就可以在不同的业务类中初始化不同的行为类</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tflyInterface.fly();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在我们定义Duck类中，把已经定义好的两个独立行为接口作为变量引入到了类中，这样的话，接下来我们在新建Duck类的具体子类时就可以拥有父类Duck声明的接口变量，并且可以动态实例化父类Duck中的接口变量为不同的行为接口实例。</p>\n<p>2.1、重构定义绿头鸭业务类-GreenDuck</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 绿头鸭业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)</div><div class=\"line\">\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：</div><div class=\"line\">\t *    1)、把飞行接口变量初始化成“用翅膀飞行”的具体行为</div><div class=\"line\">\t *    2)、把叫的接口变量初始化成“呱呱叫”具体行为</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GreenDuck</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tflyInterface = <span class=\"keyword\">new</span> FlyWithWings();</div><div class=\"line\">\t\tquackInterface = <span class=\"keyword\">new</span> QuackGuagua();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到上面我们定义的绿头鸭业务类中分别把父类中的flyInterface接口变量实例化为用翅膀飞行的具体行为类、把父类中的接口变量quackInterface实例化为呱呱叫具体行为类。</p>\n<p>2.2、重构定义绿头鸭业务类-RedDuck</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 红头鸭业务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 1、因为绿头鸭类继承了Duck，所以可以继承拥有父类中的飞行、叫两个接口实例变量(flyInterface、quackInterface)</div><div class=\"line\">\t * 2、所以我们在构造函数中将继承的接口实例变量进行初始化操作：</div><div class=\"line\">\t *    1)、把飞行接口变量初始化成用“火箭动力”飞行的具体行为</div><div class=\"line\">\t *    2)、把叫的接口变量初始化成“吱吱叫”具体行为</div><div class=\"line\">\t */</span></div><div class=\"line\">\tRedDuck()&#123;</div><div class=\"line\">\t\tflyInterface = <span class=\"keyword\">new</span> FlyRocketPowered();</div><div class=\"line\">\t\tquackInterface = <span class=\"keyword\">new</span> QuackZhiZhi();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、定义一个测试类，在测试方法中测试绿头鸭和红头鸭的飞行和叫的行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\tDuck greenDuck = <span class=\"keyword\">new</span> GreenDuck();</div><div class=\"line\">\tgreenDuck.quack();</div><div class=\"line\">\tgreenDuck.fly();</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"-----------------------------\"</span>);</div><div class=\"line\">\tDuck redDuck = <span class=\"keyword\">new</span> RedDuck();</div><div class=\"line\">\tredDuck.quack();</div><div class=\"line\">\tredDuck.fly();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面测试代码输出如下：</p>\n<blockquote>\n<p>呱呱叫</p>\n<p>用翅膀飞行</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>吱吱叫</p>\n<p>利用火箭动力飞行</p>\n</blockquote>\n<p>通过上面的测试代码输出可以看出我们不同的Duck子类中，实例化了不同的接口行为变量，然后他们便具有了不同的行为操作。</p>\n<p>思考一个问题，比如后续再添加其他行为时怎么办，比如添加一个“跳跃”行为时，并且有单腿跳跃和双腿跳跃具体行为，我们可以如下扩展：</p>\n<blockquote>\n<p>定义一个“跳跃”的接口</p>\n<p>定义一个具体的“单腿跳跃”行为类，该类实现上面定义的“跳跃”接口</p>\n<p>定义一个具体的“双腿跳跃”行为类，该类实现上面定义的“跳跃”接口</p>\n<p>在Duck这个父类中，添加一个“跳跃”接口类型的变量</p>\n<p>在Duck这个父类中，再新定义一个“跳跃”的行为的方法，并且在方法中调用“跳跃”接口变量中的跳跃方法</p>\n<p>如果我们只需要为“红头鸭”添加其中的“单腿跳跃”行为时，则只需要在红头鸭中构造方中实例化父类的跳跃接口变量为具体的单腿跳跃行为类即可</p>\n</blockquote>\n<p>通过对前两代鸭子工程的重构和扩展，发现系统扩展性更好了！这就是设计模式的魅力所在！！后续将继续深入探索并运用他。</p>"},{"title":"设计模式--无模式","date":"2017-04-29T07:39:08.000Z","_content":"搞开发几年了，深深的明白设计模式的重要性，但是确不能真正彻底的运用自如；纵观现实生活中，比比皆是设计模式的最佳实践，比如：\n\n>在家里边墙面上的插座，一般都是扁孔的；自从买了一个港版的iphone后，竟然无法愉快的充电了，需要买一个转接头插在墙面的插座上才行，其实买的那个转换头就是充当一个适配器的作用，那么我们可以把这个实践称做--适配器模式\n\n<!--more-->\n\n![](http://soujava.com/images/model.jpg)\n\n>拿平时开的车来讲，你在北京买的车的生产厂家可能是河北制造的，你在南阳买的车的生产厂家可能是武汉制造的，但是有没有想过，同一款车的构件都是一样的，那么河北制造厂和武汉制造厂难道是全车所有配件都自己生产吗，那肯定不是的，与其称他们为制造厂，不如称他们为装配厂，因为汽车构件一般都有一个类似中央工厂的地方生产的，然后运输到各个装配厂进行组装成为整车！各个装备厂不需要关注发动机、轮胎是如何生产的，只需要把相应的部件进行组装成整车就行了，那么我们可以把这个实践称作--工程方法模式\n\n![](http://soujava.com/images/model2.png)\n\n**1、第一代鸭子**\n\n有一个玩具公司主要生产一款明星产品“橡皮鸭”；橡皮鸭要求会呱呱叫、会游泳，但是他们的外观有多种，比如红色、黄色、黑色的；通过需求可以梳理以下内容：\n\n>每一种鸭子都会呱呱叫、都会游泳\n>\n>鸭子可能有红色、黄色、黑色的外观\n\n\n好了，我们下面定义父类Duck，并且定义三个方法：呱呱叫-quack、游泳-swim、外观-display；\n\n>1.1、定义父类-Duck\n\n因为所有的鸭子都会呱呱叫、会游泳，都有自己的外观，所以我们定义一个父类，把这三个共有的方法定义在父类中，并且把呱呱叫、游泳的方法进行默认的实现，唯独外观方法什么都不做，因为不同的鸭子有不同的外观，所以需要把父类的外观方法定义成抽象方法，并且让具体的子类中强制覆写父类的外观方法：\n\n```java\n\n\t/**\n\t * @author maps\n\t * 定义一个鸭子父类\n\t */\n\tpublic abstract class Duck {\n\t\t//呱呱叫方法\n\t\tpublic void quack(){\n\t\t\tSystem.out.println(\"呱呱叫\");\n\t\t}\n\t\t//游泳方法\n\t\tpublic void swim(){\n\t\t\tSystem.out.println(\"游泳\");\n\t\t}\n\t\t//外观方法\n\t\tpublic abstract void display();\n\t}\n\n```\n\n>1.2、定义一个红色鸭子类-RedDuck，并且继承父类\n\n因为红色鸭子继承了父类，所以其具备了父类定义的所有方法的功能，即默认就会呱呱叫、会游泳；只是这个红色鸭子还没有颜色外观，因为父类的外观方法是抽象方法，所以子类必须覆写该抽象的外观方法\n\n```java\n\n\t/**\n\t * @author maps\n\t * 红色鸭子业务类\n\t */\n\tpublic class RedDuck extends Duck {\n\t\t@Override\n\t\tpublic void display() {\n\t\t\tSystem.out.println(\"红头鸭\");\n\t\t}\n\t}\n\n```\n\n>1.3、定义一个绿色鸭子类-GreenDuck，并且继承父类\n\n```java\n\n\t/**\n\t * @author maps\n\t * 绿色鸭子业务类\n\t */\n\tpublic class GreenDuck extends Duck {\n\t\t@Override\n\t\tpublic void display() {\n\t\t\tSystem.out.println(\"绿头鸭\");\n\t\t}\n\t}\n\n```\n\n>1.4、定义一个测试类\n\n可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观\n\n```java\n\n\tpublic class Test {\n\tpublic static void main(String[] args) {\n\t\tRedDuck redDuck = new RedDuck();//生产一个红头鸭\n\t\tredDuck.quack();\n\t\tredDuck.swim();\n\t\tredDuck.display();\n\t\tSystem.out.println(\"--------------------------\");\n\t\tGreenDuck greenDuck = new GreenDuck();//生产一个绿头鸭\n\t\tgreenDuck.quack();\n\t\tgreenDuck.swim();\n\t\tgreenDuck.display();\n\t}\n}\n\n```\n\n>呱呱叫\n>\n>游泳\n>\n>红头鸭\n\n----------\n\n\n>呱呱叫\n>\n>游泳\n>\n>绿头鸭\n\n\n**2、第二代鸭子**\n\n第一代鸭子投入市场后，获得了广泛好评，由于最近无人机的盛行，所以公司决定对第一代鸭子进行创新，开发第二代鸭子--会飞的大黄鸭。\n\n真对这个会飞的大黄鸭新产品，我们立刻就能想到如下解决方案：\n\n>在父类中定义一个fly的方法(这个方法不能是抽象方法，因为不能影响第一代鸭子的生产)，并且方法不做任何具体实现\n>\n>\n \n>2.1、在父类中添加fly方法-Duck\n\n```java\n\t\n\t/**\n\t * @author maps\n\t * 定义一个鸭子抽象类\n\t */\n\tpublic abstract class Duck {\n\t\t//呱呱叫方法\n\t\tpublic void quack(){\n\t\t\tSystem.out.println(\"呱呱叫\");\n\t\t}\n\t\t//游泳方法\n\t\tpublic void swim(){\n\t\t\tSystem.out.println(\"游泳\");\n\t\t}\n\t\t//外观方法\n\t\tpublic abstract void display();\n\n\t\t//飞行的方法\n\t\tpublic void fly(){\n\t\t\t\n\t\t}\n\t}\n\n```\n\n>2.2、定义大黄鸭业务类-BigYellowDuck\n\n```java\n\t\n\t/**\n\t * @author map\n\t * 定义大黄鸭业务类\n\t */\n\tpublic class BigYellowDuck extends Duck {\n\t\n\t\t@Override\n\t\tpublic void display() {\n\t\t\tSystem.out.println(\"大黄鸭\");\n\t\t}\n\t\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tsuper.fly();\n\t\t\tSystem.out.println(\"天空中飞行\");\n\t\t}\n\t}\n\n```\n\n>2.3、定义一个测试类\n\n可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观，尤其是新定义的大黄鸭，除了自己独特的外观外，还有一个独特技能-飞行\n\n```java\n\n\tpublic class Test {\n\tpublic static void main(String[] args) {\n\t\tRedDuck redDuck = new RedDuck();//生产一个红头鸭\n\t\tredDuck.quack();\n\t\tredDuck.swim();\n\t\tredDuck.display();\n\t\tSystem.out.println(\"--------------------------\");\n\t\tGreenDuck greenDuck = new GreenDuck();//生产一个绿头鸭\n\t\tgreenDuck.quack();\n\t\tgreenDuck.swim();\n\t\tgreenDuck.display();\n\t\tSystem.out.println(\"--------------------------\");\n\t\tBigYellowDuck yellowDuck = new BigYellowDuck();//生产一个会飞的大黄鸭\n\t\tyellowDuck.quack();\n\t\tyellowDuck.swim();\n\t\tyellowDuck.display();\n\t\tyellowDuck.fly();\n\t}\n}\n\n```\n\n>呱呱叫\n>\n>游泳\n>\n>红头鸭\n\n----------\n\n>呱呱叫\n>\n>游泳\n>\n>绿头鸭\n\n----------\n\n>呱呱叫\n>\n>游泳\n>\n>大黄鸭\n>\n>天空中飞行\n>\n\n上面是基本没有应用设计模式的场景，我们思考一下其他问题，比如后期新建很多种具备各自独特功能的鸭子呢？我们是不是要在父类中定义各种对其他鸭子无用的方法，那么以后用设计模式解决吧。","source":"_posts/设计模式-无模式.md","raw":"---\ntitle: 设计模式--无模式\ndate: 2017-04-29 15:39:08\ncategories: 设计模式\ntags: java\n---\n搞开发几年了，深深的明白设计模式的重要性，但是确不能真正彻底的运用自如；纵观现实生活中，比比皆是设计模式的最佳实践，比如：\n\n>在家里边墙面上的插座，一般都是扁孔的；自从买了一个港版的iphone后，竟然无法愉快的充电了，需要买一个转接头插在墙面的插座上才行，其实买的那个转换头就是充当一个适配器的作用，那么我们可以把这个实践称做--适配器模式\n\n<!--more-->\n\n![](http://soujava.com/images/model.jpg)\n\n>拿平时开的车来讲，你在北京买的车的生产厂家可能是河北制造的，你在南阳买的车的生产厂家可能是武汉制造的，但是有没有想过，同一款车的构件都是一样的，那么河北制造厂和武汉制造厂难道是全车所有配件都自己生产吗，那肯定不是的，与其称他们为制造厂，不如称他们为装配厂，因为汽车构件一般都有一个类似中央工厂的地方生产的，然后运输到各个装配厂进行组装成为整车！各个装备厂不需要关注发动机、轮胎是如何生产的，只需要把相应的部件进行组装成整车就行了，那么我们可以把这个实践称作--工程方法模式\n\n![](http://soujava.com/images/model2.png)\n\n**1、第一代鸭子**\n\n有一个玩具公司主要生产一款明星产品“橡皮鸭”；橡皮鸭要求会呱呱叫、会游泳，但是他们的外观有多种，比如红色、黄色、黑色的；通过需求可以梳理以下内容：\n\n>每一种鸭子都会呱呱叫、都会游泳\n>\n>鸭子可能有红色、黄色、黑色的外观\n\n\n好了，我们下面定义父类Duck，并且定义三个方法：呱呱叫-quack、游泳-swim、外观-display；\n\n>1.1、定义父类-Duck\n\n因为所有的鸭子都会呱呱叫、会游泳，都有自己的外观，所以我们定义一个父类，把这三个共有的方法定义在父类中，并且把呱呱叫、游泳的方法进行默认的实现，唯独外观方法什么都不做，因为不同的鸭子有不同的外观，所以需要把父类的外观方法定义成抽象方法，并且让具体的子类中强制覆写父类的外观方法：\n\n```java\n\n\t/**\n\t * @author maps\n\t * 定义一个鸭子父类\n\t */\n\tpublic abstract class Duck {\n\t\t//呱呱叫方法\n\t\tpublic void quack(){\n\t\t\tSystem.out.println(\"呱呱叫\");\n\t\t}\n\t\t//游泳方法\n\t\tpublic void swim(){\n\t\t\tSystem.out.println(\"游泳\");\n\t\t}\n\t\t//外观方法\n\t\tpublic abstract void display();\n\t}\n\n```\n\n>1.2、定义一个红色鸭子类-RedDuck，并且继承父类\n\n因为红色鸭子继承了父类，所以其具备了父类定义的所有方法的功能，即默认就会呱呱叫、会游泳；只是这个红色鸭子还没有颜色外观，因为父类的外观方法是抽象方法，所以子类必须覆写该抽象的外观方法\n\n```java\n\n\t/**\n\t * @author maps\n\t * 红色鸭子业务类\n\t */\n\tpublic class RedDuck extends Duck {\n\t\t@Override\n\t\tpublic void display() {\n\t\t\tSystem.out.println(\"红头鸭\");\n\t\t}\n\t}\n\n```\n\n>1.3、定义一个绿色鸭子类-GreenDuck，并且继承父类\n\n```java\n\n\t/**\n\t * @author maps\n\t * 绿色鸭子业务类\n\t */\n\tpublic class GreenDuck extends Duck {\n\t\t@Override\n\t\tpublic void display() {\n\t\t\tSystem.out.println(\"绿头鸭\");\n\t\t}\n\t}\n\n```\n\n>1.4、定义一个测试类\n\n可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观\n\n```java\n\n\tpublic class Test {\n\tpublic static void main(String[] args) {\n\t\tRedDuck redDuck = new RedDuck();//生产一个红头鸭\n\t\tredDuck.quack();\n\t\tredDuck.swim();\n\t\tredDuck.display();\n\t\tSystem.out.println(\"--------------------------\");\n\t\tGreenDuck greenDuck = new GreenDuck();//生产一个绿头鸭\n\t\tgreenDuck.quack();\n\t\tgreenDuck.swim();\n\t\tgreenDuck.display();\n\t}\n}\n\n```\n\n>呱呱叫\n>\n>游泳\n>\n>红头鸭\n\n----------\n\n\n>呱呱叫\n>\n>游泳\n>\n>绿头鸭\n\n\n**2、第二代鸭子**\n\n第一代鸭子投入市场后，获得了广泛好评，由于最近无人机的盛行，所以公司决定对第一代鸭子进行创新，开发第二代鸭子--会飞的大黄鸭。\n\n真对这个会飞的大黄鸭新产品，我们立刻就能想到如下解决方案：\n\n>在父类中定义一个fly的方法(这个方法不能是抽象方法，因为不能影响第一代鸭子的生产)，并且方法不做任何具体实现\n>\n>\n \n>2.1、在父类中添加fly方法-Duck\n\n```java\n\t\n\t/**\n\t * @author maps\n\t * 定义一个鸭子抽象类\n\t */\n\tpublic abstract class Duck {\n\t\t//呱呱叫方法\n\t\tpublic void quack(){\n\t\t\tSystem.out.println(\"呱呱叫\");\n\t\t}\n\t\t//游泳方法\n\t\tpublic void swim(){\n\t\t\tSystem.out.println(\"游泳\");\n\t\t}\n\t\t//外观方法\n\t\tpublic abstract void display();\n\n\t\t//飞行的方法\n\t\tpublic void fly(){\n\t\t\t\n\t\t}\n\t}\n\n```\n\n>2.2、定义大黄鸭业务类-BigYellowDuck\n\n```java\n\t\n\t/**\n\t * @author map\n\t * 定义大黄鸭业务类\n\t */\n\tpublic class BigYellowDuck extends Duck {\n\t\n\t\t@Override\n\t\tpublic void display() {\n\t\t\tSystem.out.println(\"大黄鸭\");\n\t\t}\n\t\n\t\t@Override\n\t\tpublic void fly() {\n\t\t\tsuper.fly();\n\t\t\tSystem.out.println(\"天空中飞行\");\n\t\t}\n\t}\n\n```\n\n>2.3、定义一个测试类\n\n可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观，尤其是新定义的大黄鸭，除了自己独特的外观外，还有一个独特技能-飞行\n\n```java\n\n\tpublic class Test {\n\tpublic static void main(String[] args) {\n\t\tRedDuck redDuck = new RedDuck();//生产一个红头鸭\n\t\tredDuck.quack();\n\t\tredDuck.swim();\n\t\tredDuck.display();\n\t\tSystem.out.println(\"--------------------------\");\n\t\tGreenDuck greenDuck = new GreenDuck();//生产一个绿头鸭\n\t\tgreenDuck.quack();\n\t\tgreenDuck.swim();\n\t\tgreenDuck.display();\n\t\tSystem.out.println(\"--------------------------\");\n\t\tBigYellowDuck yellowDuck = new BigYellowDuck();//生产一个会飞的大黄鸭\n\t\tyellowDuck.quack();\n\t\tyellowDuck.swim();\n\t\tyellowDuck.display();\n\t\tyellowDuck.fly();\n\t}\n}\n\n```\n\n>呱呱叫\n>\n>游泳\n>\n>红头鸭\n\n----------\n\n>呱呱叫\n>\n>游泳\n>\n>绿头鸭\n\n----------\n\n>呱呱叫\n>\n>游泳\n>\n>大黄鸭\n>\n>天空中飞行\n>\n\n上面是基本没有应用设计模式的场景，我们思考一下其他问题，比如后期新建很多种具备各自独特功能的鸭子呢？我们是不是要在父类中定义各种对其他鸭子无用的方法，那么以后用设计模式解决吧。","slug":"设计模式-无模式","published":1,"updated":"2018-07-08T09:37:48.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkn006g30tz13rf4nrp","content":"<p>搞开发几年了，深深的明白设计模式的重要性，但是确不能真正彻底的运用自如；纵观现实生活中，比比皆是设计模式的最佳实践，比如：</p>\n<blockquote>\n<p>在家里边墙面上的插座，一般都是扁孔的；自从买了一个港版的iphone后，竟然无法愉快的充电了，需要买一个转接头插在墙面的插座上才行，其实买的那个转换头就是充当一个适配器的作用，那么我们可以把这个实践称做–适配器模式</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"http://soujava.com/images/model.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拿平时开的车来讲，你在北京买的车的生产厂家可能是河北制造的，你在南阳买的车的生产厂家可能是武汉制造的，但是有没有想过，同一款车的构件都是一样的，那么河北制造厂和武汉制造厂难道是全车所有配件都自己生产吗，那肯定不是的，与其称他们为制造厂，不如称他们为装配厂，因为汽车构件一般都有一个类似中央工厂的地方生产的，然后运输到各个装配厂进行组装成为整车！各个装备厂不需要关注发动机、轮胎是如何生产的，只需要把相应的部件进行组装成整车就行了，那么我们可以把这个实践称作–工程方法模式</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/model2.png\" alt=\"\"></p>\n<p><strong>1、第一代鸭子</strong></p>\n<p>有一个玩具公司主要生产一款明星产品“橡皮鸭”；橡皮鸭要求会呱呱叫、会游泳，但是他们的外观有多种，比如红色、黄色、黑色的；通过需求可以梳理以下内容：</p>\n<blockquote>\n<p>每一种鸭子都会呱呱叫、都会游泳</p>\n<p>鸭子可能有红色、黄色、黑色的外观</p>\n</blockquote>\n<p>好了，我们下面定义父类Duck，并且定义三个方法：呱呱叫-quack、游泳-swim、外观-display；</p>\n<blockquote>\n<p>1.1、定义父类-Duck</p>\n</blockquote>\n<p>因为所有的鸭子都会呱呱叫、会游泳，都有自己的外观，所以我们定义一个父类，把这三个共有的方法定义在父类中，并且把呱呱叫、游泳的方法进行默认的实现，唯独外观方法什么都不做，因为不同的鸭子有不同的外观，所以需要把父类的外观方法定义成抽象方法，并且让具体的子类中强制覆写父类的外观方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 定义一个鸭子父类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//呱呱叫方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呱呱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//游泳方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"游泳\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//外观方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1.2、定义一个红色鸭子类-RedDuck，并且继承父类</p>\n</blockquote>\n<p>因为红色鸭子继承了父类，所以其具备了父类定义的所有方法的功能，即默认就会呱呱叫、会游泳；只是这个红色鸭子还没有颜色外观，因为父类的外观方法是抽象方法，所以子类必须覆写该抽象的外观方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 红色鸭子业务类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"红头鸭\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1.3、定义一个绿色鸭子类-GreenDuck，并且继承父类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 绿色鸭子业务类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"绿头鸭\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1.4、定义一个测试类</p>\n</blockquote>\n<p>可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tRedDuck redDuck = <span class=\"keyword\">new</span> RedDuck();<span class=\"comment\">//生产一个红头鸭</span></div><div class=\"line\">\t\tredDuck.quack();</div><div class=\"line\">\t\tredDuck.swim();</div><div class=\"line\">\t\tredDuck.display();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------------------\"</span>);</div><div class=\"line\">\t\tGreenDuck greenDuck = <span class=\"keyword\">new</span> GreenDuck();<span class=\"comment\">//生产一个绿头鸭</span></div><div class=\"line\">\t\tgreenDuck.quack();</div><div class=\"line\">\t\tgreenDuck.swim();</div><div class=\"line\">\t\tgreenDuck.display();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>红头鸭</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>绿头鸭</p>\n</blockquote>\n<p><strong>2、第二代鸭子</strong></p>\n<p>第一代鸭子投入市场后，获得了广泛好评，由于最近无人机的盛行，所以公司决定对第一代鸭子进行创新，开发第二代鸭子–会飞的大黄鸭。</p>\n<p>真对这个会飞的大黄鸭新产品，我们立刻就能想到如下解决方案：</p>\n<blockquote>\n<p>在父类中定义一个fly的方法(这个方法不能是抽象方法，因为不能影响第一代鸭子的生产)，并且方法不做任何具体实现</p>\n<p>2.1、在父类中添加fly方法-Duck</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 定义一个鸭子抽象类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//呱呱叫方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呱呱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//游泳方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"游泳\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//外观方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//飞行的方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.2、定义大黄鸭业务类-BigYellowDuck</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> map</div><div class=\"line\"> * 定义大黄鸭业务类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigYellowDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"大黄鸭\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.fly();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"天空中飞行\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.3、定义一个测试类</p>\n</blockquote>\n<p>可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观，尤其是新定义的大黄鸭，除了自己独特的外观外，还有一个独特技能-飞行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tRedDuck redDuck = <span class=\"keyword\">new</span> RedDuck();<span class=\"comment\">//生产一个红头鸭</span></div><div class=\"line\">\t\tredDuck.quack();</div><div class=\"line\">\t\tredDuck.swim();</div><div class=\"line\">\t\tredDuck.display();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------------------\"</span>);</div><div class=\"line\">\t\tGreenDuck greenDuck = <span class=\"keyword\">new</span> GreenDuck();<span class=\"comment\">//生产一个绿头鸭</span></div><div class=\"line\">\t\tgreenDuck.quack();</div><div class=\"line\">\t\tgreenDuck.swim();</div><div class=\"line\">\t\tgreenDuck.display();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------------------\"</span>);</div><div class=\"line\">\t\tBigYellowDuck yellowDuck = <span class=\"keyword\">new</span> BigYellowDuck();<span class=\"comment\">//生产一个会飞的大黄鸭</span></div><div class=\"line\">\t\tyellowDuck.quack();</div><div class=\"line\">\t\tyellowDuck.swim();</div><div class=\"line\">\t\tyellowDuck.display();</div><div class=\"line\">\t\tyellowDuck.fly();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>红头鸭</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>绿头鸭</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>大黄鸭</p>\n<p>天空中飞行</p>\n</blockquote>\n<p>上面是基本没有应用设计模式的场景，我们思考一下其他问题，比如后期新建很多种具备各自独特功能的鸭子呢？我们是不是要在父类中定义各种对其他鸭子无用的方法，那么以后用设计模式解决吧。</p>\n","excerpt":"<p>搞开发几年了，深深的明白设计模式的重要性，但是确不能真正彻底的运用自如；纵观现实生活中，比比皆是设计模式的最佳实践，比如：</p>\n<blockquote>\n<p>在家里边墙面上的插座，一般都是扁孔的；自从买了一个港版的iphone后，竟然无法愉快的充电了，需要买一个转接头插在墙面的插座上才行，其实买的那个转换头就是充当一个适配器的作用，那么我们可以把这个实践称做–适配器模式</p>\n</blockquote>","more":"<p><img src=\"http://soujava.com/images/model.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拿平时开的车来讲，你在北京买的车的生产厂家可能是河北制造的，你在南阳买的车的生产厂家可能是武汉制造的，但是有没有想过，同一款车的构件都是一样的，那么河北制造厂和武汉制造厂难道是全车所有配件都自己生产吗，那肯定不是的，与其称他们为制造厂，不如称他们为装配厂，因为汽车构件一般都有一个类似中央工厂的地方生产的，然后运输到各个装配厂进行组装成为整车！各个装备厂不需要关注发动机、轮胎是如何生产的，只需要把相应的部件进行组装成整车就行了，那么我们可以把这个实践称作–工程方法模式</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/model2.png\" alt=\"\"></p>\n<p><strong>1、第一代鸭子</strong></p>\n<p>有一个玩具公司主要生产一款明星产品“橡皮鸭”；橡皮鸭要求会呱呱叫、会游泳，但是他们的外观有多种，比如红色、黄色、黑色的；通过需求可以梳理以下内容：</p>\n<blockquote>\n<p>每一种鸭子都会呱呱叫、都会游泳</p>\n<p>鸭子可能有红色、黄色、黑色的外观</p>\n</blockquote>\n<p>好了，我们下面定义父类Duck，并且定义三个方法：呱呱叫-quack、游泳-swim、外观-display；</p>\n<blockquote>\n<p>1.1、定义父类-Duck</p>\n</blockquote>\n<p>因为所有的鸭子都会呱呱叫、会游泳，都有自己的外观，所以我们定义一个父类，把这三个共有的方法定义在父类中，并且把呱呱叫、游泳的方法进行默认的实现，唯独外观方法什么都不做，因为不同的鸭子有不同的外观，所以需要把父类的外观方法定义成抽象方法，并且让具体的子类中强制覆写父类的外观方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 定义一个鸭子父类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//呱呱叫方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呱呱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//游泳方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"游泳\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//外观方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1.2、定义一个红色鸭子类-RedDuck，并且继承父类</p>\n</blockquote>\n<p>因为红色鸭子继承了父类，所以其具备了父类定义的所有方法的功能，即默认就会呱呱叫、会游泳；只是这个红色鸭子还没有颜色外观，因为父类的外观方法是抽象方法，所以子类必须覆写该抽象的外观方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 红色鸭子业务类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"红头鸭\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1.3、定义一个绿色鸭子类-GreenDuck，并且继承父类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 绿色鸭子业务类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"绿头鸭\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1.4、定义一个测试类</p>\n</blockquote>\n<p>可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tRedDuck redDuck = <span class=\"keyword\">new</span> RedDuck();<span class=\"comment\">//生产一个红头鸭</span></div><div class=\"line\">\t\tredDuck.quack();</div><div class=\"line\">\t\tredDuck.swim();</div><div class=\"line\">\t\tredDuck.display();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------------------\"</span>);</div><div class=\"line\">\t\tGreenDuck greenDuck = <span class=\"keyword\">new</span> GreenDuck();<span class=\"comment\">//生产一个绿头鸭</span></div><div class=\"line\">\t\tgreenDuck.quack();</div><div class=\"line\">\t\tgreenDuck.swim();</div><div class=\"line\">\t\tgreenDuck.display();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>红头鸭</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>绿头鸭</p>\n</blockquote>\n<p><strong>2、第二代鸭子</strong></p>\n<p>第一代鸭子投入市场后，获得了广泛好评，由于最近无人机的盛行，所以公司决定对第一代鸭子进行创新，开发第二代鸭子–会飞的大黄鸭。</p>\n<p>真对这个会飞的大黄鸭新产品，我们立刻就能想到如下解决方案：</p>\n<blockquote>\n<p>在父类中定义一个fly的方法(这个方法不能是抽象方法，因为不能影响第一代鸭子的生产)，并且方法不做任何具体实现</p>\n<p>2.1、在父类中添加fly方法-Duck</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@author</span> maps</div><div class=\"line\"> * 定义一个鸭子抽象类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//呱呱叫方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quack</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呱呱叫\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//游泳方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"游泳\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//外观方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//飞行的方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.2、定义大黄鸭业务类-BigYellowDuck</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@author</span> map</div><div class=\"line\"> * 定义大黄鸭业务类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigYellowDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"大黄鸭\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.fly();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"天空中飞行\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.3、定义一个测试类</p>\n</blockquote>\n<p>可以看到生产的红头鸭和绿头鸭默认都实现了父类定义的呱呱叫、游泳动作特征，只是他们都实现自己定义的外观，尤其是新定义的大黄鸭，除了自己独特的外观外，还有一个独特技能-飞行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tRedDuck redDuck = <span class=\"keyword\">new</span> RedDuck();<span class=\"comment\">//生产一个红头鸭</span></div><div class=\"line\">\t\tredDuck.quack();</div><div class=\"line\">\t\tredDuck.swim();</div><div class=\"line\">\t\tredDuck.display();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------------------\"</span>);</div><div class=\"line\">\t\tGreenDuck greenDuck = <span class=\"keyword\">new</span> GreenDuck();<span class=\"comment\">//生产一个绿头鸭</span></div><div class=\"line\">\t\tgreenDuck.quack();</div><div class=\"line\">\t\tgreenDuck.swim();</div><div class=\"line\">\t\tgreenDuck.display();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------------------\"</span>);</div><div class=\"line\">\t\tBigYellowDuck yellowDuck = <span class=\"keyword\">new</span> BigYellowDuck();<span class=\"comment\">//生产一个会飞的大黄鸭</span></div><div class=\"line\">\t\tyellowDuck.quack();</div><div class=\"line\">\t\tyellowDuck.swim();</div><div class=\"line\">\t\tyellowDuck.display();</div><div class=\"line\">\t\tyellowDuck.fly();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>红头鸭</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>绿头鸭</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>呱呱叫</p>\n<p>游泳</p>\n<p>大黄鸭</p>\n<p>天空中飞行</p>\n</blockquote>\n<p>上面是基本没有应用设计模式的场景，我们思考一下其他问题，比如后期新建很多种具备各自独特功能的鸭子呢？我们是不是要在父类中定义各种对其他鸭子无用的方法，那么以后用设计模式解决吧。</p>"},{"title":"设计模式--抽象工厂模式","date":"2017-05-19T07:14:26.000Z","_content":"\n上一篇介绍的工厂方法模式中虽然解决了bmw汽车生产问题，并且也在本地初步实现了设计-生产-测试-销售一体化的目标，并且在当地的业绩还不错；当时现在高层领导看到了中国是一个很大的市场，所以计划在中国制造BMW汽车，经过开会商议，形成了以下会议纪要：\n\n<!--more-->\n\n1. 不能把目前在慕尼黑工厂生产的汽车直接运到中国去卖，这样太麻烦，代价太大；与其这样还不如把所有配件运输到中国，然后组装呢，反正你都需要把配件运输过去，不然客户购买汽车后发生故障了要修理，更换配件怎么办；但是把所有配件运输到中国也不太可行，因为这样代价也太大，成本太高了，我们需要确保有足够的价格优势，这样客户才能买账啊。\n2. 需要把汽车进行拆分成不同的零部件，然后针对零部件在中国建立工厂，然后进行组装销售\n\n\n**一、汽车零部件拆解**\n\n一辆汽车都是由发动机、方向盘、车架、车轮组成；也就是说一辆车通过车架整合之后，我启动发动机，转动方向盘，随着车轮的转动，这辆汽车就开走了；所以汽车部件如下：\n\n- 发动机\n- 方向盘\n- 车架\n- 车轮\n\n**二、抽象配件**\n\n我们明白了具体的汽车的部件构造之后，就开始在中国建造第一个BMW工厂了，建造工厂之前，我们先需要先把各个部件抽象成不同的产品出来(除了发动机)。\n\n\n1、发动机\n\n每一辆汽车的心脏就是这个发动机，所以我们把发动机这个配件抽象成一个独立的子产品意义上的配件，不过发动机也分好多种，最突出的一点就是动力，比如300马力、500马力的动力等等。\n\n- 发动机接口-Engine\n\n```java\n\n\t/**\n\t * 通用发动机产品接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Engine {\n\t\tEngine engineInfo();\n\t}\n\n```\n\n- 300马力发动机具体类-Engine300\n\n```java\n\t\n\t/**\n\t * 300马力的发动机\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class Engine300 implements Engine {\n\t\n\t\tEngine300(){\n\t\t\tSystem.out.println(\"300马力的发动机\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Engine engineInfo() {\n\t\t\treturn new Engine300();\n\t\t}\n\t}\n\n```\n\n- 500马力发动机具体类-Engine500\n\n```java\n\t\n\t/**\n\t * 500马力的发动机\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class Engine500 implements Engine {\n\t\n\t\tEngine500(){\n\t\t\tSystem.out.println(\"500马力的发动机\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Engine engineInfo() {\n\t\t\treturn new Engine500();\n\t\t}\n\t}\n\n```\n\n2、方向盘\n\n因为方向盘配件有很多种，比如多功能方向盘(上面各种控制按钮)、普通方向盘(就一个喇叭)，所以我们把方向盘抽象成一个通用的接口\n\n- 方向盘接口-Steering\n\n```java\n\n\t/**\n\t * 方向盘产品通用接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Steering {\n\t\tpublic Steering steeringInfo();\n\t}\n\n```\n\n- 多功能版方向盘具体类-SteeringMulti\n\n```java\n\n\t/**\n\t * 多功能版方向盘\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class SteeringMulti implements Steering {\n\t\n\t\tSteeringMulti(){\n\t\t\tSystem.out.println(\"多功能方向盘\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Steering steeringInfo() {\n\t\t\treturn new SteeringMulti();\n\t\t}\n\t}\n\n```\n\n- 简单版方向盘具体类-SteeringSimple\n\n```java\n\n\t/**\n * 简单款方向盘\n * @author mapingsheng\n *\n */\npublic class SteeringSimple implements Steering {\n\n\tSteeringSimple(){\n\t\tSystem.out.println(\"简单方向盘\");\n\t}\n\t\n\t@Override\n\tpublic Steering steeringInfo() {\n\t\treturn new SteeringSimple();\n\t}\n}\n\n```\n\n3、车轮\n\n车轮是汽车可以平稳行驶在路上的前提，当然车轮也分为很多种，比如规格、材质等等，我们就简单的区分大号、中号的车轮。\n\n- 车轮接口-Wheel\n\n```java\n\n\t/**\n\t * 通用车轮产品接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Wheel {\n\t\tWheel wheelInfo();\n\t}\n\n```\n\n- 大号车轮具体类-WheelL\n\n```java\n\n\t/**\n\t * 大号铝合金车轮\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class WheelL implements Wheel {\n\t\n\t\tWheelL(){\n\t\t\tSystem.out.println(\"  大号(L)车轮-铝合金\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Wheel wheelInfo() {\n\t\t\treturn new WheelL();\n\t\t}\n\t}\n\t\n```\n\n\n- 中号车轮具体类-WheelM\n\n```java\n\n\t/**\n\t * 普通号车轮-不锈钢\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class WheelM implements Wheel {\n\t\n\t\tWheelM(){\n\t\t\tSystem.out.println(\"  中号(M)车轮-不锈钢\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Wheel wheelInfo() {\n\t\t\treturn new WheelM();\n\t\t}\n\t}\n\n```\n\n4、车架\n\n车架就好比一个电脑的主板，把各个配件固定在架子上面，然后用发动机驱动车轮行驶，用方向盘控制行驶的方向(废话)。当然不同的车车架也有很多规格型号，比如微型车、中型车、加长版等等，我们这里暂且分为加长版和普通版吧。\n\n- 车架接口-Carframe\n\n```java\n\n\t/**\n\t * 通用车架产品接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Carframe {\n\t\tCarframe carframeInfo();\n\t}\n\n```\n\n- 普通款车架具体类-CarframeM\n\n```java\n\n\t/**\n\t * 普通版型车架\n\t * @author mapingsheng\n\t */\n\tpublic class CarframeM implements Carframe {\n\t\n\t\tCarframeM(){\n\t\t\tSystem.out.println(\"  普通版(M)车架\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Carframe carframeInfo() {\n\t\t\treturn new CarframeM();\n\t\t}\n\t}\n\n```\n\n- 加长版车架具体类-CarframeL\n\n```java\n\n\t/**\n\t * 加长型车架\n\t * @author mapingsheng\n\t */\n\tpublic class CarframeL implements Carframe {\n\t\n\t\tCarframeL(){\n\t\t\tSystem.out.println(\"  加长版(L)车架\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Carframe carframeInfo() {\n\t\t\treturn new CarframeL();\n\t\t}\n\t}\n\n```\n\n**三、配件工厂**\n\n我们在上一步中抽象了具体的配件接口和具体的配件产品类，那么下一步我们需要抽象一个配件生产工厂，由于需要在中国建立工厂，那么我们就建立一个德国配件工厂、中国配件工厂;每一个配件工厂都生产发动机、方向盘、车轮、车架四大配件，只是每一个配件长生产的配件的型号规格不同。\n\n1、通用配件工厂接口-PartsFactory\n\n```java\n\n\t/**\n\t * 通用配件工厂接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface PartsFactory {\n\t\tCarframe createCarframe();\n\t\tEngine createEngine();\n\t\tSteering createSteering();\n\t\tWheel  createWheel();\n\t}\n\t\n```\n\n2、德国配件工厂-PartsFactoryDE\n\n```java\n\n\t/**\n\t * 德国的配件工厂\n\t * @author mapingsheng\n\t */\n\tpublic class PartsFactoryDE implements PartsFactory {\n\t\n\t\tPartsFactoryDE(){\n\t\t\tSystem.out.println(\"德国汽车配件厂\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Carframe createCarframe() {\n\t\t\treturn new CarframeL();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic Engine createEngine() {\n\t\t\treturn new Engine500();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic Steering createSteering() {\n\t\t\treturn new SteeringMulti();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic Wheel createWheel() {\n\t\t\treturn new WheelL();\n\t\t}\n\t}\n\n```\n\n2、中国配件工厂-PartsFactoryCN\n\n```java\n\n\t/**\n * 中国的配件工厂\n * @author mapingsheng\n */\npublic class PartsFactoryCN implements PartsFactory {\n\n\tPartsFactoryCN(){\n\t\tSystem.out.println(\"中国汽车配件厂\");\n\t}\n\t\n\t@Override\n\tpublic Carframe createCarframe() {\n\t\treturn new CarframeM();\n\t}\n\n\t@Override\n\tpublic Engine createEngine() {\n\t\treturn new Engine300();\n\t}\n\n\t@Override\n\tpublic Steering createSteering() {\n\t\treturn new SteeringSimple();\n\t}\n\n\t@Override\n\tpublic Wheel createWheel() {\n\t\treturn new WheelM();\n\t}\n}\n\n```\n\n**三、产品组装工厂**\n\n我们把配件工厂组建完成后，就可以生产配件了，但是我们需要把各个不同的配件组装在一起成为不同的具体产品(BMWx1、BMWx6)等等，我们暂且指定义两个型号的产品-BMWx1、BMWx6\n\n1、通用BMW系列产品接口\n\n```java\n\n\t/**\n\t * BMW汽车产品接口\n\t * @author mapingsheng\n\t */\n\tpublic interface BMW {\n\t\tvoid getBMWinfo();\n\t}\n\n```\n\n2、具体型号的BMW产品类-BMWx1\n\n```java\n\n\t/**\n\t * 具体型号的BMW产品类-BMWx1\n\t * @author mapingsheng\n\t */\n\tpublic class BMWx1 implements BMW {\n\t\n\t\tPartsFactory partsFactory;\n\t\t\n\t\tBMWx1(PartsFactory partsFactory){\n\t\t\tthis.partsFactory = partsFactory;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void getBMWinfo() {\n\t\t\tSystem.out.println(\"BMWx1系轿车\");\n\t\t\tEngine engine = partsFactory.createEngine();\n\t\t\tCarframe carframe = partsFactory.createCarframe();\n\t\t\tSteering steering = partsFactory.createSteering();\n\t\t\tWheel wheel = partsFactory.createWheel();\n\t\t}\n\t}\n\n```\n\n3、具体型号的BMW产品类-BMWx6\n\n```java\n\n\t/**\n * 具体型号的BMW产品类-BMWx6\n * @author mapingsheng\n */\npublic class BMWx6 implements BMW {\n\n\tPartsFactory partsFactory;\n\t\n\tBMWx6(PartsFactory partsFactory){\n\t\tthis.partsFactory = partsFactory;\n\t}\n\t\n\t@Override\n\tpublic void getBMWinfo() {\n\t\tSystem.out.println(\"BMWx6系轿车\");\n\t\tEngine engine = partsFactory.createEngine();\n\t\tCarframe carframe = partsFactory.createCarframe();\n\t\tSteering steering = partsFactory.createSteering();\n\t\tWheel wheel = partsFactory.createWheel();\n\t}\n}\n\n```\n\n4、建立客户工厂-CustomerFactory\n\n```java\n\n\t/**\n\t * 建立客户工厂，对外提供预定方法\n\t * @author mapingsheng\n\t */\n\tpublic class CustomerFactory {\n\t\t\n\t\t/**\n\t\t * 预定汽车服务\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tpublic BMW orderBMW(String type){\n\t\t\treturn createBMW(type);\n\t\t}\n\t\t\n\t\t/**\n\t\t * 汽车生产服务，根据不同型号生产不同类型的汽车\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tpublic BMW createBMW(String type){\n\t\t\tBMW bmw = null;\n\t\t\tif(\"X1\".equals(type)){\n\t\t\t\tbmw = new BMWx1(new PartsFactoryCN());\n\t\t\t}else if(\"X6\".equals(type)){\n\t\t\t\tbmw = new BMWx6(new PartsFactoryDE());\n\t\t\t}\n\t\t\treturn bmw;\n\t\t}\n\t}\n\n```\n\n\n**四、建立测试类-Test**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t//实例化一个客户工厂，可以想象成一个网站，通过网站预定汽车\n\t\t\tCustomerFactory produce = new CustomerFactory();\n\t\t\tBMW bmwX1 = produce.orderBMW(\"X1\");//预定一个BMWx1系列的轿车，其实x1使用的是中国配件工厂生产的配件\n\t\t\tbmwX1.getBMWinfo();\n\t\t\t\n\t\t\tBMW bmwX6 = produce.orderBMW(\"X6\");//预定一个BMWx6系列的轿车,其实x6使用的是德国配件工厂生产的配件\n\t\t\tbmwX6.getBMWinfo();\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n\n>中国汽车配件厂\n>\n>>BMWx1系轿车\n>\n>>>300马力的发动机\n> \n>>>普通版(M)车架\n>  \n>>>简单方向盘\n>  \n>>>中号(M)车轮-不锈钢\n\n ----------\n\n>德国汽车配件厂\n>\n>>BMWx6系轿车\n>\n>>>500马力的发动机\n> \n>>>加长版(L)车架\n>  \n>>>多功能方向盘\n> \n>>>大号(L)车轮-铝合金\n>  \n\n通过上面的示例演示了抽象工程的使用方式，其实说白了，就是把后期会变化的模块都进行抽象独立出来，以方便后期扩展；所以个人觉得这个抽象粒度是不固定的，根据你的业务场景来决定的，比如上面的仅仅抽象了4大类配件来组装一辆汽车，其实抽象的粒度应该更细，比如发动机、车架、车轮等等都可以再细化的抽象。\n\n在上面的抽象过程中其实是分成两个维度(同一层级、不同层级)去抽象的，比如四大配件产品的抽象，是属于统一层级结构的抽象，也称为*平行的类层级*；再往上一级还有配件生产工厂的抽象，配件工厂再往上一级还有具体型号的产品；所以说我们在运用抽象工厂时应该遵循下层(具体型号的配件)不能依赖上层(具体型号的BMW汽车)。\n\n\n在设计抽象工厂应用时还应该遵循：\n\n>变量不可以持有具体类的引用--如果使用new，就会持有具体类的引用，你可以改用工厂来避开这样的做法，实质上就是把多个new集中在了一个工厂方法中\n\n>不要让类派生自具体类--如果派生自具体类，你就会依赖具体类。请派生自一个抽象(接口或者抽象类)\n\n其实上面的代码中我们可以发现抽象工厂的方法中实则是工厂方法的一种升级包装。\n\n\n\n\n**五、小结**\n\n所有工厂都是用来封装对象的创建；\n\n工厂方法使用继承或实现把对象的创建委托给子类或实现类\n\n抽象工厂使用使用对象组合，对象的创建被实现在工厂接口所暴露出来的的方法中\n\n所有工厂模式都是通过减少应用程序和具体类之间的依赖促进松耦合。\n\n\n抽象工厂模式-提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类(比如上面的例子中我们从底层向高层进行抽象了配件接口->产品接口，配件工厂的组装仅仅依赖抽象的配件接口，而不是依赖具体的配件类)\n\n工厂方法模式-定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，把类的实例化推迟到子类中\n\n","source":"_posts/设计模式-抽象工厂模式.md","raw":"---\ntitle: 设计模式--抽象工厂模式\ndate: 2017-05-19 15:14:26\ncategories: 设计模式\ntags: java\n---\n\n上一篇介绍的工厂方法模式中虽然解决了bmw汽车生产问题，并且也在本地初步实现了设计-生产-测试-销售一体化的目标，并且在当地的业绩还不错；当时现在高层领导看到了中国是一个很大的市场，所以计划在中国制造BMW汽车，经过开会商议，形成了以下会议纪要：\n\n<!--more-->\n\n1. 不能把目前在慕尼黑工厂生产的汽车直接运到中国去卖，这样太麻烦，代价太大；与其这样还不如把所有配件运输到中国，然后组装呢，反正你都需要把配件运输过去，不然客户购买汽车后发生故障了要修理，更换配件怎么办；但是把所有配件运输到中国也不太可行，因为这样代价也太大，成本太高了，我们需要确保有足够的价格优势，这样客户才能买账啊。\n2. 需要把汽车进行拆分成不同的零部件，然后针对零部件在中国建立工厂，然后进行组装销售\n\n\n**一、汽车零部件拆解**\n\n一辆汽车都是由发动机、方向盘、车架、车轮组成；也就是说一辆车通过车架整合之后，我启动发动机，转动方向盘，随着车轮的转动，这辆汽车就开走了；所以汽车部件如下：\n\n- 发动机\n- 方向盘\n- 车架\n- 车轮\n\n**二、抽象配件**\n\n我们明白了具体的汽车的部件构造之后，就开始在中国建造第一个BMW工厂了，建造工厂之前，我们先需要先把各个部件抽象成不同的产品出来(除了发动机)。\n\n\n1、发动机\n\n每一辆汽车的心脏就是这个发动机，所以我们把发动机这个配件抽象成一个独立的子产品意义上的配件，不过发动机也分好多种，最突出的一点就是动力，比如300马力、500马力的动力等等。\n\n- 发动机接口-Engine\n\n```java\n\n\t/**\n\t * 通用发动机产品接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Engine {\n\t\tEngine engineInfo();\n\t}\n\n```\n\n- 300马力发动机具体类-Engine300\n\n```java\n\t\n\t/**\n\t * 300马力的发动机\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class Engine300 implements Engine {\n\t\n\t\tEngine300(){\n\t\t\tSystem.out.println(\"300马力的发动机\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Engine engineInfo() {\n\t\t\treturn new Engine300();\n\t\t}\n\t}\n\n```\n\n- 500马力发动机具体类-Engine500\n\n```java\n\t\n\t/**\n\t * 500马力的发动机\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class Engine500 implements Engine {\n\t\n\t\tEngine500(){\n\t\t\tSystem.out.println(\"500马力的发动机\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Engine engineInfo() {\n\t\t\treturn new Engine500();\n\t\t}\n\t}\n\n```\n\n2、方向盘\n\n因为方向盘配件有很多种，比如多功能方向盘(上面各种控制按钮)、普通方向盘(就一个喇叭)，所以我们把方向盘抽象成一个通用的接口\n\n- 方向盘接口-Steering\n\n```java\n\n\t/**\n\t * 方向盘产品通用接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Steering {\n\t\tpublic Steering steeringInfo();\n\t}\n\n```\n\n- 多功能版方向盘具体类-SteeringMulti\n\n```java\n\n\t/**\n\t * 多功能版方向盘\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class SteeringMulti implements Steering {\n\t\n\t\tSteeringMulti(){\n\t\t\tSystem.out.println(\"多功能方向盘\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Steering steeringInfo() {\n\t\t\treturn new SteeringMulti();\n\t\t}\n\t}\n\n```\n\n- 简单版方向盘具体类-SteeringSimple\n\n```java\n\n\t/**\n * 简单款方向盘\n * @author mapingsheng\n *\n */\npublic class SteeringSimple implements Steering {\n\n\tSteeringSimple(){\n\t\tSystem.out.println(\"简单方向盘\");\n\t}\n\t\n\t@Override\n\tpublic Steering steeringInfo() {\n\t\treturn new SteeringSimple();\n\t}\n}\n\n```\n\n3、车轮\n\n车轮是汽车可以平稳行驶在路上的前提，当然车轮也分为很多种，比如规格、材质等等，我们就简单的区分大号、中号的车轮。\n\n- 车轮接口-Wheel\n\n```java\n\n\t/**\n\t * 通用车轮产品接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Wheel {\n\t\tWheel wheelInfo();\n\t}\n\n```\n\n- 大号车轮具体类-WheelL\n\n```java\n\n\t/**\n\t * 大号铝合金车轮\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class WheelL implements Wheel {\n\t\n\t\tWheelL(){\n\t\t\tSystem.out.println(\"  大号(L)车轮-铝合金\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Wheel wheelInfo() {\n\t\t\treturn new WheelL();\n\t\t}\n\t}\n\t\n```\n\n\n- 中号车轮具体类-WheelM\n\n```java\n\n\t/**\n\t * 普通号车轮-不锈钢\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class WheelM implements Wheel {\n\t\n\t\tWheelM(){\n\t\t\tSystem.out.println(\"  中号(M)车轮-不锈钢\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Wheel wheelInfo() {\n\t\t\treturn new WheelM();\n\t\t}\n\t}\n\n```\n\n4、车架\n\n车架就好比一个电脑的主板，把各个配件固定在架子上面，然后用发动机驱动车轮行驶，用方向盘控制行驶的方向(废话)。当然不同的车车架也有很多规格型号，比如微型车、中型车、加长版等等，我们这里暂且分为加长版和普通版吧。\n\n- 车架接口-Carframe\n\n```java\n\n\t/**\n\t * 通用车架产品接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface Carframe {\n\t\tCarframe carframeInfo();\n\t}\n\n```\n\n- 普通款车架具体类-CarframeM\n\n```java\n\n\t/**\n\t * 普通版型车架\n\t * @author mapingsheng\n\t */\n\tpublic class CarframeM implements Carframe {\n\t\n\t\tCarframeM(){\n\t\t\tSystem.out.println(\"  普通版(M)车架\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Carframe carframeInfo() {\n\t\t\treturn new CarframeM();\n\t\t}\n\t}\n\n```\n\n- 加长版车架具体类-CarframeL\n\n```java\n\n\t/**\n\t * 加长型车架\n\t * @author mapingsheng\n\t */\n\tpublic class CarframeL implements Carframe {\n\t\n\t\tCarframeL(){\n\t\t\tSystem.out.println(\"  加长版(L)车架\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Carframe carframeInfo() {\n\t\t\treturn new CarframeL();\n\t\t}\n\t}\n\n```\n\n**三、配件工厂**\n\n我们在上一步中抽象了具体的配件接口和具体的配件产品类，那么下一步我们需要抽象一个配件生产工厂，由于需要在中国建立工厂，那么我们就建立一个德国配件工厂、中国配件工厂;每一个配件工厂都生产发动机、方向盘、车轮、车架四大配件，只是每一个配件长生产的配件的型号规格不同。\n\n1、通用配件工厂接口-PartsFactory\n\n```java\n\n\t/**\n\t * 通用配件工厂接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface PartsFactory {\n\t\tCarframe createCarframe();\n\t\tEngine createEngine();\n\t\tSteering createSteering();\n\t\tWheel  createWheel();\n\t}\n\t\n```\n\n2、德国配件工厂-PartsFactoryDE\n\n```java\n\n\t/**\n\t * 德国的配件工厂\n\t * @author mapingsheng\n\t */\n\tpublic class PartsFactoryDE implements PartsFactory {\n\t\n\t\tPartsFactoryDE(){\n\t\t\tSystem.out.println(\"德国汽车配件厂\");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Carframe createCarframe() {\n\t\t\treturn new CarframeL();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic Engine createEngine() {\n\t\t\treturn new Engine500();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic Steering createSteering() {\n\t\t\treturn new SteeringMulti();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic Wheel createWheel() {\n\t\t\treturn new WheelL();\n\t\t}\n\t}\n\n```\n\n2、中国配件工厂-PartsFactoryCN\n\n```java\n\n\t/**\n * 中国的配件工厂\n * @author mapingsheng\n */\npublic class PartsFactoryCN implements PartsFactory {\n\n\tPartsFactoryCN(){\n\t\tSystem.out.println(\"中国汽车配件厂\");\n\t}\n\t\n\t@Override\n\tpublic Carframe createCarframe() {\n\t\treturn new CarframeM();\n\t}\n\n\t@Override\n\tpublic Engine createEngine() {\n\t\treturn new Engine300();\n\t}\n\n\t@Override\n\tpublic Steering createSteering() {\n\t\treturn new SteeringSimple();\n\t}\n\n\t@Override\n\tpublic Wheel createWheel() {\n\t\treturn new WheelM();\n\t}\n}\n\n```\n\n**三、产品组装工厂**\n\n我们把配件工厂组建完成后，就可以生产配件了，但是我们需要把各个不同的配件组装在一起成为不同的具体产品(BMWx1、BMWx6)等等，我们暂且指定义两个型号的产品-BMWx1、BMWx6\n\n1、通用BMW系列产品接口\n\n```java\n\n\t/**\n\t * BMW汽车产品接口\n\t * @author mapingsheng\n\t */\n\tpublic interface BMW {\n\t\tvoid getBMWinfo();\n\t}\n\n```\n\n2、具体型号的BMW产品类-BMWx1\n\n```java\n\n\t/**\n\t * 具体型号的BMW产品类-BMWx1\n\t * @author mapingsheng\n\t */\n\tpublic class BMWx1 implements BMW {\n\t\n\t\tPartsFactory partsFactory;\n\t\t\n\t\tBMWx1(PartsFactory partsFactory){\n\t\t\tthis.partsFactory = partsFactory;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void getBMWinfo() {\n\t\t\tSystem.out.println(\"BMWx1系轿车\");\n\t\t\tEngine engine = partsFactory.createEngine();\n\t\t\tCarframe carframe = partsFactory.createCarframe();\n\t\t\tSteering steering = partsFactory.createSteering();\n\t\t\tWheel wheel = partsFactory.createWheel();\n\t\t}\n\t}\n\n```\n\n3、具体型号的BMW产品类-BMWx6\n\n```java\n\n\t/**\n * 具体型号的BMW产品类-BMWx6\n * @author mapingsheng\n */\npublic class BMWx6 implements BMW {\n\n\tPartsFactory partsFactory;\n\t\n\tBMWx6(PartsFactory partsFactory){\n\t\tthis.partsFactory = partsFactory;\n\t}\n\t\n\t@Override\n\tpublic void getBMWinfo() {\n\t\tSystem.out.println(\"BMWx6系轿车\");\n\t\tEngine engine = partsFactory.createEngine();\n\t\tCarframe carframe = partsFactory.createCarframe();\n\t\tSteering steering = partsFactory.createSteering();\n\t\tWheel wheel = partsFactory.createWheel();\n\t}\n}\n\n```\n\n4、建立客户工厂-CustomerFactory\n\n```java\n\n\t/**\n\t * 建立客户工厂，对外提供预定方法\n\t * @author mapingsheng\n\t */\n\tpublic class CustomerFactory {\n\t\t\n\t\t/**\n\t\t * 预定汽车服务\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tpublic BMW orderBMW(String type){\n\t\t\treturn createBMW(type);\n\t\t}\n\t\t\n\t\t/**\n\t\t * 汽车生产服务，根据不同型号生产不同类型的汽车\n\t\t * @param type\n\t\t * @return\n\t\t */\n\t\tpublic BMW createBMW(String type){\n\t\t\tBMW bmw = null;\n\t\t\tif(\"X1\".equals(type)){\n\t\t\t\tbmw = new BMWx1(new PartsFactoryCN());\n\t\t\t}else if(\"X6\".equals(type)){\n\t\t\t\tbmw = new BMWx6(new PartsFactoryDE());\n\t\t\t}\n\t\t\treturn bmw;\n\t\t}\n\t}\n\n```\n\n\n**四、建立测试类-Test**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t//实例化一个客户工厂，可以想象成一个网站，通过网站预定汽车\n\t\t\tCustomerFactory produce = new CustomerFactory();\n\t\t\tBMW bmwX1 = produce.orderBMW(\"X1\");//预定一个BMWx1系列的轿车，其实x1使用的是中国配件工厂生产的配件\n\t\t\tbmwX1.getBMWinfo();\n\t\t\t\n\t\t\tBMW bmwX6 = produce.orderBMW(\"X6\");//预定一个BMWx6系列的轿车,其实x6使用的是德国配件工厂生产的配件\n\t\t\tbmwX6.getBMWinfo();\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n\n>中国汽车配件厂\n>\n>>BMWx1系轿车\n>\n>>>300马力的发动机\n> \n>>>普通版(M)车架\n>  \n>>>简单方向盘\n>  \n>>>中号(M)车轮-不锈钢\n\n ----------\n\n>德国汽车配件厂\n>\n>>BMWx6系轿车\n>\n>>>500马力的发动机\n> \n>>>加长版(L)车架\n>  \n>>>多功能方向盘\n> \n>>>大号(L)车轮-铝合金\n>  \n\n通过上面的示例演示了抽象工程的使用方式，其实说白了，就是把后期会变化的模块都进行抽象独立出来，以方便后期扩展；所以个人觉得这个抽象粒度是不固定的，根据你的业务场景来决定的，比如上面的仅仅抽象了4大类配件来组装一辆汽车，其实抽象的粒度应该更细，比如发动机、车架、车轮等等都可以再细化的抽象。\n\n在上面的抽象过程中其实是分成两个维度(同一层级、不同层级)去抽象的，比如四大配件产品的抽象，是属于统一层级结构的抽象，也称为*平行的类层级*；再往上一级还有配件生产工厂的抽象，配件工厂再往上一级还有具体型号的产品；所以说我们在运用抽象工厂时应该遵循下层(具体型号的配件)不能依赖上层(具体型号的BMW汽车)。\n\n\n在设计抽象工厂应用时还应该遵循：\n\n>变量不可以持有具体类的引用--如果使用new，就会持有具体类的引用，你可以改用工厂来避开这样的做法，实质上就是把多个new集中在了一个工厂方法中\n\n>不要让类派生自具体类--如果派生自具体类，你就会依赖具体类。请派生自一个抽象(接口或者抽象类)\n\n其实上面的代码中我们可以发现抽象工厂的方法中实则是工厂方法的一种升级包装。\n\n\n\n\n**五、小结**\n\n所有工厂都是用来封装对象的创建；\n\n工厂方法使用继承或实现把对象的创建委托给子类或实现类\n\n抽象工厂使用使用对象组合，对象的创建被实现在工厂接口所暴露出来的的方法中\n\n所有工厂模式都是通过减少应用程序和具体类之间的依赖促进松耦合。\n\n\n抽象工厂模式-提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类(比如上面的例子中我们从底层向高层进行抽象了配件接口->产品接口，配件工厂的组装仅仅依赖抽象的配件接口，而不是依赖具体的配件类)\n\n工厂方法模式-定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，把类的实例化推迟到子类中\n\n","slug":"设计模式-抽象工厂模式","published":1,"updated":"2018-07-08T09:37:48.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkp006l30tz3mr3m09m","content":"<p>上一篇介绍的工厂方法模式中虽然解决了bmw汽车生产问题，并且也在本地初步实现了设计-生产-测试-销售一体化的目标，并且在当地的业绩还不错；当时现在高层领导看到了中国是一个很大的市场，所以计划在中国制造BMW汽车，经过开会商议，形成了以下会议纪要：</p>\n<a id=\"more\"></a>\n<ol>\n<li>不能把目前在慕尼黑工厂生产的汽车直接运到中国去卖，这样太麻烦，代价太大；与其这样还不如把所有配件运输到中国，然后组装呢，反正你都需要把配件运输过去，不然客户购买汽车后发生故障了要修理，更换配件怎么办；但是把所有配件运输到中国也不太可行，因为这样代价也太大，成本太高了，我们需要确保有足够的价格优势，这样客户才能买账啊。</li>\n<li>需要把汽车进行拆分成不同的零部件，然后针对零部件在中国建立工厂，然后进行组装销售</li>\n</ol>\n<p><strong>一、汽车零部件拆解</strong></p>\n<p>一辆汽车都是由发动机、方向盘、车架、车轮组成；也就是说一辆车通过车架整合之后，我启动发动机，转动方向盘，随着车轮的转动，这辆汽车就开走了；所以汽车部件如下：</p>\n<ul>\n<li>发动机</li>\n<li>方向盘</li>\n<li>车架</li>\n<li>车轮</li>\n</ul>\n<p><strong>二、抽象配件</strong></p>\n<p>我们明白了具体的汽车的部件构造之后，就开始在中国建造第一个BMW工厂了，建造工厂之前，我们先需要先把各个部件抽象成不同的产品出来(除了发动机)。</p>\n<p>1、发动机</p>\n<p>每一辆汽车的心脏就是这个发动机，所以我们把发动机这个配件抽象成一个独立的子产品意义上的配件，不过发动机也分好多种，最突出的一点就是动力，比如300马力、500马力的动力等等。</p>\n<ul>\n<li>发动机接口-Engine</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通用发动机产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Engine</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Engine <span class=\"title\">engineInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>300马力发动机具体类-Engine300</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 300马力的发动机</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engine300</span> <span class=\"keyword\">implements</span> <span class=\"title\">Engine</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tEngine300()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"300马力的发动机\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">engineInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine300();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>500马力发动机具体类-Engine500</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 500马力的发动机</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engine500</span> <span class=\"keyword\">implements</span> <span class=\"title\">Engine</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tEngine500()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"500马力的发动机\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">engineInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine500();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、方向盘</p>\n<p>因为方向盘配件有很多种，比如多功能方向盘(上面各种控制按钮)、普通方向盘(就一个喇叭)，所以我们把方向盘抽象成一个通用的接口</p>\n<ul>\n<li>方向盘接口-Steering</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 方向盘产品通用接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Steering</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">steeringInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>多功能版方向盘具体类-SteeringMulti</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 多功能版方向盘</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SteeringMulti</span> <span class=\"keyword\">implements</span> <span class=\"title\">Steering</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tSteeringMulti()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"多功能方向盘\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">steeringInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringMulti();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>简单版方向盘具体类-SteeringSimple</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"> * 简单款方向盘</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SteeringSimple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Steering</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tSteeringSimple()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"简单方向盘\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">steeringInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringSimple();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、车轮</p>\n<p>车轮是汽车可以平稳行驶在路上的前提，当然车轮也分为很多种，比如规格、材质等等，我们就简单的区分大号、中号的车轮。</p>\n<ul>\n<li>车轮接口-Wheel</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通用车轮产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Wheel</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Wheel <span class=\"title\">wheelInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>大号车轮具体类-WheelL</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 大号铝合金车轮</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WheelL</span> <span class=\"keyword\">implements</span> <span class=\"title\">Wheel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tWheelL()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  大号(L)车轮-铝合金\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">wheelInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelL();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>中号车轮具体类-WheelM</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 普通号车轮-不锈钢</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WheelM</span> <span class=\"keyword\">implements</span> <span class=\"title\">Wheel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tWheelM()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  中号(M)车轮-不锈钢\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">wheelInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelM();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、车架</p>\n<p>车架就好比一个电脑的主板，把各个配件固定在架子上面，然后用发动机驱动车轮行驶，用方向盘控制行驶的方向(废话)。当然不同的车车架也有很多规格型号，比如微型车、中型车、加长版等等，我们这里暂且分为加长版和普通版吧。</p>\n<ul>\n<li>车架接口-Carframe</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通用车架产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Carframe</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Carframe <span class=\"title\">carframeInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>普通款车架具体类-CarframeM</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 普通版型车架</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarframeM</span> <span class=\"keyword\">implements</span> <span class=\"title\">Carframe</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tCarframeM()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  普通版(M)车架\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">carframeInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeM();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>加长版车架具体类-CarframeL</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 加长型车架</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarframeL</span> <span class=\"keyword\">implements</span> <span class=\"title\">Carframe</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tCarframeL()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  加长版(L)车架\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">carframeInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeL();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>三、配件工厂</strong></p>\n<p>我们在上一步中抽象了具体的配件接口和具体的配件产品类，那么下一步我们需要抽象一个配件生产工厂，由于需要在中国建立工厂，那么我们就建立一个德国配件工厂、中国配件工厂;每一个配件工厂都生产发动机、方向盘、车轮、车架四大配件，只是每一个配件长生产的配件的型号规格不同。</p>\n<p>1、通用配件工厂接口-PartsFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通用配件工厂接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PartsFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Carframe <span class=\"title\">createCarframe</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">Engine <span class=\"title\">createEngine</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">Steering <span class=\"title\">createSteering</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">Wheel  <span class=\"title\">createWheel</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、德国配件工厂-PartsFactoryDE</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 德国的配件工厂</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartsFactoryDE</span> <span class=\"keyword\">implements</span> <span class=\"title\">PartsFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactoryDE()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"德国汽车配件厂\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">createCarframe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeL();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine500();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">createSteering</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringMulti();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">createWheel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelL();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、中国配件工厂-PartsFactoryCN</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"> * 中国的配件工厂</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartsFactoryCN</span> <span class=\"keyword\">implements</span> <span class=\"title\">PartsFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactoryCN()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"中国汽车配件厂\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">createCarframe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeM();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine300();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">createSteering</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringSimple();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">createWheel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelM();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>三、产品组装工厂</strong></p>\n<p>我们把配件工厂组建完成后，就可以生产配件了，但是我们需要把各个不同的配件组装在一起成为不同的具体产品(BMWx1、BMWx6)等等，我们暂且指定义两个型号的产品-BMWx1、BMWx6</p>\n<p>1、通用BMW系列产品接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * BMW汽车产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getBMWinfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、具体型号的BMW产品类-BMWx1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 具体型号的BMW产品类-BMWx1</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx1</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactory partsFactory;</div><div class=\"line\">\t</div><div class=\"line\">\tBMWx1(PartsFactory partsFactory)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.partsFactory = partsFactory;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBMWinfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"BMWx1系轿车\"</span>);</div><div class=\"line\">\t\tEngine engine = partsFactory.createEngine();</div><div class=\"line\">\t\tCarframe carframe = partsFactory.createCarframe();</div><div class=\"line\">\t\tSteering steering = partsFactory.createSteering();</div><div class=\"line\">\t\tWheel wheel = partsFactory.createWheel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、具体型号的BMW产品类-BMWx6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"> * 具体型号的BMW产品类-BMWx6</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx6</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactory partsFactory;</div><div class=\"line\">\t</div><div class=\"line\">\tBMWx6(PartsFactory partsFactory)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.partsFactory = partsFactory;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBMWinfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"BMWx6系轿车\"</span>);</div><div class=\"line\">\t\tEngine engine = partsFactory.createEngine();</div><div class=\"line\">\t\tCarframe carframe = partsFactory.createCarframe();</div><div class=\"line\">\t\tSteering steering = partsFactory.createSteering();</div><div class=\"line\">\t\tWheel wheel = partsFactory.createWheel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、建立客户工厂-CustomerFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 建立客户工厂，对外提供预定方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerFactory</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 预定汽车服务</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> BMW <span class=\"title\">orderBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> createBMW(type);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 汽车生产服务，根据不同型号生产不同类型的汽车</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> BMW <span class=\"title\">createBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\tBMW bmw = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"X1\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWx1(<span class=\"keyword\">new</span> PartsFactoryCN());</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"X6\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWx6(<span class=\"keyword\">new</span> PartsFactoryDE());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>四、建立测试类-Test</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//实例化一个客户工厂，可以想象成一个网站，通过网站预定汽车</span></div><div class=\"line\">\t\tCustomerFactory produce = <span class=\"keyword\">new</span> CustomerFactory();</div><div class=\"line\">\t\tBMW bmwX1 = produce.orderBMW(<span class=\"string\">\"X1\"</span>);<span class=\"comment\">//预定一个BMWx1系列的轿车，其实x1使用的是中国配件工厂生产的配件</span></div><div class=\"line\">\t\tbmwX1.getBMWinfo();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tBMW bmwX6 = produce.orderBMW(<span class=\"string\">\"X6\"</span>);<span class=\"comment\">//预定一个BMWx6系列的轿车,其实x6使用的是德国配件工厂生产的配件</span></div><div class=\"line\">\t\tbmwX6.getBMWinfo();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>中国汽车配件厂</p>\n<blockquote>\n<p>BMWx1系轿车</p>\n<blockquote>\n<p>300马力的发动机</p>\n<p>普通版(M)车架</p>\n<p>简单方向盘</p>\n<p>中号(M)车轮-不锈钢</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>德国汽车配件厂</p>\n<blockquote>\n<p>BMWx6系轿车</p>\n<blockquote>\n<p>500马力的发动机</p>\n<p>加长版(L)车架</p>\n<p>多功能方向盘</p>\n<p>大号(L)车轮-铝合金</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>通过上面的示例演示了抽象工程的使用方式，其实说白了，就是把后期会变化的模块都进行抽象独立出来，以方便后期扩展；所以个人觉得这个抽象粒度是不固定的，根据你的业务场景来决定的，比如上面的仅仅抽象了4大类配件来组装一辆汽车，其实抽象的粒度应该更细，比如发动机、车架、车轮等等都可以再细化的抽象。</p>\n<p>在上面的抽象过程中其实是分成两个维度(同一层级、不同层级)去抽象的，比如四大配件产品的抽象，是属于统一层级结构的抽象，也称为<em>平行的类层级</em>；再往上一级还有配件生产工厂的抽象，配件工厂再往上一级还有具体型号的产品；所以说我们在运用抽象工厂时应该遵循下层(具体型号的配件)不能依赖上层(具体型号的BMW汽车)。</p>\n<p>在设计抽象工厂应用时还应该遵循：</p>\n<blockquote>\n<p>变量不可以持有具体类的引用–如果使用new，就会持有具体类的引用，你可以改用工厂来避开这样的做法，实质上就是把多个new集中在了一个工厂方法中</p>\n<p>不要让类派生自具体类–如果派生自具体类，你就会依赖具体类。请派生自一个抽象(接口或者抽象类)</p>\n</blockquote>\n<p>其实上面的代码中我们可以发现抽象工厂的方法中实则是工厂方法的一种升级包装。</p>\n<p><strong>五、小结</strong></p>\n<p>所有工厂都是用来封装对象的创建；</p>\n<p>工厂方法使用继承或实现把对象的创建委托给子类或实现类</p>\n<p>抽象工厂使用使用对象组合，对象的创建被实现在工厂接口所暴露出来的的方法中</p>\n<p>所有工厂模式都是通过减少应用程序和具体类之间的依赖促进松耦合。</p>\n<p>抽象工厂模式-提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类(比如上面的例子中我们从底层向高层进行抽象了配件接口-&gt;产品接口，配件工厂的组装仅仅依赖抽象的配件接口，而不是依赖具体的配件类)</p>\n<p>工厂方法模式-定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，把类的实例化推迟到子类中</p>\n","excerpt":"<p>上一篇介绍的工厂方法模式中虽然解决了bmw汽车生产问题，并且也在本地初步实现了设计-生产-测试-销售一体化的目标，并且在当地的业绩还不错；当时现在高层领导看到了中国是一个很大的市场，所以计划在中国制造BMW汽车，经过开会商议，形成了以下会议纪要：</p>","more":"<ol>\n<li>不能把目前在慕尼黑工厂生产的汽车直接运到中国去卖，这样太麻烦，代价太大；与其这样还不如把所有配件运输到中国，然后组装呢，反正你都需要把配件运输过去，不然客户购买汽车后发生故障了要修理，更换配件怎么办；但是把所有配件运输到中国也不太可行，因为这样代价也太大，成本太高了，我们需要确保有足够的价格优势，这样客户才能买账啊。</li>\n<li>需要把汽车进行拆分成不同的零部件，然后针对零部件在中国建立工厂，然后进行组装销售</li>\n</ol>\n<p><strong>一、汽车零部件拆解</strong></p>\n<p>一辆汽车都是由发动机、方向盘、车架、车轮组成；也就是说一辆车通过车架整合之后，我启动发动机，转动方向盘，随着车轮的转动，这辆汽车就开走了；所以汽车部件如下：</p>\n<ul>\n<li>发动机</li>\n<li>方向盘</li>\n<li>车架</li>\n<li>车轮</li>\n</ul>\n<p><strong>二、抽象配件</strong></p>\n<p>我们明白了具体的汽车的部件构造之后，就开始在中国建造第一个BMW工厂了，建造工厂之前，我们先需要先把各个部件抽象成不同的产品出来(除了发动机)。</p>\n<p>1、发动机</p>\n<p>每一辆汽车的心脏就是这个发动机，所以我们把发动机这个配件抽象成一个独立的子产品意义上的配件，不过发动机也分好多种，最突出的一点就是动力，比如300马力、500马力的动力等等。</p>\n<ul>\n<li>发动机接口-Engine</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通用发动机产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Engine</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Engine <span class=\"title\">engineInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>300马力发动机具体类-Engine300</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 300马力的发动机</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engine300</span> <span class=\"keyword\">implements</span> <span class=\"title\">Engine</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tEngine300()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"300马力的发动机\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">engineInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine300();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>500马力发动机具体类-Engine500</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 500马力的发动机</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engine500</span> <span class=\"keyword\">implements</span> <span class=\"title\">Engine</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tEngine500()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"500马力的发动机\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">engineInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine500();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、方向盘</p>\n<p>因为方向盘配件有很多种，比如多功能方向盘(上面各种控制按钮)、普通方向盘(就一个喇叭)，所以我们把方向盘抽象成一个通用的接口</p>\n<ul>\n<li>方向盘接口-Steering</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 方向盘产品通用接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Steering</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">steeringInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>多功能版方向盘具体类-SteeringMulti</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 多功能版方向盘</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SteeringMulti</span> <span class=\"keyword\">implements</span> <span class=\"title\">Steering</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tSteeringMulti()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"多功能方向盘\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">steeringInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringMulti();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>简单版方向盘具体类-SteeringSimple</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\"> * 简单款方向盘</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SteeringSimple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Steering</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tSteeringSimple()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"简单方向盘\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">steeringInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringSimple();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、车轮</p>\n<p>车轮是汽车可以平稳行驶在路上的前提，当然车轮也分为很多种，比如规格、材质等等，我们就简单的区分大号、中号的车轮。</p>\n<ul>\n<li>车轮接口-Wheel</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通用车轮产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Wheel</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Wheel <span class=\"title\">wheelInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>大号车轮具体类-WheelL</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 大号铝合金车轮</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WheelL</span> <span class=\"keyword\">implements</span> <span class=\"title\">Wheel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tWheelL()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  大号(L)车轮-铝合金\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">wheelInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelL();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>中号车轮具体类-WheelM</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 普通号车轮-不锈钢</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WheelM</span> <span class=\"keyword\">implements</span> <span class=\"title\">Wheel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tWheelM()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  中号(M)车轮-不锈钢\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">wheelInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelM();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、车架</p>\n<p>车架就好比一个电脑的主板，把各个配件固定在架子上面，然后用发动机驱动车轮行驶，用方向盘控制行驶的方向(废话)。当然不同的车车架也有很多规格型号，比如微型车、中型车、加长版等等，我们这里暂且分为加长版和普通版吧。</p>\n<ul>\n<li>车架接口-Carframe</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通用车架产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Carframe</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Carframe <span class=\"title\">carframeInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>普通款车架具体类-CarframeM</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 普通版型车架</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarframeM</span> <span class=\"keyword\">implements</span> <span class=\"title\">Carframe</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tCarframeM()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  普通版(M)车架\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">carframeInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeM();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>加长版车架具体类-CarframeL</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 加长型车架</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarframeL</span> <span class=\"keyword\">implements</span> <span class=\"title\">Carframe</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tCarframeL()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"  加长版(L)车架\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">carframeInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeL();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>三、配件工厂</strong></p>\n<p>我们在上一步中抽象了具体的配件接口和具体的配件产品类，那么下一步我们需要抽象一个配件生产工厂，由于需要在中国建立工厂，那么我们就建立一个德国配件工厂、中国配件工厂;每一个配件工厂都生产发动机、方向盘、车轮、车架四大配件，只是每一个配件长生产的配件的型号规格不同。</p>\n<p>1、通用配件工厂接口-PartsFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通用配件工厂接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PartsFactory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Carframe <span class=\"title\">createCarframe</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">Engine <span class=\"title\">createEngine</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">Steering <span class=\"title\">createSteering</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\">Wheel  <span class=\"title\">createWheel</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、德国配件工厂-PartsFactoryDE</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 德国的配件工厂</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartsFactoryDE</span> <span class=\"keyword\">implements</span> <span class=\"title\">PartsFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactoryDE()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"德国汽车配件厂\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">createCarframe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeL();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine500();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">createSteering</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringMulti();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">createWheel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelL();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、中国配件工厂-PartsFactoryCN</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\"> * 中国的配件工厂</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PartsFactoryCN</span> <span class=\"keyword\">implements</span> <span class=\"title\">PartsFactory</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactoryCN()&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"中国汽车配件厂\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Carframe <span class=\"title\">createCarframe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CarframeM();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Engine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Engine300();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Steering <span class=\"title\">createSteering</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SteeringSimple();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Wheel <span class=\"title\">createWheel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WheelM();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>三、产品组装工厂</strong></p>\n<p>我们把配件工厂组建完成后，就可以生产配件了，但是我们需要把各个不同的配件组装在一起成为不同的具体产品(BMWx1、BMWx6)等等，我们暂且指定义两个型号的产品-BMWx1、BMWx6</p>\n<p>1、通用BMW系列产品接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * BMW汽车产品接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getBMWinfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、具体型号的BMW产品类-BMWx1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 具体型号的BMW产品类-BMWx1</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx1</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactory partsFactory;</div><div class=\"line\">\t</div><div class=\"line\">\tBMWx1(PartsFactory partsFactory)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.partsFactory = partsFactory;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBMWinfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"BMWx1系轿车\"</span>);</div><div class=\"line\">\t\tEngine engine = partsFactory.createEngine();</div><div class=\"line\">\t\tCarframe carframe = partsFactory.createCarframe();</div><div class=\"line\">\t\tSteering steering = partsFactory.createSteering();</div><div class=\"line\">\t\tWheel wheel = partsFactory.createWheel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、具体型号的BMW产品类-BMWx6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\"> * 具体型号的BMW产品类-BMWx6</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx6</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tPartsFactory partsFactory;</div><div class=\"line\">\t</div><div class=\"line\">\tBMWx6(PartsFactory partsFactory)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.partsFactory = partsFactory;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBMWinfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"BMWx6系轿车\"</span>);</div><div class=\"line\">\t\tEngine engine = partsFactory.createEngine();</div><div class=\"line\">\t\tCarframe carframe = partsFactory.createCarframe();</div><div class=\"line\">\t\tSteering steering = partsFactory.createSteering();</div><div class=\"line\">\t\tWheel wheel = partsFactory.createWheel();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、建立客户工厂-CustomerFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 建立客户工厂，对外提供预定方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerFactory</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 预定汽车服务</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> BMW <span class=\"title\">orderBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> createBMW(type);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 汽车生产服务，根据不同型号生产不同类型的汽车</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> type</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> BMW <span class=\"title\">createBMW</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\t\tBMW bmw = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"X1\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWx1(<span class=\"keyword\">new</span> PartsFactoryCN());</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"X6\"</span>.equals(type))&#123;</div><div class=\"line\">\t\t\tbmw = <span class=\"keyword\">new</span> BMWx6(<span class=\"keyword\">new</span> PartsFactoryDE());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>四、建立测试类-Test</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//实例化一个客户工厂，可以想象成一个网站，通过网站预定汽车</span></div><div class=\"line\">\t\tCustomerFactory produce = <span class=\"keyword\">new</span> CustomerFactory();</div><div class=\"line\">\t\tBMW bmwX1 = produce.orderBMW(<span class=\"string\">\"X1\"</span>);<span class=\"comment\">//预定一个BMWx1系列的轿车，其实x1使用的是中国配件工厂生产的配件</span></div><div class=\"line\">\t\tbmwX1.getBMWinfo();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tBMW bmwX6 = produce.orderBMW(<span class=\"string\">\"X6\"</span>);<span class=\"comment\">//预定一个BMWx6系列的轿车,其实x6使用的是德国配件工厂生产的配件</span></div><div class=\"line\">\t\tbmwX6.getBMWinfo();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>中国汽车配件厂</p>\n<blockquote>\n<p>BMWx1系轿车</p>\n<blockquote>\n<p>300马力的发动机</p>\n<p>普通版(M)车架</p>\n<p>简单方向盘</p>\n<p>中号(M)车轮-不锈钢</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>德国汽车配件厂</p>\n<blockquote>\n<p>BMWx6系轿车</p>\n<blockquote>\n<p>500马力的发动机</p>\n<p>加长版(L)车架</p>\n<p>多功能方向盘</p>\n<p>大号(L)车轮-铝合金</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>通过上面的示例演示了抽象工程的使用方式，其实说白了，就是把后期会变化的模块都进行抽象独立出来，以方便后期扩展；所以个人觉得这个抽象粒度是不固定的，根据你的业务场景来决定的，比如上面的仅仅抽象了4大类配件来组装一辆汽车，其实抽象的粒度应该更细，比如发动机、车架、车轮等等都可以再细化的抽象。</p>\n<p>在上面的抽象过程中其实是分成两个维度(同一层级、不同层级)去抽象的，比如四大配件产品的抽象，是属于统一层级结构的抽象，也称为<em>平行的类层级</em>；再往上一级还有配件生产工厂的抽象，配件工厂再往上一级还有具体型号的产品；所以说我们在运用抽象工厂时应该遵循下层(具体型号的配件)不能依赖上层(具体型号的BMW汽车)。</p>\n<p>在设计抽象工厂应用时还应该遵循：</p>\n<blockquote>\n<p>变量不可以持有具体类的引用–如果使用new，就会持有具体类的引用，你可以改用工厂来避开这样的做法，实质上就是把多个new集中在了一个工厂方法中</p>\n<p>不要让类派生自具体类–如果派生自具体类，你就会依赖具体类。请派生自一个抽象(接口或者抽象类)</p>\n</blockquote>\n<p>其实上面的代码中我们可以发现抽象工厂的方法中实则是工厂方法的一种升级包装。</p>\n<p><strong>五、小结</strong></p>\n<p>所有工厂都是用来封装对象的创建；</p>\n<p>工厂方法使用继承或实现把对象的创建委托给子类或实现类</p>\n<p>抽象工厂使用使用对象组合，对象的创建被实现在工厂接口所暴露出来的的方法中</p>\n<p>所有工厂模式都是通过减少应用程序和具体类之间的依赖促进松耦合。</p>\n<p>抽象工厂模式-提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类(比如上面的例子中我们从底层向高层进行抽象了配件接口-&gt;产品接口，配件工厂的组装仅仅依赖抽象的配件接口，而不是依赖具体的配件类)</p>\n<p>工厂方法模式-定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，把类的实例化推迟到子类中</p>"},{"title":"设计模式--装饰者模式","date":"2017-05-16T06:30:53.000Z","_content":"\n装饰者模式顾名思义就是装饰，既然是装饰就需要由装饰者和被装饰者构成，举个例子我们在工位上面放了一盆绿植，那么就可以描述为用绿植装饰了工位（工位是被装饰者，绿植是装饰者）。所以实现一个装饰者模式需要有装饰者和被装饰者元素构成；其实说到装饰者模式，还有一个特性就是在装饰过程中不能本质的改变(代码变化)被装饰者的行为状态，仅仅通过装饰者的装饰就可以轻松的改变被装饰者的行为，而不需要变更被装饰者。\n\n下面用一个例子来具体实现一下装饰者模式，就拿我们生活中购买汽车来举例，比如我们买车时都分很多型号，就拿宝马来讲，分为宝马3系、宝马5系、宝马X5、宝马M6等等；然而每一个系列的车型又分为很多种配置，比如低配(乞丐版)、中配(舒适版)、高配(豪华版)、自定义(自选配置)。下面就以宝马X5、宝马M6系列为例进行实现。\n\n<!--more-->\n\n**1、被装饰者接口--宝马(BMW)通用接口**\n\n因为每一款车都有其对应的型号和价格，所以我们就仅仅定义价格和型号方法\n\n```java\n\n\t/**\n\t * 宝马汽车产品抽象类，被装饰者\n\t * @author mapingsheng\n\t */\n\tpublic interface BMW {\n\t\t\n\t\t/**\n\t\t * 购买的汽车型号\n\t\t * @return\n\t\t */\n\t\tString getType();\n\t\t\n\t\t/**\n\t\t * 购买花费金额，根据你的配置不同花费金额也不同\n\t\t * @return\n\t\t */\n\t\tdouble cost();\n\t}\n\n```\n\n**2、被装饰者具体类--新建宝马x5(BMWx5)汽车类，并实现通用的BMW接口**\n\n```java\n\n\t/**\n\t * 宝马M6系具体产品类\n\t * @author mapingsheng\n\t */\n\tpublic class BMWx5 implements BMW {\n\t\n\t\t/**\n\t\t * 覆写接口的花费金额方法\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn 98.6;\n\t\t}\n\t\n\t\t/**\n\t\t * 覆写接口返回类型方法\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn \"宝马X5系列 \"+this.cost()+\"万\";\n\t\t}\n\t}\n\n```\n\n**3、被装饰者具体类--新建宝马m6(BMWm6)汽车类，并实现通用的BMW接口**\n\n```java\n\n\t/**\n\t * 宝马M6系具体产品类\n\t * @author mapingsheng\n\t */\n\tpublic class BMWm6 implements BMW {\n\t\n\t\t/**\n\t\t * 重写接口的花费金额方法\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn 125.3;\n\t\t}\n\t\n\t\t/**\n\t\t * 重写接口返回类型方法\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn \"宝马m6系列 \"+this.cost()+\"万\";\n\t\t}\n\t}\n\n```\n\n**4、装饰者接口-配件接口**\n\n一般你选择什么配置都应该给你提供具体的配件信息吧\n\n```java\n\n\t/**\n\t * 配置接口，主要是装饰具体的BMW车，所以可以不用定义任何方法，\n\t * 只需要在原有的BMW具体产品类方法基础上增强方法功能；\n\t * 当然也可以定义自己的方法去增加\n\t * @author mapingsheng\n\t */\n\tpublic interface Configure extends BMW {\n\t\n\t\t/**\n\t\t * 配件信息\n\t\t * @return\n\t\t */\n\t\tString getConfigInfo();\n\t}\n\n```\n\n**5、装饰者具体类-电动天窗配置类**\n\n```java\n\n\t/**\n\t * 电动天窗配置\n\t * @author mapingsheng\n\t */\n\tpublic class ConfigSkylight implements Configure {\n\t\n\t\tBMW bmw;\n\t\tfinal double cost = 0.9;\n\t\t/**\n\t\t * 在构造方法中注入产品BMW接口，\n\t\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强\n\t\t * @param bmw\n\t\t */\n\t\tConfigSkylight(BMW bmw){\n\t\t\tthis.bmw = bmw;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的花费金额，\n\t\t * 然后加上本配置需要花费的金额\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn cost+this.bmw.cost();\n\t\t}\n\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的类型信息，\n\t\t * 然后加上本配置描述\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn this.bmw.getType()+\"\\n 【电动天窗 \"+this.getConfigInfo()+\"】 \"+cost+\"万\";\n\t\t}\n\t\n\t\t/**\n\t\t * 电动天窗的基本配置信息\n\t\t */\n\t\t@Override\n\t\tpublic String getConfigInfo() {\n\t\t\treturn \"电压:12v、材质:玻璃、打开方式:电动、是否全景:否 \";\n\t\t}\n\t}\n\n```\n\n**6、装饰者具体类-导航系统配置类**\n\n```java\n\n\t/**\n\t * 导航系统配置\n\t * @author mapingsheng\n\t */\n\tpublic class ConfigNavigation implements Configure {\n\t\n\t\tBMW bmw;\n\t\tfinal double cost = 0.5;\n\t\t\n\t\t/**\n\t\t * 在构造方法中注入产品BMW接口，\n\t\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强\n\t\t * @param bmw\n\t\t */\n\t\tConfigNavigation(BMW bmw){\n\t\t\tthis.bmw = bmw;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的类型信息，\n\t\t * 然后加上本配置描述\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn this.bmw.getType()+\"\\n 【导航系统 \"+this.getConfigInfo()+\"】 \"+cost+\"万\";\n\t\t}\n\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的花费金额，\n\t\t * 然后加上本配置需要花费的金额\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn cost+this.bmw.cost();\n\t\t}\n\t\n\t\t/**\n\t\t * 导航设备配置信息\n\t\t */\n\t\t@Override\n\t\tpublic String getConfigInfo() {\n\t\t\treturn \"尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G\";\n\t\t}\n\t}\n\n```\n\n**7、装饰者具体类-自动驾驶配置类**\n\n```java\n\n\t/**\n\t * 自动驾驶配置\n\t * @author mapingsheng\n\t */\n\tpublic class ConfigAutopilot implements Configure {\n\t\n\t\tBMW bmw;\n\t\tfinal double cost = 3.8;\n\t\t/**\n\t\t * 在构造方法中注入产品BMW接口，\n\t\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强\n\t\t * @param bmw\n\t\t */\n\t\tConfigAutopilot(BMW bmw){\n\t\t\tthis.bmw = bmw;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的类型信息，\n\t\t * 然后加上本配置描述\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn this.bmw.getType()+\"\\n 【自动驾驶系统  \"+this.getConfigInfo()+\"】 \"+cost+\"万\";\n\t\t}\n\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的花费金额，\n\t\t * 然后加上本配置需要花费的金额\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn cost+this.bmw.cost();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String getConfigInfo() {\n\t\t\treturn \"切换方式:手动、语音控制:否、路线规划:自动\";\n\t\t}\n\t}\n\n```\n\n**8、测试类**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tBMW bmwX5 = new BMWx5();//宝马x5基本配置\n\t\t\tbmwX5 = new ConfigSkylight(bmwX5); //为宝马x5装饰天窗配件\n\t\t\tbmwX5 = new ConfigNavigation(bmwX5); //为宝马x5装饰导航配件\n\t\t\t\n\t\t\tBMW bmwM6 = new BMWm6();//买一个基本款的宝马m6，不需要额外装饰\n\t\t\t\n\t\t\tSystem.out.println(bmwX5.getType()+\"\\n \"+bmwX5.cost()+\"万\");\n\t\t\t\n\t\t\tSystem.out.println(bmwM6.getType()+\"\\n \"+bmwM6.cost()+\"万\");\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>宝马X5系列 98.6万\n>\n>> 【电动天窗 电压:12v、材质:玻璃、打开方式:电动、是否全景:否 】 0.9万\n> \n>> 【导航系统 尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G】 0.5万\n> \n>> 100.0万\n> \n>宝马m6系列 125.3万\n>\n>> 125.3万\n> \n\n\n**9、小结**\n\n\n\n通过上面的买车场景实现了一个简单的装饰者模式，我们可以看到上面的代码中的“被装饰者具体类”定义之后，自始至终其代码就没有改变过，仅仅通过“装饰者具体类”去装饰就达到了使被装饰者的行为方法发生变更。\n\n所以装饰者模式的设计原则为：对扩展开放、对修改关闭，这句话体现在我如果想扩展被装饰者类的行为，无须修改被装饰者抽象类(接口)，只需继承(实现)装饰者抽象类(接口)，实现额外的一些装饰即可对被装饰者进行包装，比如我们想对BMWx5基本款进行配件添加，BMWx5具体类不需要更改，只需要新增一个装饰者(配件)具体类，然后对BMWx5进行装饰即可。\n\n装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）\n\n装饰者可以在被装饰者的行为前面与/或后面加上自己的行为已达到增强被装饰者行为的目的。\n\n装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂，因为你一个“被装饰者”可能会被多个“装饰者”所装饰，并且每个装饰者之间可能无任何关系，所以你需要定义很多个装饰者类。\n\n还有一点需要明确声明，并不是在任何情况下，被装饰者一旦定义，就不能更改，只能通过装饰者去更改；而是在一些情况下时需要更改被装饰者的，比如上面的被装饰者BMW，现在我们可以为其新增一个轮胎方法，因为每一辆车可以没有天窗、可以没有导航，但是必须都有轮胎，所以说针对这些共性的东西是需要通过更改被装饰者去处理的。\n\n\n\n\n\n\n","source":"_posts/设计模式-装饰者模式.md","raw":"---\ntitle: 设计模式--装饰者模式\ndate: 2017-05-16 14:30:53\ncategories: 设计模式\ntags: java\n---\n\n装饰者模式顾名思义就是装饰，既然是装饰就需要由装饰者和被装饰者构成，举个例子我们在工位上面放了一盆绿植，那么就可以描述为用绿植装饰了工位（工位是被装饰者，绿植是装饰者）。所以实现一个装饰者模式需要有装饰者和被装饰者元素构成；其实说到装饰者模式，还有一个特性就是在装饰过程中不能本质的改变(代码变化)被装饰者的行为状态，仅仅通过装饰者的装饰就可以轻松的改变被装饰者的行为，而不需要变更被装饰者。\n\n下面用一个例子来具体实现一下装饰者模式，就拿我们生活中购买汽车来举例，比如我们买车时都分很多型号，就拿宝马来讲，分为宝马3系、宝马5系、宝马X5、宝马M6等等；然而每一个系列的车型又分为很多种配置，比如低配(乞丐版)、中配(舒适版)、高配(豪华版)、自定义(自选配置)。下面就以宝马X5、宝马M6系列为例进行实现。\n\n<!--more-->\n\n**1、被装饰者接口--宝马(BMW)通用接口**\n\n因为每一款车都有其对应的型号和价格，所以我们就仅仅定义价格和型号方法\n\n```java\n\n\t/**\n\t * 宝马汽车产品抽象类，被装饰者\n\t * @author mapingsheng\n\t */\n\tpublic interface BMW {\n\t\t\n\t\t/**\n\t\t * 购买的汽车型号\n\t\t * @return\n\t\t */\n\t\tString getType();\n\t\t\n\t\t/**\n\t\t * 购买花费金额，根据你的配置不同花费金额也不同\n\t\t * @return\n\t\t */\n\t\tdouble cost();\n\t}\n\n```\n\n**2、被装饰者具体类--新建宝马x5(BMWx5)汽车类，并实现通用的BMW接口**\n\n```java\n\n\t/**\n\t * 宝马M6系具体产品类\n\t * @author mapingsheng\n\t */\n\tpublic class BMWx5 implements BMW {\n\t\n\t\t/**\n\t\t * 覆写接口的花费金额方法\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn 98.6;\n\t\t}\n\t\n\t\t/**\n\t\t * 覆写接口返回类型方法\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn \"宝马X5系列 \"+this.cost()+\"万\";\n\t\t}\n\t}\n\n```\n\n**3、被装饰者具体类--新建宝马m6(BMWm6)汽车类，并实现通用的BMW接口**\n\n```java\n\n\t/**\n\t * 宝马M6系具体产品类\n\t * @author mapingsheng\n\t */\n\tpublic class BMWm6 implements BMW {\n\t\n\t\t/**\n\t\t * 重写接口的花费金额方法\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn 125.3;\n\t\t}\n\t\n\t\t/**\n\t\t * 重写接口返回类型方法\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn \"宝马m6系列 \"+this.cost()+\"万\";\n\t\t}\n\t}\n\n```\n\n**4、装饰者接口-配件接口**\n\n一般你选择什么配置都应该给你提供具体的配件信息吧\n\n```java\n\n\t/**\n\t * 配置接口，主要是装饰具体的BMW车，所以可以不用定义任何方法，\n\t * 只需要在原有的BMW具体产品类方法基础上增强方法功能；\n\t * 当然也可以定义自己的方法去增加\n\t * @author mapingsheng\n\t */\n\tpublic interface Configure extends BMW {\n\t\n\t\t/**\n\t\t * 配件信息\n\t\t * @return\n\t\t */\n\t\tString getConfigInfo();\n\t}\n\n```\n\n**5、装饰者具体类-电动天窗配置类**\n\n```java\n\n\t/**\n\t * 电动天窗配置\n\t * @author mapingsheng\n\t */\n\tpublic class ConfigSkylight implements Configure {\n\t\n\t\tBMW bmw;\n\t\tfinal double cost = 0.9;\n\t\t/**\n\t\t * 在构造方法中注入产品BMW接口，\n\t\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强\n\t\t * @param bmw\n\t\t */\n\t\tConfigSkylight(BMW bmw){\n\t\t\tthis.bmw = bmw;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的花费金额，\n\t\t * 然后加上本配置需要花费的金额\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn cost+this.bmw.cost();\n\t\t}\n\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的类型信息，\n\t\t * 然后加上本配置描述\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn this.bmw.getType()+\"\\n 【电动天窗 \"+this.getConfigInfo()+\"】 \"+cost+\"万\";\n\t\t}\n\t\n\t\t/**\n\t\t * 电动天窗的基本配置信息\n\t\t */\n\t\t@Override\n\t\tpublic String getConfigInfo() {\n\t\t\treturn \"电压:12v、材质:玻璃、打开方式:电动、是否全景:否 \";\n\t\t}\n\t}\n\n```\n\n**6、装饰者具体类-导航系统配置类**\n\n```java\n\n\t/**\n\t * 导航系统配置\n\t * @author mapingsheng\n\t */\n\tpublic class ConfigNavigation implements Configure {\n\t\n\t\tBMW bmw;\n\t\tfinal double cost = 0.5;\n\t\t\n\t\t/**\n\t\t * 在构造方法中注入产品BMW接口，\n\t\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强\n\t\t * @param bmw\n\t\t */\n\t\tConfigNavigation(BMW bmw){\n\t\t\tthis.bmw = bmw;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的类型信息，\n\t\t * 然后加上本配置描述\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn this.bmw.getType()+\"\\n 【导航系统 \"+this.getConfigInfo()+\"】 \"+cost+\"万\";\n\t\t}\n\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的花费金额，\n\t\t * 然后加上本配置需要花费的金额\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn cost+this.bmw.cost();\n\t\t}\n\t\n\t\t/**\n\t\t * 导航设备配置信息\n\t\t */\n\t\t@Override\n\t\tpublic String getConfigInfo() {\n\t\t\treturn \"尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G\";\n\t\t}\n\t}\n\n```\n\n**7、装饰者具体类-自动驾驶配置类**\n\n```java\n\n\t/**\n\t * 自动驾驶配置\n\t * @author mapingsheng\n\t */\n\tpublic class ConfigAutopilot implements Configure {\n\t\n\t\tBMW bmw;\n\t\tfinal double cost = 3.8;\n\t\t/**\n\t\t * 在构造方法中注入产品BMW接口，\n\t\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强\n\t\t * @param bmw\n\t\t */\n\t\tConfigAutopilot(BMW bmw){\n\t\t\tthis.bmw = bmw;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的类型信息，\n\t\t * 然后加上本配置描述\n\t\t */\n\t\t@Override\n\t\tpublic String getType() {\n\t\t\treturn this.bmw.getType()+\"\\n 【自动驾驶系统  \"+this.getConfigInfo()+\"】 \"+cost+\"万\";\n\t\t}\n\t\n\t\t/**\n\t\t * 先获取该接口对应的具体产品类的花费金额，\n\t\t * 然后加上本配置需要花费的金额\n\t\t */\n\t\t@Override\n\t\tpublic double cost() {\n\t\t\treturn cost+this.bmw.cost();\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String getConfigInfo() {\n\t\t\treturn \"切换方式:手动、语音控制:否、路线规划:自动\";\n\t\t}\n\t}\n\n```\n\n**8、测试类**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tBMW bmwX5 = new BMWx5();//宝马x5基本配置\n\t\t\tbmwX5 = new ConfigSkylight(bmwX5); //为宝马x5装饰天窗配件\n\t\t\tbmwX5 = new ConfigNavigation(bmwX5); //为宝马x5装饰导航配件\n\t\t\t\n\t\t\tBMW bmwM6 = new BMWm6();//买一个基本款的宝马m6，不需要额外装饰\n\t\t\t\n\t\t\tSystem.out.println(bmwX5.getType()+\"\\n \"+bmwX5.cost()+\"万\");\n\t\t\t\n\t\t\tSystem.out.println(bmwM6.getType()+\"\\n \"+bmwM6.cost()+\"万\");\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>宝马X5系列 98.6万\n>\n>> 【电动天窗 电压:12v、材质:玻璃、打开方式:电动、是否全景:否 】 0.9万\n> \n>> 【导航系统 尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G】 0.5万\n> \n>> 100.0万\n> \n>宝马m6系列 125.3万\n>\n>> 125.3万\n> \n\n\n**9、小结**\n\n\n\n通过上面的买车场景实现了一个简单的装饰者模式，我们可以看到上面的代码中的“被装饰者具体类”定义之后，自始至终其代码就没有改变过，仅仅通过“装饰者具体类”去装饰就达到了使被装饰者的行为方法发生变更。\n\n所以装饰者模式的设计原则为：对扩展开放、对修改关闭，这句话体现在我如果想扩展被装饰者类的行为，无须修改被装饰者抽象类(接口)，只需继承(实现)装饰者抽象类(接口)，实现额外的一些装饰即可对被装饰者进行包装，比如我们想对BMWx5基本款进行配件添加，BMWx5具体类不需要更改，只需要新增一个装饰者(配件)具体类，然后对BMWx5进行装饰即可。\n\n装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）\n\n装饰者可以在被装饰者的行为前面与/或后面加上自己的行为已达到增强被装饰者行为的目的。\n\n装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂，因为你一个“被装饰者”可能会被多个“装饰者”所装饰，并且每个装饰者之间可能无任何关系，所以你需要定义很多个装饰者类。\n\n还有一点需要明确声明，并不是在任何情况下，被装饰者一旦定义，就不能更改，只能通过装饰者去更改；而是在一些情况下时需要更改被装饰者的，比如上面的被装饰者BMW，现在我们可以为其新增一个轮胎方法，因为每一辆车可以没有天窗、可以没有导航，但是必须都有轮胎，所以说针对这些共性的东西是需要通过更改被装饰者去处理的。\n\n\n\n\n\n\n","slug":"设计模式-装饰者模式","published":1,"updated":"2018-07-08T09:37:48.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkr006o30tzjap9gm8c","content":"<p>装饰者模式顾名思义就是装饰，既然是装饰就需要由装饰者和被装饰者构成，举个例子我们在工位上面放了一盆绿植，那么就可以描述为用绿植装饰了工位（工位是被装饰者，绿植是装饰者）。所以实现一个装饰者模式需要有装饰者和被装饰者元素构成；其实说到装饰者模式，还有一个特性就是在装饰过程中不能本质的改变(代码变化)被装饰者的行为状态，仅仅通过装饰者的装饰就可以轻松的改变被装饰者的行为，而不需要变更被装饰者。</p>\n<p>下面用一个例子来具体实现一下装饰者模式，就拿我们生活中购买汽车来举例，比如我们买车时都分很多型号，就拿宝马来讲，分为宝马3系、宝马5系、宝马X5、宝马M6等等；然而每一个系列的车型又分为很多种配置，比如低配(乞丐版)、中配(舒适版)、高配(豪华版)、自定义(自选配置)。下面就以宝马X5、宝马M6系列为例进行实现。</p>\n<a id=\"more\"></a>\n<p><strong>1、被装饰者接口–宝马(BMW)通用接口</strong></p>\n<p>因为每一款车都有其对应的型号和价格，所以我们就仅仅定义价格和型号方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 宝马汽车产品抽象类，被装饰者</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 购买的汽车型号</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getType</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 购买花费金额，根据你的配置不同花费金额也不同</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2、被装饰者具体类–新建宝马x5(BMWx5)汽车类，并实现通用的BMW接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 宝马M6系具体产品类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx5</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 覆写接口的花费金额方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">98.6</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 覆写接口返回类型方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"宝马X5系列 \"</span>+<span class=\"keyword\">this</span>.cost()+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3、被装饰者具体类–新建宝马m6(BMWm6)汽车类，并实现通用的BMW接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 宝马M6系具体产品类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWm6</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 重写接口的花费金额方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">125.3</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 重写接口返回类型方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"宝马m6系列 \"</span>+<span class=\"keyword\">this</span>.cost()+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4、装饰者接口-配件接口</strong></p>\n<p>一般你选择什么配置都应该给你提供具体的配件信息吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 配置接口，主要是装饰具体的BMW车，所以可以不用定义任何方法，</div><div class=\"line\"> * 只需要在原有的BMW具体产品类方法基础上增强方法功能；</div><div class=\"line\"> * 当然也可以定义自己的方法去增加</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Configure</span> <span class=\"keyword\">extends</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 配件信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>5、装饰者具体类-电动天窗配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 电动天窗配置</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigSkylight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Configure</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMW bmw;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> cost = <span class=\"number\">0.9</span>;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在构造方法中注入产品BMW接口，</div><div class=\"line\">\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bmw</div><div class=\"line\">\t */</div><div class=\"line\">\tConfigSkylight(BMW bmw)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bmw = bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 先获取该接口对应的具体产品类的花费金额，</div><div class=\"line\">\t * 然后加上本配置需要花费的金额</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cost+<span class=\"keyword\">this</span>.bmw.cost();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 先获取该接口对应的具体产品类的类型信息，</div><div class=\"line\">\t * 然后加上本配置描述</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bmw.getType()+<span class=\"string\">\"\\n 【电动天窗 \"</span>+<span class=\"keyword\">this</span>.getConfigInfo()+<span class=\"string\">\"】 \"</span>+cost+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 电动天窗的基本配置信息</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"电压:12v、材质:玻璃、打开方式:电动、是否全景:否 \"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>6、装饰者具体类-导航系统配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 导航系统配置</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigNavigation</span> <span class=\"keyword\">implements</span> <span class=\"title\">Configure</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMW bmw;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> cost = <span class=\"number\">0.5</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在构造方法中注入产品BMW接口，</div><div class=\"line\">\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bmw</div><div class=\"line\">\t */</div><div class=\"line\">\tConfigNavigation(BMW bmw)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bmw = bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 先获取该接口对应的具体产品类的类型信息，</div><div class=\"line\">\t * 然后加上本配置描述</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bmw.getType()+<span class=\"string\">\"\\n 【导航系统 \"</span>+<span class=\"keyword\">this</span>.getConfigInfo()+<span class=\"string\">\"】 \"</span>+cost+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 先获取该接口对应的具体产品类的花费金额，</div><div class=\"line\">\t * 然后加上本配置需要花费的金额</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cost+<span class=\"keyword\">this</span>.bmw.cost();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 导航设备配置信息</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>7、装饰者具体类-自动驾驶配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 自动驾驶配置</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigAutopilot</span> <span class=\"keyword\">implements</span> <span class=\"title\">Configure</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMW bmw;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> cost = <span class=\"number\">3.8</span>;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在构造方法中注入产品BMW接口，</div><div class=\"line\">\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bmw</div><div class=\"line\">\t */</div><div class=\"line\">\tConfigAutopilot(BMW bmw)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bmw = bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 先获取该接口对应的具体产品类的类型信息，</div><div class=\"line\">\t * 然后加上本配置描述</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bmw.getType()+<span class=\"string\">\"\\n 【自动驾驶系统  \"</span>+<span class=\"keyword\">this</span>.getConfigInfo()+<span class=\"string\">\"】 \"</span>+cost+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 先获取该接口对应的具体产品类的花费金额，</div><div class=\"line\">\t * 然后加上本配置需要花费的金额</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cost+<span class=\"keyword\">this</span>.bmw.cost();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"切换方式:手动、语音控制:否、路线规划:自动\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>8、测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tBMW bmwX5 = <span class=\"keyword\">new</span> BMWx5();<span class=\"comment\">//宝马x5基本配置</span></div><div class=\"line\">\t\tbmwX5 = <span class=\"keyword\">new</span> ConfigSkylight(bmwX5); <span class=\"comment\">//为宝马x5装饰天窗配件</span></div><div class=\"line\">\t\tbmwX5 = <span class=\"keyword\">new</span> ConfigNavigation(bmwX5); <span class=\"comment\">//为宝马x5装饰导航配件</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tBMW bmwM6 = <span class=\"keyword\">new</span> BMWm6();<span class=\"comment\">//买一个基本款的宝马m6，不需要额外装饰</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(bmwX5.getType()+<span class=\"string\">\"\\n \"</span>+bmwX5.cost()+<span class=\"string\">\"万\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(bmwM6.getType()+<span class=\"string\">\"\\n \"</span>+bmwM6.cost()+<span class=\"string\">\"万\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>宝马X5系列 98.6万</p>\n<blockquote>\n<p>【电动天窗 电压:12v、材质:玻璃、打开方式:电动、是否全景:否 】 0.9万</p>\n<p>【导航系统 尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G】 0.5万</p>\n<p>100.0万</p>\n</blockquote>\n<p>宝马m6系列 125.3万</p>\n<blockquote>\n<p>125.3万</p>\n</blockquote>\n</blockquote>\n<p><strong>9、小结</strong></p>\n<p>通过上面的买车场景实现了一个简单的装饰者模式，我们可以看到上面的代码中的“被装饰者具体类”定义之后，自始至终其代码就没有改变过，仅仅通过“装饰者具体类”去装饰就达到了使被装饰者的行为方法发生变更。</p>\n<p>所以装饰者模式的设计原则为：对扩展开放、对修改关闭，这句话体现在我如果想扩展被装饰者类的行为，无须修改被装饰者抽象类(接口)，只需继承(实现)装饰者抽象类(接口)，实现额外的一些装饰即可对被装饰者进行包装，比如我们想对BMWx5基本款进行配件添加，BMWx5具体类不需要更改，只需要新增一个装饰者(配件)具体类，然后对BMWx5进行装饰即可。</p>\n<p>装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）</p>\n<p>装饰者可以在被装饰者的行为前面与/或后面加上自己的行为已达到增强被装饰者行为的目的。</p>\n<p>装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂，因为你一个“被装饰者”可能会被多个“装饰者”所装饰，并且每个装饰者之间可能无任何关系，所以你需要定义很多个装饰者类。</p>\n<p>还有一点需要明确声明，并不是在任何情况下，被装饰者一旦定义，就不能更改，只能通过装饰者去更改；而是在一些情况下时需要更改被装饰者的，比如上面的被装饰者BMW，现在我们可以为其新增一个轮胎方法，因为每一辆车可以没有天窗、可以没有导航，但是必须都有轮胎，所以说针对这些共性的东西是需要通过更改被装饰者去处理的。</p>\n","excerpt":"<p>装饰者模式顾名思义就是装饰，既然是装饰就需要由装饰者和被装饰者构成，举个例子我们在工位上面放了一盆绿植，那么就可以描述为用绿植装饰了工位（工位是被装饰者，绿植是装饰者）。所以实现一个装饰者模式需要有装饰者和被装饰者元素构成；其实说到装饰者模式，还有一个特性就是在装饰过程中不能本质的改变(代码变化)被装饰者的行为状态，仅仅通过装饰者的装饰就可以轻松的改变被装饰者的行为，而不需要变更被装饰者。</p>\n<p>下面用一个例子来具体实现一下装饰者模式，就拿我们生活中购买汽车来举例，比如我们买车时都分很多型号，就拿宝马来讲，分为宝马3系、宝马5系、宝马X5、宝马M6等等；然而每一个系列的车型又分为很多种配置，比如低配(乞丐版)、中配(舒适版)、高配(豪华版)、自定义(自选配置)。下面就以宝马X5、宝马M6系列为例进行实现。</p>","more":"<p><strong>1、被装饰者接口–宝马(BMW)通用接口</strong></p>\n<p>因为每一款车都有其对应的型号和价格，所以我们就仅仅定义价格和型号方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 宝马汽车产品抽象类，被装饰者</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 购买的汽车型号</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getType</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 购买花费金额，根据你的配置不同花费金额也不同</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2、被装饰者具体类–新建宝马x5(BMWx5)汽车类，并实现通用的BMW接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 宝马M6系具体产品类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWx5</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 覆写接口的花费金额方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">98.6</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 覆写接口返回类型方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"宝马X5系列 \"</span>+<span class=\"keyword\">this</span>.cost()+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3、被装饰者具体类–新建宝马m6(BMWm6)汽车类，并实现通用的BMW接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 宝马M6系具体产品类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWm6</span> <span class=\"keyword\">implements</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 重写接口的花费金额方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">125.3</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 重写接口返回类型方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"宝马m6系列 \"</span>+<span class=\"keyword\">this</span>.cost()+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4、装饰者接口-配件接口</strong></p>\n<p>一般你选择什么配置都应该给你提供具体的配件信息吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 配置接口，主要是装饰具体的BMW车，所以可以不用定义任何方法，</div><div class=\"line\"> * 只需要在原有的BMW具体产品类方法基础上增强方法功能；</div><div class=\"line\"> * 当然也可以定义自己的方法去增加</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Configure</span> <span class=\"keyword\">extends</span> <span class=\"title\">BMW</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 配件信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>5、装饰者具体类-电动天窗配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 电动天窗配置</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigSkylight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Configure</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMW bmw;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> cost = <span class=\"number\">0.9</span>;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在构造方法中注入产品BMW接口，</div><div class=\"line\">\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bmw</div><div class=\"line\">\t */</span></div><div class=\"line\">\tConfigSkylight(BMW bmw)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bmw = bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 先获取该接口对应的具体产品类的花费金额，</div><div class=\"line\">\t * 然后加上本配置需要花费的金额</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cost+<span class=\"keyword\">this</span>.bmw.cost();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 先获取该接口对应的具体产品类的类型信息，</div><div class=\"line\">\t * 然后加上本配置描述</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bmw.getType()+<span class=\"string\">\"\\n 【电动天窗 \"</span>+<span class=\"keyword\">this</span>.getConfigInfo()+<span class=\"string\">\"】 \"</span>+cost+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 电动天窗的基本配置信息</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"电压:12v、材质:玻璃、打开方式:电动、是否全景:否 \"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>6、装饰者具体类-导航系统配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 导航系统配置</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigNavigation</span> <span class=\"keyword\">implements</span> <span class=\"title\">Configure</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMW bmw;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> cost = <span class=\"number\">0.5</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在构造方法中注入产品BMW接口，</div><div class=\"line\">\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bmw</div><div class=\"line\">\t */</span></div><div class=\"line\">\tConfigNavigation(BMW bmw)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bmw = bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 先获取该接口对应的具体产品类的类型信息，</div><div class=\"line\">\t * 然后加上本配置描述</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bmw.getType()+<span class=\"string\">\"\\n 【导航系统 \"</span>+<span class=\"keyword\">this</span>.getConfigInfo()+<span class=\"string\">\"】 \"</span>+cost+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 先获取该接口对应的具体产品类的花费金额，</div><div class=\"line\">\t * 然后加上本配置需要花费的金额</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cost+<span class=\"keyword\">this</span>.bmw.cost();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 导航设备配置信息</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>7、装饰者具体类-自动驾驶配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 自动驾驶配置</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigAutopilot</span> <span class=\"keyword\">implements</span> <span class=\"title\">Configure</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tBMW bmw;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> cost = <span class=\"number\">3.8</span>;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在构造方法中注入产品BMW接口，</div><div class=\"line\">\t * 然后再重写对应的方法以此对接口的具体动态产品类进行增强</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bmw</div><div class=\"line\">\t */</span></div><div class=\"line\">\tConfigAutopilot(BMW bmw)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.bmw = bmw;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 先获取该接口对应的具体产品类的类型信息，</div><div class=\"line\">\t * 然后加上本配置描述</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bmw.getType()+<span class=\"string\">\"\\n 【自动驾驶系统  \"</span>+<span class=\"keyword\">this</span>.getConfigInfo()+<span class=\"string\">\"】 \"</span>+cost+<span class=\"string\">\"万\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 先获取该接口对应的具体产品类的花费金额，</div><div class=\"line\">\t * 然后加上本配置需要花费的金额</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> cost+<span class=\"keyword\">this</span>.bmw.cost();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"切换方式:手动、语音控制:否、路线规划:自动\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>8、测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tBMW bmwX5 = <span class=\"keyword\">new</span> BMWx5();<span class=\"comment\">//宝马x5基本配置</span></div><div class=\"line\">\t\tbmwX5 = <span class=\"keyword\">new</span> ConfigSkylight(bmwX5); <span class=\"comment\">//为宝马x5装饰天窗配件</span></div><div class=\"line\">\t\tbmwX5 = <span class=\"keyword\">new</span> ConfigNavigation(bmwX5); <span class=\"comment\">//为宝马x5装饰导航配件</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tBMW bmwM6 = <span class=\"keyword\">new</span> BMWm6();<span class=\"comment\">//买一个基本款的宝马m6，不需要额外装饰</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(bmwX5.getType()+<span class=\"string\">\"\\n \"</span>+bmwX5.cost()+<span class=\"string\">\"万\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(bmwM6.getType()+<span class=\"string\">\"\\n \"</span>+bmwM6.cost()+<span class=\"string\">\"万\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>宝马X5系列 98.6万</p>\n<blockquote>\n<p>【电动天窗 电压:12v、材质:玻璃、打开方式:电动、是否全景:否 】 0.9万</p>\n<p>【导航系统 尺寸:12X36、是否触屏:是、分辨率:1028、内存:64G】 0.5万</p>\n<p>100.0万</p>\n</blockquote>\n<p>宝马m6系列 125.3万</p>\n<blockquote>\n<p>125.3万</p>\n</blockquote>\n</blockquote>\n<p><strong>9、小结</strong></p>\n<p>通过上面的买车场景实现了一个简单的装饰者模式，我们可以看到上面的代码中的“被装饰者具体类”定义之后，自始至终其代码就没有改变过，仅仅通过“装饰者具体类”去装饰就达到了使被装饰者的行为方法发生变更。</p>\n<p>所以装饰者模式的设计原则为：对扩展开放、对修改关闭，这句话体现在我如果想扩展被装饰者类的行为，无须修改被装饰者抽象类(接口)，只需继承(实现)装饰者抽象类(接口)，实现额外的一些装饰即可对被装饰者进行包装，比如我们想对BMWx5基本款进行配件添加，BMWx5具体类不需要更改，只需要新增一个装饰者(配件)具体类，然后对BMWx5进行装饰即可。</p>\n<p>装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）</p>\n<p>装饰者可以在被装饰者的行为前面与/或后面加上自己的行为已达到增强被装饰者行为的目的。</p>\n<p>装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂，因为你一个“被装饰者”可能会被多个“装饰者”所装饰，并且每个装饰者之间可能无任何关系，所以你需要定义很多个装饰者类。</p>\n<p>还有一点需要明确声明，并不是在任何情况下，被装饰者一旦定义，就不能更改，只能通过装饰者去更改；而是在一些情况下时需要更改被装饰者的，比如上面的被装饰者BMW，现在我们可以为其新增一个轮胎方法，因为每一辆车可以没有天窗、可以没有导航，但是必须都有轮胎，所以说针对这些共性的东西是需要通过更改被装饰者去处理的。</p>"},{"title":"设计模式--观察者模式(用java原生Observable、Observer简化观察者模式实现)","date":"2017-05-12T05:10:36.000Z","_content":"\n在上一篇介绍的观察者模式中我们用基本的代码实现了报纸订阅的场景，感觉写了很多代码才实现这个模式，比如在报纸订阅中需要提供订阅、取消订阅、通知订阅者等等通用的方法，在定义观察者时需要提供被通知的通用方法；\n\n<!--more-->\n\n其实在java中已经原生支持了观察者模式的实现，我们通过java原生提供的Observable(类)、Observer(接口)可以很简单的实现观察者模式，比如上面描述的提供订阅、取消订阅、通知订阅者等通用方法他都进行了实现，我们直接调用即可。\n\n\n**一、Observer接口实现观察者**\n\n**1. 订阅者-张三**\n\n我们只需要把订阅者实现Observer接口，并且实现update方法即可完整定义成一个观察者\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 张三订阅者，实现了Observer接口\n\t * @author mapingsheng\n\t */\n\tpublic class SubscriberZhangsan implements Observer{\n\t\n\t\tObservable observable; //订阅服务超类\n\t\t\n\t\t/**\n\t\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册\n\t\t * @param observable\n\t\t */\n\t\tSubscriberZhangsan(Observable observable){\n\t\t\tthis.observable = observable;\n\t\t\tobservable.addObserver(this);\n\t\t}\n\t\n\t\tSubscriberZhangsan(){}\n\t\t\n\t\t/**\n\t\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)\n\t\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法\n\t\t */\n\t\t@Override\n\t\tpublic void update(Observable o, Object arg) {\n\t\t\tif(o instanceof NewsPaperFoodService){\n\t\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;\n\t\t\t\tSystem.out.println(\"wangwu收到通知： \"+foodService.getNotice());\n\t\t\t}else if(o instanceof NewsPaperSportService){\n\t\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;\n\t\t\t\tSystem.out.println(\"wangwu收到通知： \"+sportService.getNotice());\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n**2. 订阅者-王五**\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 王五订阅者，实现了Observer接口\n\t * @author mapingsheng\n\t */\n\tpublic class SubscriberWangwu implements Observer {\n\t\n\t\tObservable observable; //订阅服务超类\n\t\t\n\t\t/**\n\t\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册\n\t\t * @param observable\n\t\t */\n\t\tSubscriberWangwu(Observable observable){\n\t\t\tthis.observable = observable;\n\t\t\tobservable.addObserver(this);\n\t\t}\n\t\t\n\t\tSubscriberWangwu(){}\n\t\t\n\t\t/**\n\t\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)\n\t\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法\n\t\t */\n\t\t@Override\n\t\tpublic void update(Observable o, Object arg) {\n\t\t\tif(o instanceof NewsPaperFoodService){\n\t\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;\n\t\t\t\tSystem.out.println(\"zhangsan收到通知： \"+foodService.getNotice());\n\t\t\t}else if(o instanceof NewsPaperSportService){\n\t\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;\n\t\t\t\tSystem.out.println(\"zhangsan收到通知： \"+sportService.getNotice());\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n**二、Observable类实现订阅服务**\n\n**1. 《美食天下》-报纸订阅服务**\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 美食天下-报纸订阅服务，只需继承Observable类即可\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperFoodService extends Observable {\n\t\tprivate String pageName; //报纸类型名称\n\t\t\n\t\tprivate String notice; //通知短语\n\t\t\n\t\t/**\n\t\t * 新报纸发布方法\n\t\t * @param name 报纸的名称\n\t\t */\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name;\n\t\t\tthis.notice = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\tsetChanged();//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态\n\t\t\tnotifyObservers();//调用通知订阅者方法\n\t\t}\n\t\t/**\n\t\t * 覆写addObserver注册订阅服务\n\t\t */\n\t\t@Override\n\t\tpublic synchronized void addObserver(Observer o) {\n\t\t\tsuper.addObserver(o);\n\t\t\tthis.notice = \"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"+super.countObservers()+\" 人订阅\";\n\t\t\t\n\t\t\to.update(this, notice); //当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取新发布的报纸名称\n\t\t * @return\n\t\t */\n\t\tpublic String getPageName() {\n\t\t\treturn pageName;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 设置新发布的报纸名称\n\t\t * @return\n\t\t */\n\t\tpublic void setPageName(String pageName) {\n\t\t\tthis.pageName = pageName;\n\t\t}\n\t\t/**\n\t\t * 设置通知提示短语\n\t\t * @return\n\t\t */\n\t\tpublic void setNotice(String notice) {\n\t\t\tthis.notice = notice;\n\t\t}\n\t\t/**\n\t\t * 获取提示短语\n\t\t * @return\n\t\t */\n\t\tpublic String getNotice(){\n\t\t\treturn notice;\n\t\t}\n\t}\n\n```\n\n**2. 《体育速递》-报纸订阅服务**\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 体育速递-报纸订阅服务，只需继承Observable类即可\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperSportService extends Observable {\n\t\tprivate String pageName;  //报纸类型名称\n\t\tprivate String notice; //通知短语\n\t\t\n\t\t/**\n\t\t * 新报纸发布方法\n\t\t * @param name\n\t\t */\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name;\n\t\t\tsetChanged();//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态\n\t\t\tnotifyObservers();\n\t\t}\n\t\t\n\t\t/**\n\t\t * 覆写addObserver注册订阅服务\n\t\t */\n\t\t@Override\n\t\tpublic synchronized void addObserver(Observer o) {\n\t\t\tsuper.addObserver(o);\n\t\t\tthis.notice = \"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共 46元，截止目前一共有 \"+super.countObservers()+\" 人订阅\";\n\t\t\t\n\t\t\to.update(this, notice); //当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执\n\t\t}\n\t\n\t\tpublic String getNotice(){\n\t\t\tString str = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic String getPageName() {\n\t\t\treturn pageName;\n\t\t}\n\t\n\t\tpublic void setPageName(String pageName) {\n\t\t\tthis.pageName = pageName;\n\t\t}\n\t\n\t\tpublic void setNotice(String notice) {\n\t\t\tthis.notice = notice;\n\t\t}\n\t}\n\n```\n\n**三、测试-观察者主动注册**\n\n```java\n\n\tpublic class Test {\n\tpublic static void main(String[] args) {\n\t\t//实例化我们的美食天下报纸订阅服务\n\t\tNewsPaperFoodService foodService = new NewsPaperFoodService();\n\n\t\t//实例化订阅者张三、王五，并且把美食天下订阅服务传入构造方法中实现自动注册服务\n\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan(foodService);\n\t\tSubscriberWangwu wangwu = new SubscriberWangwu(foodService);\n\t\t\n\t\t//美食天下相关的报纸-食材中国报纸发布出版，然后通知美食天下报纸的订阅者\n\t\tfoodService.newsPaperPublish(\"食材中国\");\n\t}\n}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n>\n>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n>\n\n可以看到，我们通过张三、王五订阅者的构造方法中传入美食天下订阅者服务实现了自动注册(其实我们把addObserver方法写在了构造方法中而已)；然后当新报纸发布时，通知所有的美食订阅者。\n\n\n**三、测试-观察者被动注册**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t//实例化我们的美食天下报纸订阅服务\n\t\t\tNewsPaperFoodService foodService = new NewsPaperFoodService();\n\t\t\t\n\t\t\t/**\n\t\t\t * 实例化张三、王五订阅者(无参数构造方法)\n\t\t\t */\n\t\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan();\n\t\t\tSubscriberWangwu wangwu = new SubscriberWangwu();\n\t\t\t\n\t\t\t/**\n\t\t\t * 调用订阅者服务的addObserver方法实现注册\n\t\t\t */\n\t\t\tfoodService.addObserver(zhangsan);\n\t\t\tfoodService.addObserver(wangwu);\n\t\t\t\n\t\t\tfoodService.newsPaperPublish(\"食材中国\");\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n>\n>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n\n\n\n**四、解读**\n\n1. 订阅服务中调用通知观察者方法之前需要先调用setChanged()方法\n\n```java\n\n\tsetChanged();//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态\n\tnotifyObservers();//调用通知所有订阅者的方法\n\n```\n\n如果不提前调用setChanged方法时，则虽然调用了notifyObservers方法去通知所有订阅者，但是这个方法内部并没有真正意义去通知所有的订阅者。下面我们看看两个方法的联系。\n\n>setChanged()\n\n```java\n\t\n\t protected synchronized void setChanged() {\n        changed = true;\n     }\n\n```\n\n*这个方法主要是设置boolean类型变量changed的值为true，其实这个变量就是一个开关*\n\n>notifyObservers()\n\n```java\n\n\tpublic void notifyObservers(Object arg) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n\t\t\t/* \n             * 根据changed值控制是否执行真正意义的通知观察者操作\n             */\n            if (!changed)\n                return;\n            arrLocal = obs.toArray(); //把订阅者集合中的数据赋值给待局部遍历数组，以供下面的批量通知\n\t\t\t\n            clearChanged();//将changed变量赋值为false\n        }\n\t\t\n\t\t/* \n         * 循环遍历订阅者集合中的数据，并调用订阅者的update方法实现发送通知操作\n         */\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n```\n\n>addObserver(Observer o)\n\n```java\n\t\t\n\t   /**\n\t\t* 首先在Observable类中定义了以下两个变量\n\t\t*/\n\t\t\n\t   private boolean changed = false;\n       private Vector<Observer> obs;\n\n\t    /** 通过构造方法初始化订阅者集合 */\n\t\n\t    public Observable() {\n\t        obs = new Vector<>();\n\t    }\n\t\n\t    /**\n\t     * 把观察者添加到订阅者集合中\n\t     */\n\t    public synchronized void addObserver(Observer o) {\n\t        if (o == null)\n\t            throw new NullPointerException();\n\t        if (!obs.contains(o)) {\n\t            obs.addElement(o);\n\t        }\n\t    }\n\n```\n\n>clearChanged() \n\n```java\n\t\n\t protected synchronized void clearChanged() {\n        changed = false; //将changed变量赋值为false\n    }\n\n```\n\n通过java原生支持的类和接口是不是就非常容易的实现了观察者模式\n\n","source":"_posts/设计模式-观察者模式-用java原生Observable、Observer简化观察者模式实现.md","raw":"---\ntitle: 设计模式--观察者模式(用java原生Observable、Observer简化观察者模式实现)\ndate: 2017-05-12 13:10:36\ncategories: 设计模式\ntags: java\n---\n\n在上一篇介绍的观察者模式中我们用基本的代码实现了报纸订阅的场景，感觉写了很多代码才实现这个模式，比如在报纸订阅中需要提供订阅、取消订阅、通知订阅者等等通用的方法，在定义观察者时需要提供被通知的通用方法；\n\n<!--more-->\n\n其实在java中已经原生支持了观察者模式的实现，我们通过java原生提供的Observable(类)、Observer(接口)可以很简单的实现观察者模式，比如上面描述的提供订阅、取消订阅、通知订阅者等通用方法他都进行了实现，我们直接调用即可。\n\n\n**一、Observer接口实现观察者**\n\n**1. 订阅者-张三**\n\n我们只需要把订阅者实现Observer接口，并且实现update方法即可完整定义成一个观察者\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 张三订阅者，实现了Observer接口\n\t * @author mapingsheng\n\t */\n\tpublic class SubscriberZhangsan implements Observer{\n\t\n\t\tObservable observable; //订阅服务超类\n\t\t\n\t\t/**\n\t\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册\n\t\t * @param observable\n\t\t */\n\t\tSubscriberZhangsan(Observable observable){\n\t\t\tthis.observable = observable;\n\t\t\tobservable.addObserver(this);\n\t\t}\n\t\n\t\tSubscriberZhangsan(){}\n\t\t\n\t\t/**\n\t\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)\n\t\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法\n\t\t */\n\t\t@Override\n\t\tpublic void update(Observable o, Object arg) {\n\t\t\tif(o instanceof NewsPaperFoodService){\n\t\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;\n\t\t\t\tSystem.out.println(\"wangwu收到通知： \"+foodService.getNotice());\n\t\t\t}else if(o instanceof NewsPaperSportService){\n\t\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;\n\t\t\t\tSystem.out.println(\"wangwu收到通知： \"+sportService.getNotice());\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n**2. 订阅者-王五**\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 王五订阅者，实现了Observer接口\n\t * @author mapingsheng\n\t */\n\tpublic class SubscriberWangwu implements Observer {\n\t\n\t\tObservable observable; //订阅服务超类\n\t\t\n\t\t/**\n\t\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册\n\t\t * @param observable\n\t\t */\n\t\tSubscriberWangwu(Observable observable){\n\t\t\tthis.observable = observable;\n\t\t\tobservable.addObserver(this);\n\t\t}\n\t\t\n\t\tSubscriberWangwu(){}\n\t\t\n\t\t/**\n\t\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)\n\t\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法\n\t\t */\n\t\t@Override\n\t\tpublic void update(Observable o, Object arg) {\n\t\t\tif(o instanceof NewsPaperFoodService){\n\t\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;\n\t\t\t\tSystem.out.println(\"zhangsan收到通知： \"+foodService.getNotice());\n\t\t\t}else if(o instanceof NewsPaperSportService){\n\t\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;\n\t\t\t\tSystem.out.println(\"zhangsan收到通知： \"+sportService.getNotice());\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n**二、Observable类实现订阅服务**\n\n**1. 《美食天下》-报纸订阅服务**\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 美食天下-报纸订阅服务，只需继承Observable类即可\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperFoodService extends Observable {\n\t\tprivate String pageName; //报纸类型名称\n\t\t\n\t\tprivate String notice; //通知短语\n\t\t\n\t\t/**\n\t\t * 新报纸发布方法\n\t\t * @param name 报纸的名称\n\t\t */\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name;\n\t\t\tthis.notice = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\tsetChanged();//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态\n\t\t\tnotifyObservers();//调用通知订阅者方法\n\t\t}\n\t\t/**\n\t\t * 覆写addObserver注册订阅服务\n\t\t */\n\t\t@Override\n\t\tpublic synchronized void addObserver(Observer o) {\n\t\t\tsuper.addObserver(o);\n\t\t\tthis.notice = \"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"+super.countObservers()+\" 人订阅\";\n\t\t\t\n\t\t\to.update(this, notice); //当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取新发布的报纸名称\n\t\t * @return\n\t\t */\n\t\tpublic String getPageName() {\n\t\t\treturn pageName;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 设置新发布的报纸名称\n\t\t * @return\n\t\t */\n\t\tpublic void setPageName(String pageName) {\n\t\t\tthis.pageName = pageName;\n\t\t}\n\t\t/**\n\t\t * 设置通知提示短语\n\t\t * @return\n\t\t */\n\t\tpublic void setNotice(String notice) {\n\t\t\tthis.notice = notice;\n\t\t}\n\t\t/**\n\t\t * 获取提示短语\n\t\t * @return\n\t\t */\n\t\tpublic String getNotice(){\n\t\t\treturn notice;\n\t\t}\n\t}\n\n```\n\n**2. 《体育速递》-报纸订阅服务**\n\n```java\n\n\timport java.util.Observable;\n\timport java.util.Observer;\n\t\n\t/**\n\t * 体育速递-报纸订阅服务，只需继承Observable类即可\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperSportService extends Observable {\n\t\tprivate String pageName;  //报纸类型名称\n\t\tprivate String notice; //通知短语\n\t\t\n\t\t/**\n\t\t * 新报纸发布方法\n\t\t * @param name\n\t\t */\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name;\n\t\t\tsetChanged();//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态\n\t\t\tnotifyObservers();\n\t\t}\n\t\t\n\t\t/**\n\t\t * 覆写addObserver注册订阅服务\n\t\t */\n\t\t@Override\n\t\tpublic synchronized void addObserver(Observer o) {\n\t\t\tsuper.addObserver(o);\n\t\t\tthis.notice = \"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共 46元，截止目前一共有 \"+super.countObservers()+\" 人订阅\";\n\t\t\t\n\t\t\to.update(this, notice); //当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执\n\t\t}\n\t\n\t\tpublic String getNotice(){\n\t\t\tString str = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic String getPageName() {\n\t\t\treturn pageName;\n\t\t}\n\t\n\t\tpublic void setPageName(String pageName) {\n\t\t\tthis.pageName = pageName;\n\t\t}\n\t\n\t\tpublic void setNotice(String notice) {\n\t\t\tthis.notice = notice;\n\t\t}\n\t}\n\n```\n\n**三、测试-观察者主动注册**\n\n```java\n\n\tpublic class Test {\n\tpublic static void main(String[] args) {\n\t\t//实例化我们的美食天下报纸订阅服务\n\t\tNewsPaperFoodService foodService = new NewsPaperFoodService();\n\n\t\t//实例化订阅者张三、王五，并且把美食天下订阅服务传入构造方法中实现自动注册服务\n\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan(foodService);\n\t\tSubscriberWangwu wangwu = new SubscriberWangwu(foodService);\n\t\t\n\t\t//美食天下相关的报纸-食材中国报纸发布出版，然后通知美食天下报纸的订阅者\n\t\tfoodService.newsPaperPublish(\"食材中国\");\n\t}\n}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n>\n>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n>\n\n可以看到，我们通过张三、王五订阅者的构造方法中传入美食天下订阅者服务实现了自动注册(其实我们把addObserver方法写在了构造方法中而已)；然后当新报纸发布时，通知所有的美食订阅者。\n\n\n**三、测试-观察者被动注册**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t//实例化我们的美食天下报纸订阅服务\n\t\t\tNewsPaperFoodService foodService = new NewsPaperFoodService();\n\t\t\t\n\t\t\t/**\n\t\t\t * 实例化张三、王五订阅者(无参数构造方法)\n\t\t\t */\n\t\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan();\n\t\t\tSubscriberWangwu wangwu = new SubscriberWangwu();\n\t\t\t\n\t\t\t/**\n\t\t\t * 调用订阅者服务的addObserver方法实现注册\n\t\t\t */\n\t\t\tfoodService.addObserver(zhangsan);\n\t\t\tfoodService.addObserver(wangwu);\n\t\t\t\n\t\t\tfoodService.newsPaperPublish(\"食材中国\");\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n>\n>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅\n\n\n\n**四、解读**\n\n1. 订阅服务中调用通知观察者方法之前需要先调用setChanged()方法\n\n```java\n\n\tsetChanged();//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态\n\tnotifyObservers();//调用通知所有订阅者的方法\n\n```\n\n如果不提前调用setChanged方法时，则虽然调用了notifyObservers方法去通知所有订阅者，但是这个方法内部并没有真正意义去通知所有的订阅者。下面我们看看两个方法的联系。\n\n>setChanged()\n\n```java\n\t\n\t protected synchronized void setChanged() {\n        changed = true;\n     }\n\n```\n\n*这个方法主要是设置boolean类型变量changed的值为true，其实这个变量就是一个开关*\n\n>notifyObservers()\n\n```java\n\n\tpublic void notifyObservers(Object arg) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n\t\t\t/* \n             * 根据changed值控制是否执行真正意义的通知观察者操作\n             */\n            if (!changed)\n                return;\n            arrLocal = obs.toArray(); //把订阅者集合中的数据赋值给待局部遍历数组，以供下面的批量通知\n\t\t\t\n            clearChanged();//将changed变量赋值为false\n        }\n\t\t\n\t\t/* \n         * 循环遍历订阅者集合中的数据，并调用订阅者的update方法实现发送通知操作\n         */\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n```\n\n>addObserver(Observer o)\n\n```java\n\t\t\n\t   /**\n\t\t* 首先在Observable类中定义了以下两个变量\n\t\t*/\n\t\t\n\t   private boolean changed = false;\n       private Vector<Observer> obs;\n\n\t    /** 通过构造方法初始化订阅者集合 */\n\t\n\t    public Observable() {\n\t        obs = new Vector<>();\n\t    }\n\t\n\t    /**\n\t     * 把观察者添加到订阅者集合中\n\t     */\n\t    public synchronized void addObserver(Observer o) {\n\t        if (o == null)\n\t            throw new NullPointerException();\n\t        if (!obs.contains(o)) {\n\t            obs.addElement(o);\n\t        }\n\t    }\n\n```\n\n>clearChanged() \n\n```java\n\t\n\t protected synchronized void clearChanged() {\n        changed = false; //将changed变量赋值为false\n    }\n\n```\n\n通过java原生支持的类和接口是不是就非常容易的实现了观察者模式\n\n","slug":"设计模式-观察者模式-用java原生Observable、Observer简化观察者模式实现","published":1,"updated":"2018-07-08T09:37:48.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pks006s30tzymwklsf3","content":"<p>在上一篇介绍的观察者模式中我们用基本的代码实现了报纸订阅的场景，感觉写了很多代码才实现这个模式，比如在报纸订阅中需要提供订阅、取消订阅、通知订阅者等等通用的方法，在定义观察者时需要提供被通知的通用方法；</p>\n<a id=\"more\"></a>\n<p>其实在java中已经原生支持了观察者模式的实现，我们通过java原生提供的Observable(类)、Observer(接口)可以很简单的实现观察者模式，比如上面描述的提供订阅、取消订阅、通知订阅者等通用方法他都进行了实现，我们直接调用即可。</p>\n<p><strong>一、Observer接口实现观察者</strong></p>\n<p><strong>1. 订阅者-张三</strong></p>\n<p>我们只需要把订阅者实现Observer接口，并且实现update方法即可完整定义成一个观察者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 张三订阅者，实现了Observer接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberZhangsan</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tObservable observable; <span class=\"comment\">//订阅服务超类</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> observable</div><div class=\"line\">\t */</div><div class=\"line\">\tSubscriberZhangsan(Observable observable)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.observable = observable;</div><div class=\"line\">\t\tobservable.addObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tSubscriberZhangsan()&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)</div><div class=\"line\">\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperFoodService)&#123;</div><div class=\"line\">\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"wangwu收到通知： \"</span>+foodService.getNotice());</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperSportService)&#123;</div><div class=\"line\">\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"wangwu收到通知： \"</span>+sportService.getNotice());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 订阅者-王五</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 王五订阅者，实现了Observer接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberWangwu</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tObservable observable; <span class=\"comment\">//订阅服务超类</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> observable</div><div class=\"line\">\t */</div><div class=\"line\">\tSubscriberWangwu(Observable observable)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.observable = observable;</div><div class=\"line\">\t\tobservable.addObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tSubscriberWangwu()&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)</div><div class=\"line\">\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperFoodService)&#123;</div><div class=\"line\">\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"zhangsan收到通知： \"</span>+foodService.getNotice());</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperSportService)&#123;</div><div class=\"line\">\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"zhangsan收到通知： \"</span>+sportService.getNotice());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>二、Observable类实现订阅服务</strong></p>\n<p><strong>1. 《美食天下》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 美食天下-报纸订阅服务，只需继承Observable类即可</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperFoodService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName; <span class=\"comment\">//报纸类型名称</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String notice; <span class=\"comment\">//通知短语</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name 报纸的名称</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\tsetChanged();<span class=\"comment\">//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态</span></div><div class=\"line\">\t\tnotifyObservers();<span class=\"comment\">//调用通知订阅者方法</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 覆写addObserver注册订阅服务</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.addObserver(o);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"</span>+<span class=\"keyword\">super</span>.countObservers()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\to.update(<span class=\"keyword\">this</span>, notice); <span class=\"comment\">//当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取新发布的报纸名称</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPageName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 设置新发布的报纸名称</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageName</span><span class=\"params\">(String pageName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 设置通知提示短语</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNotice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取提示短语</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNotice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 《体育速递》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 体育速递-报纸订阅服务，只需继承Observable类即可</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperSportService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName;  <span class=\"comment\">//报纸类型名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String notice; <span class=\"comment\">//通知短语</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name;</div><div class=\"line\">\t\tsetChanged();<span class=\"comment\">//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态</span></div><div class=\"line\">\t\tnotifyObservers();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 覆写addObserver注册订阅服务</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.addObserver(o);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共 46元，截止目前一共有 \"</span>+<span class=\"keyword\">super</span>.countObservers()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\to.update(<span class=\"keyword\">this</span>, notice); <span class=\"comment\">//当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNotice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tString str = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> str;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPageName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageName</span><span class=\"params\">(String pageName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNotice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>三、测试-观察者主动注册</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//实例化我们的美食天下报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperFoodService foodService = <span class=\"keyword\">new</span> NewsPaperFoodService();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//实例化订阅者张三、王五，并且把美食天下订阅服务传入构造方法中实现自动注册服务</span></div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan(foodService);</div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu(foodService);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//美食天下相关的报纸-食材中国报纸发布出版，然后通知美食天下报纸的订阅者</span></div><div class=\"line\">\t\tfoodService.newsPaperPublish(<span class=\"string\">\"食材中国\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n<p>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n</blockquote>\n<p>可以看到，我们通过张三、王五订阅者的构造方法中传入美食天下订阅者服务实现了自动注册(其实我们把addObserver方法写在了构造方法中而已)；然后当新报纸发布时，通知所有的美食订阅者。</p>\n<p><strong>三、测试-观察者被动注册</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//实例化我们的美食天下报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperFoodService foodService = <span class=\"keyword\">new</span> NewsPaperFoodService();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t * 实例化张三、王五订阅者(无参数构造方法)</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan();</div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t * 调用订阅者服务的addObserver方法实现注册</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tfoodService.addObserver(zhangsan);</div><div class=\"line\">\t\tfoodService.addObserver(wangwu);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfoodService.newsPaperPublish(<span class=\"string\">\"食材中国\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n<p>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n</blockquote>\n<p><strong>四、解读</strong></p>\n<ol>\n<li>订阅服务中调用通知观察者方法之前需要先调用setChanged()方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">setChanged();<span class=\"comment\">//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态</span></div><div class=\"line\">notifyObservers();<span class=\"comment\">//调用通知所有订阅者的方法</span></div></pre></td></tr></table></figure>\n<p>如果不提前调用setChanged方法时，则虽然调用了notifyObservers方法去通知所有订阅者，但是这个方法内部并没有真正意义去通知所有的订阅者。下面我们看看两个方法的联系。</p>\n<blockquote>\n<p>setChanged()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      changed = <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><em>这个方法主要是设置boolean类型变量changed的值为true，其实这个变量就是一个开关</em></p>\n<blockquote>\n<p>notifyObservers()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</div><div class=\"line\">       Object[] arrLocal;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* </span></div><div class=\"line\">            * 根据changed值控制是否执行真正意义的通知观察者操作</div><div class=\"line\">            */</div><div class=\"line\">           <span class=\"keyword\">if</span> (!changed)</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           arrLocal = obs.toArray(); <span class=\"comment\">//把订阅者集合中的数据赋值给待局部遍历数组，以供下面的批量通知</span></div><div class=\"line\">\t\t</div><div class=\"line\">           clearChanged();<span class=\"comment\">//将changed变量赋值为false</span></div><div class=\"line\">       &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/* </span></div><div class=\"line\">        * 循环遍历订阅者集合中的数据，并调用订阅者的update方法实现发送通知操作</div><div class=\"line\">        */</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)</div><div class=\"line\">           ((Observer)arrLocal[i]).update(<span class=\"keyword\">this</span>, arg);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>addObserver(Observer o)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">* 首先在Observable类中定义了以下两个变量</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/** 通过构造方法初始化订阅者集合 */</span></div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</div><div class=\"line\">   &#125;</div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    * 把观察者添加到订阅者集合中</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</div><div class=\"line\">           obs.addElement(o);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>clearChanged() </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      changed = <span class=\"keyword\">false</span>; <span class=\"comment\">//将changed变量赋值为false</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过java原生支持的类和接口是不是就非常容易的实现了观察者模式</p>\n","excerpt":"<p>在上一篇介绍的观察者模式中我们用基本的代码实现了报纸订阅的场景，感觉写了很多代码才实现这个模式，比如在报纸订阅中需要提供订阅、取消订阅、通知订阅者等等通用的方法，在定义观察者时需要提供被通知的通用方法；</p>","more":"<p>其实在java中已经原生支持了观察者模式的实现，我们通过java原生提供的Observable(类)、Observer(接口)可以很简单的实现观察者模式，比如上面描述的提供订阅、取消订阅、通知订阅者等通用方法他都进行了实现，我们直接调用即可。</p>\n<p><strong>一、Observer接口实现观察者</strong></p>\n<p><strong>1. 订阅者-张三</strong></p>\n<p>我们只需要把订阅者实现Observer接口，并且实现update方法即可完整定义成一个观察者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 张三订阅者，实现了Observer接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberZhangsan</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tObservable observable; <span class=\"comment\">//订阅服务超类</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> observable</div><div class=\"line\">\t */</span></div><div class=\"line\">\tSubscriberZhangsan(Observable observable)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.observable = observable;</div><div class=\"line\">\t\tobservable.addObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tSubscriberZhangsan()&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)</div><div class=\"line\">\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperFoodService)&#123;</div><div class=\"line\">\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"wangwu收到通知： \"</span>+foodService.getNotice());</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperSportService)&#123;</div><div class=\"line\">\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"wangwu收到通知： \"</span>+sportService.getNotice());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 订阅者-王五</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 王五订阅者，实现了Observer接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberWangwu</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tObservable observable; <span class=\"comment\">//订阅服务超类</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 通过观察者的构造函数初始化订阅服务，并且调用订阅服务超类的addObserver方法把当前对象进行注册</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> observable</div><div class=\"line\">\t */</span></div><div class=\"line\">\tSubscriberWangwu(Observable observable)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.observable = observable;</div><div class=\"line\">\t\tobservable.addObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tSubscriberWangwu()&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 覆写观察者的update方法，这里的update方法就等同于被通知的方法(notice)</div><div class=\"line\">\t * 由于一个观察者可能订阅不同的报纸，所以我们需要对传入的订阅服务类进行类型判断，并且根据类型调用不同的通知方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperFoodService)&#123;</div><div class=\"line\">\t\t\tNewsPaperFoodService  foodService = (NewsPaperFoodService)o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"zhangsan收到通知： \"</span>+foodService.getNotice());</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> NewsPaperSportService)&#123;</div><div class=\"line\">\t\t\tNewsPaperSportService sportService = (NewsPaperSportService) o;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"zhangsan收到通知： \"</span>+sportService.getNotice());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>二、Observable类实现订阅服务</strong></p>\n<p><strong>1. 《美食天下》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 美食天下-报纸订阅服务，只需继承Observable类即可</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperFoodService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName; <span class=\"comment\">//报纸类型名称</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String notice; <span class=\"comment\">//通知短语</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name 报纸的名称</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\tsetChanged();<span class=\"comment\">//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态</span></div><div class=\"line\">\t\tnotifyObservers();<span class=\"comment\">//调用通知订阅者方法</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 覆写addObserver注册订阅服务</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.addObserver(o);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"</span>+<span class=\"keyword\">super</span>.countObservers()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\to.update(<span class=\"keyword\">this</span>, notice); <span class=\"comment\">//当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取新发布的报纸名称</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPageName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 设置新发布的报纸名称</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageName</span><span class=\"params\">(String pageName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 设置通知提示短语</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNotice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取提示短语</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNotice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 《体育速递》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 体育速递-报纸订阅服务，只需继承Observable类即可</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperSportService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName;  <span class=\"comment\">//报纸类型名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String notice; <span class=\"comment\">//通知短语</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name;</div><div class=\"line\">\t\tsetChanged();<span class=\"comment\">//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态</span></div><div class=\"line\">\t\tnotifyObservers();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 覆写addObserver注册订阅服务</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.addObserver(o);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共 46元，截止目前一共有 \"</span>+<span class=\"keyword\">super</span>.countObservers()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\to.update(<span class=\"keyword\">this</span>, notice); <span class=\"comment\">//当订阅成功后，调用订阅者的update方法，向该订阅者发送订阅回执</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNotice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tString str = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> str;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPageName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageName</span><span class=\"params\">(String pageName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = pageName;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNotice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.notice = notice;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>三、测试-观察者主动注册</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//实例化我们的美食天下报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperFoodService foodService = <span class=\"keyword\">new</span> NewsPaperFoodService();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//实例化订阅者张三、王五，并且把美食天下订阅服务传入构造方法中实现自动注册服务</span></div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan(foodService);</div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu(foodService);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//美食天下相关的报纸-食材中国报纸发布出版，然后通知美食天下报纸的订阅者</span></div><div class=\"line\">\t\tfoodService.newsPaperPublish(<span class=\"string\">\"食材中国\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n<p>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n</blockquote>\n<p>可以看到，我们通过张三、王五订阅者的构造方法中传入美食天下订阅者服务实现了自动注册(其实我们把addObserver方法写在了构造方法中而已)；然后当新报纸发布时，通知所有的美食订阅者。</p>\n<p><strong>三、测试-观察者被动注册</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//实例化我们的美食天下报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperFoodService foodService = <span class=\"keyword\">new</span> NewsPaperFoodService();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t * 实例化张三、王五订阅者(无参数构造方法)</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan();</div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t * 调用订阅者服务的addObserver方法实现注册</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\tfoodService.addObserver(zhangsan);</div><div class=\"line\">\t\tfoodService.addObserver(wangwu);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfoodService.newsPaperPublish(<span class=\"string\">\"食材中国\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n<p>wangwu收到通知： 【新报纸发布】您好，我报社最近出版了 《食材中国》 欢迎订阅</p>\n</blockquote>\n<p><strong>四、解读</strong></p>\n<ol>\n<li>订阅服务中调用通知观察者方法之前需要先调用setChanged()方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">setChanged();<span class=\"comment\">//这里需要注意，当我们需要通知所有订阅者时，需要调用该方法标记对应的状态</span></div><div class=\"line\">notifyObservers();<span class=\"comment\">//调用通知所有订阅者的方法</span></div></pre></td></tr></table></figure>\n<p>如果不提前调用setChanged方法时，则虽然调用了notifyObservers方法去通知所有订阅者，但是这个方法内部并没有真正意义去通知所有的订阅者。下面我们看看两个方法的联系。</p>\n<blockquote>\n<p>setChanged()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      changed = <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><em>这个方法主要是设置boolean类型变量changed的值为true，其实这个变量就是一个开关</em></p>\n<blockquote>\n<p>notifyObservers()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</div><div class=\"line\">       Object[] arrLocal;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* </div><div class=\"line\">            * 根据changed值控制是否执行真正意义的通知观察者操作</div><div class=\"line\">            */</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (!changed)</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           arrLocal = obs.toArray(); <span class=\"comment\">//把订阅者集合中的数据赋值给待局部遍历数组，以供下面的批量通知</span></div><div class=\"line\">\t\t</div><div class=\"line\">           clearChanged();<span class=\"comment\">//将changed变量赋值为false</span></div><div class=\"line\">       &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/* </div><div class=\"line\">        * 循环遍历订阅者集合中的数据，并调用订阅者的update方法实现发送通知操作</div><div class=\"line\">        */</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)</div><div class=\"line\">           ((Observer)arrLocal[i]).update(<span class=\"keyword\">this</span>, arg);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>addObserver(Observer o)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">* 首先在Observable类中定义了以下两个变量</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/** 通过构造方法初始化订阅者集合 */</span></div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</div><div class=\"line\">   &#125;</div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">    * 把观察者添加到订阅者集合中</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</div><div class=\"line\">           obs.addElement(o);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>clearChanged() </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      changed = <span class=\"keyword\">false</span>; <span class=\"comment\">//将changed变量赋值为false</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过java原生支持的类和接口是不是就非常容易的实现了观察者模式</p>"},{"title":"通过curl命令调用调试RestApi接口","date":"2017-05-10T08:38:56.000Z","_content":"\n昨天仿真环境上面的rest接口突然调不通了，然后就需要到服务器中查看什么原因，后台服务器的物理环境是跳板机-->服务器；也就是说不能直接链接到系统的运行服务器中的，需要先链接到跳板机上面，然后通过跳板机进入系统服务器中，由于系统服务器是linux操作系统，所以就需要在命令行中对一些接口地址进行联调调试操作，就用到了curl命令处理，具体下面分步骤说明其用法。\n\n<!--more-->\n\n**一、语法**\n\n>-X/--request [GET|POST|PUT|DELETE|…]  用于指定请求方式\n>\n>-H/--header                           设置请求头(header)信息\n>\n>-i/--include                          请求接口后，输出响应的header信息\n>\n>-d/--data                             设置请求中的参数 \n>\n>-v/--verbose                          输出更加详细的响应信息\n>\n\n**二、示例调用**\n\n**1. 请求一个普通接口地址**\n\n>curl -i  \"http://*******/appteacher/*****/years\"\n\n请求接口后输出如下信息：\n\n>HTTP/1.1 200 OK\nServer: nginx\nDate: Wed, 10 May 2017 09:00:48 GMT\nContent-Type: text/html;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nKeep-Alive: timeout=7200\nVary: Accept-Encoding\nSet-Cookie: BIGipServerPY_JiaoShiDuan_App_Pool_80=3960187072.20480.0000; path=/\n>\n>{\"rlt\":true,\"msg\":\"操作成功\",\"code\":\"000000\",\"time\":\"2017-05-10 17:00:48\",\"data\":[{\"value\":2017,\"name\":\"2017年\"},{\"value\":2016,\"name\":\"2016年\"},{\"value\":2015,\"name\":\"2015年\"}]}\n>\n\n可以看到当我们加入 -i 参数后，header响应信息页输出了；另外如果不加-X 参数设定请求类型，则默认是Get请求方式。\n\n**2. 最简化的请求一个方式为GET的接口**\n\n>curl  \"http://*******/appteacher/*****/years\"\n\n请求接口后输出如下信息：\n\n>{\"rlt\":true,\"msg\":\"操作成功\",\"code\":\"000000\",\"time\":\"2017-05-10 17:00:48\",\"data\":[{\"value\":2017,\"name\":\"2017年\"},{\"value\":2016,\"name\":\"2016年\"},{\"value\":2015,\"name\":\"2015年\"}]}\n>\n\n可以看到我们把 -i 参数去除后，就不会输出响应header信息了，输出的仅仅是结果集数据\n\n\n**3. 请求一个post类型的接口，需要在header中设置参数**\n\n>curl -i -H \"area:010\" -H \"token:2435984u3943\" -H \"md5:o0priosj9od\" -X POST -d \"id=544339848ij9s&type=1\"  \"http://*******/appteacher/*****/order\"\n\n注：具体响应就不贴出来了。\n\n- 每一个header参数值都需要用一个 -H标识，多个header参数就用多个-H 进行指定，使用-d参数设定请求中的参数，多个参数可以直接用 & 分割即可；通过-X 命令设置请求方法为POST\n\n\n**4. 可以在curl命令加上一个 -v 参数，查看更详细的响应信息**\n\n>curl -i -H \"area:010\" -H \"token:2435984u3943\" -H \"md5:o0priosj9od\" -X POST -d \"id=544339848ij9s&type=1\"  \"http://*******/appteacher/*****/order\" -v\n\n\n通过以上命令就可以直接在命令窗口中联调测试restApi接口了！","source":"_posts/通过curl命令调用调试RestApi接口.md","raw":"---\ntitle: 通过curl命令调用调试RestApi接口\ndate: 2017-05-10 16:38:56\ncategories: java\ntags: java\n---\n\n昨天仿真环境上面的rest接口突然调不通了，然后就需要到服务器中查看什么原因，后台服务器的物理环境是跳板机-->服务器；也就是说不能直接链接到系统的运行服务器中的，需要先链接到跳板机上面，然后通过跳板机进入系统服务器中，由于系统服务器是linux操作系统，所以就需要在命令行中对一些接口地址进行联调调试操作，就用到了curl命令处理，具体下面分步骤说明其用法。\n\n<!--more-->\n\n**一、语法**\n\n>-X/--request [GET|POST|PUT|DELETE|…]  用于指定请求方式\n>\n>-H/--header                           设置请求头(header)信息\n>\n>-i/--include                          请求接口后，输出响应的header信息\n>\n>-d/--data                             设置请求中的参数 \n>\n>-v/--verbose                          输出更加详细的响应信息\n>\n\n**二、示例调用**\n\n**1. 请求一个普通接口地址**\n\n>curl -i  \"http://*******/appteacher/*****/years\"\n\n请求接口后输出如下信息：\n\n>HTTP/1.1 200 OK\nServer: nginx\nDate: Wed, 10 May 2017 09:00:48 GMT\nContent-Type: text/html;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nKeep-Alive: timeout=7200\nVary: Accept-Encoding\nSet-Cookie: BIGipServerPY_JiaoShiDuan_App_Pool_80=3960187072.20480.0000; path=/\n>\n>{\"rlt\":true,\"msg\":\"操作成功\",\"code\":\"000000\",\"time\":\"2017-05-10 17:00:48\",\"data\":[{\"value\":2017,\"name\":\"2017年\"},{\"value\":2016,\"name\":\"2016年\"},{\"value\":2015,\"name\":\"2015年\"}]}\n>\n\n可以看到当我们加入 -i 参数后，header响应信息页输出了；另外如果不加-X 参数设定请求类型，则默认是Get请求方式。\n\n**2. 最简化的请求一个方式为GET的接口**\n\n>curl  \"http://*******/appteacher/*****/years\"\n\n请求接口后输出如下信息：\n\n>{\"rlt\":true,\"msg\":\"操作成功\",\"code\":\"000000\",\"time\":\"2017-05-10 17:00:48\",\"data\":[{\"value\":2017,\"name\":\"2017年\"},{\"value\":2016,\"name\":\"2016年\"},{\"value\":2015,\"name\":\"2015年\"}]}\n>\n\n可以看到我们把 -i 参数去除后，就不会输出响应header信息了，输出的仅仅是结果集数据\n\n\n**3. 请求一个post类型的接口，需要在header中设置参数**\n\n>curl -i -H \"area:010\" -H \"token:2435984u3943\" -H \"md5:o0priosj9od\" -X POST -d \"id=544339848ij9s&type=1\"  \"http://*******/appteacher/*****/order\"\n\n注：具体响应就不贴出来了。\n\n- 每一个header参数值都需要用一个 -H标识，多个header参数就用多个-H 进行指定，使用-d参数设定请求中的参数，多个参数可以直接用 & 分割即可；通过-X 命令设置请求方法为POST\n\n\n**4. 可以在curl命令加上一个 -v 参数，查看更详细的响应信息**\n\n>curl -i -H \"area:010\" -H \"token:2435984u3943\" -H \"md5:o0priosj9od\" -X POST -d \"id=544339848ij9s&type=1\"  \"http://*******/appteacher/*****/order\" -v\n\n\n通过以上命令就可以直接在命令窗口中联调测试restApi接口了！","slug":"通过curl命令调用调试RestApi接口","published":1,"updated":"2018-07-08T09:37:48.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkv006w30tzz9rd57eo","content":"<p>昨天仿真环境上面的rest接口突然调不通了，然后就需要到服务器中查看什么原因，后台服务器的物理环境是跳板机–&gt;服务器；也就是说不能直接链接到系统的运行服务器中的，需要先链接到跳板机上面，然后通过跳板机进入系统服务器中，由于系统服务器是linux操作系统，所以就需要在命令行中对一些接口地址进行联调调试操作，就用到了curl命令处理，具体下面分步骤说明其用法。</p>\n<a id=\"more\"></a>\n<p><strong>一、语法</strong></p>\n<blockquote>\n<p>-X/–request [GET|POST|PUT|DELETE|…]  用于指定请求方式</p>\n<p>-H/–header                           设置请求头(header)信息</p>\n<p>-i/–include                          请求接口后，输出响应的header信息</p>\n<p>-d/–data                             设置请求中的参数 </p>\n<p>-v/–verbose                          输出更加详细的响应信息</p>\n</blockquote>\n<p><strong>二、示例调用</strong></p>\n<p><strong>1. 请求一个普通接口地址</strong></p>\n<blockquote>\n<p>curl -i  “<a href=\"http://*******/appteacher/*****/years\" target=\"_blank\" rel=\"external\">http://*******/appteacher/*****/years</a>“</p>\n</blockquote>\n<p>请求接口后输出如下信息：</p>\n<blockquote>\n<p>HTTP/1.1 200 OK<br>Server: nginx<br>Date: Wed, 10 May 2017 09:00:48 GMT<br>Content-Type: text/html;charset=UTF-8<br>Transfer-Encoding: chunked<br>Connection: keep-alive<br>Keep-Alive: timeout=7200<br>Vary: Accept-Encoding<br>Set-Cookie: BIGipServerPY_JiaoShiDuan_App_Pool_80=3960187072.20480.0000; path=/</p>\n<p>{“rlt”:true,”msg”:”操作成功”,”code”:”000000”,”time”:”2017-05-10 17:00:48”,”data”:[{“value”:2017,”name”:”2017年”},{“value”:2016,”name”:”2016年”},{“value”:2015,”name”:”2015年”}]}</p>\n</blockquote>\n<p>可以看到当我们加入 -i 参数后，header响应信息页输出了；另外如果不加-X 参数设定请求类型，则默认是Get请求方式。</p>\n<p><strong>2. 最简化的请求一个方式为GET的接口</strong></p>\n<blockquote>\n<p>curl  “<a href=\"http://*******/appteacher/*****/years\" target=\"_blank\" rel=\"external\">http://*******/appteacher/*****/years</a>“</p>\n</blockquote>\n<p>请求接口后输出如下信息：</p>\n<blockquote>\n<p>{“rlt”:true,”msg”:”操作成功”,”code”:”000000”,”time”:”2017-05-10 17:00:48”,”data”:[{“value”:2017,”name”:”2017年”},{“value”:2016,”name”:”2016年”},{“value”:2015,”name”:”2015年”}]}</p>\n</blockquote>\n<p>可以看到我们把 -i 参数去除后，就不会输出响应header信息了，输出的仅仅是结果集数据</p>\n<p><strong>3. 请求一个post类型的接口，需要在header中设置参数</strong></p>\n<blockquote>\n<p>curl -i -H “area:010” -H “token:2435984u3943” -H “md5:o0priosj9od” -X POST -d “id=544339848ij9s&amp;type=1”  “<a href=\"http://*******/appteacher/*****/order\" target=\"_blank\" rel=\"external\">http://*******/appteacher/*****/order</a>“</p>\n</blockquote>\n<p>注：具体响应就不贴出来了。</p>\n<ul>\n<li>每一个header参数值都需要用一个 -H标识，多个header参数就用多个-H 进行指定，使用-d参数设定请求中的参数，多个参数可以直接用 &amp; 分割即可；通过-X 命令设置请求方法为POST</li>\n</ul>\n<p><strong>4. 可以在curl命令加上一个 -v 参数，查看更详细的响应信息</strong></p>\n<blockquote>\n<p>curl -i -H “area:010” -H “token:2435984u3943” -H “md5:o0priosj9od” -X POST -d “id=544339848ij9s&amp;type=1”  “<a href=\"http://*******/appteacher/*****/order\" target=\"_blank\" rel=\"external\">http://*******/appteacher/*****/order</a>“ -v</p>\n</blockquote>\n<p>通过以上命令就可以直接在命令窗口中联调测试restApi接口了！</p>\n","excerpt":"<p>昨天仿真环境上面的rest接口突然调不通了，然后就需要到服务器中查看什么原因，后台服务器的物理环境是跳板机–&gt;服务器；也就是说不能直接链接到系统的运行服务器中的，需要先链接到跳板机上面，然后通过跳板机进入系统服务器中，由于系统服务器是linux操作系统，所以就需要在命令行中对一些接口地址进行联调调试操作，就用到了curl命令处理，具体下面分步骤说明其用法。</p>","more":"<p><strong>一、语法</strong></p>\n<blockquote>\n<p>-X/–request [GET|POST|PUT|DELETE|…]  用于指定请求方式</p>\n<p>-H/–header                           设置请求头(header)信息</p>\n<p>-i/–include                          请求接口后，输出响应的header信息</p>\n<p>-d/–data                             设置请求中的参数 </p>\n<p>-v/–verbose                          输出更加详细的响应信息</p>\n</blockquote>\n<p><strong>二、示例调用</strong></p>\n<p><strong>1. 请求一个普通接口地址</strong></p>\n<blockquote>\n<p>curl -i  “<a href=\"http://*******/appteacher/*****/years\">http://*******/appteacher/*****/years</a>“</p>\n</blockquote>\n<p>请求接口后输出如下信息：</p>\n<blockquote>\n<p>HTTP/1.1 200 OK<br>Server: nginx<br>Date: Wed, 10 May 2017 09:00:48 GMT<br>Content-Type: text/html;charset=UTF-8<br>Transfer-Encoding: chunked<br>Connection: keep-alive<br>Keep-Alive: timeout=7200<br>Vary: Accept-Encoding<br>Set-Cookie: BIGipServerPY_JiaoShiDuan_App_Pool_80=3960187072.20480.0000; path=/</p>\n<p>{“rlt”:true,”msg”:”操作成功”,”code”:”000000”,”time”:”2017-05-10 17:00:48”,”data”:[{“value”:2017,”name”:”2017年”},{“value”:2016,”name”:”2016年”},{“value”:2015,”name”:”2015年”}]}</p>\n</blockquote>\n<p>可以看到当我们加入 -i 参数后，header响应信息页输出了；另外如果不加-X 参数设定请求类型，则默认是Get请求方式。</p>\n<p><strong>2. 最简化的请求一个方式为GET的接口</strong></p>\n<blockquote>\n<p>curl  “<a href=\"http://*******/appteacher/*****/years\">http://*******/appteacher/*****/years</a>“</p>\n</blockquote>\n<p>请求接口后输出如下信息：</p>\n<blockquote>\n<p>{“rlt”:true,”msg”:”操作成功”,”code”:”000000”,”time”:”2017-05-10 17:00:48”,”data”:[{“value”:2017,”name”:”2017年”},{“value”:2016,”name”:”2016年”},{“value”:2015,”name”:”2015年”}]}</p>\n</blockquote>\n<p>可以看到我们把 -i 参数去除后，就不会输出响应header信息了，输出的仅仅是结果集数据</p>\n<p><strong>3. 请求一个post类型的接口，需要在header中设置参数</strong></p>\n<blockquote>\n<p>curl -i -H “area:010” -H “token:2435984u3943” -H “md5:o0priosj9od” -X POST -d “id=544339848ij9s&amp;type=1”  “<a href=\"http://*******/appteacher/*****/order\">http://*******/appteacher/*****/order</a>“</p>\n</blockquote>\n<p>注：具体响应就不贴出来了。</p>\n<ul>\n<li>每一个header参数值都需要用一个 -H标识，多个header参数就用多个-H 进行指定，使用-d参数设定请求中的参数，多个参数可以直接用 &amp; 分割即可；通过-X 命令设置请求方法为POST</li>\n</ul>\n<p><strong>4. 可以在curl命令加上一个 -v 参数，查看更详细的响应信息</strong></p>\n<blockquote>\n<p>curl -i -H “area:010” -H “token:2435984u3943” -H “md5:o0priosj9od” -X POST -d “id=544339848ij9s&amp;type=1”  “<a href=\"http://*******/appteacher/*****/order\">http://*******/appteacher/*****/order</a>“ -v</p>\n</blockquote>\n<p>通过以上命令就可以直接在命令窗口中联调测试restApi接口了！</p>"},{"title":"通过Nginx反向代理解决跨域问题","date":"2016-07-19T09:26:32.000Z","_content":" 有以下需求：\n\n1. 有两个独立运行的系统，用户系统(user)、发布系统(publish)\n2. publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；\n3. 因为两个系统部署在不同的服务器中运行，所以存在跨域问题\n4. 解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码\n\n![Alt text](http://soujava.com/images/kuayu.jpg)\n\n\n\n**注**：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：\n```java\n\tresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n```","source":"_posts/通过反向代理解决跨域问题.md","raw":"---\ntitle: 通过Nginx反向代理解决跨域问题\ndate: 2016-07-19 17:26:32\ncategories: Nginx\ntags: 跨域\n---\n 有以下需求：\n\n1. 有两个独立运行的系统，用户系统(user)、发布系统(publish)\n2. publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；\n3. 因为两个系统部署在不同的服务器中运行，所以存在跨域问题\n4. 解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码\n\n![Alt text](http://soujava.com/images/kuayu.jpg)\n\n\n\n**注**：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：\n```java\n\tresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n```","slug":"通过反向代理解决跨域问题","published":1,"updated":"2018-07-08T09:37:48.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkw007030tzgrl88nsg","content":"<p> 有以下需求：</p>\n<ol>\n<li>有两个独立运行的系统，用户系统(user)、发布系统(publish)</li>\n<li>publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；</li>\n<li>因为两个系统部署在不同的服务器中运行，所以存在跨域问题</li>\n<li>解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码</li>\n</ol>\n<p><img src=\"http://soujava.com/images/kuayu.jpg\" alt=\"Alt text\"></p>\n<p><strong>注</strong>：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p> 有以下需求：</p>\n<ol>\n<li>有两个独立运行的系统，用户系统(user)、发布系统(publish)</li>\n<li>publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；</li>\n<li>因为两个系统部署在不同的服务器中运行，所以存在跨域问题</li>\n<li>解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码</li>\n</ol>\n<p><img src=\"http://soujava.com/images/kuayu.jpg\" alt=\"Alt text\"></p>\n<p><strong>注</strong>：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</div></pre></td></tr></table></figure></p>\n"},{"title":"运用webGL实现3D效果-机器组装","date":"2018-02-02T08:27:07.000Z","_content":"\n在二次元的世界里，如果有些东西能以3D的效果展示，给人的感觉是完全不一样的，比如我们平时使用的地图导航上面显示的3D画面、教学场景中使用的几何教学演示、一些3D场景的动画等等，针对这些应用，完全可以使用webGL实现，并且在浏览器中无障碍展示，并且还可以添加交互功能。\n\n![Alt text](http://soujava.com/images/webgl1.png)\n\n<!--more-->\n\n由于3D是通过浏览器查看的，并且对应的数据源可以是多种格式（json、xml），说白了就是我们创建了一个静态的web网站，然后浏览网页中的3D场景而已；所以我们需要把对应的html页面部署到对应的web服务器中运行；大概的步骤如下：\n\n**一、部署步骤**\n\n>1.：安装nodejs服务\n\n参考：[CentOS系统安装nodeJs](http://soujava.com/CentOS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85nodeJs/)\n\n>2.：部署webGL示例网页到nodejs服务中\n\n\n- 新建node_server/publish文件夹\n- 新建nodejs服务脚本文件server.js\n\n```java\n\n\tvar http = require('http');\n\tvar express = require('express');\n\tvar app = express();\n\n\tapp.use(express.static(\"publish\")).listen(8080);//创建http服务，访问publish文件夹中的资源，并监听8080端口，等同于启动了tomcat服务\n\n```\n\n*通过上面两步，我们就成功搭建了一个web服务器！*\n\n- 把对应的3D示例相关web页面资源copy到publish目录中即可\n\n 源码地址：[github.com/mapingsheng\t](https://github.com/mapingsheng/webGL/tree/master/node_server_demo)\n\n- 运行*node server.js* 启动服务，然后打开浏览器浏览效果\n\n![Alt text](http://soujava.com/images/webgl2.png)\n\n![Alt text](http://soujava.com/images/webgl3.png)\n\n![Alt text](http://soujava.com/images/webgl4.png)\n\n\n>3.：下面看一下3D场景的动画展示\n\n![Alt text](http://soujava.com/images/webgl5.gif)\n\n![Alt text](http://soujava.com/images/webgl6.gif)","source":"_posts/运用webGL实现3D效果-机器组装.md","raw":"---\ntitle: 运用webGL实现3D效果-机器组装\ndate: 2018-02-02 16:27:07\ncategories: 3D\ntags: webGL\n---\n\n在二次元的世界里，如果有些东西能以3D的效果展示，给人的感觉是完全不一样的，比如我们平时使用的地图导航上面显示的3D画面、教学场景中使用的几何教学演示、一些3D场景的动画等等，针对这些应用，完全可以使用webGL实现，并且在浏览器中无障碍展示，并且还可以添加交互功能。\n\n![Alt text](http://soujava.com/images/webgl1.png)\n\n<!--more-->\n\n由于3D是通过浏览器查看的，并且对应的数据源可以是多种格式（json、xml），说白了就是我们创建了一个静态的web网站，然后浏览网页中的3D场景而已；所以我们需要把对应的html页面部署到对应的web服务器中运行；大概的步骤如下：\n\n**一、部署步骤**\n\n>1.：安装nodejs服务\n\n参考：[CentOS系统安装nodeJs](http://soujava.com/CentOS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85nodeJs/)\n\n>2.：部署webGL示例网页到nodejs服务中\n\n\n- 新建node_server/publish文件夹\n- 新建nodejs服务脚本文件server.js\n\n```java\n\n\tvar http = require('http');\n\tvar express = require('express');\n\tvar app = express();\n\n\tapp.use(express.static(\"publish\")).listen(8080);//创建http服务，访问publish文件夹中的资源，并监听8080端口，等同于启动了tomcat服务\n\n```\n\n*通过上面两步，我们就成功搭建了一个web服务器！*\n\n- 把对应的3D示例相关web页面资源copy到publish目录中即可\n\n 源码地址：[github.com/mapingsheng\t](https://github.com/mapingsheng/webGL/tree/master/node_server_demo)\n\n- 运行*node server.js* 启动服务，然后打开浏览器浏览效果\n\n![Alt text](http://soujava.com/images/webgl2.png)\n\n![Alt text](http://soujava.com/images/webgl3.png)\n\n![Alt text](http://soujava.com/images/webgl4.png)\n\n\n>3.：下面看一下3D场景的动画展示\n\n![Alt text](http://soujava.com/images/webgl5.gif)\n\n![Alt text](http://soujava.com/images/webgl6.gif)","slug":"运用webGL实现3D效果-机器组装","published":1,"updated":"2018-07-08T09:37:48.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pky007330tzdtmkwulf","content":"<p>在二次元的世界里，如果有些东西能以3D的效果展示，给人的感觉是完全不一样的，比如我们平时使用的地图导航上面显示的3D画面、教学场景中使用的几何教学演示、一些3D场景的动画等等，针对这些应用，完全可以使用webGL实现，并且在浏览器中无障碍展示，并且还可以添加交互功能。</p>\n<p><img src=\"http://soujava.com/images/webgl1.png\" alt=\"Alt text\"></p>\n<a id=\"more\"></a>\n<p>由于3D是通过浏览器查看的，并且对应的数据源可以是多种格式（json、xml），说白了就是我们创建了一个静态的web网站，然后浏览网页中的3D场景而已；所以我们需要把对应的html页面部署到对应的web服务器中运行；大概的步骤如下：</p>\n<p><strong>一、部署步骤</strong></p>\n<blockquote>\n<p>1.：安装nodejs服务</p>\n</blockquote>\n<p>参考：<a href=\"http://soujava.com/CentOS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85nodeJs/\" target=\"_blank\" rel=\"external\">CentOS系统安装nodeJs</a></p>\n<blockquote>\n<p>2.：部署webGL示例网页到nodejs服务中</p>\n</blockquote>\n<ul>\n<li>新建node_server/publish文件夹</li>\n<li>新建nodejs服务脚本文件server.js</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var http = require(<span class=\"string\">'http'</span>);</div><div class=\"line\">var express = require(<span class=\"string\">'express'</span>);</div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(express.<span class=\"keyword\">static</span>(<span class=\"string\">\"publish\"</span>)).listen(<span class=\"number\">8080</span>);<span class=\"comment\">//创建http服务，访问publish文件夹中的资源，并监听8080端口，等同于启动了tomcat服务</span></div></pre></td></tr></table></figure>\n<p><em>通过上面两步，我们就成功搭建了一个web服务器！</em></p>\n<ul>\n<li><p>把对应的3D示例相关web页面资源copy到publish目录中即可</p>\n<p>源码地址：<a href=\"https://github.com/mapingsheng/webGL/tree/master/node_server_demo\" target=\"_blank\" rel=\"external\">github.com/mapingsheng    </a></p>\n</li>\n<li><p>运行<em>node server.js</em> 启动服务，然后打开浏览器浏览效果</p>\n</li>\n</ul>\n<p><img src=\"http://soujava.com/images/webgl2.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/webgl3.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/webgl4.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>3.：下面看一下3D场景的动画展示</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/webgl5.gif\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/webgl6.gif\" alt=\"Alt text\"></p>\n","excerpt":"<p>在二次元的世界里，如果有些东西能以3D的效果展示，给人的感觉是完全不一样的，比如我们平时使用的地图导航上面显示的3D画面、教学场景中使用的几何教学演示、一些3D场景的动画等等，针对这些应用，完全可以使用webGL实现，并且在浏览器中无障碍展示，并且还可以添加交互功能。</p>\n<p><img src=\"http://soujava.com/images/webgl1.png\" alt=\"Alt text\"></p>","more":"<p>由于3D是通过浏览器查看的，并且对应的数据源可以是多种格式（json、xml），说白了就是我们创建了一个静态的web网站，然后浏览网页中的3D场景而已；所以我们需要把对应的html页面部署到对应的web服务器中运行；大概的步骤如下：</p>\n<p><strong>一、部署步骤</strong></p>\n<blockquote>\n<p>1.：安装nodejs服务</p>\n</blockquote>\n<p>参考：<a href=\"http://soujava.com/CentOS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85nodeJs/\">CentOS系统安装nodeJs</a></p>\n<blockquote>\n<p>2.：部署webGL示例网页到nodejs服务中</p>\n</blockquote>\n<ul>\n<li>新建node_server/publish文件夹</li>\n<li>新建nodejs服务脚本文件server.js</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var http = require(<span class=\"string\">'http'</span>);</div><div class=\"line\">var express = require(<span class=\"string\">'express'</span>);</div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(express.<span class=\"keyword\">static</span>(<span class=\"string\">\"publish\"</span>)).listen(<span class=\"number\">8080</span>);<span class=\"comment\">//创建http服务，访问publish文件夹中的资源，并监听8080端口，等同于启动了tomcat服务</span></div></pre></td></tr></table></figure>\n<p><em>通过上面两步，我们就成功搭建了一个web服务器！</em></p>\n<ul>\n<li><p>把对应的3D示例相关web页面资源copy到publish目录中即可</p>\n<p>源码地址：<a href=\"https://github.com/mapingsheng/webGL/tree/master/node_server_demo\">github.com/mapingsheng    </a></p>\n</li>\n<li><p>运行<em>node server.js</em> 启动服务，然后打开浏览器浏览效果</p>\n</li>\n</ul>\n<p><img src=\"http://soujava.com/images/webgl2.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/webgl3.png\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/webgl4.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>3.：下面看一下3D场景的动画展示</p>\n</blockquote>\n<p><img src=\"http://soujava.com/images/webgl5.gif\" alt=\"Alt text\"></p>\n<p><img src=\"http://soujava.com/images/webgl6.gif\" alt=\"Alt text\"></p>"},{"title":"设计模式--观察者模式","date":"2017-05-12T01:50:19.000Z","_content":"\n说到观察者模式-从字面意思的理解就是某些个实物观察着另一个实物，当被观察的那个实物发生变化时，那些观察它的实物会收到通知或者会相应的发生变化。\n\n![Alt text](http://soujava.com/images/guanchazhe.jpg)\n\n生活中的例子也是到处都是啊，比如平常生活中经常订阅一些报纸来阅读，有的人可能喜欢体育，那么就订阅体育竞技相关的报纸；有的人可能喜欢美食，那么就订阅美食相关的报纸；还比如手机手机上面的天气预报显示，我们可以只显示查看我们感兴趣的城市，那么这也是订阅形式的一种，所以我们也可以把观察者模式理解成为订-阅模式，就相当于上面举的例子场景一样。\n\n<!--more-->\n\n**一、模拟报纸订阅来实现观察者模式**\n\n先说明一下我们的需求：\n> - 一般报社都提供【报纸订阅服务】，不管你通过什么方式订阅都是可以的\n>\n> - 报纸订阅服务一般包括【订阅】、【取消】、【订阅回执】、【新报纸发布】、【通知订阅者】等等功能\n>\n> - 订阅者除了可以使用报纸订阅的相关服务外，每一个订阅者还需要提供一个【被通知】的服务，不然新报纸发布、订阅成功后怎么收到通知呢？就好比去银行存钱，存钱成功后会收到一个回执单一样。\n>\n> - 当订阅者订阅某一类型报纸后，可以收到订阅回执提示；当有新类型的报纸发布出品后，需要通知相关订阅者，这有点类似个性化推荐，比如某一个订阅者订阅了美食相关的报纸，那么当我们出版了《食材天下》新报纸时需要通知美食类的报纸订阅者，因为美食和食材是有关联的嘛，这就是个性化推荐。\n> \n> 由于一个报社不可能只出版一个类型的报纸，所以报纸订阅服务应该是通用的吧，所以我们定义一个报纸订阅接口，然后让不同类型的报纸订阅服务都实现这个通用的订阅接口。\n> \n> 由于每一个订阅者都需要提供一个被通知的方法，所以我们就独立定义一个订阅者接口，并且在接口中定义一个被通知的方法，后续的每一个订阅者都实现这个通用的订阅者接口。\n\n\n**1. 订阅者通用接口**\n\n```java\n\n\t/**\n\t * 订阅者通用接口，后续每一个订阅者都需要实现该接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface SubscriberService {\n\t\t/**\n\t\t * 被通知的公共方法\n\t\t * @param notice -通知的提示语\n\t\t */\n\t\tpublic void notice(String notice);\n\t}\n\n```\n\n**2. 订阅者-张三**\n\n```java\n\n\t/**\n\t * 张三订阅者，实现了通用的订阅者接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class SubscriberZhangsan implements SubscriberService {\n\t\t/**\n\t\t * 张三被通知的方法\n\t\t */\n\t\t@Override\n\t\tpublic void notice(String notice) {\n\t\t\tSystem.out.println(\"zhangsan收到通知： \"+notice);\n\t\t}\n\t}\n\n```\n\n**3. 订阅者-王五**\n\n```java\n\n\t/**\n\t * 王五订阅者，实现了通用的订阅者接口\n\t * @author mapingsheng\n\t */\n\tpublic class SubscriberWangwu implements SubscriberService {\n\t\t/**\n\t\t * 王五被通知的方法\n\t\t */\n\t\t@Override\n\t\tpublic void notice(String notice) {\n\t\t\tSystem.out.println(\"wangwu收到通知： \"+notice);\n\t\t}\n\t}\n\n```\n\n**4. 通用报纸订阅服务接口**\n\n```java\n\n\t**\n\t * 报纸订阅服务接口，任何一种报纸发布出品都需要实现该接口\n\t * @author mapingsheng\n\t */\n\tpublic interface NewsPaperService {\n\t\t/**\n\t\t * 注册订阅者服务方法--订阅\n\t\t * @param subscriberService 订阅者接口\n\t\t */\n\t\tpublic void register(SubscriberService subscriberService);\n\t\t\n\t\t/**\n\t\t * 移除订阅者服务方法--取消订阅\n\t\t * @param subscriberService  订阅者接口\n\t\t */\n\t\tpublic void remove(SubscriberService subscriberService);\n\t\t\n\t\t/**\n\t\t * 订阅成功后通知订阅者的方法--订阅回执\n\t\t * @param subscriberService\n\t\t */\n\t\tpublic void noticeForRegister(SubscriberService subscriberService);\n\t\t\n\t\t/**\n\t\t * 新报纸发布出品方法\n\t\t * @param name  报纸类型名称\n\t\t */\n\t\tpublic void newsPaperPublish(String paperName);\n\t\t\n\t\t/**\n\t\t * 单个通知订阅者方法，主要针对新报纸发布时调用\n\t\t * @param name\n\t\t */\n\t\tpublic void noticeForNewPaperPublish();\n\t}\n\n```\n\n**5. 《美食天下》-报纸订阅服务**\n\n```java\n\n\t/**\n\t * 美食天下-报纸订阅服务类\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperFoodServiceImpl implements NewsPaperService {\n\t\t\n\t\tprivate String pageName;//报纸类型\n\t\t/**\n\t\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中\n\t\t */\n\t\tstatic List<SubscriberService> subscriberList = new LinkedList<SubscriberService>();\n\t\t/**\n\t\t * 订阅方法\n\t\t */\n\t\tpublic void register(SubscriberService subscriberService){\n\t\t\tsubscriberList.add(subscriberService);//将订阅者添加到订阅成员集合中\n\t\t\tnoticeForRegister(subscriberService);//调用订阅回执服务方法通知该订阅者\n\t\t}\n\t\t/**\n\t\t * 取消订阅\n\t\t */\n\t\tpublic void remove(SubscriberService subscriberService){\n\t\t\t/**\n\t\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者\n\t\t\t */\n\t\t\tint index = subscriberList.indexOf(subscriberService);\n\t\t\tif(index!=-1){\n\t\t\t\tsubscriberList.remove(index);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者\n\t\t */\n\t\tpublic void noticeForNewPaperPublish(){\n\t\t\tfor(int i=0;i<subscriberList.size();i++){\n\t\t\t\tSubscriberService subscriberService = subscriberList.get(i);\n\t\t\t\tString notice = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\t\tsubscriberService.notice(notice); //调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者\n\t\t */\n\t\t@Override\n\t\tpublic void noticeForRegister(SubscriberService subscriberService) {\n\t\t\tint i = subscriberList.indexOf(subscriberService);\n\t\t\tString notice = \"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"+subscriberList.size()+\" 人订阅\";\n\t\t\tsubscriberService.notice(notice);\n\t\t}\n\t\t/**\n\t\t * 新报纸发布\n\t\t */\n\t\t@Override\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name; //设置报纸名称\n\t\t\tnoticeForNewPaperPublish(); //通知该类型报纸相关的订阅列表中的订阅者\n\t\t}\n\t}\n\n```\n\n**6. 《体育速递》-报纸订阅服务**\n\n```java\n\n\t/**\n\t * 体育速递-报纸订阅服务\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperSprotServiceImpl implements NewsPaperService {\n\t\n\t\tprivate String pageName;//报纸类型名称\n\t\t/**\n\t\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中\n\t\t */\n\t\tstatic List<SubscriberService> subscriberList = new LinkedList<SubscriberService>();\n\t\t/**\n\t\t * 订阅方法\n\t\t */\n\t\tpublic void register(SubscriberService subscriberService){\n\t\t\tsubscriberList.add(subscriberService);//将订阅者添加到订阅成员集合中\n\t\t\tnoticeForRegister(subscriberService);//调用订阅回执服务方法通知该订阅者\n\t\t}\n\t\t\n\t\t/**\n\t\t * 取消订阅\n\t\t */\n\t\tpublic void remove(SubscriberService subscriberService){\n\t\t\t/**\n\t\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者\n\t\t\t */\n\t\t\tint index = subscriberList.indexOf(subscriberService);\n\t\t\tif(index!=-1){\n\t\t\t\tsubscriberList.remove(index);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者\n\t\t */\n\t\tpublic void noticeForNewPaperPublish(){\n\t\t\tfor(int i=0;i<subscriberList.size();i++){\n\t\t\t\tSubscriberService subscriberService = subscriberList.get(i);\n\t\t\t\tString notice = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\t\tsubscriberService.notice(notice); //调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者\n\t\t */\n\t\t@Override\n\t\tpublic void noticeForRegister(SubscriberService subscriberService) {\n\t\t\tint i = subscriberList.indexOf(subscriberService);\n\t\t\tString notice = \"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 \"+subscriberList.size()+\" 人订阅\";\n\t\t\tsubscriberService.notice(notice);\n\t\t}\n\t\t/**\n\t\t * 新报纸发布\n\t\t */\n\t\t@Override\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name; //设置报纸名称\n\t\t\tnoticeForNewPaperPublish(); //通知该类型报纸相关的订阅列表中的订阅者\n\t\t}\n\t}\n\n```\n\n**7. 测试--订阅者调用订阅服务、并且收到订阅回执**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan();//实例化-张三订阅者\n\t\t\tSubscriberWangwu wangwu = new SubscriberWangwu();//实例化-王五订阅者\n\t\t\t\n\t\t\t//实例化-《美食天下》报纸订阅服务\n\t\t\tNewsPaperService foodService = new NewsPaperFoodServiceImpl();\n\t\t\tfoodService.register(wangwu);//王五订阅美食天下报纸\n\t\t\tfoodService.register(zhangsan);//张三订阅美食天下报纸\n\t\t\t\n\t\t\t//实例化-《体育速递》报纸订阅服务\n\t\t\tNewsPaperService sportService = new NewsPaperSprotServiceImpl();\n\t\t\tsportService.register(zhangsan);//张三订阅体育速递报纸\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 1 人订阅\n>\n\n可以看到张三、王五都订阅了美食天下报纸，所以都收到了【订阅回执】，并且各自订阅时都统计出当前的订阅人数；而仅仅张三订阅了【体育速递】报纸，所以也仅仅张三收到了订阅回执。\n\n**8. 测试--订阅者订阅报纸、然后取消订阅、新报纸发布出版并通知相关订阅者**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan();//实例化-张三订阅者\n\t\t\tSubscriberWangwu wangwu = new SubscriberWangwu();//实例化-王五订阅者\n\t\t\t\n\t\t    //实例化-《美食天下》报纸订阅服务\n\t\t\tNewsPaperService foodService = new NewsPaperFoodServiceImpl();\n\t\t\tfoodService.register(wangwu); //王五订阅美食天下报纸\n\t\t\tfoodService.register(zhangsan); //张三订阅美食天下报纸\n\t\t\t\n\t\t\tfoodService.remove(wangwu);//王五【取消订阅】了美食天下报纸\n\t\t\t\n\t\t\t//新报纸-《食材中国》发布出版，理论上应该个性化推荐给《美食天下》报纸的订阅者\n\t\t\tfoodService.newsPaperPublish(\"食材中国\");\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材天下》 欢迎订阅\n>\n\n*注：首先张三、王五都订阅了美食天下报纸，所以都收到了订阅回执通知；后来由于王五取消订阅了美食天下的报纸，所以下面的新报纸发布出版--《食材中国》发布时，应该通知的美食天下报纸的订阅者中没有王五，仅仅通知了张三*\n\n\n截至目前，我们已经通过观察者模式实现了报纸订阅的场景，要注意的是上面代码中，我们都是面向接口实现的，比如注册订阅者、通知订阅者等等。\n\n```java\n\n\tpublic void register(SubscriberService subscriberService){\n\t\tsubscriberList.add(subscriberService);//将订阅者添加到订阅成员集合中\n\t\tnoticeForRegister(subscriberService);//调用订阅回执服务方法通知该订阅者\n\t}\n\n```\n\n上述方法中我们传递参数都是通用订阅者接口-SubscriberService；这样的话我们在后续新增其他订阅者后，只要后续的订阅者实现了通用的订阅者接口，那么就可以直接调用订阅服务，不需要做任何代码变化，所以我们需要了解以下设计原则：\n\n>找出程序中会变化的方面，然后将其和固定不变的方面相分离---在观察者模式中，会改变的是主题(报纸发布)状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题\n>\n>针对接口变化，不针对实现编程---主题(报纸订阅)与观察者(订阅者)都使用接口观察者利用主题的接口调用主题接口的方法进行注册，而主题利用观察者通用接口中的被通知方法通知观察者，这样可以让两者之间运行正常，又同时具有松耦合的优点。\n>\n>多用组合，少用继承---观察者模式利用“组合”将许多观察者组合进主题中，对象之间的这种关系不是通过继承产生的，而是运行时利用组合的方式产生的\n\n\n","source":"_posts/设计模式-观察者模式.md","raw":"---\ntitle: 设计模式--观察者模式\ndate: 2017-05-12 09:50:19\ncategories: 设计模式\ntags: java\n---\n\n说到观察者模式-从字面意思的理解就是某些个实物观察着另一个实物，当被观察的那个实物发生变化时，那些观察它的实物会收到通知或者会相应的发生变化。\n\n![Alt text](http://soujava.com/images/guanchazhe.jpg)\n\n生活中的例子也是到处都是啊，比如平常生活中经常订阅一些报纸来阅读，有的人可能喜欢体育，那么就订阅体育竞技相关的报纸；有的人可能喜欢美食，那么就订阅美食相关的报纸；还比如手机手机上面的天气预报显示，我们可以只显示查看我们感兴趣的城市，那么这也是订阅形式的一种，所以我们也可以把观察者模式理解成为订-阅模式，就相当于上面举的例子场景一样。\n\n<!--more-->\n\n**一、模拟报纸订阅来实现观察者模式**\n\n先说明一下我们的需求：\n> - 一般报社都提供【报纸订阅服务】，不管你通过什么方式订阅都是可以的\n>\n> - 报纸订阅服务一般包括【订阅】、【取消】、【订阅回执】、【新报纸发布】、【通知订阅者】等等功能\n>\n> - 订阅者除了可以使用报纸订阅的相关服务外，每一个订阅者还需要提供一个【被通知】的服务，不然新报纸发布、订阅成功后怎么收到通知呢？就好比去银行存钱，存钱成功后会收到一个回执单一样。\n>\n> - 当订阅者订阅某一类型报纸后，可以收到订阅回执提示；当有新类型的报纸发布出品后，需要通知相关订阅者，这有点类似个性化推荐，比如某一个订阅者订阅了美食相关的报纸，那么当我们出版了《食材天下》新报纸时需要通知美食类的报纸订阅者，因为美食和食材是有关联的嘛，这就是个性化推荐。\n> \n> 由于一个报社不可能只出版一个类型的报纸，所以报纸订阅服务应该是通用的吧，所以我们定义一个报纸订阅接口，然后让不同类型的报纸订阅服务都实现这个通用的订阅接口。\n> \n> 由于每一个订阅者都需要提供一个被通知的方法，所以我们就独立定义一个订阅者接口，并且在接口中定义一个被通知的方法，后续的每一个订阅者都实现这个通用的订阅者接口。\n\n\n**1. 订阅者通用接口**\n\n```java\n\n\t/**\n\t * 订阅者通用接口，后续每一个订阅者都需要实现该接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic interface SubscriberService {\n\t\t/**\n\t\t * 被通知的公共方法\n\t\t * @param notice -通知的提示语\n\t\t */\n\t\tpublic void notice(String notice);\n\t}\n\n```\n\n**2. 订阅者-张三**\n\n```java\n\n\t/**\n\t * 张三订阅者，实现了通用的订阅者接口\n\t * @author mapingsheng\n\t *\n\t */\n\tpublic class SubscriberZhangsan implements SubscriberService {\n\t\t/**\n\t\t * 张三被通知的方法\n\t\t */\n\t\t@Override\n\t\tpublic void notice(String notice) {\n\t\t\tSystem.out.println(\"zhangsan收到通知： \"+notice);\n\t\t}\n\t}\n\n```\n\n**3. 订阅者-王五**\n\n```java\n\n\t/**\n\t * 王五订阅者，实现了通用的订阅者接口\n\t * @author mapingsheng\n\t */\n\tpublic class SubscriberWangwu implements SubscriberService {\n\t\t/**\n\t\t * 王五被通知的方法\n\t\t */\n\t\t@Override\n\t\tpublic void notice(String notice) {\n\t\t\tSystem.out.println(\"wangwu收到通知： \"+notice);\n\t\t}\n\t}\n\n```\n\n**4. 通用报纸订阅服务接口**\n\n```java\n\n\t**\n\t * 报纸订阅服务接口，任何一种报纸发布出品都需要实现该接口\n\t * @author mapingsheng\n\t */\n\tpublic interface NewsPaperService {\n\t\t/**\n\t\t * 注册订阅者服务方法--订阅\n\t\t * @param subscriberService 订阅者接口\n\t\t */\n\t\tpublic void register(SubscriberService subscriberService);\n\t\t\n\t\t/**\n\t\t * 移除订阅者服务方法--取消订阅\n\t\t * @param subscriberService  订阅者接口\n\t\t */\n\t\tpublic void remove(SubscriberService subscriberService);\n\t\t\n\t\t/**\n\t\t * 订阅成功后通知订阅者的方法--订阅回执\n\t\t * @param subscriberService\n\t\t */\n\t\tpublic void noticeForRegister(SubscriberService subscriberService);\n\t\t\n\t\t/**\n\t\t * 新报纸发布出品方法\n\t\t * @param name  报纸类型名称\n\t\t */\n\t\tpublic void newsPaperPublish(String paperName);\n\t\t\n\t\t/**\n\t\t * 单个通知订阅者方法，主要针对新报纸发布时调用\n\t\t * @param name\n\t\t */\n\t\tpublic void noticeForNewPaperPublish();\n\t}\n\n```\n\n**5. 《美食天下》-报纸订阅服务**\n\n```java\n\n\t/**\n\t * 美食天下-报纸订阅服务类\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperFoodServiceImpl implements NewsPaperService {\n\t\t\n\t\tprivate String pageName;//报纸类型\n\t\t/**\n\t\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中\n\t\t */\n\t\tstatic List<SubscriberService> subscriberList = new LinkedList<SubscriberService>();\n\t\t/**\n\t\t * 订阅方法\n\t\t */\n\t\tpublic void register(SubscriberService subscriberService){\n\t\t\tsubscriberList.add(subscriberService);//将订阅者添加到订阅成员集合中\n\t\t\tnoticeForRegister(subscriberService);//调用订阅回执服务方法通知该订阅者\n\t\t}\n\t\t/**\n\t\t * 取消订阅\n\t\t */\n\t\tpublic void remove(SubscriberService subscriberService){\n\t\t\t/**\n\t\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者\n\t\t\t */\n\t\t\tint index = subscriberList.indexOf(subscriberService);\n\t\t\tif(index!=-1){\n\t\t\t\tsubscriberList.remove(index);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者\n\t\t */\n\t\tpublic void noticeForNewPaperPublish(){\n\t\t\tfor(int i=0;i<subscriberList.size();i++){\n\t\t\t\tSubscriberService subscriberService = subscriberList.get(i);\n\t\t\t\tString notice = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\t\tsubscriberService.notice(notice); //调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者\n\t\t */\n\t\t@Override\n\t\tpublic void noticeForRegister(SubscriberService subscriberService) {\n\t\t\tint i = subscriberList.indexOf(subscriberService);\n\t\t\tString notice = \"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"+subscriberList.size()+\" 人订阅\";\n\t\t\tsubscriberService.notice(notice);\n\t\t}\n\t\t/**\n\t\t * 新报纸发布\n\t\t */\n\t\t@Override\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name; //设置报纸名称\n\t\t\tnoticeForNewPaperPublish(); //通知该类型报纸相关的订阅列表中的订阅者\n\t\t}\n\t}\n\n```\n\n**6. 《体育速递》-报纸订阅服务**\n\n```java\n\n\t/**\n\t * 体育速递-报纸订阅服务\n\t * @author mapingsheng\n\t */\n\tpublic class NewsPaperSprotServiceImpl implements NewsPaperService {\n\t\n\t\tprivate String pageName;//报纸类型名称\n\t\t/**\n\t\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中\n\t\t */\n\t\tstatic List<SubscriberService> subscriberList = new LinkedList<SubscriberService>();\n\t\t/**\n\t\t * 订阅方法\n\t\t */\n\t\tpublic void register(SubscriberService subscriberService){\n\t\t\tsubscriberList.add(subscriberService);//将订阅者添加到订阅成员集合中\n\t\t\tnoticeForRegister(subscriberService);//调用订阅回执服务方法通知该订阅者\n\t\t}\n\t\t\n\t\t/**\n\t\t * 取消订阅\n\t\t */\n\t\tpublic void remove(SubscriberService subscriberService){\n\t\t\t/**\n\t\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者\n\t\t\t */\n\t\t\tint index = subscriberList.indexOf(subscriberService);\n\t\t\tif(index!=-1){\n\t\t\t\tsubscriberList.remove(index);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者\n\t\t */\n\t\tpublic void noticeForNewPaperPublish(){\n\t\t\tfor(int i=0;i<subscriberList.size();i++){\n\t\t\t\tSubscriberService subscriberService = subscriberList.get(i);\n\t\t\t\tString notice = \"【新报纸发布】您好，我报社最近出版了 《\"+pageName+\"》 欢迎订阅\";\n\t\t\t\tsubscriberService.notice(notice); //调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者\n\t\t */\n\t\t@Override\n\t\tpublic void noticeForRegister(SubscriberService subscriberService) {\n\t\t\tint i = subscriberList.indexOf(subscriberService);\n\t\t\tString notice = \"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 \"+subscriberList.size()+\" 人订阅\";\n\t\t\tsubscriberService.notice(notice);\n\t\t}\n\t\t/**\n\t\t * 新报纸发布\n\t\t */\n\t\t@Override\n\t\tpublic void newsPaperPublish(String name){\n\t\t\tthis.pageName = name; //设置报纸名称\n\t\t\tnoticeForNewPaperPublish(); //通知该类型报纸相关的订阅列表中的订阅者\n\t\t}\n\t}\n\n```\n\n**7. 测试--订阅者调用订阅服务、并且收到订阅回执**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan();//实例化-张三订阅者\n\t\t\tSubscriberWangwu wangwu = new SubscriberWangwu();//实例化-王五订阅者\n\t\t\t\n\t\t\t//实例化-《美食天下》报纸订阅服务\n\t\t\tNewsPaperService foodService = new NewsPaperFoodServiceImpl();\n\t\t\tfoodService.register(wangwu);//王五订阅美食天下报纸\n\t\t\tfoodService.register(zhangsan);//张三订阅美食天下报纸\n\t\t\t\n\t\t\t//实例化-《体育速递》报纸订阅服务\n\t\t\tNewsPaperService sportService = new NewsPaperSprotServiceImpl();\n\t\t\tsportService.register(zhangsan);//张三订阅体育速递报纸\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 1 人订阅\n>\n\n可以看到张三、王五都订阅了美食天下报纸，所以都收到了【订阅回执】，并且各自订阅时都统计出当前的订阅人数；而仅仅张三订阅了【体育速递】报纸，所以也仅仅张三收到了订阅回执。\n\n**8. 测试--订阅者订阅报纸、然后取消订阅、新报纸发布出版并通知相关订阅者**\n\n```java\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tSubscriberZhangsan zhangsan = new SubscriberZhangsan();//实例化-张三订阅者\n\t\t\tSubscriberWangwu wangwu = new SubscriberWangwu();//实例化-王五订阅者\n\t\t\t\n\t\t    //实例化-《美食天下》报纸订阅服务\n\t\t\tNewsPaperService foodService = new NewsPaperFoodServiceImpl();\n\t\t\tfoodService.register(wangwu); //王五订阅美食天下报纸\n\t\t\tfoodService.register(zhangsan); //张三订阅美食天下报纸\n\t\t\t\n\t\t\tfoodService.remove(wangwu);//王五【取消订阅】了美食天下报纸\n\t\t\t\n\t\t\t//新报纸-《食材中国》发布出版，理论上应该个性化推荐给《美食天下》报纸的订阅者\n\t\t\tfoodService.newsPaperPublish(\"食材中国\");\n\t\t}\n\t}\n\n```\n\n以上代码运行结果：\n\n>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅\n>\n>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅\n>\n>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材天下》 欢迎订阅\n>\n\n*注：首先张三、王五都订阅了美食天下报纸，所以都收到了订阅回执通知；后来由于王五取消订阅了美食天下的报纸，所以下面的新报纸发布出版--《食材中国》发布时，应该通知的美食天下报纸的订阅者中没有王五，仅仅通知了张三*\n\n\n截至目前，我们已经通过观察者模式实现了报纸订阅的场景，要注意的是上面代码中，我们都是面向接口实现的，比如注册订阅者、通知订阅者等等。\n\n```java\n\n\tpublic void register(SubscriberService subscriberService){\n\t\tsubscriberList.add(subscriberService);//将订阅者添加到订阅成员集合中\n\t\tnoticeForRegister(subscriberService);//调用订阅回执服务方法通知该订阅者\n\t}\n\n```\n\n上述方法中我们传递参数都是通用订阅者接口-SubscriberService；这样的话我们在后续新增其他订阅者后，只要后续的订阅者实现了通用的订阅者接口，那么就可以直接调用订阅服务，不需要做任何代码变化，所以我们需要了解以下设计原则：\n\n>找出程序中会变化的方面，然后将其和固定不变的方面相分离---在观察者模式中，会改变的是主题(报纸发布)状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题\n>\n>针对接口变化，不针对实现编程---主题(报纸订阅)与观察者(订阅者)都使用接口观察者利用主题的接口调用主题接口的方法进行注册，而主题利用观察者通用接口中的被通知方法通知观察者，这样可以让两者之间运行正常，又同时具有松耦合的优点。\n>\n>多用组合，少用继承---观察者模式利用“组合”将许多观察者组合进主题中，对象之间的这种关系不是通过继承产生的，而是运行时利用组合的方式产生的\n\n\n","slug":"设计模式-观察者模式","published":1,"updated":"2018-07-08T09:37:48.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjcr1pkz007630tzxub5ty1u","content":"<p>说到观察者模式-从字面意思的理解就是某些个实物观察着另一个实物，当被观察的那个实物发生变化时，那些观察它的实物会收到通知或者会相应的发生变化。</p>\n<p><img src=\"http://soujava.com/images/guanchazhe.jpg\" alt=\"Alt text\"></p>\n<p>生活中的例子也是到处都是啊，比如平常生活中经常订阅一些报纸来阅读，有的人可能喜欢体育，那么就订阅体育竞技相关的报纸；有的人可能喜欢美食，那么就订阅美食相关的报纸；还比如手机手机上面的天气预报显示，我们可以只显示查看我们感兴趣的城市，那么这也是订阅形式的一种，所以我们也可以把观察者模式理解成为订-阅模式，就相当于上面举的例子场景一样。</p>\n<a id=\"more\"></a>\n<p><strong>一、模拟报纸订阅来实现观察者模式</strong></p>\n<p>先说明一下我们的需求：</p>\n<blockquote>\n<ul>\n<li><p>一般报社都提供【报纸订阅服务】，不管你通过什么方式订阅都是可以的</p>\n</li>\n<li><p>报纸订阅服务一般包括【订阅】、【取消】、【订阅回执】、【新报纸发布】、【通知订阅者】等等功能</p>\n</li>\n<li><p>订阅者除了可以使用报纸订阅的相关服务外，每一个订阅者还需要提供一个【被通知】的服务，不然新报纸发布、订阅成功后怎么收到通知呢？就好比去银行存钱，存钱成功后会收到一个回执单一样。</p>\n</li>\n<li><p>当订阅者订阅某一类型报纸后，可以收到订阅回执提示；当有新类型的报纸发布出品后，需要通知相关订阅者，这有点类似个性化推荐，比如某一个订阅者订阅了美食相关的报纸，那么当我们出版了《食材天下》新报纸时需要通知美食类的报纸订阅者，因为美食和食材是有关联的嘛，这就是个性化推荐。</p>\n</li>\n</ul>\n<p>由于一个报社不可能只出版一个类型的报纸，所以报纸订阅服务应该是通用的吧，所以我们定义一个报纸订阅接口，然后让不同类型的报纸订阅服务都实现这个通用的订阅接口。</p>\n<p>由于每一个订阅者都需要提供一个被通知的方法，所以我们就独立定义一个订阅者接口，并且在接口中定义一个被通知的方法，后续的每一个订阅者都实现这个通用的订阅者接口。</p>\n</blockquote>\n<p><strong>1. 订阅者通用接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 订阅者通用接口，后续每一个订阅者都需要实现该接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SubscriberService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 被通知的公共方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> notice -通知的提示语</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">(String notice)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 订阅者-张三</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 张三订阅者，实现了通用的订阅者接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberZhangsan</span> <span class=\"keyword\">implements</span> <span class=\"title\">SubscriberService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 张三被通知的方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zhangsan收到通知： \"</span>+notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3. 订阅者-王五</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 王五订阅者，实现了通用的订阅者接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberWangwu</span> <span class=\"keyword\">implements</span> <span class=\"title\">SubscriberService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 王五被通知的方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"wangwu收到通知： \"</span>+notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4. 通用报纸订阅服务接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">**</div><div class=\"line\"> * 报纸订阅服务接口，任何一种报纸发布出品都需要实现该接口</div><div class=\"line\"> * <span class=\"meta\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NewsPaperService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 注册订阅者服务方法--订阅</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> subscriberService 订阅者接口</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 移除订阅者服务方法--取消订阅</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> subscriberService  订阅者接口</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(SubscriberService subscriberService)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅成功后通知订阅者的方法--订阅回执</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> subscriberService</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForRegister</span><span class=\"params\">(SubscriberService subscriberService)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布出品方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name  报纸类型名称</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String paperName)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 单个通知订阅者方法，主要针对新报纸发布时调用</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForNewPaperPublish</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>5. 《美食天下》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 美食天下-报纸订阅服务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperFoodServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">NewsPaperService</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName;<span class=\"comment\">//报纸类型</span></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">static</span> List&lt;SubscriberService&gt; subscriberList = <span class=\"keyword\">new</span> LinkedList&lt;SubscriberService&gt;();</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\tsubscriberList.add(subscriberService);<span class=\"comment\">//将订阅者添加到订阅成员集合中</span></div><div class=\"line\">\t\tnoticeForRegister(subscriberService);<span class=\"comment\">//调用订阅回执服务方法通知该订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 取消订阅</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> index = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(index!=-<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tsubscriberList.remove(index);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForNewPaperPublish</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;subscriberList.size();i++)&#123;</div><div class=\"line\">\t\t\tSubscriberService subscriberService = subscriberList.get(i);</div><div class=\"line\">\t\t\tString notice = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\t\tsubscriberService.notice(notice); <span class=\"comment\">//调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForRegister</span><span class=\"params\">(SubscriberService subscriberService)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\tString notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"</span>+subscriberList.size()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\tsubscriberService.notice(notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name; <span class=\"comment\">//设置报纸名称</span></div><div class=\"line\">\t\tnoticeForNewPaperPublish(); <span class=\"comment\">//通知该类型报纸相关的订阅列表中的订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>6. 《体育速递》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 体育速递-报纸订阅服务</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperSprotServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">NewsPaperService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName;<span class=\"comment\">//报纸类型名称</span></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">static</span> List&lt;SubscriberService&gt; subscriberList = <span class=\"keyword\">new</span> LinkedList&lt;SubscriberService&gt;();</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅方法</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\tsubscriberList.add(subscriberService);<span class=\"comment\">//将订阅者添加到订阅成员集合中</span></div><div class=\"line\">\t\tnoticeForRegister(subscriberService);<span class=\"comment\">//调用订阅回执服务方法通知该订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 取消订阅</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> index = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(index!=-<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tsubscriberList.remove(index);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForNewPaperPublish</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;subscriberList.size();i++)&#123;</div><div class=\"line\">\t\t\tSubscriberService subscriberService = subscriberList.get(i);</div><div class=\"line\">\t\t\tString notice = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\t\tsubscriberService.notice(notice); <span class=\"comment\">//调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForRegister</span><span class=\"params\">(SubscriberService subscriberService)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\tString notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 \"</span>+subscriberList.size()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\tsubscriberService.notice(notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 新报纸发布</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name; <span class=\"comment\">//设置报纸名称</span></div><div class=\"line\">\t\tnoticeForNewPaperPublish(); <span class=\"comment\">//通知该类型报纸相关的订阅列表中的订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>7. 测试–订阅者调用订阅服务、并且收到订阅回执</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan();<span class=\"comment\">//实例化-张三订阅者</span></div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu();<span class=\"comment\">//实例化-王五订阅者</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//实例化-《美食天下》报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperService foodService = <span class=\"keyword\">new</span> NewsPaperFoodServiceImpl();</div><div class=\"line\">\t\tfoodService.register(wangwu);<span class=\"comment\">//王五订阅美食天下报纸</span></div><div class=\"line\">\t\tfoodService.register(zhangsan);<span class=\"comment\">//张三订阅美食天下报纸</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//实例化-《体育速递》报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperService sportService = <span class=\"keyword\">new</span> NewsPaperSprotServiceImpl();</div><div class=\"line\">\t\tsportService.register(zhangsan);<span class=\"comment\">//张三订阅体育速递报纸</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 1 人订阅</p>\n</blockquote>\n<p>可以看到张三、王五都订阅了美食天下报纸，所以都收到了【订阅回执】，并且各自订阅时都统计出当前的订阅人数；而仅仅张三订阅了【体育速递】报纸，所以也仅仅张三收到了订阅回执。</p>\n<p><strong>8. 测试–订阅者订阅报纸、然后取消订阅、新报纸发布出版并通知相关订阅者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan();<span class=\"comment\">//实例化-张三订阅者</span></div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu();<span class=\"comment\">//实例化-王五订阅者</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t    <span class=\"comment\">//实例化-《美食天下》报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperService foodService = <span class=\"keyword\">new</span> NewsPaperFoodServiceImpl();</div><div class=\"line\">\t\tfoodService.register(wangwu); <span class=\"comment\">//王五订阅美食天下报纸</span></div><div class=\"line\">\t\tfoodService.register(zhangsan); <span class=\"comment\">//张三订阅美食天下报纸</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfoodService.remove(wangwu);<span class=\"comment\">//王五【取消订阅】了美食天下报纸</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//新报纸-《食材中国》发布出版，理论上应该个性化推荐给《美食天下》报纸的订阅者</span></div><div class=\"line\">\t\tfoodService.newsPaperPublish(<span class=\"string\">\"食材中国\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材天下》 欢迎订阅</p>\n</blockquote>\n<p><em>注：首先张三、王五都订阅了美食天下报纸，所以都收到了订阅回执通知；后来由于王五取消订阅了美食天下的报纸，所以下面的新报纸发布出版–《食材中国》发布时，应该通知的美食天下报纸的订阅者中没有王五，仅仅通知了张三</em></p>\n<p>截至目前，我们已经通过观察者模式实现了报纸订阅的场景，要注意的是上面代码中，我们都是面向接口实现的，比如注册订阅者、通知订阅者等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\tsubscriberList.add(subscriberService);<span class=\"comment\">//将订阅者添加到订阅成员集合中</span></div><div class=\"line\">\tnoticeForRegister(subscriberService);<span class=\"comment\">//调用订阅回执服务方法通知该订阅者</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述方法中我们传递参数都是通用订阅者接口-SubscriberService；这样的话我们在后续新增其他订阅者后，只要后续的订阅者实现了通用的订阅者接口，那么就可以直接调用订阅服务，不需要做任何代码变化，所以我们需要了解以下设计原则：</p>\n<blockquote>\n<p>找出程序中会变化的方面，然后将其和固定不变的方面相分离—在观察者模式中，会改变的是主题(报纸发布)状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题</p>\n<p>针对接口变化，不针对实现编程—主题(报纸订阅)与观察者(订阅者)都使用接口观察者利用主题的接口调用主题接口的方法进行注册，而主题利用观察者通用接口中的被通知方法通知观察者，这样可以让两者之间运行正常，又同时具有松耦合的优点。</p>\n<p>多用组合，少用继承—观察者模式利用“组合”将许多观察者组合进主题中，对象之间的这种关系不是通过继承产生的，而是运行时利用组合的方式产生的</p>\n</blockquote>\n","excerpt":"<p>说到观察者模式-从字面意思的理解就是某些个实物观察着另一个实物，当被观察的那个实物发生变化时，那些观察它的实物会收到通知或者会相应的发生变化。</p>\n<p><img src=\"http://soujava.com/images/guanchazhe.jpg\" alt=\"Alt text\"></p>\n<p>生活中的例子也是到处都是啊，比如平常生活中经常订阅一些报纸来阅读，有的人可能喜欢体育，那么就订阅体育竞技相关的报纸；有的人可能喜欢美食，那么就订阅美食相关的报纸；还比如手机手机上面的天气预报显示，我们可以只显示查看我们感兴趣的城市，那么这也是订阅形式的一种，所以我们也可以把观察者模式理解成为订-阅模式，就相当于上面举的例子场景一样。</p>","more":"<p><strong>一、模拟报纸订阅来实现观察者模式</strong></p>\n<p>先说明一下我们的需求：</p>\n<blockquote>\n<ul>\n<li><p>一般报社都提供【报纸订阅服务】，不管你通过什么方式订阅都是可以的</p>\n</li>\n<li><p>报纸订阅服务一般包括【订阅】、【取消】、【订阅回执】、【新报纸发布】、【通知订阅者】等等功能</p>\n</li>\n<li><p>订阅者除了可以使用报纸订阅的相关服务外，每一个订阅者还需要提供一个【被通知】的服务，不然新报纸发布、订阅成功后怎么收到通知呢？就好比去银行存钱，存钱成功后会收到一个回执单一样。</p>\n</li>\n<li><p>当订阅者订阅某一类型报纸后，可以收到订阅回执提示；当有新类型的报纸发布出品后，需要通知相关订阅者，这有点类似个性化推荐，比如某一个订阅者订阅了美食相关的报纸，那么当我们出版了《食材天下》新报纸时需要通知美食类的报纸订阅者，因为美食和食材是有关联的嘛，这就是个性化推荐。</p>\n</li>\n</ul>\n<p>由于一个报社不可能只出版一个类型的报纸，所以报纸订阅服务应该是通用的吧，所以我们定义一个报纸订阅接口，然后让不同类型的报纸订阅服务都实现这个通用的订阅接口。</p>\n<p>由于每一个订阅者都需要提供一个被通知的方法，所以我们就独立定义一个订阅者接口，并且在接口中定义一个被通知的方法，后续的每一个订阅者都实现这个通用的订阅者接口。</p>\n</blockquote>\n<p><strong>1. 订阅者通用接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 订阅者通用接口，后续每一个订阅者都需要实现该接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SubscriberService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 被通知的公共方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> notice -通知的提示语</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">(String notice)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2. 订阅者-张三</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 张三订阅者，实现了通用的订阅者接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberZhangsan</span> <span class=\"keyword\">implements</span> <span class=\"title\">SubscriberService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 张三被通知的方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zhangsan收到通知： \"</span>+notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3. 订阅者-王五</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 王五订阅者，实现了通用的订阅者接口</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubscriberWangwu</span> <span class=\"keyword\">implements</span> <span class=\"title\">SubscriberService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 王五被通知的方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">(String notice)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"wangwu收到通知： \"</span>+notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4. 通用报纸订阅服务接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">**</div><div class=\"line\"> * 报纸订阅服务接口，任何一种报纸发布出品都需要实现该接口</div><div class=\"line\"> * <span class=\"meta\">@author</span> mapingsheng</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NewsPaperService</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 注册订阅者服务方法--订阅</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> subscriberService 订阅者接口</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 移除订阅者服务方法--取消订阅</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> subscriberService  订阅者接口</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(SubscriberService subscriberService)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅成功后通知订阅者的方法--订阅回执</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> subscriberService</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForRegister</span><span class=\"params\">(SubscriberService subscriberService)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布出品方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name  报纸类型名称</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String paperName)</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 单个通知订阅者方法，主要针对新报纸发布时调用</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> name</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForNewPaperPublish</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>5. 《美食天下》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 美食天下-报纸订阅服务类</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperFoodServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">NewsPaperService</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName;<span class=\"comment\">//报纸类型</span></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">static</span> List&lt;SubscriberService&gt; subscriberList = <span class=\"keyword\">new</span> LinkedList&lt;SubscriberService&gt;();</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\tsubscriberList.add(subscriberService);<span class=\"comment\">//将订阅者添加到订阅成员集合中</span></div><div class=\"line\">\t\tnoticeForRegister(subscriberService);<span class=\"comment\">//调用订阅回执服务方法通知该订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 取消订阅</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> index = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(index!=-<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tsubscriberList.remove(index);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForNewPaperPublish</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;subscriberList.size();i++)&#123;</div><div class=\"line\">\t\t\tSubscriberService subscriberService = subscriberList.get(i);</div><div class=\"line\">\t\t\tString notice = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\t\tsubscriberService.notice(notice); <span class=\"comment\">//调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForRegister</span><span class=\"params\">(SubscriberService subscriberService)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\tString notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 \"</span>+subscriberList.size()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\tsubscriberService.notice(notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name; <span class=\"comment\">//设置报纸名称</span></div><div class=\"line\">\t\tnoticeForNewPaperPublish(); <span class=\"comment\">//通知该类型报纸相关的订阅列表中的订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>6. 《体育速递》-报纸订阅服务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 体育速递-报纸订阅服务</div><div class=\"line\"> * <span class=\"doctag\">@author</span> mapingsheng</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaperSprotServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">NewsPaperService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String pageName;<span class=\"comment\">//报纸类型名称</span></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅者列表，凡是通过register方法订阅的订阅者都会被加入集合中</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">static</span> List&lt;SubscriberService&gt; subscriberList = <span class=\"keyword\">new</span> LinkedList&lt;SubscriberService&gt;();</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅方法</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\tsubscriberList.add(subscriberService);<span class=\"comment\">//将订阅者添加到订阅成员集合中</span></div><div class=\"line\">\t\tnoticeForRegister(subscriberService);<span class=\"comment\">//调用订阅回执服务方法通知该订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 取消订阅</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t * 先查找改订阅者是否订阅过，如果订阅过则移除该订阅者</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> index = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(index!=-<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tsubscriberList.remove(index);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布出品-通知订阅集合列表中所有的订阅者</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForNewPaperPublish</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;subscriberList.size();i++)&#123;</div><div class=\"line\">\t\t\tSubscriberService subscriberService = subscriberList.get(i);</div><div class=\"line\">\t\t\tString notice = <span class=\"string\">\"【新报纸发布】您好，我报社最近出版了 《\"</span>+pageName+<span class=\"string\">\"》 欢迎订阅\"</span>;</div><div class=\"line\">\t\t\tsubscriberService.notice(notice); <span class=\"comment\">//调用订阅者提供的“被通知”方法，这里是通过接口调用，可以提高兼容性(不同的订阅者)</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 订阅回执-当订阅者订阅成功后调用订阅者的被通知方法去通知订阅者</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noticeForRegister</span><span class=\"params\">(SubscriberService subscriberService)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = subscriberList.indexOf(subscriberService);</div><div class=\"line\">\t\tString notice = <span class=\"string\">\"【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 \"</span>+subscriberList.size()+<span class=\"string\">\" 人订阅\"</span>;</div><div class=\"line\">\t\tsubscriberService.notice(notice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 新报纸发布</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newsPaperPublish</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.pageName = name; <span class=\"comment\">//设置报纸名称</span></div><div class=\"line\">\t\tnoticeForNewPaperPublish(); <span class=\"comment\">//通知该类型报纸相关的订阅列表中的订阅者</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>7. 测试–订阅者调用订阅服务、并且收到订阅回执</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan();<span class=\"comment\">//实例化-张三订阅者</span></div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu();<span class=\"comment\">//实例化-王五订阅者</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//实例化-《美食天下》报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperService foodService = <span class=\"keyword\">new</span> NewsPaperFoodServiceImpl();</div><div class=\"line\">\t\tfoodService.register(wangwu);<span class=\"comment\">//王五订阅美食天下报纸</span></div><div class=\"line\">\t\tfoodService.register(zhangsan);<span class=\"comment\">//张三订阅美食天下报纸</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//实例化-《体育速递》报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperService sportService = <span class=\"keyword\">new</span> NewsPaperSprotServiceImpl();</div><div class=\"line\">\t\tsportService.register(zhangsan);<span class=\"comment\">//张三订阅体育速递报纸</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《体育速递》专栏报纸，一共  30 元，截止目前一共有 1 人订阅</p>\n</blockquote>\n<p>可以看到张三、王五都订阅了美食天下报纸，所以都收到了【订阅回执】，并且各自订阅时都统计出当前的订阅人数；而仅仅张三订阅了【体育速递】报纸，所以也仅仅张三收到了订阅回执。</p>\n<p><strong>8. 测试–订阅者订阅报纸、然后取消订阅、新报纸发布出版并通知相关订阅者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tSubscriberZhangsan zhangsan = <span class=\"keyword\">new</span> SubscriberZhangsan();<span class=\"comment\">//实例化-张三订阅者</span></div><div class=\"line\">\t\tSubscriberWangwu wangwu = <span class=\"keyword\">new</span> SubscriberWangwu();<span class=\"comment\">//实例化-王五订阅者</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t    <span class=\"comment\">//实例化-《美食天下》报纸订阅服务</span></div><div class=\"line\">\t\tNewsPaperService foodService = <span class=\"keyword\">new</span> NewsPaperFoodServiceImpl();</div><div class=\"line\">\t\tfoodService.register(wangwu); <span class=\"comment\">//王五订阅美食天下报纸</span></div><div class=\"line\">\t\tfoodService.register(zhangsan); <span class=\"comment\">//张三订阅美食天下报纸</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfoodService.remove(wangwu);<span class=\"comment\">//王五【取消订阅】了美食天下报纸</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//新报纸-《食材中国》发布出版，理论上应该个性化推荐给《美食天下》报纸的订阅者</span></div><div class=\"line\">\t\tfoodService.newsPaperPublish(<span class=\"string\">\"食材中国\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码运行结果：</p>\n<blockquote>\n<p>wangwu收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 1 人订阅</p>\n<p>zhangsan收到通知： 【订阅回执】您好，恭喜您订阅《天下美食》专栏报纸，一共 52 元，截止目前一共有 2 人订阅</p>\n<p>zhangsan收到通知： 【新报纸发布】您好，我报社最近出版了 《食材天下》 欢迎订阅</p>\n</blockquote>\n<p><em>注：首先张三、王五都订阅了美食天下报纸，所以都收到了订阅回执通知；后来由于王五取消订阅了美食天下的报纸，所以下面的新报纸发布出版–《食材中国》发布时，应该通知的美食天下报纸的订阅者中没有王五，仅仅通知了张三</em></p>\n<p>截至目前，我们已经通过观察者模式实现了报纸订阅的场景，要注意的是上面代码中，我们都是面向接口实现的，比如注册订阅者、通知订阅者等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(SubscriberService subscriberService)</span></span>&#123;</div><div class=\"line\">\tsubscriberList.add(subscriberService);<span class=\"comment\">//将订阅者添加到订阅成员集合中</span></div><div class=\"line\">\tnoticeForRegister(subscriberService);<span class=\"comment\">//调用订阅回执服务方法通知该订阅者</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述方法中我们传递参数都是通用订阅者接口-SubscriberService；这样的话我们在后续新增其他订阅者后，只要后续的订阅者实现了通用的订阅者接口，那么就可以直接调用订阅服务，不需要做任何代码变化，所以我们需要了解以下设计原则：</p>\n<blockquote>\n<p>找出程序中会变化的方面，然后将其和固定不变的方面相分离—在观察者模式中，会改变的是主题(报纸发布)状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题</p>\n<p>针对接口变化，不针对实现编程—主题(报纸订阅)与观察者(订阅者)都使用接口观察者利用主题的接口调用主题接口的方法进行注册，而主题利用观察者通用接口中的被通知方法通知观察者，这样可以让两者之间运行正常，又同时具有松耦合的优点。</p>\n<p>多用组合，少用继承—观察者模式利用“组合”将许多观察者组合进主题中，对象之间的这种关系不是通过继承产生的，而是运行时利用组合的方式产生的</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjcr1ph9000030tzatekpz7j","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pho000e30tzqem7fo0m"},{"post_id":"cjjcr1phd000230tzfhqflpfc","category_id":"cjjcr1phm000a30tzxce5obf6","_id":"cjjcr1phs000l30tzdet0jogw"},{"post_id":"cjjcr1phj000830tz1din40xu","category_id":"cjjcr1phm000a30tzxce5obf6","_id":"cjjcr1phx000r30tz240d65md"},{"post_id":"cjjcr1phk000930tzlor1tniu","category_id":"cjjcr1phm000a30tzxce5obf6","_id":"cjjcr1pi0000x30tzztwt78zy"},{"post_id":"cjjcr1phy000u30tzpt3u7isq","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pi3001230tz7d7owjrc"},{"post_id":"cjjcr1phn000d30tz8c3c95qx","category_id":"cjjcr1phx000s30tzvbqpwlc7","_id":"cjjcr1pi4001430tzjth7hhte"},{"post_id":"cjjcr1php000f30tz7iir0eo9","category_id":"cjjcr1pi0000y30tz3jw49npz","_id":"cjjcr1pi6001a30tz7zaknyvb"},{"post_id":"cjjcr1phr000i30tz02zsogoc","category_id":"cjjcr1pi4001530tzeiaq7k0f","_id":"cjjcr1pi9001g30tzp4z5fng1"},{"post_id":"cjjcr1phs000k30tz9gm1b2ho","category_id":"cjjcr1pi4001530tzeiaq7k0f","_id":"cjjcr1pic001m30tz3ak78dpv"},{"post_id":"cjjcr1phu000o30tzw5tz3eem","category_id":"cjjcr1pia001i30tztk6j6zv3","_id":"cjjcr1pif001t30tzdlchvemv"},{"post_id":"cjjcr1phw000q30tz8vf35kea","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pii001z30tzyaup3cb5"},{"post_id":"cjjcr1phz000w30tzg9ovkx34","category_id":"cjjcr1pi4001530tzeiaq7k0f","_id":"cjjcr1pik002530tzazhtpea5"},{"post_id":"cjjcr1pi1001030tzf9g0l5ag","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pip002b30tzw8cs1vxm"},{"post_id":"cjjcr1pi3001330tznlz28q96","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pit002h30tz12judt9p"},{"post_id":"cjjcr1pi4001730tzusz48es2","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pix002n30tzww7fv4en"},{"post_id":"cjjcr1pis002f30tzux37nnvj","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1piz002r30tz9l2pb355"},{"post_id":"cjjcr1piu002j30tza1izk23e","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pj1002v30tzrt8l6934"},{"post_id":"cjjcr1pi6001930tzsoyrjzz8","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pj2002z30tz2h0x9zm9"},{"post_id":"cjjcr1piw002m30tz4bo9xc86","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pj4003330tzm3wvok36"},{"post_id":"cjjcr1piy002q30tzoronkhjl","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pj5003730tzusuklmda"},{"post_id":"cjjcr1pi7001b30tz5kstafwo","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pj7003b30tz7nq4tjr1"},{"post_id":"cjjcr1pj0002u30tzavw7t84x","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pj8003f30tzvqolkmo0"},{"post_id":"cjjcr1pj2002y30tzba20m22r","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pja003j30tzjas0ppnc"},{"post_id":"cjjcr1pi8001f30tz8ljsgyyw","category_id":"cjjcr1pj1002w30tz1mtdcegj","_id":"cjjcr1pjc003n30tz8ua71wpm"},{"post_id":"cjjcr1pj3003230tz9ohcy6t5","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pjd003q30tzizyyna4y"},{"post_id":"cjjcr1pj5003630tz4p9uv8kk","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pjf003v30tz9e05gayc"},{"post_id":"cjjcr1pj6003a30tz2cedpni7","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pjh003y30tz4mjpo42d"},{"post_id":"cjjcr1pia001h30tzaudgmclg","category_id":"cjjcr1pj4003530tz4w1z0n1x","_id":"cjjcr1pjj004330tzi6a6doeg"},{"post_id":"cjjcr1pj7003d30tz2hzl8v19","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pjk004630tzrt4q4xsq"},{"post_id":"cjjcr1pj9003h30tz18na34ub","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pjm004b30tzw5qe0g3v"},{"post_id":"cjjcr1pib001k30tzbf08f18w","category_id":"cjjcr1pj8003e30tzdklub6ml","_id":"cjjcr1pjo004e30tz7znlk1fh"},{"post_id":"cjjcr1pic001n30tzp7dckze1","category_id":"cjjcr1pj1002w30tz1mtdcegj","_id":"cjjcr1pjp004i30tziufybkij"},{"post_id":"cjjcr1pie001q30tzh4btsar0","category_id":"cjjcr1pj1002w30tz1mtdcegj","_id":"cjjcr1pjr004m30tzuvl7vwak"},{"post_id":"cjjcr1pji004130tzmatw9og0","category_id":"cjjcr1pi4001530tzeiaq7k0f","_id":"cjjcr1pjs004q30tze7bk85z3"},{"post_id":"cjjcr1pie001s30tzqhm1wen7","category_id":"cjjcr1pj1002w30tz1mtdcegj","_id":"cjjcr1pju004u30tzemwduw1c"},{"post_id":"cjjcr1pig001w30tzpqtghkmg","category_id":"cjjcr1pjm004a30tzratfynyx","_id":"cjjcr1pjv004x30tz9ihlew9x"},{"post_id":"cjjcr1pih001y30tzt7vvjtdd","category_id":"cjjcr1pjm004a30tzratfynyx","_id":"cjjcr1pjx005130tz04ugnd2p"},{"post_id":"cjjcr1pii002130tz6tco76gv","category_id":"cjjcr1pjm004a30tzratfynyx","_id":"cjjcr1pjy005430tzbsmhgqc2"},{"post_id":"cjjcr1pjw005030tzaq3zwf3q","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pk0005830tzhyvvjw2f"},{"post_id":"cjjcr1pik002430tz0qwvt83u","category_id":"cjjcr1pjv004y30tz9qkae4jv","_id":"cjjcr1pk1005c30tzxex1iez6"},{"post_id":"cjjcr1pjz005730tz9x751gtj","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pk5005g30tzrrf3yw4b"},{"post_id":"cjjcr1pil002730tzysvyc0n0","category_id":"cjjcr1pjz005630tzdu3nrdnw","_id":"cjjcr1pk7005k30tzwt6nbzag"},{"post_id":"cjjcr1pk2005e30tzqkot14x0","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pk9005o30tzagz51ydt"},{"post_id":"cjjcr1pk5005i30tziiujszxe","category_id":"cjjcr1pia001i30tztk6j6zv3","_id":"cjjcr1pkc005s30tzhzpj6xnk"},{"post_id":"cjjcr1pio002930tzgdqiynh1","category_id":"cjjcr1pk4005f30tz9sdy5dy1","_id":"cjjcr1pke005w30tz4kftt3z4"},{"post_id":"cjjcr1pk7005l30tztkwmnmo8","category_id":"cjjcr1pid001o30tzk92yl19n","_id":"cjjcr1pkg005z30tzrg8j3kb3"},{"post_id":"cjjcr1pk9005p30tzivmxwkho","category_id":"cjjcr1pj1002w30tz1mtdcegj","_id":"cjjcr1pki006430tz3ieyuteu"},{"post_id":"cjjcr1piq002d30tzmuu7us3j","category_id":"cjjcr1pk8005n30tz469ldcf0","_id":"cjjcr1pkk006730tzidzve6yr"},{"post_id":"cjjcr1pkc005t30tz9vbpccdi","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pkl006c30tz8lz37naa"},{"post_id":"cjjcr1pke005x30tz1351705g","category_id":"cjjcr1pke005v30tzlbe2z2p8","_id":"cjjcr1pkn006f30tz42m9yy3o"},{"post_id":"cjjcr1pja003l30tz2p1sgmul","category_id":"cjjcr1pke005v30tzlbe2z2p8","_id":"cjjcr1pkp006k30tzkss7ujtn"},{"post_id":"cjjcr1pkh006130tzrtru2004","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pkr006n30tzt4r2zfyh"},{"post_id":"cjjcr1pjc003p30tz1skz1mel","category_id":"cjjcr1pke005v30tzlbe2z2p8","_id":"cjjcr1pks006r30tzw102va3m"},{"post_id":"cjjcr1pje003t30tzi59j2plf","category_id":"cjjcr1pke005v30tzlbe2z2p8","_id":"cjjcr1pku006v30tz292blmwj"},{"post_id":"cjjcr1pjg003x30tz42muvwl1","category_id":"cjjcr1pkp006j30tzs5s8d9dv","_id":"cjjcr1pkw006y30tz4i8ia3l6"},{"post_id":"cjjcr1pkv006w30tzz9rd57eo","category_id":"cjjcr1phg000430tzpqapt2zr","_id":"cjjcr1pkz007530tz5tyvnkdb"},{"post_id":"cjjcr1pjk004530tzp692bggl","category_id":"cjjcr1pke005v30tzlbe2z2p8","_id":"cjjcr1pl1007a30tzmqnhfk4b"},{"post_id":"cjjcr1pjl004930tzwjwjb9rt","category_id":"cjjcr1pkx007130tzpkrjb99s","_id":"cjjcr1pl2007c30tz9txo1j0x"},{"post_id":"cjjcr1pjn004d30tz3y17l3uu","category_id":"cjjcr1pkx007130tzpkrjb99s","_id":"cjjcr1pl4007h30tzzx6yxnel"},{"post_id":"cjjcr1pjp004h30tzfe8mq6x5","category_id":"cjjcr1pl3007f30tzwlt92wvt","_id":"cjjcr1pl7007n30tz56el9dnl"},{"post_id":"cjjcr1pjq004l30tz7cjz3d48","category_id":"cjjcr1pkx007130tzpkrjb99s","_id":"cjjcr1pl9007s30tzpbbloljl"},{"post_id":"cjjcr1pjs004p30tzbypvo541","category_id":"cjjcr1pl3007f30tzwlt92wvt","_id":"cjjcr1plb007x30tzga9pwsxz"},{"post_id":"cjjcr1pjt004t30tz9pzoahv6","category_id":"cjjcr1pl3007f30tzwlt92wvt","_id":"cjjcr1plc008130tzbdc2tmlz"},{"post_id":"cjjcr1pju004w30tzfma3p0gt","category_id":"cjjcr1pkx007130tzpkrjb99s","_id":"cjjcr1ple008530tzaukgy041"},{"post_id":"cjjcr1pjx005230tzuj6xn0d0","category_id":"cjjcr1pkx007130tzpkrjb99s","_id":"cjjcr1plg008930tzkaf4h5hk"},{"post_id":"cjjcr1pk0005a30tzizn0lvvk","category_id":"cjjcr1pk8005n30tz469ldcf0","_id":"cjjcr1plh008d30tz0unqc2y5"},{"post_id":"cjjcr1pkj006530tzuxpbnan2","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1pli008h30tzb5phco0u"},{"post_id":"cjjcr1pkk006830tzutmmq8ju","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1plj008l30tzchqis1re"},{"post_id":"cjjcr1pkm006d30tz0fg7ixs7","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1pll008p30tzita0yqys"},{"post_id":"cjjcr1pkn006g30tz13rf4nrp","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1plm008t30tz97kpp5yc"},{"post_id":"cjjcr1pkp006l30tz3mr3m09m","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1pln008w30tz98to7rvu"},{"post_id":"cjjcr1pkr006o30tzjap9gm8c","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1plo009030tzibuu76qu"},{"post_id":"cjjcr1pks006s30tzymwklsf3","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1plp009330tz6yu0v02w"},{"post_id":"cjjcr1pkw007030tzgrl88nsg","category_id":"cjjcr1plp009130tz0qb7ungm","_id":"cjjcr1plq009630tzh8xzr3ak"},{"post_id":"cjjcr1pky007330tzdtmkwulf","category_id":"cjjcr1plp009430tzx2n3rk2w","_id":"cjjcr1plr009830tzfb20xe28"},{"post_id":"cjjcr1pkz007630tzxub5ty1u","category_id":"cjjcr1plg008a30tzzxm2t3qt","_id":"cjjcr1ply009930tz8gp5pcz8"}],"PostTag":[{"post_id":"cjjcr1ph9000030tzatekpz7j","tag_id":"cjjcr1phh000530tzx530vlrv","_id":"cjjcr1phn000c30tzgd9hve0i"},{"post_id":"cjjcr1phd000230tzfhqflpfc","tag_id":"cjjcr1phm000b30tzlqmbsooo","_id":"cjjcr1phr000j30tzid0savf2"},{"post_id":"cjjcr1phj000830tz1din40xu","tag_id":"cjjcr1phm000b30tzlqmbsooo","_id":"cjjcr1phw000p30tzaey6mwdv"},{"post_id":"cjjcr1phk000930tzlor1tniu","tag_id":"cjjcr1phm000b30tzlqmbsooo","_id":"cjjcr1phz000v30tzpdz1t4rz"},{"post_id":"cjjcr1phn000d30tz8c3c95qx","tag_id":"cjjcr1phx000t30tzflak36nj","_id":"cjjcr1pi2001130tzeqvf85si"},{"post_id":"cjjcr1php000f30tz7iir0eo9","tag_id":"cjjcr1pi1000z30tzhe4zo6dv","_id":"cjjcr1pi5001830tzyeg535za"},{"post_id":"cjjcr1phr000i30tz02zsogoc","tag_id":"cjjcr1pi4001630tzwhjw0ftx","_id":"cjjcr1pi8001e30tzkkz1j5c5"},{"post_id":"cjjcr1phs000k30tz9gm1b2ho","tag_id":"cjjcr1pi8001d30tzzf46abb4","_id":"cjjcr1pic001l30tzqq08kwf3"},{"post_id":"cjjcr1phu000o30tzw5tz3eem","tag_id":"cjjcr1pia001j30tztyfgbi72","_id":"cjjcr1pie001r30tz0h56ktbn"},{"post_id":"cjjcr1phw000q30tz8vf35kea","tag_id":"cjjcr1pid001p30tz8nc88x2j","_id":"cjjcr1pih001x30tz31grqm6y"},{"post_id":"cjjcr1phy000u30tzpt3u7isq","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pik002330tze56suem8"},{"post_id":"cjjcr1phz000w30tzg9ovkx34","tag_id":"cjjcr1pij002230tz450g7zxl","_id":"cjjcr1pip002a30tzzdmpag3c"},{"post_id":"cjjcr1pi1001030tzf9g0l5ag","tag_id":"cjjcr1pid001p30tz8nc88x2j","_id":"cjjcr1pis002g30tzyknzaguu"},{"post_id":"cjjcr1pis002f30tzux37nnvj","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1piv002l30tzdy84yczv"},{"post_id":"cjjcr1pi3001330tznlz28q96","tag_id":"cjjcr1pir002e30tzbkgx7io2","_id":"cjjcr1piy002p30tzr4mhcnz1"},{"post_id":"cjjcr1piu002j30tza1izk23e","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pj0002t30tzgqmkhkcn"},{"post_id":"cjjcr1pi4001730tzusz48es2","tag_id":"cjjcr1pir002e30tzbkgx7io2","_id":"cjjcr1pj2002x30tz2bt1g7qn"},{"post_id":"cjjcr1piy002q30tzoronkhjl","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pj3003130tz1nigme24"},{"post_id":"cjjcr1pi6001930tzsoyrjzz8","tag_id":"cjjcr1pir002e30tzbkgx7io2","_id":"cjjcr1pj4003430tz7fhxrxnp"},{"post_id":"cjjcr1pj2002y30tzba20m22r","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pj6003830tzmmpcw715"},{"post_id":"cjjcr1pi7001b30tz5kstafwo","tag_id":"cjjcr1pj3003030tz04zjdnu7","_id":"cjjcr1pj7003c30tznxyhfxew"},{"post_id":"cjjcr1pj6003a30tz2cedpni7","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pj9003g30tzj90zto90"},{"post_id":"cjjcr1pi8001f30tz8ljsgyyw","tag_id":"cjjcr1pj6003930tzgfx99d2m","_id":"cjjcr1pja003k30tz7iopys90"},{"post_id":"cjjcr1pj9003h30tz18na34ub","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pjc003o30tzoh10dxjj"},{"post_id":"cjjcr1pja003l30tz2p1sgmul","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pje003s30tzjcrbn48h"},{"post_id":"cjjcr1pia001h30tzaudgmclg","tag_id":"cjjcr1pj9003i30tz3ardh7s5","_id":"cjjcr1pjg003w30tzs79uszyh"},{"post_id":"cjjcr1pjc003p30tz1skz1mel","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pji004030tz94kef450"},{"post_id":"cjjcr1pje003t30tzi59j2plf","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pjj004430tz4st5rs9c"},{"post_id":"cjjcr1pib001k30tzbf08f18w","tag_id":"cjjcr1pjd003r30tzt3gh1d3r","_id":"cjjcr1pjl004830tzocsku6d0"},{"post_id":"cjjcr1pji004130tzmatw9og0","tag_id":"cjjcr1pij002230tz450g7zxl","_id":"cjjcr1pjn004c30tz0pt7lhhi"},{"post_id":"cjjcr1pic001n30tzp7dckze1","tag_id":"cjjcr1pj6003930tzgfx99d2m","_id":"cjjcr1pjo004g30tzivn9p1o4"},{"post_id":"cjjcr1pjk004530tzp692bggl","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pjq004k30tz4767ohwi"},{"post_id":"cjjcr1pie001q30tzh4btsar0","tag_id":"cjjcr1pj6003930tzgfx99d2m","_id":"cjjcr1pjr004o30tzonr7tj5d"},{"post_id":"cjjcr1pie001s30tzqhm1wen7","tag_id":"cjjcr1pj6003930tzgfx99d2m","_id":"cjjcr1pjt004s30tz22t3k5xo"},{"post_id":"cjjcr1pig001w30tzpqtghkmg","tag_id":"cjjcr1pjr004n30tzjr2146my","_id":"cjjcr1pjw004z30tzvyrf0w6p"},{"post_id":"cjjcr1pjw005030tzaq3zwf3q","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pjy005530tzb79i52ux"},{"post_id":"cjjcr1pih001y30tzt7vvjtdd","tag_id":"cjjcr1pju004v30tzvjlw7vco","_id":"cjjcr1pk0005930tz4dsdbiwd"},{"post_id":"cjjcr1pjz005730tz9x751gtj","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pk1005d30tzhog1d5ep"},{"post_id":"cjjcr1pii002130tz6tco76gv","tag_id":"cjjcr1pjr004n30tzjr2146my","_id":"cjjcr1pk5005h30tzy7igd29a"},{"post_id":"cjjcr1pik002430tz0qwvt83u","tag_id":"cjjcr1pk1005b30tzv70c0nhq","_id":"cjjcr1pk8005m30tz26b7egbw"},{"post_id":"cjjcr1pk5005i30tziiujszxe","tag_id":"cjjcr1pia001j30tztyfgbi72","_id":"cjjcr1pka005q30tzpbqshb8w"},{"post_id":"cjjcr1pk7005l30tztkwmnmo8","tag_id":"cjjcr1pid001p30tz8nc88x2j","_id":"cjjcr1pkd005u30tz4yu6a4fy"},{"post_id":"cjjcr1pil002730tzysvyc0n0","tag_id":"cjjcr1pk6005j30tztc0nohuz","_id":"cjjcr1pkg005y30tz5qqeovxo"},{"post_id":"cjjcr1pk9005p30tzivmxwkho","tag_id":"cjjcr1pj6003930tzgfx99d2m","_id":"cjjcr1pki006230tzunux1h90"},{"post_id":"cjjcr1pkc005t30tz9vbpccdi","tag_id":"cjjcr1phh000530tzx530vlrv","_id":"cjjcr1pkj006630tzum7bapm4"},{"post_id":"cjjcr1pio002930tzgdqiynh1","tag_id":"cjjcr1pkb005r30tzdq2gjtme","_id":"cjjcr1pkl006a30tz8dmnymnu"},{"post_id":"cjjcr1pke005x30tz1351705g","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pkn006e30tz07kitbxq"},{"post_id":"cjjcr1pkj006530tzuxpbnan2","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pko006h30tzhq8q3x9o"},{"post_id":"cjjcr1piq002d30tzmuu7us3j","tag_id":"cjjcr1pkg006030tzour9yheh","_id":"cjjcr1pkq006m30tz30ehb9fp"},{"post_id":"cjjcr1pkk006830tzutmmq8ju","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pkr006p30tzlznpc9hn"},{"post_id":"cjjcr1pkm006d30tz0fg7ixs7","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pku006u30tz8zkqq0h3"},{"post_id":"cjjcr1piw002m30tz4bo9xc86","tag_id":"cjjcr1pkl006930tzvzwwrs7o","_id":"cjjcr1pkv006x30tzr8pdqv9f"},{"post_id":"cjjcr1pkn006g30tz13rf4nrp","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pkx007230tzprmzp6mc"},{"post_id":"cjjcr1pkp006l30tz3mr3m09m","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pky007430tzq3r0n4si"},{"post_id":"cjjcr1pj0002u30tzavw7t84x","tag_id":"cjjcr1pko006i30tz6777n2i9","_id":"cjjcr1pl0007830tzbnr30l3m"},{"post_id":"cjjcr1pkr006o30tzjap9gm8c","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pl2007b30tz4rvgq4fx"},{"post_id":"cjjcr1pks006s30tzymwklsf3","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pl3007e30tzipdq2y69"},{"post_id":"cjjcr1pj3003230tz9ohcy6t5","tag_id":"cjjcr1pks006q30tz059imdb3","_id":"cjjcr1pl4007g30tzyhddyjg4"},{"post_id":"cjjcr1pkv006w30tzz9rd57eo","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pl5007i30tzkuiemyxx"},{"post_id":"cjjcr1pj5003630tz4p9uv8kk","tag_id":"cjjcr1pkw006z30tzpxk3mcuq","_id":"cjjcr1pl6007l30tzp58kbepv"},{"post_id":"cjjcr1pkz007630tzxub5ty1u","tag_id":"cjjcr1pig001v30tzgls2rg9r","_id":"cjjcr1pl7007m30tztvi7w00r"},{"post_id":"cjjcr1pj7003d30tz2hzl8v19","tag_id":"cjjcr1pkl006930tzvzwwrs7o","_id":"cjjcr1pl9007q30tzjasi3pnf"},{"post_id":"cjjcr1pjg003x30tz42muvwl1","tag_id":"cjjcr1pl2007d30tzpo5jazd9","_id":"cjjcr1pl9007r30tzsnresy8x"},{"post_id":"cjjcr1pjl004930tzwjwjb9rt","tag_id":"cjjcr1pl5007j30tzmv4r1mxj","_id":"cjjcr1pla007v30tzx6v9crl7"},{"post_id":"cjjcr1pjn004d30tz3y17l3uu","tag_id":"cjjcr1pl5007j30tzmv4r1mxj","_id":"cjjcr1plb007w30tzfztsxd2v"},{"post_id":"cjjcr1pjp004h30tzfe8mq6x5","tag_id":"cjjcr1pla007u30tz8oppx50k","_id":"cjjcr1plc008030tzj02xqs86"},{"post_id":"cjjcr1pjq004l30tz7cjz3d48","tag_id":"cjjcr1plc007z30tz9h8jp4mr","_id":"cjjcr1ple008430tzrdefjyps"},{"post_id":"cjjcr1pjs004p30tzbypvo541","tag_id":"cjjcr1pla007u30tz8oppx50k","_id":"cjjcr1plf008830tzy7pb1kbm"},{"post_id":"cjjcr1pjt004t30tz9pzoahv6","tag_id":"cjjcr1pla007u30tz8oppx50k","_id":"cjjcr1plh008c30tzuo309qqo"},{"post_id":"cjjcr1pju004w30tzfma3p0gt","tag_id":"cjjcr1pl5007j30tzmv4r1mxj","_id":"cjjcr1pli008g30tzx8jxvp03"},{"post_id":"cjjcr1pjx005230tzuj6xn0d0","tag_id":"cjjcr1pl5007j30tzmv4r1mxj","_id":"cjjcr1plj008k30tz23devhii"},{"post_id":"cjjcr1pk0005a30tzizn0lvvk","tag_id":"cjjcr1plj008j30tz08dksiot","_id":"cjjcr1pll008o30tza97b2rdh"},{"post_id":"cjjcr1pk2005e30tzqkot14x0","tag_id":"cjjcr1plk008n30tz2ztbpmy8","_id":"cjjcr1plm008s30tzi585m9jn"},{"post_id":"cjjcr1pkh006130tzrtru2004","tag_id":"cjjcr1plm008r30tzlodobd5q","_id":"cjjcr1pln008x30tz2tw4a2hk"},{"post_id":"cjjcr1pkw007030tzgrl88nsg","tag_id":"cjjcr1pln008v30tzhtp6vuwq","_id":"cjjcr1plp009230tz8g1qw157"},{"post_id":"cjjcr1pky007330tzdtmkwulf","tag_id":"cjjcr1plo008z30tzh4e6ggm3","_id":"cjjcr1plq009530tzbjkkicle"}],"Tag":[{"name":"进制运算","_id":"cjjcr1phh000530tzx530vlrv"},{"name":"github","_id":"cjjcr1phm000b30tzlqmbsooo"},{"name":"eclipse","_id":"cjjcr1phx000t30tzflak36nj"},{"name":"界面框架","_id":"cjjcr1pi1000z30tzhe4zo6dv"},{"name":"javascript","_id":"cjjcr1pi4001630tzwhjw0ftx"},{"name":"添加enter事件","_id":"cjjcr1pi8001d30tzzf46abb4"},{"name":"nodeJs","_id":"cjjcr1pia001j30tztyfgbi72"},{"name":"Linux","_id":"cjjcr1pid001p30tz8nc88x2j"},{"name":"java","_id":"cjjcr1pig001v30tzgls2rg9r"},{"name":"jquery","_id":"cjjcr1pij002230tz450g7zxl"},{"name":"网卡","_id":"cjjcr1pir002e30tzbkgx7io2"},{"name":"服务开机启动","_id":"cjjcr1pj3003030tz04zjdnu7"},{"name":"Mysql","_id":"cjjcr1pj6003930tzgfx99d2m"},{"name":"Maven插件","_id":"cjjcr1pj9003i30tz3ardh7s5"},{"name":"动态传入tableName","_id":"cjjcr1pjd003r30tzt3gh1d3r"},{"name":"Redis","_id":"cjjcr1pjr004n30tzjr2146my"},{"name":"Redis安装","_id":"cjjcr1pju004v30tzvjlw7vco"},{"name":"RocketMQ启动错误","_id":"cjjcr1pk1005b30tzv70c0nhq"},{"name":"vSphere添加物理网卡","_id":"cjjcr1pk6005j30tztc0nohuz"},{"name":"Tomcat日志","_id":"cjjcr1pkb005r30tzdq2gjtme"},{"name":"git","_id":"cjjcr1pkg006030tzour9yheh"},{"name":"java8 Stream","_id":"cjjcr1pkl006930tzvzwwrs7o"},{"name":"jxl","_id":"cjjcr1pko006i30tz6777n2i9"},{"name":"java定时任务","_id":"cjjcr1pks006q30tz059imdb3"},{"name":"java接收clob字段","_id":"cjjcr1pkw006z30tzpxk3mcuq"},{"name":"oracle导出空表","_id":"cjjcr1pl2007d30tzpo5jazd9"},{"name":"spring","_id":"cjjcr1pl5007j30tzmv4r1mxj"},{"name":"thymeleaf","_id":"cjjcr1pla007u30tz8oppx50k"},{"name":"springBoot","_id":"cjjcr1plc007z30tz9h8jp4mr"},{"name":"gitlab","_id":"cjjcr1plj008j30tz08dksiot"},{"name":"表单元素获取","_id":"cjjcr1plk008n30tz2ztbpmy8"},{"name":"poi","_id":"cjjcr1plm008r30tzlodobd5q"},{"name":"跨域","_id":"cjjcr1pln008v30tzhtp6vuwq"},{"name":"webGL","_id":"cjjcr1plo008z30tzh4e6ggm3"}]}}