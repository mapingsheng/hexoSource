<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>soujava</title>
  <subtitle>soujava</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.soujava.com/"/>
  <updated>2016-06-29T03:24:48.819Z</updated>
  <id>http://www.soujava.com/</id>
  
  <author>
    <name>马平升</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>添加KEY后，每次push时让输入密码</title>
    <link href="http://www.soujava.com/2016/06/28/%E6%B7%BB%E5%8A%A0KEY%E5%90%8E%EF%BC%8C%E6%AF%8F%E6%AC%A1push%E6%97%B6%E8%AE%A9%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/"/>
    <id>http://www.soujava.com/2016/06/28/添加KEY后，每次push时让输入密码/</id>
    <published>2016-06-28T10:03:13.000Z</published>
    <updated>2016-06-29T03:24:48.819Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;当从github上面clone项目时，还老是提示输入密码，如下图：&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Enter passphrase for key ‘/c/Users/maps/.ssh/id_rsa’:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/getIp.jpg&quot; alt=&quot;Alt text&quot; title=&quot;git push&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照先后顺序执行以下两条命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;$ ssh-agent bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh-add /c/Users/maps/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitTestconnsucc.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;最后来一个完整的图片&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitpushinputpasssucc.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;当从gi
    
    </summary>
    
      <category term="github" scheme="http://www.soujava.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.soujava.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>通过gitBook让网站更实用</title>
    <link href="http://www.soujava.com/2016/06/28/%E9%80%9A%E8%BF%87gitBook%E8%AE%A9%E7%BD%91%E7%AB%99%E6%9B%B4%E5%AE%9E%E7%94%A8/"/>
    <id>http://www.soujava.com/2016/06/28/通过gitBook让网站更实用/</id>
    <published>2016-06-28T09:48:54.000Z</published>
    <updated>2016-06-29T03:25:33.126Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);&lt;blockquote&gt;
&lt;p&gt;csdn上面的博客查看方式&lt;br&gt;&lt;img src=&quot;http://soujava.com/images/mycsdnblog.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt; &lt;/p&gt;&lt;p&gt;采用gitBook构建的博客&lt;br&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/mygitbook.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt; &lt;/p&gt;&lt;p&gt;比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;gitBook是什么&lt;br&gt; &lt;p&gt;GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。&lt;br&gt; GitBook支持输出多种文档格式：&lt;br&gt; ·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；&lt;br&gt; ·PDF：需要安装gitbook-pdf依赖；&lt;br&gt; ·eBook：需要安装ebook-convert；&lt;br&gt; ·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；&lt;br&gt; ·JSON：一般用于电子书的调试或元数据提取。&lt;br&gt; 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md&lt;br&gt; &lt;/p&gt;&lt;p&gt;官网:&lt;a href=&quot;https://www.gitbook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.gitbook.com&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)、下载、安装node.js;官网：&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/nodejsdownload.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！&lt;/p&gt;
&lt;p&gt;2)、通过window命令安装gitbook服务；&lt;br&gt;&lt;code&gt;npm install gitbook -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/1.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;3)、通过window命令安装gitbook命令服务（gitbook-cli）；&lt;br&gt;&lt;code&gt;npm install gitbook-cli -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4)、下载安装markdown；&lt;br&gt;下载地址：&lt;a href=&quot;http://markdownpad.com/download.html；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://markdownpad.com/download.html；&lt;/a&gt;&lt;br&gt;下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/markdown.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/3.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,&lt;br&gt;SUMMARY.md文件内容如图&lt;br&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitinit.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;运行gitbook init命令后生成的目录结构如图&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitinitfile.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitbuildbook.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；&lt;br&gt;9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;blockquote&gt;
&lt;p&gt;安装node.js、gitbook、markdown&lt;/p&gt;
&lt;p&gt;通过gitbook init命令初始化目录结构&lt;/p&gt;
&lt;p&gt;通过markdown工具编辑目录结构文章对应的.md文件&lt;/p&gt;
&lt;p&gt;通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)&lt;/p&gt;
&lt;p&gt;通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);&lt;blockquote&gt;
&lt;p&gt;csdn上
    
    </summary>
    
      <category term="github" scheme="http://www.soujava.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.soujava.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>为github pages绑定独立域名</title>
    <link href="http://www.soujava.com/2016/06/28/%E4%B8%BAgithub-pages%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D/"/>
    <id>http://www.soujava.com/2016/06/28/为github-pages绑定独立域名/</id>
    <published>2016-06-28T09:47:28.000Z</published>
    <updated>2016-06-29T03:41:16.729Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是&lt;a href=&quot;http://www.soujava.com&quot;&gt;soujava&lt;/a&gt;；个人感觉这个域名还算可以吧！个人是搞java开发的！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/yumingmanage.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/ippeizhi.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;下面讲解此步骤配置的ip如何获取&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/getIp.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;1、假设你已经有了一个独立
    
    </summary>
    
      <category term="github" scheme="http://www.soujava.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.soujava.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>通过github pages生成网站</title>
    <link href="http://www.soujava.com/2016/06/28/%E9%80%9A%E8%BF%87github-pages%E7%94%9F%E6%88%90%E7%BD%91%E7%AB%99/"/>
    <id>http://www.soujava.com/2016/06/28/通过github-pages生成网站/</id>
    <published>2016-06-28T09:43:00.000Z</published>
    <updated>2016-06-29T03:29:02.316Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;1 什么是github pages&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。&lt;br&gt;github Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2 新建仓库&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/newRepository.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3 输入仓库信息&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/inputInfo.jpg&quot; alt=&quot;Alt text&quot; title=&quot;输入仓库信息&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;4 添加成功后，点击“settings”按钮&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/createSucc.jpg&quot; alt=&quot;Alt text&quot; title=&quot;仓库添加成功&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5 使用Github Pages生成页面&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/useGitPages.jpg&quot; alt=&quot;Alt text&quot; title=&quot;使用gitHub pages生服务&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;6 点击选择博客布局按钮进入选择布局界面&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/selectLayout.jpg&quot; alt=&quot;Alt text&quot; title=&quot;选择样式布局&quot;&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;7 切换布局选择操作,最后点击“publish page”按钮&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/succblog.jpg&quot; alt=&quot;Alt text&quot; title=&quot;切换布局选择操作&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/publishSuccess.jpg&quot; alt=&quot;Alt text&quot; title=&quot;发布成功&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/fagnwen.jpg&quot; alt=&quot;Alt text&quot; title=&quot;点击访问url地址访问博客&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;点击上图中红框中的访问url地址访问博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行&lt;br&gt;&lt;img src=&quot;http://soujava.com/images/tianjiagitfile.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME&lt;br&gt;&lt;img src=&quot;http://soujava.com/images/gitaddFile.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/cname.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1 什么是github pages&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。&lt;br&gt;github Pages可以被认为是
    
    </summary>
    
    
  </entry>
  
</feed>
