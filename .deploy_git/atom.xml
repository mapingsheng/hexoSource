<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>soujava</title>
  <subtitle>记录未知的，牢记已知的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.soujava.com/"/>
  <updated>2016-07-25T10:12:51.220Z</updated>
  <id>http://www.soujava.com/</id>
  
  <author>
    <name>马平升</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系统添加配置随开机启动的服务-rc.local配置</title>
    <link href="http://www.soujava.com/Linux%E7%B3%BB%E7%BB%9F%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE%E9%9A%8F%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E7%9A%84%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.soujava.com/Linux系统添加配置随开机启动的服务/</id>
    <published>2016-07-25T09:46:24.000Z</published>
    <updated>2016-07-25T10:12:51.220Z</updated>
    
    <content type="html">&lt;p&gt;在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以root身份才能启动的服务&lt;/li&gt;
&lt;li&gt;以非root身份启动的服务(一般情况下都是以非root身份启动和管理服务)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一、下面以把tomcat服务器配置成随开机自启动的配置为例说明一下&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tomcat的安装路径：/usr/local/server/apache-tomcat-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么我们知道了tomcat的安装路径后，就可以通过以下命令启动tomcat服务了&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/usr/local/server/apache-tomcat-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;/bin/start.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们想让linux每次开机时自动启动tomcat服务，那么我们需要如下配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;touch /var/lock/subsys/local&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/local/server/apache-tomcat-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;/bin/start.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;二、下面以把redis服务配置成随开机自启动的配置为例说明一下（以redis用户启动）&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis的安装路径：/usr/local/cache/redis-&lt;span class=&quot;number&quot;&gt;2.8&lt;/span&gt;.19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们通过输入命令启动redis的方式是：(假设redis服务启动时必须用redis用户)&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/usr/local/cache/redis-&lt;span class=&quot;number&quot;&gt;2.8&lt;/span&gt;.19/src/redis-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们想让linux每次开机时自动启动redis服务，那么我们需要如下配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 /etc/rc.d/rc.local文件，在该配置文件中添加tomcat的启动命令&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;touch /var/lock/subsys/local&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;su redis -c &lt;span class=&quot;string&quot;&gt;&quot;/usr/local/cache/redis-2.8.19/src/redis-server&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;三、总结&lt;/strong&gt;&lt;br&gt;我们主要通过在rc.local文件中添加我们服务的启动脚本的方式来配置随开机自启动服务；当然对于linux操作系统来讲，并不是仅仅就这一种方式配置随机启动操作，其他方式后续再说。那么rc.local到底是什么文件呢？&lt;/p&gt;
&lt;p&gt;rc.local其实是一个脚本文件，该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加你想在系统启动之后执行的任何操作，比如启动第三方的服务，比如挂载mount操作等等。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在linux服务器操作系统中，经常会安装一些服务器端的软件如：tomcat、redis、MQ、Nginx等等常用的服务器组件；那么有时候服务器重启后需要用一个一个的启动命令把不同的软件启动起来；主要有以下几种场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以root身份才能启动的服务&lt;/
    
    </summary>
    
      <category term="Linux" scheme="http://www.soujava.com/categories/Linux/"/>
    
    
      <category term="服务开机启动" scheme="http://www.soujava.com/tags/%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux开机启动后经常需要配置网卡</title>
    <link href="http://www.soujava.com/Linux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%90%8E%E7%BB%8F%E5%B8%B8%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1/"/>
    <id>http://www.soujava.com/Linux开机启动后经常需要配置网卡/</id>
    <published>2016-07-25T09:27:42.000Z</published>
    <updated>2016-07-25T09:43:14.316Z</updated>
    
    <content type="html">&lt;p&gt;在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/wangka.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后针对上面的情况，需要手动操作一下，把eth0网卡开启使用才行；感觉很繁琐！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/wankapeizhi.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;使用如下命令编辑网卡信息：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;网卡信息的内容大致如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DEVICE=&amp;quot;eth0&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TYPE=ethernet&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UUID=1221231K-4DFSD-8SDFA&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ONBOOT=&amp;quot;yes&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IPADDR=192.168.1.152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NETMASK=255.255.255.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GATEWAY=192.168.1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BOOTPROTO=static&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在网卡信息中找到”NOBOOT=no”配置选项，改成”NOBOOT=yes”&lt;/p&gt;
&lt;p&gt;再重启电脑后就不需要再次手动配置激活网卡了！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在虚拟机中安装的CentOS6操作系统，每次开机启动后，网卡默认都是关闭的；所以系统对外网络是处于中断的状态的，所以也就不能通过Xshell工具远程连接操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/wangka.jpg&quot; al
    
    </summary>
    
      <category term="Linux" scheme="http://www.soujava.com/categories/Linux/"/>
    
    
      <category term="网卡" scheme="http://www.soujava.com/tags/%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>通过Nginx反向代理解决跨域问题</title>
    <link href="http://www.soujava.com/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://www.soujava.com/通过反向代理解决跨域问题/</id>
    <published>2016-07-19T09:26:32.000Z</published>
    <updated>2016-07-25T09:45:28.236Z</updated>
    
    <content type="html">&lt;p&gt; 有以下需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有两个独立运行的系统，用户系统(user)、发布系统(publish)&lt;/li&gt;
&lt;li&gt;publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且勾选页面中的数据后可以获取已勾选的数据；&lt;/li&gt;
&lt;li&gt;因为两个系统部署在不同的服务器中运行，所以存在跨域问题&lt;/li&gt;
&lt;li&gt;解决方案主要通过反向代理的方式解决，这种方式可以避免两个系统更改大量的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/kuayu.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：以上方式可以解决publish系统远程调用user系统提供的数据页面(静态页面)的跨域问题，但是如果user系统提供的页面中有js异步事件，则仍然会出现跨域问题(比如在user系统提供的选择用户的界面中，当点击左侧角色分类时，异步加载右侧的用户列表数据)；所以需要user系统提供的视图页面对应的业务处理方法中做一些微小的改动即可，在响应对象中添加如下设置：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;response.setHeader(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; 有以下需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有两个独立运行的系统，用户系统(user)、发布系统(publish)&lt;/li&gt;
&lt;li&gt;publish系统中的添加内容功能模块需要选择对应的用户，那么user系统已经有了一个这样的页面，而publish系统想直接加载过来使用，并且
    
    </summary>
    
      <category term="Nginx" scheme="http://www.soujava.com/categories/Nginx/"/>
    
    
      <category term="跨域" scheme="http://www.soujava.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>java通过Stream对list集合分组</title>
    <link href="http://www.soujava.com/java%E9%80%9A%E8%BF%87Stream%E5%AF%B9list%E9%9B%86%E5%90%88%E5%88%86%E7%BB%84/"/>
    <id>http://www.soujava.com/java通过Stream对list集合分组/</id>
    <published>2016-07-15T06:00:11.000Z</published>
    <updated>2016-07-15T07:22:09.367Z</updated>
    
    <content type="html">&lt;p&gt;现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.maps;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer id,String type,String name)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type = type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer id)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String type)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type = type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.maps;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.stream.Collectors;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainUser&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		List&amp;lt;User&amp;gt; list = getUserList();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Map&amp;lt;String,List&amp;lt;User&amp;gt;&amp;gt; userGroupMap = list.stream().collect(Collectors.groupingBy(User::getType));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;getUserList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		User user1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;小学&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		User user2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;李四&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;小学&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		User user3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;王五&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;初中&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		User user4 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;马六&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;高中&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		List&amp;lt;User&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		list.add(user1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		list.add(user2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		list.add(user3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		list.add(user4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行上面例子得到下面的结果&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;高中=[com.maps.User@&lt;span class=&quot;number&quot;&gt;448139f&lt;/span&gt;0], 初中=[com.maps.User@&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;cca494b], 小学=[com.maps.User@&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;ba4f24f, com.maps.User@&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;b9a45b3]&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是不是感觉不用for循环挺爽！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;现在有一个List集合，想对该集合中的数据分组处理，想到java8中的stream，就搞来试试，非常给力！例子如下&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div clas
    
    </summary>
    
      <category term="java" scheme="http://www.soujava.com/categories/java/"/>
    
    
      <category term="java8 Stream" scheme="http://www.soujava.com/tags/java8-Stream/"/>
    
  </entry>
  
  <entry>
    <title>java接收oracle中clob类型字段值</title>
    <link href="http://www.soujava.com/java%E6%8E%A5%E6%94%B6oracle%E4%B8%ADclob%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%80%BC/"/>
    <id>http://www.soujava.com/java接收oracle中clob类型字段值/</id>
    <published>2016-07-06T08:16:33.000Z</published>
    <updated>2016-07-06T08:40:54.414Z</updated>
    
    <content type="html">&lt;p&gt;oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Clob columnContentClob = result.getClob(1); //先用大文本类型接收,getClob方法可以传入列名(columnName)重载使用
Reader is = columnContentClob.getCharacterStream();//用reader接收
BufferedReader bf = new BufferedReader(is);//实例化一个缓冲流
String columnContent = bf.readLine();//读取大文本的内容
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String driver = &amp;quot;oracle.jdbc.OracleDriver&amp;quot;;
String url = &amp;quot;jdbc:oracle:thin:@127.0.0.1:1521/databaseName&amp;quot;;
String username = &amp;quot;username&amp;quot;;
String password = &amp;quot;password&amp;quot;;
Class.forName(driver);
Connection conn = DriverManager.getConnection(url, username, password);

 ResultSet rs = null;
PreparedStatement pstmt = null;
String query = &amp;quot;SELECT description FROM mytable WHERE id = ?&amp;quot;;
try {
  conn = getConnection();
  pstmt = conn.prepareStatement(query);
  pstmt.setInt(1, id);
  rs = pstmt.executeQuery();
  rs.next();
  Clob clob = rs.getClob(1);//rs.getClob(&amp;quot;description&amp;quot;);

} finally {
  rs.close();
  pstmt.close();
  conn.close();
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;oracle数据库中有一种大文本字段类型：clob;那么当我们的java程序从数据库中查询出来的数据列表用java程序如何接收处理呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Clob columnContentClob = result.getClob(1); //先用大文本类型接
    
    </summary>
    
      <category term="java" scheme="http://www.soujava.com/categories/java/"/>
    
    
      <category term="java接收clob字段" scheme="http://www.soujava.com/tags/java%E6%8E%A5%E6%94%B6clob%E5%AD%97%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>oracle11G导出数据时空表无法导出</title>
    <link href="http://www.soujava.com/oracle11G%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%97%B6%E7%A9%BA%E8%A1%A8%E6%97%A0%E6%B3%95%E5%AF%BC%E5%87%BA/"/>
    <id>http://www.soujava.com/oracle11G导出数据时空表无法导出/</id>
    <published>2016-07-06T00:49:02.000Z</published>
    <updated>2016-07-06T01:04:23.228Z</updated>
    
    <content type="html">&lt;p&gt;  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟oracle的一个配置参数有关的，也就是&lt;br&gt;  “deferred_segment_creation”；默认该参数为true，说明不自动分配sgement，如果设置该参数为false时，则会从此刻以后每次创建表就自动分配segment。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：segment就是oracle中段的概念，默认一个普通表会对应一个segment；这里的段就是物理存储的对象，而表(table)就是逻辑存储的对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1）打开命令行工具执行命令：alter system set deferred_segment_creation=false;
2）执行之后后期创建的空表就可以正常导出了，但是在命令执行之前的空表还是无法进行导出
3）先查询一下哪些表是空的：select table_name from user_tables where NUM_ROWS=0;
4）下面我们通过select 来生成修改语句：
    select &amp;apos;alter table &amp;apos;||table_name||&amp;apos; allocate extent;&amp;apos; from user_tables where num_rows=0
     后复制生成的修改语句执行，问题解决！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;总结：解决方法共3个途径：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1：向空白插入一条数据，再删除掉，就分配空间了（空表比较少）。
2：修改系统参数
      alter system set deferred_segment_creation=false;
     （对以后新增的表系统会分配 segment），重启数据库。
3：批量对现有的空表分配空间
     select &amp;apos;alter table &amp;apos; || table_name ||  &amp;apos; allocate extent;&amp;apos; as sql from all_tables where num_rows = 0 and OWNER=username ;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;  使用oracle数据库导出命令exp导出数据库的时候，数据库中的空表无法导出，因为oracle11g 建表时，默认不分配segment,以节省磁盘空间，当表插入第一条数据时，再分配segment。当然至于想不想在oracle创建表的时候就自动分配segment,是跟or
    
    </summary>
    
      <category term="oracle" scheme="http://www.soujava.com/categories/oracle/"/>
    
    
      <category term="oracle导出空表" scheme="http://www.soujava.com/tags/oracle%E5%AF%BC%E5%87%BA%E7%A9%BA%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>界面框架</title>
    <link href="http://www.soujava.com/2016-06-30-%E7%95%8C%E9%9D%A2%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.soujava.com/2016-06-30-界面框架/</id>
    <published>2016-06-30T08:39:11.000Z</published>
    <updated>2016-07-01T08:20:02.726Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;1、布局框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 访问地址：&lt;a href=&quot;http://layout.jquery-dev.com/index.cfm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://layout.jquery-dev.com/index.cfm&lt;/a&gt;&lt;br&gt; demo：&lt;a href=&quot;http://layout.jquery-dev.com/demos.cfm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://layout.jquery-dev.com/demos.cfm&lt;/a&gt;&lt;br&gt; 可以满足多种复杂或者简单的布局，支持拖拉操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/bujv.jpg&quot; alt=&quot;Alt text&quot; title=&quot;git push&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、表格框架&lt;/strong&gt;&lt;br&gt;2.1、SlickGrid（&lt;a href=&quot;https://github.com/Celebio/SlickGrid）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Celebio/SlickGrid）&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1)、支持表格的排序、列宽度的拖拽调整、表格中列的可编辑、表格中可编辑单元格中的各种控件(时间选择、下拉框、滑动条、复选框等等)、表格中添                                    加树形菜单、表格列宽度随着窗口大小自动调整；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge2.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;   2)、可以在表格中直接框选复制-粘贴、对单元格中的值动态筛选、表格中的一些值的汇总计算以及展示、框选复制粘贴&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;   3)、表格数据的渲染速度也非常不错，50万条静态数据一次加载渲染到表格中1-3秒时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.2、 paramquery（&lt;a href=&quot;http://paramquery.com/grid）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://paramquery.com/grid）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  1)、表格拖拉控制宽度、排序、可编辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;  2)、可以对添加表格中的数据、以及对表格中的某几列数据添加横向滚动条&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge6.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3)、可以对表格头部进行复杂的嵌套汇总显示：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/biaoge9.jpg&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.3、 jqwidgets（&lt;a href=&quot;http://www.jqwidgets.com/）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jqwidgets.com/）&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这个表格框架还是相当的强大的，你能想到的，你将用到的都为你提供了，总之一两句话表达不彻底，需要你去亲自体验！不过有些浏览器兼容可能会出些问题，我在使用过程中由于兼容问题，我修改了其内核js文件解决的。

DEMO体验地址：http://www.jqwidgets.com/jquery-widgets-demo/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/jqwidgets.png&quot; alt=&quot;Alt text&quot; title=&quot;表格&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、界面风格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.1、 semantic-ui (&lt;a href=&quot;http://semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://semantic-ui.com/&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;3.2、 topcoat (&lt;a href=&quot;http://topcoat.io/topcoat/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://topcoat.io/topcoat/&lt;/a&gt;) &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、布局框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 访问地址：&lt;a href=&quot;http://layout.jquery-dev.com/index.cfm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://layout.jquery
    
    </summary>
    
      <category term="UI" scheme="http://www.soujava.com/categories/UI/"/>
    
    
      <category term="界面框架" scheme="http://www.soujava.com/tags/%E7%95%8C%E9%9D%A2%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>页面中添加&#39;ENTER&#39;键点击事件</title>
    <link href="http://www.soujava.com/2016-06-30-%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0-ENTER-%E9%94%AE%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.soujava.com/2016-06-30-页面中添加-ENTER-键点击事件/</id>
    <published>2016-06-30T08:31:17.000Z</published>
    <updated>2016-07-01T08:33:45.962Z</updated>
    
    <content type="html">&lt;p&gt;通常有以下场景：&lt;br&gt;当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。&lt;br&gt;那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jquery&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&amp;quot;body&amp;quot;).keydown(function(e){
    if(e.keyCode==&amp;quot;13&amp;quot;){
        alert(&amp;apos;点击了Enter键&amp;apos;);
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;javascript&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.body.onclick=function(){
    if(e.keyCode==&amp;quot;13&amp;quot;){
       alert(&amp;apos;点击了Enter键&amp;apos;);
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;通常有以下场景：&lt;br&gt;当输入表单完成后直接按“Enter”键进行快捷提交；当操作一个共时，弹出的提示询问框，然后直接按“Enter”键确认。&lt;br&gt;那么我们只需要通过获取当前点击的键码是否是enter键的码值即可！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jquery&lt;/stron
    
    </summary>
    
      <category term="javascript" scheme="http://www.soujava.com/categories/javascript/"/>
    
    
      <category term="添加enter事件" scheme="http://www.soujava.com/tags/%E6%B7%BB%E5%8A%A0enter%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>关闭父窗口刷新子窗口</title>
    <link href="http://www.soujava.com/2016-06-30-%E5%85%B3%E9%97%AD%E7%88%B6%E7%AA%97%E5%8F%A3%E5%88%B7%E6%96%B0%E5%AD%90%E7%AA%97%E5%8F%A3/"/>
    <id>http://www.soujava.com/2016-06-30-关闭父窗口刷新子窗口/</id>
    <published>2016-06-30T08:21:45.000Z</published>
    <updated>2016-07-01T08:42:45.764Z</updated>
    
    <content type="html">&lt;p&gt;比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父窗口-index.html&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;html&amp;gt;  
 &amp;lt;head&amp;gt;  
  &amp;lt;title&amp;gt;index.htmll&amp;lt;/title&amp;gt;  
  &amp;lt;meta name=&amp;quot;Generator&amp;quot; content=&amp;quot;EditPlus&amp;quot;&amp;gt;  
  &amp;lt;meta name=&amp;quot;Author&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;  
  &amp;lt;meta name=&amp;quot;Keywords&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;  
  &amp;lt;meta name=&amp;quot;Description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;  
    &amp;lt;SCRIPT LANGUAGE=&amp;quot;JavaScript&amp;quot;&amp;gt;  
    &amp;lt;!--   
    function clicks(){   
     window.open(&amp;quot;other.html&amp;quot;);   
    }   
    //--&amp;gt;  
    &amp;lt;/SCRIPT&amp;gt;  
 &amp;lt;/head&amp;gt;  
 &amp;lt;body&amp;gt;  
 &amp;lt;a  onClick=&amp;quot;clicks();&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;选择数据&amp;lt;/a&amp;gt;  
 &amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;子窗口-other.html&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;html&amp;gt;  
 &amp;lt;head&amp;gt;  
  &amp;lt;title&amp;gt;子窗口&amp;lt;/title&amp;gt;  
  &amp;lt;meta name=&amp;quot;Generator&amp;quot; content=&amp;quot;EditPlus&amp;quot;&amp;gt;  
  &amp;lt;meta name=&amp;quot;Author&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;  
  &amp;lt;meta name=&amp;quot;Keywords&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;  
  &amp;lt;meta name=&amp;quot;Description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;  
&amp;lt;SCRIPT LANGUAGE=&amp;quot;JavaScript&amp;quot;&amp;gt;  
&amp;lt;!--   
function Close()   
{
  window.opener.location.href=&amp;quot;index.html&amp;quot;;
}
//--&amp;gt;  
&amp;lt;/script&amp;gt;  
 &amp;lt;/head&amp;gt;  
 &amp;lt;body&amp;gt;  
 &amp;lt;a href=&amp;quot;javascript:Close();&amp;quot;&amp;gt;关闭当前子窗口，打开父窗口&amp;lt;/a&amp;gt;  
 &amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;比如我访问index.html页面，其中一个功能模块需要弹出(新打开)other.html，勾选某些数据，勾选完成后，关闭other.html，并且index.html随着关闭other.html事件而刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父窗口-index.html&lt;/s
    
    </summary>
    
      <category term="javascript" scheme="http://www.soujava.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.soujava.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Java was started but returned exit code异常</title>
    <link href="http://www.soujava.com/2016-06-30-Java-was-started-but-returned-exit-code%E5%BC%82%E5%B8%B8/"/>
    <id>http://www.soujava.com/2016-06-30-Java-was-started-but-returned-exit-code异常/</id>
    <published>2016-06-30T07:56:30.000Z</published>
    <updated>2016-06-30T08:01:09.494Z</updated>
    
    <content type="html">&lt;p&gt;今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369………等等&lt;br&gt;将eclipse.ini内容改为：&lt;br&gt;（注：最下面的几行是调整后的配置）&lt;/p&gt;
&lt;p&gt;-startup&lt;br&gt;plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar&lt;br&gt;–launcher.library&lt;br&gt;plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503&lt;br&gt;-product&lt;br&gt;org.eclipse.epp.package.jee.product&lt;br&gt;–launcher.defaultAction&lt;br&gt;openFile&lt;br&gt;–launcher.XXMaxPermSize&lt;br&gt;256M&lt;br&gt;-showsplash&lt;br&gt;org.eclipse.platform&lt;br&gt;-vmargs&lt;br&gt;-Dosgi.requiredJavaVersion=1.5&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-Xms1024m&lt;br&gt;-Xmx1024m&lt;br&gt;-XX:MaxPermSize=128m&lt;br&gt;-XX:+CMSClassUnloadingEnabled&lt;br&gt;-XX:+CMSPermGenSweepingEnabled&lt;br&gt;-XX:+UseParallelGC&lt;br&gt;-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天eclipse启动时一直报个错：Java was started but returned exit code=-805306369………等等&lt;br&gt;将eclipse.ini内容改为：&lt;br&gt;（注：最下面的几行是调整后的配置）&lt;/p&gt;
&lt;p&gt;-startup&lt;br&gt;pl
    
    </summary>
    
      <category term="IDE" scheme="http://www.soujava.com/categories/IDE/"/>
    
    
      <category term="eclipse" scheme="http://www.soujava.com/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>添加KEY后，每次push时让输入密码</title>
    <link href="http://www.soujava.com/2016-06-28-%E6%B7%BB%E5%8A%A0KEY%E5%90%8E%EF%BC%8C%E6%AF%8F%E6%AC%A1push%E6%97%B6%E8%AE%A9%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/"/>
    <id>http://www.soujava.com/2016-06-28-添加KEY后，每次push时让输入密码/</id>
    <published>2016-06-28T10:03:13.000Z</published>
    <updated>2016-07-01T08:47:34.526Z</updated>
    
    <content type="html">&lt;p&gt;我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当从github上面clone项目时，还老是提示输入密码，如下图：&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Enter passphrase for key ‘/c/Users/maps/.ssh/id_rsa’:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/getIp.jpg&quot; alt=&quot;Alt text&quot; title=&quot;git push&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照先后顺序执行以下两条命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;$ ssh-agent bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh-add /c/Users/maps/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：这两条命令必须按照先后顺序执行；第二条命令中后半部分就是你的私钥文件id_rsa的绝对路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;通过以上两个命令就可以解决上面的问题，然后我们输入ssh -T 命令测试连接git服务,提示测试成功&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitTestconnsucc.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;最后来一个完整的图片&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitpushinputpasssucc.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我的操作系统是window环境，首先在电脑上面已经在.ssh/目录下面生成了对应的key文件，并且将id_rsa.pub文件中的公钥添加到我github账户上面的sshkey模块中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当从github上面clone项目时，还老是提示输入密码，如下图：
    
    </summary>
    
      <category term="github" scheme="http://www.soujava.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.soujava.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>通过gitBook让网站更实用</title>
    <link href="http://www.soujava.com/2016-06-28-%E9%80%9A%E8%BF%87gitBook%E8%AE%A9%E7%BD%91%E7%AB%99%E6%9B%B4%E5%AE%9E%E7%94%A8/"/>
    <id>http://www.soujava.com/2016-06-28-通过gitBook让网站更实用/</id>
    <published>2016-06-28T09:48:54.000Z</published>
    <updated>2016-06-29T03:25:33.126Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);&lt;blockquote&gt;
&lt;p&gt;csdn上面的博客查看方式&lt;br&gt;&lt;img src=&quot;http://soujava.com/images/mycsdnblog.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt; &lt;/p&gt;&lt;p&gt;采用gitBook构建的博客&lt;br&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/mygitbook.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt; &lt;/p&gt;&lt;p&gt;比如上面两个博客图片比对可以感受一下(csdn上面博客和采用gitBook构建的博客)&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;gitBook是什么&lt;br&gt; &lt;p&gt;GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。&lt;br&gt; GitBook支持输出多种文档格式：&lt;br&gt; ·静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；&lt;br&gt; ·PDF：需要安装gitbook-pdf依赖；&lt;br&gt; ·eBook：需要安装ebook-convert；&lt;br&gt; ·单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；&lt;br&gt; ·JSON：一般用于电子书的调试或元数据提取。&lt;br&gt; 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md&lt;br&gt; &lt;/p&gt;&lt;p&gt;官网:&lt;a href=&quot;https://www.gitbook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.gitbook.com&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何使用gitBook书写文章，需要安装node.js、gitBook、markdown，下面介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)、下载、安装node.js;官网：&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/nodejsdownload.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;下载完成后，直接双击、下一步下一步的进行傻瓜式安装即可！&lt;/p&gt;
&lt;p&gt;2)、通过window命令安装gitbook服务；&lt;br&gt;&lt;code&gt;npm install gitbook -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/1.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;3)、通过window命令安装gitbook命令服务（gitbook-cli）；&lt;br&gt;&lt;code&gt;npm install gitbook-cli -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4)、下载安装markdown；&lt;br&gt;下载地址：&lt;a href=&quot;http://markdownpad.com/download.html；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://markdownpad.com/download.html；&lt;/a&gt;&lt;br&gt;下载完成后直接下一步下一步安装，安装成功后桌面出现快捷启动图标&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/markdown.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;5)、使用gitbook开始制作电子书式的博客系统；首先在你的硬盘上面新建你个存放你博客的目录，比如BLOG;然后通过window环境下面的cmd命令窗口切换到该目录下面，通过gitbook init命令初始化gitbook服务的目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/3.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;6)、首先介绍一下gitbook init命令的作用，首先读取SUMMARY.md文件中的目录定义结构，然后会按照该目录结构在对应博客文件夹下面生成对应的文件目录结构,&lt;br&gt;SUMMARY.md文件内容如图&lt;br&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitinit.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;运行gitbook init命令后生成的目录结构如图&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitinitfile.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;7)、然后通过gitbook build命令将目录结构中的.md文件(markdown语法格式的文件)转换生成.html文件(静态网页文件)，可以用浏览器浏览查看;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/gitbuildbook.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;8)、截止到这一步我们通过gitbook构建电子书式的博客文章已经完成了，我们只需要把第7)步骤中通过gitbook build命令生成的_book文件夹下面的文件通过git提交到自己github账户下面的博客项目目录下面即可(如果之前自己账户下面的github博客没有用gitbook服务生成的目录构建博客目录的话，可以删除根目录下面旧的目录文件；如果之前已经用过gitbook服务生成的静态目录结构构建过博客目录，那么我们只需要通过git push覆盖旧文件即可)；&lt;br&gt;9)、上面没有讲到如何用markdown工具，其实在第6)步骤中通过gitbook init命令生成的以.md文件组成的目录结构就是markdown的文件，我们需要用markdown工具进行编辑操作，当然.md文件也可以用其他编辑器工具编写，只是个人感觉用markdown工具更方便一些，至于如何用markdown工具编写网页，需要你去先了解一下markdown的语法；这里就不过多介绍了，因为语法内容挺多的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;blockquote&gt;
&lt;p&gt;安装node.js、gitbook、markdown&lt;/p&gt;
&lt;p&gt;通过gitbook init命令初始化目录结构&lt;/p&gt;
&lt;p&gt;通过markdown工具编辑目录结构文章对应的.md文件&lt;/p&gt;
&lt;p&gt;通过gitbook build命令将.md文件转换生成.html静态网页文件(默认自动存放在_book文件夹下)&lt;/p&gt;
&lt;p&gt;通过git push命令将_book文件夹下面生成的.html静态文件推送到自己github账户下面的博客系统项目工程目录下面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;前两篇文章中介绍了使用github Pages功能生成静态博客系统，并且也选择了系统提供的几个博客模板，但是提供的博客模板固然不错，但是总觉得如果有目录导航整个文章目录更便于阅读，就如书本似的(左侧目录+右侧内容文章);&lt;blockquote&gt;
&lt;p&gt;csdn上
    
    </summary>
    
      <category term="github" scheme="http://www.soujava.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.soujava.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>为github pages绑定独立域名</title>
    <link href="http://www.soujava.com/2016-06-28-%E4%B8%BAgithub-pages%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D/"/>
    <id>http://www.soujava.com/2016-06-28-为github-pages绑定独立域名/</id>
    <published>2016-06-28T09:47:28.000Z</published>
    <updated>2016-06-29T03:41:16.729Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;1、假设你已经有了一个独立域名了，至于那些还没有独立域名的童鞋还是先申请注册一个自己的独立域名吧，申请注册一个非常简单，我就不多啰嗦了！我的独立域名是&lt;a href=&quot;http://www.soujava.com&quot;&gt;soujava&lt;/a&gt;；个人感觉这个域名还算可以吧！个人是搞java开发的！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;2、不管你的域名是在哪里注册的，其实原理通用的，因为我的域名是在新网上面注册的，那么我就以新网为例进行讲解！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登陆域名注册服务商提供的域名管理系统进行域名管理-其他网站的界面可能不太一样，但是原理一样就是配置DNS解析你的域名&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/yumingmanage.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/ippeizhi.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;下面讲解此步骤配置的ip如何获取&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;3、通过ping命令ping一下你在github上通过gitHub Pages服务生成的博客访问地址&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/getIp.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;4、将你的域名与ip在DNS上面映射配置完成后，需要等待一段时间，具体多长时间我也不太清楚，当时我是晚上配置的，第二天早上一起床就可以用配置的独立域名访问了！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;有些域名服务提供商的DNS解析时间可能不一样，大家可以耐心等候一下！&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果想让你的博客显得更专业更高逼格，那么申请注册一个你自己的独立一级域名是必须的了，那么下面我接着上一篇博客继续讲一下如何把你的博客跟你的独立域名绑定起来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;p&gt;1、假设你已经有了一个独立
    
    </summary>
    
      <category term="github" scheme="http://www.soujava.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.soujava.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>通过github pages生成网站</title>
    <link href="http://www.soujava.com/2016-06-28-%E9%80%9A%E8%BF%87github-pages%E7%94%9F%E6%88%90%E7%BD%91%E7%AB%99/"/>
    <id>http://www.soujava.com/2016-06-28-通过github-pages生成网站/</id>
    <published>2016-06-28T09:43:00.000Z</published>
    <updated>2016-06-29T03:29:02.316Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;1 什么是github pages&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。&lt;br&gt;github Pages可以被认为是用户编写的、托管在github上的静态网页。所以说你有以下屌丝要求的话可以考虑使用github Pages提供的服务：免费、稳定、完全自由可控，独立域名访问等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2 新建仓库&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/newRepository.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3 输入仓库信息&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/inputInfo.jpg&quot; alt=&quot;Alt text&quot; title=&quot;输入仓库信息&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;4 添加成功后，点击“settings”按钮&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/createSucc.jpg&quot; alt=&quot;Alt text&quot; title=&quot;仓库添加成功&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5 使用Github Pages生成页面&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/useGitPages.jpg&quot; alt=&quot;Alt text&quot; title=&quot;使用gitHub pages生服务&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;6 点击选择博客布局按钮进入选择布局界面&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/selectLayout.jpg&quot; alt=&quot;Alt text&quot; title=&quot;选择样式布局&quot;&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;7 切换布局选择操作,最后点击“publish page”按钮&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/succblog.jpg&quot; alt=&quot;Alt text&quot; title=&quot;切换布局选择操作&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;8 发布完成后的界面如下，但是此时我们还不可以使用红框中的二级域名单独访问&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/publishSuccess.jpg&quot; alt=&quot;Alt text&quot; title=&quot;发布成功&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;9 然后回到第5步(或者点击settings页签)，每当你点击“Launch automatic page generator”按钮后，可以看到如下所示&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/fagnwen.jpg&quot; alt=&quot;Alt text&quot; title=&quot;点击访问url地址访问博客&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;点击上图中红框中的访问url地址访问博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;10 如果我们还没有自己的独立域名，也暂时使用第8步中红框中的二级域名单独访问，而不用访问第9步中那一串长长的且不好记的url地址&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)、在项目工程跟目录中添加一个名称为CNAME(无后缀名)的文件,在线或者通过git命令都行&lt;br&gt;&lt;img src=&quot;http://soujava.com/images/tianjiagitfile.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;2)、将新建项目时输入的二级域名格式的仓库地址添加到文件内容中，文件名称必须为CNAME&lt;br&gt;&lt;img src=&quot;http://soujava.com/images/gitaddFile.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://soujava.com/images/cname.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1 什么是github pages&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。&lt;br&gt;github Pages可以被认为是
    
    </summary>
    
    
  </entry>
  
</feed>
